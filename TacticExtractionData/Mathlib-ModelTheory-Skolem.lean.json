[{"tailPos":1913,"headPos":1834,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) = (#(n : ℕ) × BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => lift (#Functions L i)) + sum fun i => lift (#BoundedFormula L Empty (i + 1))) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"simp only [card_functions_sum, skolem₁_Functions, mk_sigma, sum_add_distrib']"},{"tailPos":1943,"headPos":1928,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n| (sum fun i => lift (#Functions L i)) + sum fun i => lift (#BoundedFormula L Empty (i + 1))"],"goalsAfter":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| lift (#BoundedFormula L Empty (i + 1))"],"content":"enter [2, 1, i]"},{"tailPos":1944,"headPos":1943,"goalsBefore":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| lift (#BoundedFormula L Empty (i + 1))"],"goalsAfter":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| lift (#BoundedFormula L Empty (i + 1))"],"content":";"},{"tailPos":1964,"headPos":1949,"goalsBefore":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| lift (#BoundedFormula L Empty (i + 1))"],"goalsAfter":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| #BoundedFormula L Empty (i + 1)"],"content":"lift_id'.{u, v}"},{"tailPos":1965,"headPos":1945,"goalsBefore":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| lift (#BoundedFormula L Empty (i + 1))"],"goalsAfter":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| #BoundedFormula L Empty (i + 1)"],"content":"rw [lift_id'.{u, v}]"},{"tailPos":1965,"headPos":1928,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n| (sum fun i => lift (#Functions L i)) + sum fun i => lift (#BoundedFormula L Empty (i + 1))"],"goalsAfter":["case h\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ni : ℕ\n| #BoundedFormula L Empty (i + 1)"],"content":"enter [2, 1, i]; rw [lift_id'.{u, v}]"},{"tailPos":1965,"headPos":1916,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => lift (#Functions L i)) + sum fun i => lift (#BoundedFormula L Empty (i + 1))) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => lift (#Functions L i)) + sum fun i => #BoundedFormula L Empty (i + 1)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"conv_lhs => enter [2, 1, i]; rw [lift_id'.{u, v}]"},{"tailPos":1981,"headPos":1972,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => lift (#Functions L i)) + sum fun i => #BoundedFormula L Empty (i + 1)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => #BoundedFormula L Empty (i + 1)) + sum fun i => lift (#Functions L i)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"add_comm,"},{"tailPos":1993,"headPos":1982,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => #BoundedFormula L Empty (i + 1)) + sum fun i => lift (#Functions L i)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ max (sum fun i => #BoundedFormula L Empty (i + 1)) (sum fun i => lift (#Functions L i)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"add_eq_max,"},{"tailPos":2005,"headPos":1994,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ max (sum fun i => #BoundedFormula L Empty (i + 1)) (sum fun i => lift (#Functions L i)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => #BoundedFormula L Empty (i + 1)) = sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"max_eq_left"},{"tailPos":2006,"headPos":2005,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => #BoundedFormula L Empty (i + 1)) = sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"]"},{"tailPos":2006,"headPos":1968,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ((sum fun i => lift (#Functions L i)) + sum fun i => #BoundedFormula L Empty (i + 1)) =\n    sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"rw [add_comm, add_eq_max, max_eq_left]"},{"tailPos":2011,"headPos":2009,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"·"},{"tailPos":2045,"headPos":2012,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (#Functions L n) ≤ (#BoundedFormula L Empty (n + 1))"],"content":"refine' sum_le_sum _ _ fun n => _"},{"tailPos":2079,"headPos":2054,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (#Functions L n) ≤ (#BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (lift (#Functions L n)) ≤ lift (#BoundedFormula L Empty (n + 1))"],"content":"← lift_le.{_, max u v},"},{"tailPos":2090,"headPos":2080,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (lift (#Functions L n)) ≤ lift (#BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (#Functions L n) ≤ lift (#BoundedFormula L Empty (n + 1))"],"content":"lift_lift,"},{"tailPos":2111,"headPos":2091,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (#Functions L n) ≤ lift (#BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ Nonempty (Functions L n ↪ BoundedFormula L Empty (n + 1))"],"content":"lift_mk_le.{_, _, v}"},{"tailPos":2112,"headPos":2111,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ Nonempty (Functions L n ↪ BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ Nonempty (Functions L n ↪ BoundedFormula L Empty (n + 1))"],"content":"]"},{"tailPos":2112,"headPos":2050,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ lift (#Functions L n) ≤ (#BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ Nonempty (Functions L n ↪ BoundedFormula L Empty (n + 1))"],"content":"rw [← lift_le.{_, max u v}, lift_lift, lift_mk_le.{_, _, v}]"},{"tailPos":2203,"headPos":2117,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\n⊢ Nonempty (Functions L n ↪ BoundedFormula L Empty (n + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\nf g : Functions L n\nh : (fun f => func f default =' func f default) f = (fun f => func f default =' func f default) g\n⊢ f = g"],"content":"refine' ⟨⟨fun f => (func f default).bdEqual (func f default), fun f g h => _⟩⟩"},{"tailPos":2242,"headPos":2208,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\nf g : Functions L n\nh : (fun f => func f default =' func f default) f = (fun f => func f default =' func f default) g\n⊢ f = g"],"goalsAfter":["case refl\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\nf : Functions L n\n⊢ f = f"],"content":"rcases h with ⟨rfl, ⟨rfl⟩⟩"},{"tailPos":2250,"headPos":2247,"goalsBefore":["case refl\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nn : ℕ\nf : Functions L n\n⊢ f = f"],"goalsAfter":[],"content":"rfl"},{"tailPos":2250,"headPos":2012,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":[],"content":"refine' sum_le_sum _ _ fun n => _\n    rw [← lift_le.{_, max u v}, lift_lift, lift_mk_le.{_, _, v}]\n    refine' ⟨⟨fun f => (func f default).bdEqual (func f default), fun f g h => _⟩⟩\n    rcases h with ⟨rfl, ⟨rfl⟩⟩\n    rfl"},{"tailPos":2250,"headPos":2009,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (sum fun i => lift (#Functions L i)) ≤ sum fun i => #BoundedFormula L Empty (i + 1)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"· refine' sum_le_sum _ _ fun n => _\n    rw [← lift_le.{_, max u v}, lift_lift, lift_mk_le.{_, _, v}]\n    refine' ⟨⟨fun f => (func f default).bdEqual (func f default), fun f g h => _⟩⟩\n    rcases h with ⟨rfl, ⟨rfl⟩⟩\n    rfl"},{"tailPos":2255,"headPos":2253,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"content":"·"},{"tailPos":2272,"headPos":2260,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ (#(i : ℕ) × BoundedFormula L Empty (i + 1))"],"content":"← mk_sigma"},{"tailPos":2273,"headPos":2272,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ (#(i : ℕ) × BoundedFormula L Empty (i + 1))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ (#(i : ℕ) × BoundedFormula L Empty (i + 1))"],"content":"]"},{"tailPos":2273,"headPos":2256,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ (#(i : ℕ) × BoundedFormula L Empty (i + 1))"],"content":"rw [← mk_sigma]"},{"tailPos":2392,"headPos":2278,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ (#(i : ℕ) × BoundedFormula L Empty (i + 1))"],"goalsAfter":[],"content":"exact infinite_iff.1 (Infinite.of_injective (fun n => ⟨n, ⊥⟩) fun x y xy =>\n      (Sigma.mk.inj_iff.1 xy).1)"},{"tailPos":2392,"headPos":2256,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":[],"content":"rw [← mk_sigma]\n    exact infinite_iff.1 (Infinite.of_injective (fun n => ⟨n, ⊥⟩) fun x y xy =>\n      (Sigma.mk.inj_iff.1 xy).1)"},{"tailPos":2392,"headPos":2253,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ ℵ₀ ≤ sum fun i => #BoundedFormula L Empty (i + 1)"],"goalsAfter":[],"content":"· rw [← mk_sigma]\n    exact infinite_iff.1 (Infinite.of_injective (fun n => ⟨n, ⊥⟩) fun x y xy =>\n      (Sigma.mk.inj_iff.1 xy).1)"},{"tailPos":2392,"headPos":1834,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) = (#(n : ℕ) × BoundedFormula L Empty (n + 1))"],"goalsAfter":[],"content":"simp only [card_functions_sum, skolem₁_Functions, mk_sigma, sum_add_distrib']\n  conv_lhs => enter [2, 1, i]; rw [lift_id'.{u, v}]\n  rw [add_comm, add_eq_max, max_eq_left]\n  · refine' sum_le_sum _ _ fun n => _\n    rw [← lift_le.{_, max u v}, lift_lift, lift_mk_le.{_, _, v}]\n    refine' ⟨⟨fun f => (func f default).bdEqual (func f default), fun f g h => _⟩⟩\n    rcases h with ⟨rfl, ⟨rfl⟩⟩\n    rfl\n  · rw [← mk_sigma]\n    exact infinite_iff.1 (Infinite.of_injective (fun n => ⟨n, ⊥⟩) fun x y xy =>\n      (Sigma.mk.inj_iff.1 xy).1)"},{"tailPos":1831,"headPos":1829,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) = (#(n : ℕ) × BoundedFormula L Empty (n + 1))"],"goalsAfter":[],"content":"by"},{"tailPos":2392,"headPos":1829,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) = (#(n : ℕ) × BoundedFormula L Empty (n + 1))"],"goalsAfter":[],"content":"by\n  simp only [card_functions_sum, skolem₁_Functions, mk_sigma, sum_add_distrib']\n  conv_lhs => enter [2, 1, i]; rw [lift_id'.{u, v}]\n  rw [add_comm, add_eq_max, max_eq_left]\n  · refine' sum_le_sum _ _ fun n => _\n    rw [← lift_le.{_, max u v}, lift_lift, lift_mk_le.{_, _, v}]\n    refine' ⟨⟨fun f => (func f default).bdEqual (func f default), fun f g h => _⟩⟩\n    rcases h with ⟨rfl, ⟨rfl⟩⟩\n    rfl\n  · rw [← mk_sigma]\n    exact infinite_iff.1 (Infinite.of_injective (fun n => ⟨n, ⊥⟩) fun x y xy =>\n      (Sigma.mk.inj_iff.1 xy).1)"},{"tailPos":2644,"headPos":2616,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ max ℵ₀ (card L)"],"content":"card_functions_sum_skolem₁"},{"tailPos":2645,"headPos":2644,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ max ℵ₀ (card L)"],"content":"]"},{"tailPos":2645,"headPos":2612,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ max ℵ₀ (card L)"],"content":"rw [card_functions_sum_skolem₁]"},{"tailPos":2685,"headPos":2648,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ (#(n : ℕ) × BoundedFormula L Empty n)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"content":"trans #Σ n, L.BoundedFormula Empty n"},{"tailPos":2690,"headPos":2688,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ (#(n : ℕ) × BoundedFormula L Empty n)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ (#(n : ℕ) × BoundedFormula L Empty n)"],"content":"·"},{"tailPos":2816,"headPos":2691,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ (#(n : ℕ) × BoundedFormula L Empty n)"],"goalsAfter":[],"content":"exact\n      ⟨⟨Sigma.map Nat.succ fun _ => id,\n          Nat.succ_injective.sigma_map fun _ => Function.injective_id⟩⟩"},{"tailPos":2816,"headPos":2688,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty (n + 1)) ≤ (#(n : ℕ) × BoundedFormula L Empty n)","L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"content":"· exact\n      ⟨⟨Sigma.map Nat.succ fun _ => id,\n          Nat.succ_injective.sigma_map fun _ => Function.injective_id⟩⟩"},{"tailPos":2821,"headPos":2819,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"content":"·"},{"tailPos":2892,"headPos":2822,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ lift (max ℵ₀ (lift (#Empty) + lift (card L))) ≤ lift (max ℵ₀ (card L))"],"content":"refine' _root_.trans BoundedFormula.card_le (lift_le.{_, max u v}.1 _)"},{"tailPos":2950,"headPos":2897,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ lift (max ℵ₀ (lift (#Empty) + lift (card L))) ≤ lift (max ℵ₀ (card L))"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ lift (max ℵ₀ (card L)) ≤ lift (max ℵ₀ (card L))"],"content":"simp only [mk_empty, lift_zero, lift_uzero, zero_add]"},{"tailPos":2958,"headPos":2955,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ lift (max ℵ₀ (card L)) ≤ lift (max ℵ₀ (card L))"],"goalsAfter":[],"content":"rfl"},{"tailPos":2958,"headPos":2822,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"goalsAfter":[],"content":"refine' _root_.trans BoundedFormula.card_le (lift_le.{_, max u v}.1 _)\n    simp only [mk_empty, lift_zero, lift_uzero, zero_add]\n    rfl"},{"tailPos":2958,"headPos":2819,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × BoundedFormula L Empty n) ≤ max ℵ₀ (card L)"],"goalsAfter":[],"content":"· refine' _root_.trans BoundedFormula.card_le (lift_le.{_, max u v}.1 _)\n    simp only [mk_empty, lift_zero, lift_uzero, zero_add]\n    rfl"},{"tailPos":2958,"headPos":2612,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) ≤ max ℵ₀ (card L)"],"goalsAfter":[],"content":"rw [card_functions_sum_skolem₁]\n  trans #Σ n, L.BoundedFormula Empty n\n  · exact\n      ⟨⟨Sigma.map Nat.succ fun _ => id,\n          Nat.succ_injective.sigma_map fun _ => Function.injective_id⟩⟩\n  · refine' _root_.trans BoundedFormula.card_le (lift_le.{_, max u v}.1 _)\n    simp only [mk_empty, lift_zero, lift_uzero, zero_add]\n    rfl"},{"tailPos":2609,"headPos":2607,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) ≤ max ℵ₀ (card L)"],"goalsAfter":[],"content":"by"},{"tailPos":2958,"headPos":2607,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ (#(n : ℕ) × Functions (Language.sum L (skolem₁ L)) n) ≤ max ℵ₀ (card L)"],"goalsAfter":[],"content":"by\n  rw [card_functions_sum_skolem₁]\n  trans #Σ n, L.BoundedFormula Empty n\n  · exact\n      ⟨⟨Sigma.map Nat.succ fun _ => id,\n          Nat.succ_injective.sigma_map fun _ => Function.injective_id⟩⟩\n  · refine' _root_.trans BoundedFormula.card_le (lift_le.{_, max u v}.1 _)\n    simp only [mk_empty, lift_zero, lift_uzero, zero_add]\n    rfl"},{"tailPos":3740,"headPos":3677,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\n⊢ IsElementary (↑(LHom.substructureReduct LHom.sumInl) S)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\n⊢ ∀ (n : ℕ) (φ : BoundedFormula L Empty (n + 1)) (x : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S })\n    (a : M),\n    BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a) →\n      ∃ b, BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) ↑b)"],"content":"apply (LHom.sumInl.substructureReduct S).isElementary_of_exists"},{"tailPos":3759,"headPos":3743,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\n⊢ ∀ (n : ℕ) (φ : BoundedFormula L Empty (n + 1)) (x : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S })\n    (a : M),\n    BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a) →\n      ∃ b, BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) ↑b)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\n⊢ ∃ b, BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) ↑b)"],"content":"intro n φ x a h"},{"tailPos":3832,"headPos":3762,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\n⊢ ∃ b, BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) ↑b)"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ ∃ b, BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) ↑b)"],"content":"let φ' : (L.sum L.skolem₁).Functions n := LHom.sumInr.onFunction φ"},{"tailPos":3961,"headPos":3939,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ ∀ (i : Fin n), (Subtype.val ∘ x) i ∈ ↑S"],"goalsAfter":[],"content":"exact fun i => (x i).2"},{"tailPos":3932,"headPos":3930,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ ∀ (i : Fin n), (Subtype.val ∘ x) i ∈ ↑S"],"goalsAfter":[],"content":"by"},{"tailPos":3961,"headPos":3930,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ ∀ (i : Fin n), (Subtype.val ∘ x) i ∈ ↑S"],"goalsAfter":[],"content":"by\n      exact fun i => (x i).2"},{"tailPos":4108,"headPos":3976,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ BoundedFormula.Realize φ default\n    (Fin.snoc (Subtype.val ∘ x)\n      ↑{ val := funMap φ' (Subtype.val ∘ x),\n          property := (_ : funMap (LHom.onFunction LHom.sumInr φ) (Subtype.val ∘ x) ∈ ↑S) })"],"goalsAfter":[],"content":"exact Classical.epsilon_spec (p := fun a => BoundedFormula.Realize φ default\n          (Fin.snoc (Subtype.val ∘ x) a)) ⟨a, h⟩"},{"tailPos":3975,"headPos":3973,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ BoundedFormula.Realize φ default\n    (Fin.snoc (Subtype.val ∘ x)\n      ↑{ val := funMap φ' (Subtype.val ∘ x),\n          property := (_ : funMap (LHom.onFunction LHom.sumInr φ) (Subtype.val ∘ x) ∈ ↑S) })"],"goalsAfter":[],"content":"by"},{"tailPos":4108,"headPos":3973,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ BoundedFormula.Realize φ default\n    (Fin.snoc (Subtype.val ∘ x)\n      ↑{ val := funMap φ' (Subtype.val ∘ x),\n          property := (_ : funMap (LHom.onFunction LHom.sumInr φ) (Subtype.val ∘ x) ∈ ↑S) })"],"goalsAfter":[],"content":"by exact Classical.epsilon_spec (p := fun a => BoundedFormula.Realize φ default\n          (Fin.snoc (Subtype.val ∘ x) a)) ⟨a, h⟩"},{"tailPos":4111,"headPos":3835,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\nn : ℕ\nφ : BoundedFormula L Empty (n + 1)\nx : Fin n → { x // x ∈ ↑(LHom.substructureReduct LHom.sumInl) S }\na : M\nh : BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) a)\nφ' : Functions (Language.sum L (skolem₁ L)) n := LHom.onFunction LHom.sumInr φ\n⊢ ∃ b, BoundedFormula.Realize φ default (Fin.snoc (Subtype.val ∘ x) ↑b)"],"goalsAfter":[],"content":"exact\n    ⟨⟨funMap φ' ((↑) ∘ x), S.fun_mem (LHom.sumInr.onFunction φ) ((↑) ∘ x) (by\n      exact fun i => (x i).2)⟩,\n      by exact Classical.epsilon_spec (p := fun a => BoundedFormula.Realize φ default\n          (Fin.snoc (Subtype.val ∘ x) a)) ⟨a, h⟩⟩"},{"tailPos":4111,"headPos":3677,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\n⊢ IsElementary (↑(LHom.substructureReduct LHom.sumInl) S)"],"goalsAfter":[],"content":"apply (LHom.sumInl.substructureReduct S).isElementary_of_exists\n  intro n φ x a h\n  let φ' : (L.sum L.skolem₁).Functions n := LHom.sumInr.onFunction φ\n  exact\n    ⟨⟨funMap φ' ((↑) ∘ x), S.fun_mem (LHom.sumInr.onFunction φ) ((↑) ∘ x) (by\n      exact fun i => (x i).2)⟩,\n      by exact Classical.epsilon_spec (p := fun a => BoundedFormula.Realize φ default\n          (Fin.snoc (Subtype.val ∘ x) a)) ⟨a, h⟩⟩"},{"tailPos":3674,"headPos":3672,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\n⊢ IsElementary (↑(LHom.substructureReduct LHom.sumInl) S)"],"goalsAfter":[],"content":"by"},{"tailPos":4111,"headPos":3672,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\nS : Substructure (Language.sum L (skolem₁ L)) M\n⊢ IsElementary (↑(LHom.substructureReduct LHom.sumInl) S)"],"goalsAfter":[],"content":"by\n  apply (LHom.sumInl.substructureReduct S).isElementary_of_exists\n  intro n φ x a h\n  let φ' : (L.sum L.skolem₁).Functions n := LHom.sumInr.onFunction φ\n  exact\n    ⟨⟨funMap φ' ((↑) ∘ x), S.fun_mem (LHom.sumInr.onFunction φ) ((↑) ∘ x) (by\n      exact fun i => (x i).2)⟩,\n      by exact Classical.epsilon_spec (p := fun a => BoundedFormula.Realize φ default\n          (Fin.snoc (Subtype.val ∘ x) a)) ⟨a, h⟩⟩"},{"tailPos":5177,"headPos":5144,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ elementarySkolem₁Reduct ⊥ }"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ ⊥ }"],"content":"coeSort_elementarySkolem₁Reduct"},{"tailPos":5178,"headPos":5177,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ ⊥ }"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ ⊥ }"],"content":"]"},{"tailPos":5178,"headPos":5140,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ elementarySkolem₁Reduct ⊥ }"],"goalsAfter":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ ⊥ }"],"content":"rw [coeSort_elementarySkolem₁Reduct]"},{"tailPos":5195,"headPos":5181,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ ⊥ }"],"goalsAfter":[],"content":"infer_instance"},{"tailPos":5195,"headPos":5140,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ elementarySkolem₁Reduct ⊥ }"],"goalsAfter":[],"content":"rw [coeSort_elementarySkolem₁Reduct]\n  infer_instance"},{"tailPos":5137,"headPos":5135,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ elementarySkolem₁Reduct ⊥ }"],"goalsAfter":[],"content":"by"},{"tailPos":5195,"headPos":5135,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\n⊢ Small { x // x ∈ elementarySkolem₁Reduct ⊥ }"],"goalsAfter":[],"content":"by\n  rw [coeSort_elementarySkolem₁Reduct]\n  infer_instance"},{"tailPos":6346,"headPos":6288,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"content":"obtain ⟨s', hs'⟩ := Cardinal.le_mk_iff_exists_set.1 h4"},{"tailPos":6378,"headPos":6353,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ lift κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"content":"← aleph0_le_lift.{_, w}"},{"tailPos":6379,"headPos":6378,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ lift κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ lift κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"content":"]"},{"tailPos":6385,"headPos":6349,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ lift κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"content":"rw [← aleph0_le_lift.{_, w}] at h1"},{"tailPos":6399,"headPos":6392,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ lift κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = (#↑s')"],"content":"← hs'"},{"tailPos":6400,"headPos":6399,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = (#↑s')"],"content":"]"},{"tailPos":6413,"headPos":6388,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ lift κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = (#↑s')"],"content":"rw [← hs'] at h1 h2 ⊢"},{"tailPos":6570,"headPos":6416,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"content":"refine'\n    ⟨elementarySkolem₁Reduct (closure (L.sum L.skolem₁) (s ∪ Equiv.ulift '' s')),\n      (s.subset_union_left _).trans subset_closure, _⟩"},{"tailPos":6626,"headPos":6573,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = lift (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"content":"have h := mk_image_eq_lift _ s' Equiv.ulift.injective"},{"tailPos":6651,"headPos":6633,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = lift (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = lift (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"content":"lift_umax.{w, w'},"},{"tailPos":6668,"headPos":6652,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = lift (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"content":"lift_id'.{w, w'}"},{"tailPos":6669,"headPos":6668,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"content":"]"},{"tailPos":6674,"headPos":6629,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = lift (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"content":"rw [lift_umax.{w, w'}, lift_id'.{w, w'}] at h"},{"tailPos":6715,"headPos":6681,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) = (#↑s')"],"content":"coeSort_elementarySkolem₁Reduct,"},{"tailPos":6722,"headPos":6716,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) = (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    lift (#↑(↑Equiv.ulift '' s'))"],"content":"← h,"},{"tailPos":6731,"headPos":6723,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    (#↑(↑Equiv.ulift '' s'))"],"content":"lift_inj"},{"tailPos":6732,"headPos":6731,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    (#↑(↑Equiv.ulift '' s'))"],"content":"]"},{"tailPos":6732,"headPos":6677,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift\n      (#{ x //\n          x ∈\n            elementarySkolem₁Reduct\n              (LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s')) }) =\n    (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    (#↑(↑Equiv.ulift '' s'))"],"content":"rw [coeSort_elementarySkolem₁Reduct, ← h, lift_inj]"},{"tailPos":6880,"headPos":6735,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#{ x // x ∈ LowerAdjoint.toFun (closure (Language.sum L (skolem₁ L))) (s ∪ ↑Equiv.ulift '' s') }) =\n    (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max ℵ₀ (lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i)) ≤\n    lift (#↑(↑Equiv.ulift '' s'))"],"content":"refine'\n    le_antisymm (lift_le.1 (lift_card_closure_le.trans _))\n      (mk_le_mk_of_subset ((Set.subset_union_right _ _).trans subset_closure))"},{"tailPos":6898,"headPos":6887,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max ℵ₀ (lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i)) ≤\n    lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s')) ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"content":"max_le_iff,"},{"tailPos":6914,"headPos":6899,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s')) ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s')) ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"content":"aleph0_le_lift,"},{"tailPos":6942,"headPos":6915,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s')) ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s')) ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"content":"← aleph0_le_lift.{_, w'},"},{"tailPos":6945,"headPos":6943,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s')) ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"content":"h,"},{"tailPos":6957,"headPos":6946,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤\n      lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    max (lift (#↑(s ∪ ↑Equiv.ulift '' s'))) (lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i)) ≤\n      lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"add_eq_max,"},{"tailPos":6969,"headPos":6958,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    max (lift (#↑(s ∪ ↑Equiv.ulift '' s'))) (lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i)) ≤\n      lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"max_le_iff,"},{"tailPos":6977,"headPos":6970,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    lift (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"lift_le"},{"tailPos":6978,"headPos":6977,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"]"},{"tailPos":6978,"headPos":6883,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max ℵ₀ (lift (#↑(s ∪ ↑Equiv.ulift '' s')) + lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i)) ≤\n    lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"rw [max_le_iff, aleph0_le_lift, ← aleph0_le_lift.{_, w'}, h, add_eq_max, max_le_iff, lift_le]"},{"tailPos":7077,"headPos":6981,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s') ∧\n    (#↑(s ∪ ↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s')) ∧\n      lift (#(i : ℕ) × Functions (Language.sum L (skolem₁ L)) i) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))","case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"refine' ⟨h1, (mk_union_le _ _).trans _, (lift_le.2 card_functions_sum_skolem₁_le).trans _⟩"},{"tailPos":7082,"headPos":7080,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))","case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))"],"content":"·"},{"tailPos":7099,"headPos":7087,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift ((#↑s) + (#↑(↑Equiv.ulift '' s'))) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← lift_le,"},{"tailPos":7109,"headPos":7100,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift ((#↑s) + (#↑(↑Equiv.ulift '' s'))) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑s) + lift (#↑(↑Equiv.ulift '' s')) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"lift_add,"},{"tailPos":7112,"headPos":7110,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑s) + lift (#↑(↑Equiv.ulift '' s')) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑s) + (#↑s') ≤ (#↑s')"],"content":"h,"},{"tailPos":7122,"headPos":7113,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑s) + (#↑s') ≤ (#↑s')"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s') + lift (#↑s) ≤ (#↑s')"],"content":"add_comm,"},{"tailPos":7136,"headPos":7123,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s') + lift (#↑s) ≤ (#↑s')"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (#↑s') (lift (#↑s)) ≤ (#↑s')"],"content":"add_eq_max h1"},{"tailPos":7137,"headPos":7136,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (#↑s') (lift (#↑s)) ≤ (#↑s')"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (#↑s') (lift (#↑s)) ≤ (#↑s')"],"content":"]"},{"tailPos":7137,"headPos":7083,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (#↑s') (lift (#↑s)) ≤ (#↑s')"],"content":"rw [← lift_le, lift_add, h, add_comm, add_eq_max h1]"},{"tailPos":7164,"headPos":7142,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (#↑s') (lift (#↑s)) ≤ (#↑s')"],"goalsAfter":[],"content":"exact max_le le_rfl h2"},{"tailPos":7164,"headPos":7083,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":[],"content":"rw [← lift_le, lift_add, h, add_comm, add_eq_max h1]\n    exact max_le le_rfl h2"},{"tailPos":7164,"headPos":7080,"goalsBefore":["case intro.refine'_1\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ (#↑s) + (#↑(↑Equiv.ulift '' s')) ≤ (#↑(↑Equiv.ulift '' s'))","case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"· rw [← lift_le, lift_add, h, add_comm, add_eq_max h1]\n    exact max_le le_rfl h2"},{"tailPos":7169,"headPos":7167,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"·"},{"tailPos":7183,"headPos":7174,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (lift ℵ₀) (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"lift_max,"},{"tailPos":7196,"headPos":7184,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max (lift ℵ₀) (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max ℵ₀ (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"lift_aleph0,"},{"tailPos":7208,"headPos":7197,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ max ℵ₀ (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"max_le_iff,"},{"tailPos":7224,"headPos":7209,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s')) ∧ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"aleph0_le_lift,"},{"tailPos":7234,"headPos":7225,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s')) ∧ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"content":"and_comm,"},{"tailPos":7255,"headPos":7235,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (lift (#↑(↑Equiv.ulift '' s'))) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"content":"← lift_le.{_, w'},"},{"tailPos":7272,"headPos":7262,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (lift (#↑(↑Equiv.ulift '' s'))) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (lift (#↑(↑Equiv.ulift '' s'))) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"content":"lift_lift,"},{"tailPos":7283,"headPos":7273,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (lift (#↑(↑Equiv.ulift '' s'))) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"content":"lift_lift,"},{"tailPos":7303,"headPos":7284,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← aleph0_le_lift,"},{"tailPos":7305,"headPos":7304,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑s')"],"content":"h"},{"tailPos":7306,"headPos":7305,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑s')"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑s')"],"content":"]"},{"tailPos":7306,"headPos":7170,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑s')"],"content":"rw [lift_max, lift_aleph0, max_le_iff, aleph0_le_lift, and_comm, ← lift_le.{_, w'},\n      lift_lift, lift_lift, ← aleph0_le_lift, h]"},{"tailPos":7330,"headPos":7311,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s')) ∧ ℵ₀ ≤ (#↑s')"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"refine' ⟨_, h1⟩"},{"tailPos":7360,"headPos":7339,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← lift_lift.{w', w}"},{"tailPos":7361,"headPos":7360,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"]"},{"tailPos":7361,"headPos":7335,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (card L) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"rw [← lift_lift.{w', w}]"},{"tailPos":7410,"headPos":7366,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift κ) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"refine' _root_.trans (lift_le.{_, w}.2 h3) _"},{"tailPos":7429,"headPos":7419,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift κ) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift κ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"lift_lift,"},{"tailPos":7457,"headPos":7430,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift κ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift κ) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← lift_lift.{w, max u v},"},{"tailPos":7466,"headPos":7458,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift κ) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑s') ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← hs',"},{"tailPos":7473,"headPos":7467,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑s') ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (#↑(↑Equiv.ulift '' s'))) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← h,"},{"tailPos":7483,"headPos":7474,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift (#↑(↑Equiv.ulift '' s'))) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑(↑Equiv.ulift '' s')) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"lift_lift"},{"tailPos":7484,"headPos":7483,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (#↑(↑Equiv.ulift '' s')) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":[],"content":"]"},{"tailPos":7484,"headPos":7415,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (lift κ) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":[],"content":"rw [lift_lift, ← lift_lift.{w, max u v}, ← hs', ← h, lift_lift]"},{"tailPos":7484,"headPos":7170,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":[],"content":"rw [lift_max, lift_aleph0, max_le_iff, aleph0_le_lift, and_comm, ← lift_le.{_, w'},\n      lift_lift, lift_lift, ← aleph0_le_lift, h]\n    refine' ⟨_, h1⟩\n    rw [← lift_lift.{w', w}]\n    refine' _root_.trans (lift_le.{_, w}.2 h3) _\n    rw [lift_lift, ← lift_lift.{w, max u v}, ← hs', ← h, lift_lift]"},{"tailPos":7484,"headPos":7167,"goalsBefore":["case intro.refine'_2\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ lift (max ℵ₀ (card L)) ≤ lift (#↑(↑Equiv.ulift '' s'))","case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"· rw [lift_max, lift_aleph0, max_le_iff, aleph0_le_lift, and_comm, ← lift_le.{_, w'},\n      lift_lift, lift_lift, ← aleph0_le_lift, h]\n    refine' ⟨_, h1⟩\n    rw [← lift_lift.{w', w}]\n    refine' _root_.trans (lift_le.{_, w}.2 h3) _\n    rw [lift_lift, ← lift_lift.{w, max u v}, ← hs', ← h, lift_lift]"},{"tailPos":7489,"headPos":7487,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"content":"·"},{"tailPos":7574,"headPos":7490,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"refine' _root_.trans _ (lift_le.2 (mk_le_mk_of_subset (Set.subset_union_right _ _)))"},{"tailPos":7598,"headPos":7583,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"content":"aleph0_le_lift,"},{"tailPos":7618,"headPos":7599,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"content":"← aleph0_le_lift,"},{"tailPos":7620,"headPos":7619,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s')"],"content":"h"},{"tailPos":7621,"headPos":7620,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s')"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s')"],"content":"]"},{"tailPos":7621,"headPos":7579,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(↑Equiv.ulift '' s'))"],"goalsAfter":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s')"],"content":"rw [aleph0_le_lift, ← aleph0_le_lift, h]"},{"tailPos":7634,"headPos":7626,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ (#↑s')"],"goalsAfter":[],"content":"exact h1"},{"tailPos":7634,"headPos":7490,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":[],"content":"refine' _root_.trans _ (lift_le.2 (mk_le_mk_of_subset (Set.subset_union_right _ _)))\n    rw [aleph0_le_lift, ← aleph0_le_lift, h]\n    exact h1"},{"tailPos":7634,"headPos":7487,"goalsBefore":["case intro\nL : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\ns' : Set (ULift M)\nh2 : lift (#↑s) ≤ (#↑s')\nh1 : ℵ₀ ≤ (#↑s')\nhs' : (#↑s') = lift κ\nh : lift (#↑(↑Equiv.ulift '' s')) = (#↑s')\n⊢ ℵ₀ ≤ lift (#↑(s ∪ ↑Equiv.ulift '' s'))"],"goalsAfter":[],"content":"· refine' _root_.trans _ (lift_le.2 (mk_le_mk_of_subset (Set.subset_union_right _ _)))\n    rw [aleph0_le_lift, ← aleph0_le_lift, h]\n    exact h1"},{"tailPos":7634,"headPos":6288,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":[],"content":"obtain ⟨s', hs'⟩ := Cardinal.le_mk_iff_exists_set.1 h4\n  rw [← aleph0_le_lift.{_, w}] at h1\n  rw [← hs'] at h1 h2 ⊢\n  refine'\n    ⟨elementarySkolem₁Reduct (closure (L.sum L.skolem₁) (s ∪ Equiv.ulift '' s')),\n      (s.subset_union_left _).trans subset_closure, _⟩\n  have h := mk_image_eq_lift _ s' Equiv.ulift.injective\n  rw [lift_umax.{w, w'}, lift_id'.{w, w'}] at h\n  rw [coeSort_elementarySkolem₁Reduct, ← h, lift_inj]\n  refine'\n    le_antisymm (lift_le.1 (lift_card_closure_le.trans _))\n      (mk_le_mk_of_subset ((Set.subset_union_right _ _).trans subset_closure))\n  rw [max_le_iff, aleph0_le_lift, ← aleph0_le_lift.{_, w'}, h, add_eq_max, max_le_iff, lift_le]\n  refine' ⟨h1, (mk_union_le _ _).trans _, (lift_le.2 card_functions_sum_skolem₁_le).trans _⟩\n  · rw [← lift_le, lift_add, h, add_comm, add_eq_max h1]\n    exact max_le le_rfl h2\n  · rw [lift_max, lift_aleph0, max_le_iff, aleph0_le_lift, and_comm, ← lift_le.{_, w'},\n      lift_lift, lift_lift, ← aleph0_le_lift, h]\n    refine' ⟨_, h1⟩\n    rw [← lift_lift.{w', w}]\n    refine' _root_.trans (lift_le.{_, w}.2 h3) _\n    rw [lift_lift, ← lift_lift.{w, max u v}, ← hs', ← h, lift_lift]\n  · refine' _root_.trans _ (lift_le.2 (mk_le_mk_of_subset (Set.subset_union_right _ _)))\n    rw [aleph0_le_lift, ← aleph0_le_lift, h]\n    exact h1"},{"tailPos":6285,"headPos":6283,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":[],"content":"by"},{"tailPos":7634,"headPos":6283,"goalsBefore":["L : Language\nM : Type w\ninst✝¹ : Nonempty M\ninst✝ : Structure L M\ns : Set M\nκ : Cardinal\nh1 : ℵ₀ ≤ κ\nh2 : lift (#↑s) ≤ lift κ\nh3 : lift (card L) ≤ lift κ\nh4 : lift κ ≤ lift (#M)\n⊢ ∃ S, s ⊆ ↑S ∧ lift (#{ x // x ∈ S }) = lift κ"],"goalsAfter":[],"content":"by\n  obtain ⟨s', hs'⟩ := Cardinal.le_mk_iff_exists_set.1 h4\n  rw [← aleph0_le_lift.{_, w}] at h1\n  rw [← hs'] at h1 h2 ⊢\n  refine'\n    ⟨elementarySkolem₁Reduct (closure (L.sum L.skolem₁) (s ∪ Equiv.ulift '' s')),\n      (s.subset_union_left _).trans subset_closure, _⟩\n  have h := mk_image_eq_lift _ s' Equiv.ulift.injective\n  rw [lift_umax.{w, w'}, lift_id'.{w, w'}] at h\n  rw [coeSort_elementarySkolem₁Reduct, ← h, lift_inj]\n  refine'\n    le_antisymm (lift_le.1 (lift_card_closure_le.trans _))\n      (mk_le_mk_of_subset ((Set.subset_union_right _ _).trans subset_closure))\n  rw [max_le_iff, aleph0_le_lift, ← aleph0_le_lift.{_, w'}, h, add_eq_max, max_le_iff, lift_le]\n  refine' ⟨h1, (mk_union_le _ _).trans _, (lift_le.2 card_functions_sum_skolem₁_le).trans _⟩\n  · rw [← lift_le, lift_add, h, add_comm, add_eq_max h1]\n    exact max_le le_rfl h2\n  · rw [lift_max, lift_aleph0, max_le_iff, aleph0_le_lift, and_comm, ← lift_le.{_, w'},\n      lift_lift, lift_lift, ← aleph0_le_lift, h]\n    refine' ⟨_, h1⟩\n    rw [← lift_lift.{w', w}]\n    refine' _root_.trans (lift_le.{_, w}.2 h3) _\n    rw [lift_lift, ← lift_lift.{w, max u v}, ← hs', ← h, lift_lift]\n  · refine' _root_.trans _ (lift_le.2 (mk_le_mk_of_subset (Set.subset_union_right _ _)))\n    rw [aleph0_le_lift, ← aleph0_le_lift, h]\n    exact h1"}]
[{"tailPos":1811,"headPos":1797,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ DecidableEq ι"],"goalsAfter":[],"content":"infer_instance"},{"tailPos":1811,"headPos":1783,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ DecidableEq ι"],"goalsAfter":[],"content":"classical\n    infer_instance"},{"tailPos":1778,"headPos":1776,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ DecidableEq ι"],"goalsAfter":[],"content":"by"},{"tailPos":1811,"headPos":1776,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ DecidableEq ι"],"goalsAfter":[],"content":"by\n    classical\n    infer_instance"},{"tailPos":1811,"headPos":1751,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"content":"have : DecidableEq ι := by\n    classical\n    infer_instance"},{"tailPos":1865,"headPos":1814,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)","case inr\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : card s ≤ Fintype.card α\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"content":"obtain hs | hs := le_total (Fintype.card α) s.card"},{"tailPos":1870,"headPos":1868,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)","case inr\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : card s ≤ Fintype.card α\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"content":"·"},{"tailPos":1897,"headPos":1875,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ 0"],"content":"tsub_eq_zero_of_le hs,"},{"tailPos":1906,"headPos":1898,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ 0"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 1"],"content":"pow_zero"},{"tailPos":1907,"headPos":1906,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 1"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 1"],"content":"]"},{"tailPos":1907,"headPos":1871,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 1"],"content":"rw [tsub_eq_zero_of_le hs, pow_zero]"},{"tailPos":2052,"headPos":1912,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 1"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card ({⊥}ᶜ) = 2 ^ Fintype.card α - 1"],"content":"refine' (card_le_of_subset <| biUnion_subset.2 fun i hi a ha ↦\n      mem_compl.2 <| not_mem_singleton.2 <| (hf _ hi).ne_bot ha).trans_eq _"},{"tailPos":2072,"headPos":2061,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card ({⊥}ᶜ) = 2 ^ Fintype.card α - 1"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ Fintype.card (Finset α) - card {⊥} = 2 ^ Fintype.card α - 1"],"content":"card_compl,"},{"tailPos":2093,"headPos":2073,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ Fintype.card (Finset α) - card {⊥} = 2 ^ Fintype.card α - 1"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ 2 ^ Fintype.card α - card {⊥} = 2 ^ Fintype.card α - 1"],"content":"Fintype.card_finset,"},{"tailPos":2108,"headPos":2094,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ 2 ^ Fintype.card α - card {⊥} = 2 ^ Fintype.card α - 1"],"goalsAfter":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ 2 ^ Fintype.card α - 1 = 2 ^ Fintype.card α - 1"],"content":"card_singleton"},{"tailPos":2109,"headPos":2108,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ 2 ^ Fintype.card α - 1 = 2 ^ Fintype.card α - 1"],"goalsAfter":[],"content":"]"},{"tailPos":2109,"headPos":2057,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card ({⊥}ᶜ) = 2 ^ Fintype.card α - 1"],"goalsAfter":[],"content":"rw [card_compl, Fintype.card_finset, card_singleton]"},{"tailPos":2109,"headPos":1871,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":[],"content":"rw [tsub_eq_zero_of_le hs, pow_zero]\n    refine' (card_le_of_subset <| biUnion_subset.2 fun i hi a ha ↦\n      mem_compl.2 <| not_mem_singleton.2 <| (hf _ hi).ne_bot ha).trans_eq _\n    rw [card_compl, Fintype.card_finset, card_singleton]"},{"tailPos":2109,"headPos":1868,"goalsBefore":["case inl\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : Fintype.card α ≤ card s\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)","case inr\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : card s ≤ Fintype.card α\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["case inr\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : card s ≤ Fintype.card α\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"content":"· rw [tsub_eq_zero_of_le hs, pow_zero]\n    refine' (card_le_of_subset <| biUnion_subset.2 fun i hi a ha ↦\n      mem_compl.2 <| not_mem_singleton.2 <| (hf _ hi).ne_bot ha).trans_eq _\n    rw [card_compl, Fintype.card_finset, card_singleton]"},{"tailPos":2182,"headPos":2112,"goalsBefore":["case inr\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\nthis : DecidableEq ι\nhs : card s ≤ Fintype.card α\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":["case inr.empty\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s ≤ Fintype.card α\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ ∅ → Set.Intersecting ↑(f i)\nhs : card ∅ ≤ Fintype.card α\n⊢ card (Finset.biUnion ∅ f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card ∅)","case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"induction' s using Finset.cons_induction with i s hi ih generalizing f"},{"tailPos":2187,"headPos":2185,"goalsBefore":["case inr.empty\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s ≤ Fintype.card α\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ ∅ → Set.Intersecting ↑(f i)\nhs : card ∅ ≤ Fintype.card α\n⊢ card (Finset.biUnion ∅ f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card ∅)","case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.empty\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s ≤ Fintype.card α\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ ∅ → Set.Intersecting ↑(f i)\nhs : card ∅ ≤ Fintype.card α\n⊢ card (Finset.biUnion ∅ f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card ∅)"],"content":"·"},{"tailPos":2192,"headPos":2188,"goalsBefore":["case inr.empty\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s ≤ Fintype.card α\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ ∅ → Set.Intersecting ↑(f i)\nhs : card ∅ ≤ Fintype.card α\n⊢ card (Finset.biUnion ∅ f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card ∅)"],"goalsAfter":[],"content":"simp only [biUnion_empty, card_empty, ge_iff_le, nonpos_iff_eq_zero, tsub_zero, le_refl, tsub_eq_zero_of_le]"},{"tailPos":2192,"headPos":2185,"goalsBefore":["case inr.empty\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s ≤ Fintype.card α\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ ∅ → Set.Intersecting ↑(f i)\nhs : card ∅ ≤ Fintype.card α\n⊢ card (Finset.biUnion ∅ f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card ∅)","case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"· simp"},{"tailPos":2318,"headPos":2195,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"set f' : ι → Finset (Finset α) :=\n    fun j ↦ if hj : j ∈ cons i s hi then (hf j hj).exists_card_eq.choose else ∅"},{"tailPos":2487,"headPos":2476,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\n⊢ ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)"],"content":"rintro j hj"},{"tailPos":2501,"headPos":2492,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ (f j ⊆\n      if hj : j ∈ cons i s hi then\n        Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n      else ∅) ∧\n    2 *\n          card\n            (if hj : j ∈ cons i s hi then\n              Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n            else ∅) =\n        2 ^ Fintype.card α ∧\n      Set.Intersecting\n        ↑(if hj : j ∈ cons i s hi then\n            Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n          else ∅)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ (f j ⊆\n      if hj : j ∈ cons i s hi then\n        Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n      else ∅) ∧\n    2 *\n          card\n            (if hj : j ∈ cons i s hi then\n              Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n            else ∅) =\n        2 ^ Fintype.card α ∧\n      Set.Intersecting\n        ↑(if hj : j ∈ cons i s hi then\n            Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n          else ∅)"],"content":"simp_rw ["},{"tailPos":2512,"headPos":2501,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ (f j ⊆\n      if hj : j ∈ cons i s hi then\n        Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n      else ∅) ∧\n    2 *\n          card\n            (if hj : j ∈ cons i s hi then\n              Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n            else ∅) =\n        2 ^ Fintype.card α ∧\n      Set.Intersecting\n        ↑(if hj : j ∈ cons i s hi then\n            Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n          else ∅)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t) ∧\n    2 * card (Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)) =\n        2 ^ Fintype.card α ∧\n      Set.Intersecting ↑(Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t))"],"content":"dif_pos hj,"},{"tailPos":2536,"headPos":2513,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t) ∧\n    2 * card (Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)) =\n        2 ^ Fintype.card α ∧\n      Set.Intersecting ↑(Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t))"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t) ∧\n    2 * card (Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)) =\n        Fintype.card (Finset α) ∧\n      Set.Intersecting ↑(Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t))"],"content":"← Fintype.card_finset"},{"tailPos":2537,"headPos":2492,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t) ∧\n    2 * card (Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)) =\n        Fintype.card (Finset α) ∧\n      Set.Intersecting ↑(Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t))"],"content":"simp_rw [dif_pos hj, ← Fintype.card_finset]"},{"tailPos":2594,"headPos":2542,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nj : ι\nhj : j ∈ cons i s hi\n⊢ f j ⊆ Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t) ∧\n    2 * card (Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)) =\n        Fintype.card (Finset α) ∧\n      Set.Intersecting ↑(Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t))"],"goalsAfter":[],"content":"exact Classical.choose_spec (hf j hj).exists_card_eq"},{"tailPos":2594,"headPos":2476,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\n⊢ ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)"],"goalsAfter":[],"content":"rintro j hj\n    simp_rw [dif_pos hj, ← Fintype.card_finset]\n    exact Classical.choose_spec (hf j hj).exists_card_eq"},{"tailPos":2471,"headPos":2469,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\n⊢ ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)"],"goalsAfter":[],"content":"by"},{"tailPos":2594,"headPos":2469,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\n⊢ ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)"],"goalsAfter":[],"content":"by\n    rintro j hj\n    simp_rw [dif_pos hj, ← Fintype.card_finset]\n    exact Classical.choose_spec (hf j hj).exists_card_eq"},{"tailPos":2594,"headPos":2321,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"have hf₁ : ∀ j, j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * (f' j).card =\n      2 ^ Fintype.card α ∧ (f' j : Set (Finset α)).Intersecting := by\n    rintro j hj\n    simp_rw [dif_pos hj, ← Fintype.card_finset]\n    exact Classical.choose_spec (hf j hj).exists_card_eq"},{"tailPos":2776,"headPos":2685,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\n⊢ ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = Fintype.card (Finset α)"],"content":"refine' fun j hj ↦ (hf₁ _ hj).2.2.isUpperSet' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)"},{"tailPos":2804,"headPos":2785,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = Fintype.card (Finset α)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = 2 ^ Fintype.card α"],"content":"Fintype.card_finset"},{"tailPos":2805,"headPos":2804,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = 2 ^ Fintype.card α"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = 2 ^ Fintype.card α"],"content":"]"},{"tailPos":2805,"headPos":2781,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = Fintype.card (Finset α)"],"goalsAfter":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = 2 ^ Fintype.card α"],"content":"rw [Fintype.card_finset]"},{"tailPos":2832,"headPos":2810,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nj : ι\nhj : j ∈ cons i s hi\n⊢ 2 * card (f' j) = 2 ^ Fintype.card α"],"goalsAfter":[],"content":"exact (hf₁ _ hj).2.1"},{"tailPos":2832,"headPos":2685,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\n⊢ ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)"],"goalsAfter":[],"content":"refine' fun j hj ↦ (hf₁ _ hj).2.2.isUpperSet' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)\n    rw [Fintype.card_finset]\n    exact (hf₁ _ hj).2.1"},{"tailPos":2680,"headPos":2678,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\n⊢ ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)"],"goalsAfter":[],"content":"by"},{"tailPos":2832,"headPos":2678,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\n⊢ ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)"],"goalsAfter":[],"content":"by\n    refine' fun j hj ↦ (hf₁ _ hj).2.2.isUpperSet' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)\n    rw [Fintype.card_finset]\n    exact (hf₁ _ hj).2.1"},{"tailPos":2832,"headPos":2597,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"have hf₂ : ∀ j, j ∈ cons i s hi → IsUpperSet (f' j : Set (Finset α)) := by\n    refine' fun j hj ↦ (hf₁ _ hj).2.2.isUpperSet' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)\n    rw [Fintype.card_finset]\n    exact (hf₁ _ hj).2.1"},{"tailPos":2914,"headPos":2835,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"refine' (card_le_of_subset <| biUnion_mono fun j hj ↦ (hf₁ _ hj).1).trans _"},{"tailPos":2943,"headPos":2927,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (insert i s) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"cons_eq_insert i"},{"tailPos":2944,"headPos":2943,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (insert i s) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (insert i s) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"]"},{"tailPos":2944,"headPos":2917,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (cons i s hi) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (insert i s) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"nth_rw 1 [cons_eq_insert i]"},{"tailPos":2965,"headPos":2951,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (insert i s) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i ∪ Finset.biUnion s fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"biUnion_insert"},{"tailPos":2966,"headPos":2965,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i ∪ Finset.biUnion s fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i ∪ Finset.biUnion s fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"]"},{"tailPos":2966,"headPos":2947,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (Finset.biUnion (insert i s) fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i ∪ Finset.biUnion s fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"rw [biUnion_insert]"},{"tailPos":3055,"headPos":2969,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i ∪ Finset.biUnion s fun j => f' j) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((f' i ∪ Finset.biUnion s fun j => f' j) \\ f' i) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"refine' (card_mono <| @le_sup_sdiff _ _ _ <| f' i).trans ((card_union_le _ _).trans _)"},{"tailPos":3079,"headPos":3062,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((f' i ∪ Finset.biUnion s fun j => f' j) \\ f' i) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) \\ f' i) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"union_sdiff_left,"},{"tailPos":3100,"headPos":3080,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) \\ f' i) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"sdiff_eq_inter_compl"},{"tailPos":3101,"headPos":3100,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"]"},{"tailPos":3101,"headPos":3058,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((f' i ∪ Finset.biUnion s fun j => f' j) \\ f' i) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"rw [union_sdiff_left, sdiff_eq_inter_compl]"},{"tailPos":3187,"headPos":3104,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ (Fintype.card α + 1) * (card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 ^ (Fintype.card α + 1) * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"refine' le_of_mul_le_mul_left _ (pow_pos (zero_lt_two' ℕ) <| Fintype.card α + 1)"},{"tailPos":3204,"headPos":3194,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ (Fintype.card α + 1) * (card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 ^ (Fintype.card α + 1) * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 * (card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"pow_succ',"},{"tailPos":3213,"headPos":3205,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 * (card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 * card (f' i) + 2 ^ Fintype.card α * 2 * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"mul_add,"},{"tailPos":3224,"headPos":3214,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 * card (f' i) + 2 ^ Fintype.card α * 2 * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 ^ Fintype.card α * 2 * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"mul_assoc,"},{"tailPos":3238,"headPos":3225,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 ^ Fintype.card α * 2 * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * 2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"mul_comm _ 2,"},{"tailPos":3248,"headPos":3239,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * 2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * (2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"mul_assoc"},{"tailPos":3249,"headPos":3248,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * (2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * (2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"]"},{"tailPos":3249,"headPos":3190,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ (Fintype.card α + 1) * (card (f' i) + card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 ^ (Fintype.card α + 1) * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * (2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"rw [pow_succ', mul_add, mul_assoc, mul_comm _ 2, mul_assoc]"},{"tailPos":3477,"headPos":3252,"goalsBefore":["case inr.cons\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 * card (f' i)) + 2 * (2 ^ Fintype.card α * card ((Finset.biUnion s fun j => f' j) ∩ f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)","case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)","case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"refine' (add_le_add\n      ((mul_le_mul_left <| pow_pos (zero_lt_two' ℕ) _).2\n      (hf₁ _ <| mem_cons_self _ _).2.2.card_le) <|\n      (mul_le_mul_left <| zero_lt_two' ℕ).2 <| IsUpperSet.card_inter_le_finset _ _).trans _"},{"tailPos":3482,"headPos":3480,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)","case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)","case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)"],"content":"·"},{"tailPos":3498,"headPos":3487,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)"],"goalsAfter":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet (⋃ (x : ι) (_ : x ∈ ↑s), ↑(f' x))"],"content":"coe_biUnion"},{"tailPos":3499,"headPos":3498,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet (⋃ (x : ι) (_ : x ∈ ↑s), ↑(f' x))"],"goalsAfter":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet (⋃ (x : ι) (_ : x ∈ ↑s), ↑(f' x))"],"content":"]"},{"tailPos":3499,"headPos":3483,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)"],"goalsAfter":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet (⋃ (x : ι) (_ : x ∈ ↑s), ↑(f' x))"],"content":"rw [coe_biUnion]"},{"tailPos":3571,"headPos":3504,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet (⋃ (x : ι) (_ : x ∈ ↑s), ↑(f' x))"],"goalsAfter":[],"content":"exact isUpperSet_iUnion₂ fun i hi ↦ hf₂ _ <| subset_cons _ hi"},{"tailPos":3571,"headPos":3483,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)"],"goalsAfter":[],"content":"rw [coe_biUnion]\n    exact isUpperSet_iUnion₂ fun i hi ↦ hf₂ _ <| subset_cons _ hi"},{"tailPos":3571,"headPos":3480,"goalsBefore":["case inr.cons.refine'_1\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsUpperSet ↑(Finset.biUnion s fun j => f' j)","case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)","case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)","case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"· rw [coe_biUnion]\n    exact isUpperSet_iUnion₂ fun i hi ↦ hf₂ _ <| subset_cons _ hi"},{"tailPos":3576,"headPos":3574,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)","case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)"],"content":"·"},{"tailPos":3590,"headPos":3581,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)"],"goalsAfter":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet (↑(f' i)ᶜ)"],"content":"coe_compl"},{"tailPos":3591,"headPos":3590,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet (↑(f' i)ᶜ)"],"goalsAfter":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet (↑(f' i)ᶜ)"],"content":"]"},{"tailPos":3591,"headPos":3577,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)"],"goalsAfter":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet (↑(f' i)ᶜ)"],"content":"rw [coe_compl]"},{"tailPos":3638,"headPos":3596,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet (↑(f' i)ᶜ)"],"goalsAfter":[],"content":"exact (hf₂ _ <| mem_cons_self _ _).compl"},{"tailPos":3638,"headPos":3577,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)"],"goalsAfter":[],"content":"rw [coe_compl]\n    exact (hf₂ _ <| mem_cons_self _ _).compl"},{"tailPos":3638,"headPos":3574,"goalsBefore":["case inr.cons.refine'_2\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ IsLowerSet ↑(f' iᶜ)","case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"· rw [coe_compl]\n    exact (hf₂ _ <| mem_cons_self _ _).compl"},{"tailPos":3654,"headPos":3645,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"mul_tsub,"},{"tailPos":3666,"headPos":3655,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) +\n      2 * (card (Finset.biUnion s fun j => f' j) * (Fintype.card (Finset α) - card (f' i))) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"card_compl,"},{"tailPos":3687,"headPos":3667,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) +\n      2 * (card (Finset.biUnion s fun j => f' j) * (Fintype.card (Finset α) - card (f' i))) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      2 * (card (Finset.biUnion s fun j => f' j) * (2 ^ Fintype.card α - card (f' i))) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"Fintype.card_finset,"},{"tailPos":3702,"headPos":3688,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      2 * (card (Finset.biUnion s fun j => f' j) * (2 ^ Fintype.card α - card (f' i))) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 * (2 ^ Fintype.card α - card (f' i))) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"mul_left_comm,"},{"tailPos":3712,"headPos":3703,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 * (2 ^ Fintype.card α - card (f' i))) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 * 2 ^ Fintype.card α - 2 * card (f' i)) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"mul_tsub,"},{"tailPos":3752,"headPos":3717,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 * 2 ^ Fintype.card α - 2 * card (f' i)) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 * 2 ^ Fintype.card α - 2 ^ Fintype.card α) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"(hf₁ _ <| mem_cons_self _ _).2.1,"},{"tailPos":3761,"headPos":3753,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 * 2 ^ Fintype.card α - 2 ^ Fintype.card α) ≤\n    2 * 2 ^ Fintype.card α * 2 ^ Fintype.card α - 2 * 2 ^ Fintype.card α * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ Fintype.card α) ≤\n    (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ Fintype.card α -\n      (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"two_mul,"},{"tailPos":3783,"headPos":3762,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α +\n      card (Finset.biUnion s fun j => f' j) * (2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ Fintype.card α) ≤\n    (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ Fintype.card α -\n      (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ Fintype.card α -\n      (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"add_tsub_cancel_left,"},{"tailPos":3797,"headPos":3784,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ Fintype.card α -\n      (2 ^ Fintype.card α + 2 ^ Fintype.card α) * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    (2 ^ Fintype.card α + 2 ^ Fintype.card α) * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"← mul_tsub,"},{"tailPos":3810,"headPos":3798,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    (2 ^ Fintype.card α + 2 ^ Fintype.card α) * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"← mul_two,"},{"tailPos":3825,"headPos":3815,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    2 ^ Fintype.card α * 2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"content":"mul_assoc,"},{"tailPos":3838,"headPos":3826,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) * 2 ^ Fintype.card α ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) * 2 ^ Fintype.card α ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"content":"← add_mul,"},{"tailPos":3847,"headPos":3839,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) * 2 ^ Fintype.card α ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"content":"mul_comm"},{"tailPos":3848,"headPos":3847,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"content":"]"},{"tailPos":3848,"headPos":3641,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * Fintype.card (Finset α) + 2 * (card (Finset.biUnion s fun j => f' j) * card (f' iᶜ)) ≤\n    2 * 2 ^ Fintype.card α * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"content":"rw [mul_tsub, card_compl, Fintype.card_finset, mul_left_comm, mul_tsub,\n    (hf₁ _ <| mem_cons_self _ _).2.1, two_mul, add_tsub_cancel_left, ← mul_tsub, ← mul_two,\n    mul_assoc, ← add_mul, mul_comm]"},{"tailPos":3879,"headPos":3851,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α * (2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j)) ≤\n    2 ^ Fintype.card α * (2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi))))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) ≤\n    2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"refine' mul_le_mul_left' _ _"},{"tailPos":4029,"headPos":3882,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + card (Finset.biUnion s fun j => f' j) ≤\n    2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"content":"refine' (add_le_add_left\n    (ih _ (fun i hi ↦ (hf₁ _ <| subset_cons _ hi).2.2)\n    ((card_le_of_subset <| subset_cons _).trans hs)) _).trans _"},{"tailPos":4045,"headPos":4036,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 * 2 ^ Fintype.card α - 2 * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"mul_tsub,"},{"tailPos":4054,"headPos":4046,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 * 2 ^ Fintype.card α - 2 * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 * 2 ^ (Fintype.card α - card (cons i s hi))"],"content":"two_mul,"},{"tailPos":4068,"headPos":4055,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 * 2 ^ (Fintype.card α - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi) + 1)"],"content":"← pow_succ,"},{"tailPos":4156,"headPos":4073,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi) + 1)"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi) + 1)"],"content":"← add_tsub_assoc_of_le (pow_le_pow' (one_le_two : (1 : ℕ) ≤ 2) tsub_le_self),"},{"tailPos":4185,"headPos":4161,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi) + 1)"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α + 1 - card (cons i s hi))"],"content":"tsub_add_eq_add_tsub hs,"},{"tailPos":4196,"headPos":4186,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α + 1 - card (cons i s hi))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α + 1 - (card s + 1))"],"content":"card_cons,"},{"tailPos":4223,"headPos":4197,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α + 1 - (card s + 1))"],"goalsAfter":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"content":"add_tsub_add_eq_tsub_right"},{"tailPos":4224,"headPos":4223,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s) ≤\n    2 ^ Fintype.card α + 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":[],"content":"]"},{"tailPos":4224,"headPos":4032,"goalsBefore":["case inr.cons.refine'_3\nι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns✝ : Finset ι\nf✝ : ι → Finset (Finset α)\nhf✝ : ∀ (i : ι), i ∈ s✝ → Set.Intersecting ↑(f✝ i)\nthis : DecidableEq ι\nhs✝ : card s✝ ≤ Fintype.card α\ni : ι\ns : Finset ι\nhi : ¬i ∈ s\nih :\n  ∀ (f : ι → Finset (Finset α)),\n    (∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)) →\n      card s ≤ Fintype.card α → card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)\nf : ι → Finset (Finset α)\nhf : ∀ (i_1 : ι), i_1 ∈ cons i s hi → Set.Intersecting ↑(f i_1)\nhs : card (cons i s hi) ≤ Fintype.card α\nf' : ι → Finset (Finset α) :=\n  fun j =>\n    if hj : j ∈ cons i s hi then\n      Exists.choose (_ : ∃ t, f j ⊆ t ∧ 2 * card t = Fintype.card (Finset α) ∧ Set.Intersecting ↑t)\n    else ∅\nhf₁ : ∀ (j : ι), j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * card (f' j) = 2 ^ Fintype.card α ∧ Set.Intersecting ↑(f' j)\nhf₂ : ∀ (j : ι), j ∈ cons i s hi → IsUpperSet ↑(f' j)\n⊢ 2 ^ Fintype.card α + (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)) ≤\n    2 * (2 ^ Fintype.card α - 2 ^ (Fintype.card α - card (cons i s hi)))"],"goalsAfter":[],"content":"rw [mul_tsub, two_mul, ← pow_succ,\n    ← add_tsub_assoc_of_le (pow_le_pow' (one_le_two : (1 : ℕ) ≤ 2) tsub_le_self),\n    tsub_add_eq_add_tsub hs, card_cons, add_tsub_add_eq_tsub_right]"},{"tailPos":4224,"headPos":1751,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":[],"content":"have : DecidableEq ι := by\n    classical\n    infer_instance\n  obtain hs | hs := le_total (Fintype.card α) s.card\n  · rw [tsub_eq_zero_of_le hs, pow_zero]\n    refine' (card_le_of_subset <| biUnion_subset.2 fun i hi a ha ↦\n      mem_compl.2 <| not_mem_singleton.2 <| (hf _ hi).ne_bot ha).trans_eq _\n    rw [card_compl, Fintype.card_finset, card_singleton]\n  induction' s using Finset.cons_induction with i s hi ih generalizing f\n  · simp\n  set f' : ι → Finset (Finset α) :=\n    fun j ↦ if hj : j ∈ cons i s hi then (hf j hj).exists_card_eq.choose else ∅\n  have hf₁ : ∀ j, j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * (f' j).card =\n      2 ^ Fintype.card α ∧ (f' j : Set (Finset α)).Intersecting := by\n    rintro j hj\n    simp_rw [dif_pos hj, ← Fintype.card_finset]\n    exact Classical.choose_spec (hf j hj).exists_card_eq\n  have hf₂ : ∀ j, j ∈ cons i s hi → IsUpperSet (f' j : Set (Finset α)) := by\n    refine' fun j hj ↦ (hf₁ _ hj).2.2.isUpperSet' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)\n    rw [Fintype.card_finset]\n    exact (hf₁ _ hj).2.1\n  refine' (card_le_of_subset <| biUnion_mono fun j hj ↦ (hf₁ _ hj).1).trans _\n  nth_rw 1 [cons_eq_insert i]\n  rw [biUnion_insert]\n  refine' (card_mono <| @le_sup_sdiff _ _ _ <| f' i).trans ((card_union_le _ _).trans _)\n  rw [union_sdiff_left, sdiff_eq_inter_compl]\n  refine' le_of_mul_le_mul_left _ (pow_pos (zero_lt_two' ℕ) <| Fintype.card α + 1)\n  rw [pow_succ', mul_add, mul_assoc, mul_comm _ 2, mul_assoc]\n  refine' (add_le_add\n      ((mul_le_mul_left <| pow_pos (zero_lt_two' ℕ) _).2\n      (hf₁ _ <| mem_cons_self _ _).2.2.card_le) <|\n      (mul_le_mul_left <| zero_lt_two' ℕ).2 <| IsUpperSet.card_inter_le_finset _ _).trans _\n  · rw [coe_biUnion]\n    exact isUpperSet_iUnion₂ fun i hi ↦ hf₂ _ <| subset_cons _ hi\n  · rw [coe_compl]\n    exact (hf₂ _ <| mem_cons_self _ _).compl\n  rw [mul_tsub, card_compl, Fintype.card_finset, mul_left_comm, mul_tsub,\n    (hf₁ _ <| mem_cons_self _ _).2.1, two_mul, add_tsub_cancel_left, ← mul_tsub, ← mul_two,\n    mul_assoc, ← add_mul, mul_comm]\n  refine' mul_le_mul_left' _ _\n  refine' (add_le_add_left\n    (ih _ (fun i hi ↦ (hf₁ _ <| subset_cons _ hi).2.2)\n    ((card_le_of_subset <| subset_cons _).trans hs)) _).trans _\n  rw [mul_tsub, two_mul, ← pow_succ,\n    ← add_tsub_assoc_of_le (pow_le_pow' (one_le_two : (1 : ℕ) ≤ 2) tsub_le_self),\n    tsub_add_eq_add_tsub hs, card_cons, add_tsub_add_eq_tsub_right]"},{"tailPos":1748,"headPos":1746,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":[],"content":"by"},{"tailPos":4224,"headPos":1746,"goalsBefore":["ι : Type u_1\nα : Type u_2\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\ninst✝ : Nonempty α\ns : Finset ι\nf : ι → Finset (Finset α)\nhf : ∀ (i : ι), i ∈ s → Set.Intersecting ↑(f i)\n⊢ card (Finset.biUnion s f) ≤ 2 ^ Fintype.card α - 2 ^ (Fintype.card α - card s)"],"goalsAfter":[],"content":"by\n  have : DecidableEq ι := by\n    classical\n    infer_instance\n  obtain hs | hs := le_total (Fintype.card α) s.card\n  · rw [tsub_eq_zero_of_le hs, pow_zero]\n    refine' (card_le_of_subset <| biUnion_subset.2 fun i hi a ha ↦\n      mem_compl.2 <| not_mem_singleton.2 <| (hf _ hi).ne_bot ha).trans_eq _\n    rw [card_compl, Fintype.card_finset, card_singleton]\n  induction' s using Finset.cons_induction with i s hi ih generalizing f\n  · simp\n  set f' : ι → Finset (Finset α) :=\n    fun j ↦ if hj : j ∈ cons i s hi then (hf j hj).exists_card_eq.choose else ∅\n  have hf₁ : ∀ j, j ∈ cons i s hi → f j ⊆ f' j ∧ 2 * (f' j).card =\n      2 ^ Fintype.card α ∧ (f' j : Set (Finset α)).Intersecting := by\n    rintro j hj\n    simp_rw [dif_pos hj, ← Fintype.card_finset]\n    exact Classical.choose_spec (hf j hj).exists_card_eq\n  have hf₂ : ∀ j, j ∈ cons i s hi → IsUpperSet (f' j : Set (Finset α)) := by\n    refine' fun j hj ↦ (hf₁ _ hj).2.2.isUpperSet' ((hf₁ _ hj).2.2.is_max_iff_card_eq.2 _)\n    rw [Fintype.card_finset]\n    exact (hf₁ _ hj).2.1\n  refine' (card_le_of_subset <| biUnion_mono fun j hj ↦ (hf₁ _ hj).1).trans _\n  nth_rw 1 [cons_eq_insert i]\n  rw [biUnion_insert]\n  refine' (card_mono <| @le_sup_sdiff _ _ _ <| f' i).trans ((card_union_le _ _).trans _)\n  rw [union_sdiff_left, sdiff_eq_inter_compl]\n  refine' le_of_mul_le_mul_left _ (pow_pos (zero_lt_two' ℕ) <| Fintype.card α + 1)\n  rw [pow_succ', mul_add, mul_assoc, mul_comm _ 2, mul_assoc]\n  refine' (add_le_add\n      ((mul_le_mul_left <| pow_pos (zero_lt_two' ℕ) _).2\n      (hf₁ _ <| mem_cons_self _ _).2.2.card_le) <|\n      (mul_le_mul_left <| zero_lt_two' ℕ).2 <| IsUpperSet.card_inter_le_finset _ _).trans _\n  · rw [coe_biUnion]\n    exact isUpperSet_iUnion₂ fun i hi ↦ hf₂ _ <| subset_cons _ hi\n  · rw [coe_compl]\n    exact (hf₂ _ <| mem_cons_self _ _).compl\n  rw [mul_tsub, card_compl, Fintype.card_finset, mul_left_comm, mul_tsub,\n    (hf₁ _ <| mem_cons_self _ _).2.1, two_mul, add_tsub_cancel_left, ← mul_tsub, ← mul_two,\n    mul_assoc, ← add_mul, mul_comm]\n  refine' mul_le_mul_left' _ _\n  refine' (add_le_add_left\n    (ih _ (fun i hi ↦ (hf₁ _ <| subset_cons _ hi).2.2)\n    ((card_le_of_subset <| subset_cons _).trans hs)) _).trans _\n  rw [mul_tsub, two_mul, ← pow_succ,\n    ← add_tsub_assoc_of_le (pow_le_pow' (one_le_two : (1 : ℕ) ≤ 2) tsub_le_self),\n    tsub_add_eq_add_tsub hs, card_cons, add_tsub_add_eq_tsub_right]"}]
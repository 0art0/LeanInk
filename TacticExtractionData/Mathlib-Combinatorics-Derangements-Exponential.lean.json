[{"tailPos":1316,"headPos":1231,"goalsBefore":["⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"content":"let s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial"},{"tailPos":1409,"headPos":1400,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"content":"simp_rw ["},{"tailPos":1413,"headPos":1409,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"content":"simp only [this]"},{"tailPos":1414,"headPos":1400,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"content":"simp_rw [this]"},{"tailPos":1638,"headPos":1535,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"content":"tendsto_add_atTop_iff_nat\n      (f := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial) 1"},{"tailPos":1639,"headPos":1638,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"content":"]"},{"tailPos":1639,"headPos":1531,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"content":"rw [tendsto_add_atTop_iff_nat\n      (f := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial) 1]"},{"tailPos":1672,"headPos":1644,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (Real.exp (-1))"],"content":"apply HasSum.tendsto_sum_nat"},{"tailPos":1836,"headPos":1817,"goalsBefore":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (Real.exp (-1))"],"goalsAfter":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (exp ℝ (-1))"],"content":"Real.exp_eq_exp_ℝ"},{"tailPos":1837,"headPos":1836,"goalsBefore":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (exp ℝ (-1))"],"goalsAfter":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (exp ℝ (-1))"],"content":"]"},{"tailPos":1837,"headPos":1813,"goalsBefore":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (Real.exp (-1))"],"goalsAfter":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (exp ℝ (-1))"],"content":"rw [Real.exp_eq_exp_ℝ]"},{"tailPos":1887,"headPos":1842,"goalsBefore":["case h\ns : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ HasSum (fun i => (-1) ^ i / ↑(Nat.factorial i)) (exp ℝ (-1))"],"goalsAfter":[],"content":"exact expSeries_div_hasSum_exp ℝ (-1 : ℝ)"},{"tailPos":1887,"headPos":1400,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nthis : ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":[],"content":"simp_rw [this]\n    -- shift the function by 1, and then use the fact that the partial sums\n    -- converge to the infinite sum\n    rw [tendsto_add_atTop_iff_nat\n      (f := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial) 1]\n    apply HasSum.tendsto_sum_nat\n    -- there's no specific lemma for ℝ that ∑ x^k/k! sums to exp(x), but it's\n    -- true in more general fields, so use that lemma\n    rw [Real.exp_eq_exp_ℝ]\n    exact expSeries_div_hasSum_exp ℝ (-1 : ℝ)"},{"tailPos":1887,"headPos":1319,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\n⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\n⊢ ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"content":"suffices ∀ n : ℕ, (numDerangements n : ℝ) / n.factorial = s (n + 1) by\n    simp_rw [this]\n    -- shift the function by 1, and then use the fact that the partial sums\n    -- converge to the infinite sum\n    rw [tendsto_add_atTop_iff_nat\n      (f := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial) 1]\n    apply HasSum.tendsto_sum_nat\n    -- there's no specific lemma for ℝ that ∑ x^k/k! sums to exp(x), but it's\n    -- true in more general fields, so use that lemma\n    rw [Real.exp_eq_exp_ℝ]\n    exact expSeries_div_hasSum_exp ℝ (-1 : ℝ)"},{"tailPos":1897,"headPos":1890,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\n⊢ ∀ (n : ℕ), ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"content":"intro n"},{"tailPos":1923,"headPos":1904,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"content":"← Int.cast_ofNat,"},{"tailPos":1943,"headPos":1924,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(∑ k in Finset.range (n + 1), (-1) ^ k * ↑(Nat.ascFactorial k (n - k))) / ↑(Nat.factorial n) = s (n + 1)"],"content":"numDerangements_sum"},{"tailPos":1944,"headPos":1943,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(∑ k in Finset.range (n + 1), (-1) ^ k * ↑(Nat.ascFactorial k (n - k))) / ↑(Nat.factorial n) = s (n + 1)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(∑ k in Finset.range (n + 1), (-1) ^ k * ↑(Nat.ascFactorial k (n - k))) / ↑(Nat.factorial n) = s (n + 1)"],"content":"]"},{"tailPos":1944,"headPos":1900,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(numDerangements n) / ↑(Nat.factorial n) = s (n + 1)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(∑ k in Finset.range (n + 1), (-1) ^ k * ↑(Nat.ascFactorial k (n - k))) / ↑(Nat.factorial n) = s (n + 1)"],"content":"rw [← Int.cast_ofNat, numDerangements_sum]"},{"tailPos":1956,"headPos":1947,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ↑(∑ k in Finset.range (n + 1), (-1) ^ k * ↑(Nat.ascFactorial k (n - k))) / ↑(Nat.factorial n) = s (n + 1)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ (∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x))) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"content":"push_cast"},{"tailPos":1977,"headPos":1963,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ (∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x))) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"content":"Finset.sum_div"},{"tailPos":1978,"headPos":1977,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"content":"]"},{"tailPos":1978,"headPos":1959,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ (∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x))) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"content":"rw [Finset.sum_div]"},{"tailPos":2050,"headPos":2015,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∑ x in Finset.range (n + 1), (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) =\n    ∑ k in Finset.range (n + 1), (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∀ (x : ℕ),\n    x ∈ Finset.range (n + 1) →\n      (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) = (-1) ^ x / ↑(Nat.factorial x)"],"content":"refine' Finset.sum_congr (refl _) _"},{"tailPos":2063,"headPos":2053,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn : ℕ\n⊢ ∀ (x : ℕ),\n    x ∈ Finset.range (n + 1) →\n      (-1) ^ x * ↑(Nat.ascFactorial x (n - x)) / ↑(Nat.factorial n) = (-1) ^ x / ↑(Nat.factorial x)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\n⊢ (-1) ^ k * ↑(Nat.ascFactorial k (n - k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"intro k hk"},{"tailPos":2120,"headPos":2066,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\n⊢ (-1) ^ k * ↑(Nat.ascFactorial k (n - k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.ascFactorial k (n - k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"have h_le : k ≤ n := Finset.mem_range_succ_iff.mp hk"},{"tailPos":2151,"headPos":2127,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.ascFactorial k (n - k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial (k + (n - k)) / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"Nat.ascFactorial_eq_div,"},{"tailPos":2178,"headPos":2152,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial (k + (n - k)) / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"add_tsub_cancel_of_le h_le"},{"tailPos":2179,"headPos":2178,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"]"},{"tailPos":2179,"headPos":2123,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.ascFactorial k (n - k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"rw [Nat.ascFactorial_eq_div, add_tsub_cancel_of_le h_le]"},{"tailPos":2226,"headPos":2182,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n / Nat.factorial k) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * (↑(Nat.factorial n) / ↑(Nat.factorial k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"content":"push_cast [Nat.factorial_dvd_factorial h_le]"},{"tailPos":2263,"headPos":2229,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * (↑(Nat.factorial n) / ↑(Nat.factorial k)) / ↑(Nat.factorial n) = (-1) ^ k / ↑(Nat.factorial k)"],"goalsAfter":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n) * ↑(Nat.factorial k) = (-1) ^ k * (↑(Nat.factorial k) * ↑(Nat.factorial n))"],"content":"field_simp [Nat.factorial_ne_zero]"},{"tailPos":2270,"headPos":2266,"goalsBefore":["s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1) ^ k / ↑(Nat.factorial k)\nn k : ℕ\nhk : k ∈ Finset.range (n + 1)\nh_le : k ≤ n\n⊢ (-1) ^ k * ↑(Nat.factorial n) * ↑(Nat.factorial k) = (-1) ^ k * (↑(Nat.factorial k) * ↑(Nat.factorial n))"],"goalsAfter":[],"content":"ring"},{"tailPos":2270,"headPos":1231,"goalsBefore":["⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":[],"content":"let s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial\n  suffices ∀ n : ℕ, (numDerangements n : ℝ) / n.factorial = s (n + 1) by\n    simp_rw [this]\n    -- shift the function by 1, and then use the fact that the partial sums\n    -- converge to the infinite sum\n    rw [tendsto_add_atTop_iff_nat\n      (f := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial) 1]\n    apply HasSum.tendsto_sum_nat\n    -- there's no specific lemma for ℝ that ∑ x^k/k! sums to exp(x), but it's\n    -- true in more general fields, so use that lemma\n    rw [Real.exp_eq_exp_ℝ]\n    exact expSeries_div_hasSum_exp ℝ (-1 : ℝ)\n  intro n\n  rw [← Int.cast_ofNat, numDerangements_sum]\n  push_cast\n  rw [Finset.sum_div]\n  -- get down to individual terms\n  refine' Finset.sum_congr (refl _) _\n  intro k hk\n  have h_le : k ≤ n := Finset.mem_range_succ_iff.mp hk\n  rw [Nat.ascFactorial_eq_div, add_tsub_cancel_of_le h_le]\n  push_cast [Nat.factorial_dvd_factorial h_le]\n  field_simp [Nat.factorial_ne_zero]\n  ring"},{"tailPos":1005,"headPos":1003,"goalsBefore":["⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":[],"content":"by"},{"tailPos":2270,"headPos":1003,"goalsBefore":["⊢ Tendsto (fun n => ↑(numDerangements n) / ↑(Nat.factorial n)) atTop (𝓝 (Real.exp (-1)))"],"goalsAfter":[],"content":"by\n  -- we show that d(n)/n! is the partial sum of exp(-1), but offset by 1.\n  -- this isn't entirely obvious, since we have to ensure that asc_factorial and\n  -- factorial interact in the right way, e.g., that k ≤ n always\n  let s : ℕ → ℝ := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial\n  suffices ∀ n : ℕ, (numDerangements n : ℝ) / n.factorial = s (n + 1) by\n    simp_rw [this]\n    -- shift the function by 1, and then use the fact that the partial sums\n    -- converge to the infinite sum\n    rw [tendsto_add_atTop_iff_nat\n      (f := fun n => ∑ k in Finset.range n, (-1 : ℝ) ^ k / k.factorial) 1]\n    apply HasSum.tendsto_sum_nat\n    -- there's no specific lemma for ℝ that ∑ x^k/k! sums to exp(x), but it's\n    -- true in more general fields, so use that lemma\n    rw [Real.exp_eq_exp_ℝ]\n    exact expSeries_div_hasSum_exp ℝ (-1 : ℝ)\n  intro n\n  rw [← Int.cast_ofNat, numDerangements_sum]\n  push_cast\n  rw [Finset.sum_div]\n  -- get down to individual terms\n  refine' Finset.sum_congr (refl _) _\n  intro k hk\n  have h_le : k ≤ n := Finset.mem_range_succ_iff.mp hk\n  rw [Nat.ascFactorial_eq_div, add_tsub_cancel_of_le h_le]\n  push_cast [Nat.factorial_dvd_factorial h_le]\n  field_simp [Nat.factorial_ne_zero]\n  ring"}]
[{"tailPos":2912,"headPos":2887,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\ninst✝ : Structure Language.graph V\n⊢ V ⊨ Theory.simpleGraph ↔ (Irreflexive fun x y => RelMap adj ![x, y]) ∧ Symmetric fun x y => RelMap adj ![x, y]"],"goalsAfter":[],"content":"simp [Theory.simpleGraph]"},{"tailPos":2886,"headPos":2884,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\ninst✝ : Structure Language.graph V\n⊢ V ⊨ Theory.simpleGraph ↔ (Irreflexive fun x y => RelMap adj ![x, y]) ∧ Symmetric fun x y => RelMap adj ![x, y]"],"goalsAfter":[],"content":"by"},{"tailPos":2912,"headPos":2884,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\ninst✝ : Structure Language.graph V\n⊢ V ⊨ Theory.simpleGraph ↔ (Irreflexive fun x y => RelMap adj ![x, y]) ∧ Symmetric fun x y => RelMap adj ![x, y]"],"goalsAfter":[],"content":"by simp [Theory.simpleGraph]"},{"tailPos":3203,"headPos":3131,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ V ⊨ Theory.simpleGraph"],"goalsAfter":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ (Irreflexive fun x y => SimpleGraph.Adj G x y) ∧ Symmetric fun x y => SimpleGraph.Adj G x y"],"content":"simp only [@Theory.simpleGraph_model_iff _ G.structure, relMap_apply₂]"},{"tailPos":3236,"headPos":3206,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ (Irreflexive fun x y => SimpleGraph.Adj G x y) ∧ Symmetric fun x y => SimpleGraph.Adj G x y"],"goalsAfter":[],"content":"exact ⟨G.loopless, G.symm⟩"},{"tailPos":3236,"headPos":3131,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ V ⊨ Theory.simpleGraph"],"goalsAfter":[],"content":"simp only [@Theory.simpleGraph_model_iff _ G.structure, relMap_apply₂]\n  exact ⟨G.loopless, G.symm⟩"},{"tailPos":3128,"headPos":3126,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ V ⊨ Theory.simpleGraph"],"goalsAfter":[],"content":"by"},{"tailPos":3236,"headPos":3126,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ V ⊨ Theory.simpleGraph"],"goalsAfter":[],"content":"by\n  simp only [@Theory.simpleGraph_model_iff _ G.structure, relMap_apply₂]\n  exact ⟨G.loopless, G.symm⟩"},{"tailPos":4100,"headPos":4097,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ FirstOrder.Language.simpleGraphOfStructure V = G"],"goalsAfter":["case Adj.h.h.a\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\nx✝¹ x✝ : V\n⊢ SimpleGraph.Adj (FirstOrder.Language.simpleGraphOfStructure V) x✝¹ x✝ ↔ SimpleGraph.Adj G x✝¹ x✝"],"content":"ext"},{"tailPos":4106,"headPos":4103,"goalsBefore":["case Adj.h.h.a\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\nx✝¹ x✝ : V\n⊢ SimpleGraph.Adj (FirstOrder.Language.simpleGraphOfStructure V) x✝¹ x✝ ↔ SimpleGraph.Adj G x✝¹ x✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":4106,"headPos":4097,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ FirstOrder.Language.simpleGraphOfStructure V = G"],"goalsAfter":[],"content":"ext\n  rfl"},{"tailPos":4094,"headPos":4092,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ FirstOrder.Language.simpleGraphOfStructure V = G"],"goalsAfter":[],"content":"by"},{"tailPos":4106,"headPos":4092,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nG : SimpleGraph V\n⊢ FirstOrder.Language.simpleGraphOfStructure V = G"],"goalsAfter":[],"content":"by\n  ext\n  rfl"},{"tailPos":4356,"headPos":4353,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\n⊢ SimpleGraph.structure (simpleGraphOfStructure V) = S"],"goalsAfter":["case funMap.h.h.h\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nx✝² : ℕ\nx✝¹ : Functions Language.graph x✝²\nx✝ : Fin x✝² → V\n⊢ funMap x✝¹ x✝ = funMap x✝¹ x✝","case RelMap.h.h.h.a\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nx✝² : ℕ\nx✝¹ : Relations Language.graph x✝²\nx✝ : Fin x✝² → V\n⊢ RelMap x✝¹ x✝ ↔ RelMap x✝¹ x✝"],"content":"ext"},{"tailPos":4430,"headPos":4385,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nf : Functions Language.graph n\nxs : Fin n → V\n⊢ funMap f xs = funMap f xs"],"goalsAfter":[],"content":"exact (IsRelational.empty_functions n).elim f"},{"tailPos":4430,"headPos":4359,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nf : Functions Language.graph n\nxs : Fin n → V\n⊢ funMap f xs = funMap f xs"],"goalsAfter":[],"content":"case funMap n f xs =>\n    exact (IsRelational.empty_functions n).elim f"},{"tailPos":4472,"headPos":4463,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs ↔ RelMap r xs"],"goalsAfter":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs = RelMap r xs"],"content":"iff_eq_eq"},{"tailPos":4473,"headPos":4472,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs = RelMap r xs"],"content":"]"},{"tailPos":4473,"headPos":4459,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs ↔ RelMap r xs"],"goalsAfter":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs = RelMap r xs"],"content":"rw [iff_eq_eq]"},{"tailPos":4493,"headPos":4478,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph Nat.zero\nxs : Fin Nat.zero → V\n⊢ RelMap r xs = RelMap r xs","case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"cases' n with n"},{"tailPos":4500,"headPos":4498,"goalsBefore":["case zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph Nat.zero\nxs : Fin Nat.zero → V\n⊢ RelMap r xs = RelMap r xs","case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph Nat.zero\nxs : Fin Nat.zero → V\n⊢ RelMap r xs = RelMap r xs"],"content":"·"},{"tailPos":4513,"headPos":4501,"goalsBefore":["case zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph Nat.zero\nxs : Fin Nat.zero → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"exact r.elim"},{"tailPos":4513,"headPos":4498,"goalsBefore":["case zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph Nat.zero\nxs : Fin Nat.zero → V\n⊢ RelMap r xs = RelMap r xs","case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"· exact r.elim"},{"tailPos":4520,"headPos":4518,"goalsBefore":["case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"·"},{"tailPos":4536,"headPos":4521,"goalsBefore":["case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ Nat.zero)\nxs : Fin (Nat.succ Nat.zero) → V\n⊢ RelMap r xs = RelMap r xs","case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"cases' n with n"},{"tailPos":4545,"headPos":4543,"goalsBefore":["case succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ Nat.zero)\nxs : Fin (Nat.succ Nat.zero) → V\n⊢ RelMap r xs = RelMap r xs","case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ Nat.zero)\nxs : Fin (Nat.succ Nat.zero) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"·"},{"tailPos":4558,"headPos":4546,"goalsBefore":["case succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ Nat.zero)\nxs : Fin (Nat.succ Nat.zero) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"exact r.elim"},{"tailPos":4558,"headPos":4543,"goalsBefore":["case succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ Nat.zero)\nxs : Fin (Nat.succ Nat.zero) → V\n⊢ RelMap r xs = RelMap r xs","case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"· exact r.elim"},{"tailPos":4567,"headPos":4565,"goalsBefore":["case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"·"},{"tailPos":4583,"headPos":4568,"goalsBefore":["case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ (Nat.succ Nat.zero))\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap r xs = RelMap r xs","case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"cases' n with n"},{"tailPos":4594,"headPos":4592,"goalsBefore":["case succ.succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ (Nat.succ Nat.zero))\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap r xs = RelMap r xs","case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ (Nat.succ Nat.zero))\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"·"},{"tailPos":4602,"headPos":4595,"goalsBefore":["case succ.succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ (Nat.succ Nat.zero))\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ.zero.unit\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap PUnit.unit xs = RelMap PUnit.unit xs"],"content":"cases r"},{"tailPos":4648,"headPos":4613,"goalsBefore":["case succ.succ.zero.unit\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap PUnit.unit xs = RelMap PUnit.unit xs"],"goalsAfter":["case succ.succ.zero.unit\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap adj ![xs 0, xs 1] = RelMap PUnit.unit xs"],"content":"change RelMap adj ![xs 0, xs 1] = _"},{"tailPos":4687,"headPos":4659,"goalsBefore":["case succ.succ.zero.unit\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap adj ![xs 0, xs 1] = RelMap PUnit.unit xs"],"goalsAfter":["case succ.succ.zero.unit\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ ∀ (x : Fin (Nat.succ 1)), Matrix.vecCons (xs 0) ![xs 1] x = xs x"],"content":"refine' congr rfl (funext _)"},{"tailPos":4723,"headPos":4698,"goalsBefore":["case succ.succ.zero.unit\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ ∀ (x : Fin (Nat.succ 1)), Matrix.vecCons (xs 0) ![xs 1] x = xs x"],"goalsAfter":[],"content":"simp [Fin.forall_fin_two]"},{"tailPos":4723,"headPos":4595,"goalsBefore":["case succ.succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ (Nat.succ Nat.zero))\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]"},{"tailPos":4723,"headPos":4592,"goalsBefore":["case succ.succ.zero\nL : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nr : Relations Language.graph (Nat.succ (Nat.succ Nat.zero))\nxs : Fin (Nat.succ (Nat.succ Nat.zero)) → V\n⊢ RelMap r xs = RelMap r xs","case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"· cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]"},{"tailPos":4734,"headPos":4732,"goalsBefore":["case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":["case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"content":"·"},{"tailPos":4747,"headPos":4735,"goalsBefore":["case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"exact r.elim"},{"tailPos":4747,"headPos":4732,"goalsBefore":["case succ.succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ (Nat.succ n)))\nxs : Fin (Nat.succ (Nat.succ (Nat.succ n))) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"· exact r.elim"},{"tailPos":4747,"headPos":4568,"goalsBefore":["case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4747,"headPos":4565,"goalsBefore":["case succ.succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ (Nat.succ n))\nxs : Fin (Nat.succ (Nat.succ n)) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"· cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4747,"headPos":4521,"goalsBefore":["case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"cases' n with n\n      · exact r.elim\n      · cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4747,"headPos":4518,"goalsBefore":["case succ\nL : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph (Nat.succ n)\nxs : Fin (Nat.succ n) → V\n⊢ RelMap r xs = RelMap r xs"],"goalsAfter":[],"content":"· cases' n with n\n      · exact r.elim\n      · cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4747,"headPos":4459,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs ↔ RelMap r xs"],"goalsAfter":[],"content":"rw [iff_eq_eq]\n    cases' n with n\n    · exact r.elim\n    · cases' n with n\n      · exact r.elim\n      · cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4747,"headPos":4433,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn✝ : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\nn : ℕ\nr : Relations Language.graph n\nxs : Fin n → V\n⊢ RelMap r xs ↔ RelMap r xs"],"goalsAfter":[],"content":"case RelMap n r xs =>\n    rw [iff_eq_eq]\n    cases' n with n\n    · exact r.elim\n    · cases' n with n\n      · exact r.elim\n      · cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4747,"headPos":4353,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\n⊢ SimpleGraph.structure (simpleGraphOfStructure V) = S"],"goalsAfter":[],"content":"ext\n  case funMap n f xs =>\n    exact (IsRelational.empty_functions n).elim f\n  case RelMap n r xs =>\n    rw [iff_eq_eq]\n    cases' n with n\n    · exact r.elim\n    · cases' n with n\n      · exact r.elim\n      · cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"},{"tailPos":4350,"headPos":4348,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\n⊢ SimpleGraph.structure (simpleGraphOfStructure V) = S"],"goalsAfter":[],"content":"by"},{"tailPos":4747,"headPos":4348,"goalsBefore":["L : Language\nα : Type w\nV : Type w'\nn : ℕ\nS : Structure Language.graph V\ninst✝ : V ⊨ Theory.simpleGraph\n⊢ SimpleGraph.structure (simpleGraphOfStructure V) = S"],"goalsAfter":[],"content":"by\n  ext\n  case funMap n f xs =>\n    exact (IsRelational.empty_functions n).elim f\n  case RelMap n r xs =>\n    rw [iff_eq_eq]\n    cases' n with n\n    · exact r.elim\n    · cases' n with n\n      · exact r.elim\n      · cases' n with n\n        · cases r\n          change RelMap adj ![xs 0, xs 1] = _\n          refine' congr rfl (funext _)\n          simp [Fin.forall_fin_two]\n        · exact r.elim"}]
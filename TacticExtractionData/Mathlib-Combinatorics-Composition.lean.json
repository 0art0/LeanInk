[{"tailPos":7440,"headPos":7423,"goalsBefore":["n : ℕ\nc : Composition n\n| n"],"goalsAfter":["n : ℕ\nc : Composition n\n| sum c.blocks"],"content":"← c.blocks_sum,"},{"tailPos":7460,"headPos":7441,"goalsBefore":["n : ℕ\nc : Composition n\n| sum c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\n| sum (ofFn (blocksFun c))"],"content":"← ofFn_blocksFun,"},{"tailPos":7469,"headPos":7461,"goalsBefore":["n : ℕ\nc : Composition n\n| sum (ofFn (blocksFun c))"],"goalsAfter":["n : ℕ\nc : Composition n\n| ∑ i : Fin (length c), blocksFun c i"],"content":"sum_ofFn"},{"tailPos":7470,"headPos":7419,"goalsBefore":["n : ℕ\nc : Composition n\n| n"],"goalsAfter":["n : ℕ\nc : Composition n\n| ∑ i : Fin (length c), blocksFun c i"],"content":"rw [← c.blocks_sum, ← ofFn_blocksFun, sum_ofFn]"},{"tailPos":7470,"headPos":7407,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ∑ i : Fin (length c), blocksFun c i = n"],"goalsAfter":[],"content":"conv_rhs => rw [← c.blocks_sum, ← ofFn_blocksFun, sum_ofFn]"},{"tailPos":7404,"headPos":7402,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ∑ i : Fin (length c), blocksFun c i = n"],"goalsAfter":[],"content":"by"},{"tailPos":7470,"headPos":7402,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ∑ i : Fin (length c), blocksFun c i = n"],"goalsAfter":[],"content":"by\n  conv_rhs => rw [← c.blocks_sum, ← ofFn_blocksFun, sum_ofFn]"},{"tailPos":8723,"headPos":8707,"goalsBefore":["n : ℕ\nc : Composition n\n| n"],"goalsAfter":["n : ℕ\nc : Composition n\n| sum c.blocks"],"content":"← c.blocks_sum"},{"tailPos":8724,"headPos":8703,"goalsBefore":["n : ℕ\nc : Composition n\n| n"],"goalsAfter":["n : ℕ\nc : Composition n\n| sum c.blocks"],"content":"rw [← c.blocks_sum]"},{"tailPos":8724,"headPos":8691,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ length c ≤ n"],"goalsAfter":["n : ℕ\nc : Composition n\n⊢ length c ≤ sum c.blocks"],"content":"conv_rhs => rw [← c.blocks_sum]"},{"tailPos":8789,"headPos":8727,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ length c ≤ sum c.blocks"],"goalsAfter":[],"content":"exact length_le_sum_of_one_le _ fun i hi => c.one_le_blocks hi"},{"tailPos":8789,"headPos":8691,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ length c ≤ n"],"goalsAfter":[],"content":"conv_rhs => rw [← c.blocks_sum]\n  exact length_le_sum_of_one_le _ fun i hi => c.one_le_blocks hi"},{"tailPos":8688,"headPos":8686,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ length c ≤ n"],"goalsAfter":[],"content":"by"},{"tailPos":8789,"headPos":8686,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ length c ≤ n"],"goalsAfter":[],"content":"by\n  conv_rhs => rw [← c.blocks_sum]\n  exact length_le_sum_of_one_le _ fun i hi => c.one_le_blocks hi"},{"tailPos":8930,"headPos":8903,"goalsBefore":["n : ℕ\nc : Composition n\nh : 0 < n\n⊢ 0 < length c"],"goalsAfter":["case h\nn : ℕ\nc : Composition n\nh : 0 < n\n⊢ 0 < sum c.blocks"],"content":"apply length_pos_of_sum_pos"},{"tailPos":8942,"headPos":8933,"goalsBefore":["case h\nn : ℕ\nc : Composition n\nh : 0 < n\n⊢ 0 < sum c.blocks"],"goalsAfter":["case h.e'_4\nn : ℕ\nc : Composition n\nh : 0 < n\n⊢ sum c.blocks = n"],"content":"convert h"},{"tailPos":8963,"headPos":8945,"goalsBefore":["case h.e'_4\nn : ℕ\nc : Composition n\nh : 0 < n\n⊢ sum c.blocks = n"],"goalsAfter":[],"content":"exact c.blocks_sum"},{"tailPos":8963,"headPos":8903,"goalsBefore":["n : ℕ\nc : Composition n\nh : 0 < n\n⊢ 0 < length c"],"goalsAfter":[],"content":"apply length_pos_of_sum_pos\n  convert h\n  exact c.blocks_sum"},{"tailPos":8900,"headPos":8898,"goalsBefore":["n : ℕ\nc : Composition n\nh : 0 < n\n⊢ 0 < length c"],"goalsAfter":[],"content":"by"},{"tailPos":8963,"headPos":8898,"goalsBefore":["n : ℕ\nc : Composition n\nh : 0 < n\n⊢ 0 < length c"],"goalsAfter":[],"content":"by\n  apply length_pos_of_sum_pos\n  convert h\n  exact c.blocks_sum"},{"tailPos":9280,"headPos":9265,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ sizeUpTo c 0 = 0"],"goalsAfter":[],"content":"simp [sizeUpTo]"},{"tailPos":9264,"headPos":9262,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ sizeUpTo c 0 = 0"],"goalsAfter":[],"content":"by"},{"tailPos":9280,"headPos":9262,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ sizeUpTo c 0 = 0"],"goalsAfter":[],"content":"by simp [sizeUpTo]"},{"tailPos":9446,"headPos":9430,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ sizeUpTo c i = n"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ sum (take i c.blocks) = n"],"content":"dsimp [sizeUpTo]"},{"tailPos":9469,"headPos":9449,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ sum (take i c.blocks) = n"],"goalsAfter":["case h.e'_2.h.e'_4\nn : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ take i c.blocks = c.blocks"],"content":"convert c.blocks_sum"},{"tailPos":9494,"headPos":9472,"goalsBefore":["case h.e'_2.h.e'_4\nn : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ take i c.blocks = c.blocks"],"goalsAfter":[],"content":"exact take_all_of_le h"},{"tailPos":9494,"headPos":9430,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ sizeUpTo c i = n"],"goalsAfter":[],"content":"dsimp [sizeUpTo]\n  convert c.blocks_sum\n  exact take_all_of_le h"},{"tailPos":9427,"headPos":9425,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ sizeUpTo c i = n"],"goalsAfter":[],"content":"by"},{"tailPos":9494,"headPos":9425,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : length c ≤ i\n⊢ sizeUpTo c i = n"],"goalsAfter":[],"content":"by\n  dsimp [sizeUpTo]\n  convert c.blocks_sum\n  exact take_all_of_le h"},{"tailPos":9832,"headPos":9815,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n| n"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\n| sum c.blocks"],"content":"← c.blocks_sum,"},{"tailPos":9862,"headPos":9833,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n| sum c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\n| sum (take i c.blocks) + sum (drop i c.blocks)"],"content":"← sum_take_add_sum_drop _ i"},{"tailPos":9863,"headPos":9811,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n| n"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\n| sum (take i c.blocks) + sum (drop i c.blocks)"],"content":"rw [← c.blocks_sum, ← sum_take_add_sum_drop _ i]"},{"tailPos":9863,"headPos":9799,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n⊢ sizeUpTo c i ≤ n"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\n⊢ sizeUpTo c i ≤ sum (take i c.blocks) + sum (drop i c.blocks)"],"content":"conv_rhs => rw [← c.blocks_sum, ← sum_take_add_sum_drop _ i]"},{"tailPos":9892,"headPos":9866,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n⊢ sizeUpTo c i ≤ sum (take i c.blocks) + sum (drop i c.blocks)"],"goalsAfter":[],"content":"exact Nat.le_add_right _ _"},{"tailPos":9892,"headPos":9799,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n⊢ sizeUpTo c i ≤ n"],"goalsAfter":[],"content":"conv_rhs => rw [← c.blocks_sum, ← sum_take_add_sum_drop _ i]\n  exact Nat.le_add_right _ _"},{"tailPos":9796,"headPos":9794,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n⊢ sizeUpTo c i ≤ n"],"goalsAfter":[],"content":"by"},{"tailPos":9892,"headPos":9794,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\n⊢ sizeUpTo c i ≤ n"],"goalsAfter":[],"content":"by\n  conv_rhs => rw [← c.blocks_sum, ← sum_take_add_sum_drop _ i]\n  exact Nat.le_add_right _ _"},{"tailPos":10091,"headPos":10071,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c (i + 1) = sizeUpTo c i + nthLe c.blocks i h"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sum (take (i + 1) c.blocks) = sum (take i c.blocks) + nthLe c.blocks i h"],"content":"simp only [sizeUpTo]"},{"tailPos":10117,"headPos":10098,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sum (take (i + 1) c.blocks) = sum (take i c.blocks) + nthLe c.blocks i h"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sum (take i c.blocks) + nthLe c.blocks i h = sum (take i c.blocks) + nthLe c.blocks i h"],"content":"sum_take_succ _ _ h"},{"tailPos":10118,"headPos":10117,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sum (take i c.blocks) + nthLe c.blocks i h = sum (take i c.blocks) + nthLe c.blocks i h"],"goalsAfter":[],"content":"]"},{"tailPos":10118,"headPos":10094,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sum (take (i + 1) c.blocks) = sum (take i c.blocks) + nthLe c.blocks i h"],"goalsAfter":[],"content":"rw [sum_take_succ _ _ h]"},{"tailPos":10118,"headPos":10071,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c (i + 1) = sizeUpTo c i + nthLe c.blocks i h"],"goalsAfter":[],"content":"simp only [sizeUpTo]\n  rw [sum_take_succ _ _ h]"},{"tailPos":10068,"headPos":10066,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c (i + 1) = sizeUpTo c i + nthLe c.blocks i h"],"goalsAfter":[],"content":"by"},{"tailPos":10118,"headPos":10066,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c (i + 1) = sizeUpTo c i + nthLe c.blocks i h"],"goalsAfter":[],"content":"by\n  simp only [sizeUpTo]\n  rw [sum_take_succ _ _ h]"},{"tailPos":10499,"headPos":10482,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c (i + 1)"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c i + nthLe c.blocks i h"],"content":"c.sizeUpTo_succ h"},{"tailPos":10500,"headPos":10499,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c i + nthLe c.blocks i h"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c i + nthLe c.blocks i h"],"content":"]"},{"tailPos":10500,"headPos":10478,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c (i + 1)"],"goalsAfter":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c i + nthLe c.blocks i h"],"content":"rw [c.sizeUpTo_succ h]"},{"tailPos":10507,"headPos":10503,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c i + nthLe c.blocks i h"],"goalsAfter":[],"content":"simp only [lt_add_iff_pos_right, blocks_pos']"},{"tailPos":10507,"headPos":10478,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c (i + 1)"],"goalsAfter":[],"content":"rw [c.sizeUpTo_succ h]\n  simp"},{"tailPos":10475,"headPos":10473,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c (i + 1)"],"goalsAfter":[],"content":"by"},{"tailPos":10507,"headPos":10473,"goalsBefore":["n : ℕ\nc : Composition n\ni : ℕ\nh : i < length c\n⊢ sizeUpTo c i < sizeUpTo c (i + 1)"],"goalsAfter":[],"content":"by\n  rw [c.sizeUpTo_succ h]\n  simp"},{"tailPos":11294,"headPos":11266,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ↑(boundary c) 0 = 0"],"goalsAfter":[],"content":"simp [boundary, Fin.ext_iff]"},{"tailPos":11265,"headPos":11263,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ↑(boundary c) 0 = 0"],"goalsAfter":[],"content":"by"},{"tailPos":11294,"headPos":11263,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ↑(boundary c) 0 = 0"],"goalsAfter":[],"content":"by simp [boundary, Fin.ext_iff]"},{"tailPos":11467,"headPos":11439,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ↑(boundary c) (Fin.last (length c)) = Fin.last n"],"goalsAfter":[],"content":"simp [boundary, Fin.ext_iff]"},{"tailPos":11436,"headPos":11434,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ↑(boundary c) (Fin.last (length c)) = Fin.last n"],"goalsAfter":[],"content":"by"},{"tailPos":11467,"headPos":11434,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ↑(boundary c) (Fin.last (length c)) = Fin.last n"],"goalsAfter":[],"content":"by\n  simp [boundary, Fin.ext_iff]"},{"tailPos":11956,"headPos":11939,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.card (boundaries c) = length c + 1"],"goalsAfter":[],"content":"simp [boundaries]"},{"tailPos":11938,"headPos":11936,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.card (boundaries c) = length c + 1"],"goalsAfter":[],"content":"by"},{"tailPos":11956,"headPos":11936,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.card (boundaries c) = length c + 1"],"goalsAfter":[],"content":"by simp [boundaries]"},{"tailPos":12411,"headPos":12335,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ 0 ∈ boundaries c"],"goalsAfter":["n : ℕ\nc : Composition n\n⊢ ∃ a, True ∧ ↑(boundary c).toEmbedding a = 0"],"content":"simp only [boundaries, Finset.mem_univ, exists_prop_of_true, Finset.mem_map]"},{"tailPos":12455,"headPos":12416,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ∃ a, True ∧ ↑(boundary c).toEmbedding a = 0"],"goalsAfter":[],"content":"exact ⟨0, And.intro True.intro rfl⟩"},{"tailPos":12455,"headPos":12335,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ 0 ∈ boundaries c"],"goalsAfter":[],"content":"simp only [boundaries, Finset.mem_univ, exists_prop_of_true, Finset.mem_map]\n    exact ⟨0, And.intro True.intro rfl⟩"},{"tailPos":12330,"headPos":12328,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ 0 ∈ boundaries c"],"goalsAfter":[],"content":"by"},{"tailPos":12455,"headPos":12328,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ 0 ∈ boundaries c"],"goalsAfter":[],"content":"by\n    simp only [boundaries, Finset.mem_univ, exists_prop_of_true, Finset.mem_map]\n    exact ⟨0, And.intro True.intro rfl⟩"},{"tailPos":12556,"headPos":12480,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Fin.last n ∈ boundaries c"],"goalsAfter":["n : ℕ\nc : Composition n\n⊢ ∃ a, True ∧ ↑(boundary c).toEmbedding a = Fin.last n"],"content":"simp only [boundaries, Finset.mem_univ, exists_prop_of_true, Finset.mem_map]"},{"tailPos":12628,"headPos":12561,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ∃ a, True ∧ ↑(boundary c).toEmbedding a = Fin.last n"],"goalsAfter":[],"content":"exact ⟨Fin.last c.length, And.intro True.intro c.boundary_last⟩"},{"tailPos":12628,"headPos":12480,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Fin.last n ∈ boundaries c"],"goalsAfter":[],"content":"simp only [boundaries, Finset.mem_univ, exists_prop_of_true, Finset.mem_map]\n    exact ⟨Fin.last c.length, And.intro True.intro c.boundary_last⟩"},{"tailPos":12475,"headPos":12473,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Fin.last n ∈ boundaries c"],"goalsAfter":[],"content":"by"},{"tailPos":12628,"headPos":12473,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Fin.last n ∈ boundaries c"],"goalsAfter":[],"content":"by\n    simp only [boundaries, Finset.mem_univ, exists_prop_of_true, Finset.mem_map]\n    exact ⟨Fin.last c.length, And.intro True.intro c.boundary_last⟩"},{"tailPos":12984,"headPos":12937,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1) = boundary c"],"goalsAfter":["n : ℕ\nc : Composition n\n⊢ ∀ (x : Fin (length c + 1)), ↑(boundary c) x ∈ boundaries c"],"content":"refine' (Finset.orderEmbOfFin_unique' _ _).symm"},{"tailPos":13043,"headPos":12987,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ ∀ (x : Fin (length c + 1)), ↑(boundary c) x ∈ boundaries c"],"goalsAfter":[],"content":"exact fun i => (Finset.mem_map' _).2 (Finset.mem_univ _)"},{"tailPos":13043,"headPos":12937,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1) = boundary c"],"goalsAfter":[],"content":"refine' (Finset.orderEmbOfFin_unique' _ _).symm\n  exact fun i => (Finset.mem_map' _).2 (Finset.mem_univ _)"},{"tailPos":12934,"headPos":12932,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1) = boundary c"],"goalsAfter":[],"content":"by"},{"tailPos":13043,"headPos":12932,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1) = boundary c"],"goalsAfter":[],"content":"by\n  refine' (Finset.orderEmbOfFin_unique' _ _).symm\n  exact fun i => (Finset.mem_map' _).2 (Finset.mem_univ _)"},{"tailPos":14143,"headPos":14093,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"content":"have n_pos : 0 < n := lt_of_le_of_lt (zero_le j) h"},{"tailPos":14197,"headPos":14181,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\n⊢ 0 < sum c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < sum c.blocks\n⊢ 0 < sum c.blocks"],"content":"← c.blocks_sum"},{"tailPos":14198,"headPos":14197,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < sum c.blocks\n⊢ 0 < sum c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < sum c.blocks\n⊢ 0 < sum c.blocks"],"content":"]"},{"tailPos":14207,"headPos":14176,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\n⊢ 0 < sum c.blocks"],"goalsAfter":[],"content":"rwa [← c.blocks_sum] at n_pos"},{"tailPos":14175,"headPos":14173,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\n⊢ 0 < sum c.blocks"],"goalsAfter":[],"content":"by"},{"tailPos":14207,"headPos":14173,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\n⊢ 0 < sum c.blocks"],"goalsAfter":[],"content":"by rwa [← c.blocks_sum] at n_pos"},{"tailPos":14207,"headPos":14146,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis : 0 < sum c.blocks\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"content":"have : 0 < c.blocks.sum := by rwa [← c.blocks_sum] at n_pos"},{"tailPos":14288,"headPos":14210,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis : 0 < sum c.blocks\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis : 0 < sum c.blocks\nlength_pos : 0 < List.length c.blocks\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"content":"have length_pos : 0 < c.blocks.length := length_pos_of_sum_pos (blocks c) this"},{"tailPos":14356,"headPos":14291,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis : 0 < sum c.blocks\nlength_pos : 0 < List.length c.blocks\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis : 0 < sum c.blocks\nlength_pos : 0 < List.length c.blocks\n⊢ j < sizeUpTo c (Nat.succ (Nat.pred (length c)))"],"content":"refine' ⟨c.length.pred, _, Nat.pred_lt (ne_of_gt length_pos)⟩"},{"tailPos":14433,"headPos":14359,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis : 0 < sum c.blocks\nlength_pos : 0 < List.length c.blocks\n⊢ j < sizeUpTo c (Nat.succ (Nat.pred (length c)))"],"goalsAfter":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis✝ : 0 < sum c.blocks\nlength_pos : 0 < List.length c.blocks\nthis : Nat.succ (Nat.pred (length c)) = length c\n⊢ j < sizeUpTo c (Nat.succ (Nat.pred (length c)))"],"content":"have : c.length.pred.succ = c.length := Nat.succ_pred_eq_of_pos length_pos"},{"tailPos":14450,"headPos":14436,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\nn_pos : 0 < n\nthis✝ : 0 < sum c.blocks\nlength_pos : 0 < List.length c.blocks\nthis : Nat.succ (Nat.pred (length c)) = length c\n⊢ j < sizeUpTo c (Nat.succ (Nat.pred (length c)))"],"goalsAfter":[],"content":"simp [this, h]"},{"tailPos":14450,"headPos":14093,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":[],"content":"have n_pos : 0 < n := lt_of_le_of_lt (zero_le j) h\n  have : 0 < c.blocks.sum := by rwa [← c.blocks_sum] at n_pos\n  have length_pos : 0 < c.blocks.length := length_pos_of_sum_pos (blocks c) this\n  refine' ⟨c.length.pred, _, Nat.pred_lt (ne_of_gt length_pos)⟩\n  have : c.length.pred.succ = c.length := Nat.succ_pred_eq_of_pos length_pos\n  simp [this, h]"},{"tailPos":14090,"headPos":14088,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":[],"content":"by"},{"tailPos":14450,"headPos":14088,"goalsBefore":["n : ℕ\nc : Composition n\nj : ℕ\nh : j < n\n⊢ ∃ i, j < sizeUpTo c (Nat.succ i) ∧ i < length c"],"goalsAfter":[],"content":"by\n  have n_pos : 0 < n := lt_of_le_of_lt (zero_le j) h\n  have : 0 < c.blocks.sum := by rwa [← c.blocks_sum] at n_pos\n  have length_pos : 0 < c.blocks.length := length_pos_of_sum_pos (blocks c) this\n  refine' ⟨c.length.pred, _, Nat.pred_lt (ne_of_gt length_pos)⟩\n  have : c.length.pred.succ = c.length := Nat.succ_pred_eq_of_pos length_pos\n  simp [this, h]"},{"tailPos":15052,"headPos":15041,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\nH : ¬sizeUpTo c ↑(index c j) ≤ ↑j\n⊢ False"],"content":"by_contra H"},{"tailPos":15073,"headPos":15055,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\nH : ¬sizeUpTo c ↑(index c j) ≤ ↑j\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ¬sizeUpTo c ↑i ≤ ↑j\n⊢ False"],"content":"set i := c.index j"},{"tailPos":15090,"headPos":15076,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ¬sizeUpTo c ↑i ≤ ↑j\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\n⊢ False"],"content":"push_neg  at H"},{"tailPos":15146,"headPos":15130,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\n⊢ 0 < ↑i"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : ↑(index c j) ≤ 0\n⊢ False"],"content":"by_contra' i_pos"},{"tailPos":15159,"headPos":15151,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : ↑(index c j) ≤ 0\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\ni_pos : ↑(index c j) ≤ 0\n⊢ ↑j < sizeUpTo c ↑(index c j) → False"],"content":"revert H"},{"tailPos":15214,"headPos":15164,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\ni_pos : ↑(index c j) ≤ 0\n⊢ ↑j < sizeUpTo c ↑(index c j) → False"],"goalsAfter":[],"content":"simp [nonpos_iff_eq_zero.1 i_pos, c.sizeUpTo_zero]"},{"tailPos":15214,"headPos":15130,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\n⊢ 0 < ↑i"],"goalsAfter":[],"content":"by_contra' i_pos\n    revert H\n    simp [nonpos_iff_eq_zero.1 i_pos, c.sizeUpTo_zero]"},{"tailPos":15125,"headPos":15123,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\n⊢ 0 < ↑i"],"goalsAfter":[],"content":"by"},{"tailPos":15214,"headPos":15123,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\n⊢ 0 < ↑i"],"goalsAfter":[],"content":"by\n    by_contra' i_pos\n    revert H\n    simp [nonpos_iff_eq_zero.1 i_pos, c.sizeUpTo_zero]"},{"tailPos":15214,"headPos":15093,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\n⊢ False"],"content":"have i_pos : (0 : ℕ) < i := by\n    by_contra' i_pos\n    revert H\n    simp [nonpos_iff_eq_zero.1 i_pos, c.sizeUpTo_zero]"},{"tailPos":15243,"headPos":15217,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\n⊢ False"],"content":"let i₁ := (i : ℕ).pred"},{"tailPos":15303,"headPos":15246,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\n⊢ False"],"content":"have i₁_lt_i : i₁ < i := Nat.pred_lt (ne_of_gt i_pos)"},{"tailPos":15369,"headPos":15306,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\ni₁_succ : Nat.succ i₁ = ↑i\n⊢ False"],"content":"have i₁_succ : i₁.succ = i := Nat.succ_pred_eq_of_pos i_pos"},{"tailPos":15423,"headPos":15372,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\ni₁_succ : Nat.succ i₁ = ↑i\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\ni₁_succ : Nat.succ i₁ = ↑i\nthis : ¬(↑j < sizeUpTo c (Nat.succ i₁) ∧ i₁ < length c)\n⊢ False"],"content":"have := Nat.find_min (c.index_exists j.2) i₁_lt_i"},{"tailPos":15484,"headPos":15426,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\ni₁_succ : Nat.succ i₁ = ↑i\nthis : ¬(↑j < sizeUpTo c (Nat.succ i₁) ∧ i₁ < length c)\n⊢ False"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\ni₁_succ : Nat.succ i₁ = ↑i\nthis : sizeUpTo c ↑(index c j) ≤ ↑j\n⊢ False"],"content":"simp [lt_trans i₁_lt_i (c.index j).2, i₁_succ] at this"},{"tailPos":15518,"headPos":15487,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c) := index c j\nH : ↑j < sizeUpTo c ↑(index c j)\ni_pos : 0 < ↑i\ni₁ : ℕ := Nat.pred ↑i\ni₁_lt_i : i₁ < ↑i\ni₁_succ : Nat.succ i₁ = ↑i\nthis : sizeUpTo c ↑(index c j) ≤ ↑j\n⊢ False"],"goalsAfter":[],"content":"exact Nat.lt_le_antisymm H this"},{"tailPos":15518,"headPos":15041,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":[],"content":"by_contra H\n  set i := c.index j\n  push_neg  at H\n  have i_pos : (0 : ℕ) < i := by\n    by_contra' i_pos\n    revert H\n    simp [nonpos_iff_eq_zero.1 i_pos, c.sizeUpTo_zero]\n  let i₁ := (i : ℕ).pred\n  have i₁_lt_i : i₁ < i := Nat.pred_lt (ne_of_gt i_pos)\n  have i₁_succ : i₁.succ = i := Nat.succ_pred_eq_of_pos i_pos\n  have := Nat.find_min (c.index_exists j.2) i₁_lt_i\n  simp [lt_trans i₁_lt_i (c.index j).2, i₁_succ] at this\n  exact Nat.lt_le_antisymm H this"},{"tailPos":15038,"headPos":15036,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":[],"content":"by"},{"tailPos":15518,"headPos":15036,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":[],"content":"by\n  by_contra H\n  set i := c.index j\n  push_neg  at H\n  have i_pos : (0 : ℕ) < i := by\n    by_contra' i_pos\n    revert H\n    simp [nonpos_iff_eq_zero.1 i_pos, c.sizeUpTo_zero]\n  let i₁ := (i : ℕ).pred\n  have i₁_lt_i : i₁ < i := Nat.pred_lt (ne_of_gt i_pos)\n  have i₁_succ : i₁.succ = i := Nat.succ_pred_eq_of_pos i_pos\n  have := Nat.find_min (c.index_exists j.2) i₁_lt_i\n  simp [lt_trans i₁_lt_i (c.index j).2, i₁_succ] at this\n  exact Nat.lt_le_antisymm H this"},{"tailPos":15892,"headPos":15874,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j - sizeUpTo c ↑(index c j) < blocksFun c (index c j)"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < blocksFun c (index c j) + sizeUpTo c ↑(index c j)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"tsub_lt_iff_right,"},{"tailPos":15902,"headPos":15893,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < blocksFun c (index c j) + sizeUpTo c ↑(index c j)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c ↑(index c j) + blocksFun c (index c j)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"add_comm,"},{"tailPos":15921,"headPos":15903,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c ↑(index c j) + blocksFun c (index c j)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"← sizeUpTo_succ'"},{"tailPos":15922,"headPos":15921,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"]"},{"tailPos":15922,"headPos":15870,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j - sizeUpTo c ↑(index c j) < blocksFun c (index c j)"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"rw [tsub_lt_iff_right, add_comm, ← sizeUpTo_succ']"},{"tailPos":15929,"headPos":15927,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)"],"content":"·"},{"tailPos":15962,"headPos":15930,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)"],"goalsAfter":[],"content":"exact lt_sizeUpTo_index_succ _ _"},{"tailPos":15962,"headPos":15927,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j < sizeUpTo c (↑(index c j) + 1)","n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"· exact lt_sizeUpTo_index_succ _ _"},{"tailPos":15969,"headPos":15967,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"content":"·"},{"tailPos":15997,"headPos":15970,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":[],"content":"exact sizeUpTo_index_le _ _"},{"tailPos":15997,"headPos":15967,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ sizeUpTo c ↑(index c j) ≤ ↑j"],"goalsAfter":[],"content":"· exact sizeUpTo_index_le _ _"},{"tailPos":15997,"headPos":15870,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j - sizeUpTo c ↑(index c j) < blocksFun c (index c j)"],"goalsAfter":[],"content":"rw [tsub_lt_iff_right, add_comm, ← sizeUpTo_succ']\n    · exact lt_sizeUpTo_index_succ _ _\n    · exact sizeUpTo_index_le _ _"},{"tailPos":15865,"headPos":15863,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j - sizeUpTo c ↑(index c j) < blocksFun c (index c j)"],"goalsAfter":[],"content":"by"},{"tailPos":15997,"headPos":15863,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑j - sizeUpTo c ↑(index c j) < blocksFun c (index c j)"],"goalsAfter":[],"content":"by\n    rw [tsub_lt_iff_right, add_comm, ← sizeUpTo_succ']\n    · exact lt_sizeUpTo_index_succ _ _\n    · exact sizeUpTo_index_le _ _"},{"tailPos":16348,"headPos":16337,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(embedding c (index c j)) (invEmbedding c j) = j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(↑(embedding c (index c j)) (invEmbedding c j)) = ↑j"],"content":"Fin.ext_iff"},{"tailPos":16349,"headPos":16348,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(↑(embedding c (index c j)) (invEmbedding c j)) = ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(↑(embedding c (index c j)) (invEmbedding c j)) = ↑j"],"content":"]"},{"tailPos":16349,"headPos":16333,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(embedding c (index c j)) (invEmbedding c j) = j"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(↑(embedding c (index c j)) (invEmbedding c j)) = ↑j"],"content":"rw [Fin.ext_iff]"},{"tailPos":16403,"headPos":16352,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(↑(embedding c (index c j)) (invEmbedding c j)) = ↑j"],"goalsAfter":[],"content":"apply add_tsub_cancel_of_le (c.sizeUpTo_index_le j)"},{"tailPos":16403,"headPos":16333,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(embedding c (index c j)) (invEmbedding c j) = j"],"goalsAfter":[],"content":"rw [Fin.ext_iff]\n  apply add_tsub_cancel_of_le (c.sizeUpTo_index_le j)"},{"tailPos":16330,"headPos":16328,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(embedding c (index c j)) (invEmbedding c j) = j"],"goalsAfter":[],"content":"by"},{"tailPos":16403,"headPos":16328,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ ↑(embedding c (index c j)) (invEmbedding c j) = j"],"goalsAfter":[],"content":"by\n  rw [Fin.ext_iff]\n  apply add_tsub_cancel_of_le (c.sizeUpTo_index_le j)"},{"tailPos":16659,"headPos":16648,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)","case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"content":"constructor"},{"tailPos":16664,"headPos":16662,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)","case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"·"},{"tailPos":16672,"headPos":16665,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"intro h"},{"tailPos":16718,"headPos":16677,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : (fun y => ↑(embedding c i) y) k = j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"rcases Set.mem_range.2 h with ⟨k, hk⟩"},{"tailPos":16738,"headPos":16727,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : (fun y => ↑(embedding c i) y) k = j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : ↑((fun y => ↑(embedding c i) y) k) = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"Fin.ext_iff"},{"tailPos":16739,"headPos":16738,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : ↑((fun y => ↑(embedding c i) y) k) = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : ↑((fun y => ↑(embedding c i) y) k) = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"]"},{"tailPos":16745,"headPos":16723,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : (fun y => ↑(embedding c i) y) k = j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : ↑((fun y => ↑(embedding c i) y) k) = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"rw [Fin.ext_iff] at hk"},{"tailPos":16761,"headPos":16750,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : ↑((fun y => ↑(embedding c i) y) k) = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"content":"dsimp at hk"},{"tailPos":16776,"headPos":16770,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ sizeUpTo c ↑i + ↑k ∧ sizeUpTo c ↑i + ↑k < sizeUpTo c (Nat.succ ↑i)"],"content":"← hk"},{"tailPos":16777,"headPos":16776,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ sizeUpTo c ↑i + ↑k ∧ sizeUpTo c ↑i + ↑k < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ sizeUpTo c ↑i + ↑k ∧ sizeUpTo c ↑i + ↑k < sizeUpTo c (Nat.succ ↑i)"],"content":"]"},{"tailPos":16777,"headPos":16766,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ sizeUpTo c ↑i + ↑k ∧ sizeUpTo c ↑i + ↑k < sizeUpTo c (Nat.succ ↑i)"],"content":"rw [← hk]"},{"tailPos":16812,"headPos":16782,"goalsBefore":["case mp.intro\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : j ∈ Set.range ↑(embedding c i)\nk : Fin (blocksFun c i)\nhk : sizeUpTo c ↑i + ↑k = ↑j\n⊢ sizeUpTo c ↑i ≤ sizeUpTo c ↑i + ↑k ∧ sizeUpTo c ↑i + ↑k < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":[],"content":"simp [sizeUpTo_succ', k.is_lt]"},{"tailPos":16812,"headPos":16665,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":[],"content":"intro h\n    rcases Set.mem_range.2 h with ⟨k, hk⟩\n    rw [Fin.ext_iff] at hk\n    dsimp at hk\n    rw [← hk]\n    simp [sizeUpTo_succ', k.is_lt]"},{"tailPos":16812,"headPos":16662,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)","case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"content":"· intro h\n    rcases Set.mem_range.2 h with ⟨k, hk⟩\n    rw [Fin.ext_iff] at hk\n    dsimp at hk\n    rw [← hk]\n    simp [sizeUpTo_succ', k.is_lt]"},{"tailPos":16817,"headPos":16815,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"content":"·"},{"tailPos":16825,"headPos":16818,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ j ∈ Set.range ↑(embedding c i)"],"content":"intro h"},{"tailPos":16851,"headPos":16830,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ∃ y, ↑(embedding c i) y = j"],"content":"apply Set.mem_range.2"},{"tailPos":16898,"headPos":16856,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ∃ y, ↑(embedding c i) y = j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i","case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := ?mpr.refine'_1 } = j"],"content":"refine' ⟨⟨j - c.sizeUpTo i, _⟩, _⟩"},{"tailPos":16905,"headPos":16903,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i","case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := ?mpr.refine'_1 } = j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i"],"content":"·"},{"tailPos":16927,"headPos":16910,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c ↑i + blocksFun c i","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"content":"tsub_lt_iff_left,"},{"tailPos":16946,"headPos":16928,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c ↑i + blocksFun c i","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"content":"← sizeUpTo_succ'"},{"tailPos":16947,"headPos":16946,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"content":"]"},{"tailPos":16947,"headPos":16906,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"content":"rw [tsub_lt_iff_left, ← sizeUpTo_succ']"},{"tailPos":16956,"headPos":16954,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)"],"content":"·"},{"tailPos":16966,"headPos":16957,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)"],"goalsAfter":[],"content":"exact h.2"},{"tailPos":16966,"headPos":16954,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j < sizeUpTo c (↑i + 1)","case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"content":"· exact h.2"},{"tailPos":16975,"headPos":16973,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"content":"·"},{"tailPos":16985,"headPos":16976,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":[],"content":"exact h.1"},{"tailPos":16985,"headPos":16973,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ sizeUpTo c ↑i ≤ ↑j"],"goalsAfter":[],"content":"· exact h.1"},{"tailPos":16985,"headPos":16906,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i"],"goalsAfter":[],"content":"rw [tsub_lt_iff_left, ← sizeUpTo_succ']\n      · exact h.2\n      · exact h.1"},{"tailPos":16985,"headPos":16903,"goalsBefore":["case mpr.refine'_1\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑j - sizeUpTo c ↑i < blocksFun c i","case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := ?mpr.refine'_1 } = j"],"goalsAfter":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"content":"· rw [tsub_lt_iff_left, ← sizeUpTo_succ']\n      · exact h.2\n      · exact h.1"},{"tailPos":16992,"headPos":16990,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"goalsAfter":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"content":"·"},{"tailPos":17008,"headPos":16997,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"goalsAfter":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) }) = ↑j"],"content":"Fin.ext_iff"},{"tailPos":17009,"headPos":17008,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) }) = ↑j"],"goalsAfter":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) }) = ↑j"],"content":"]"},{"tailPos":17009,"headPos":16993,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"goalsAfter":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) }) = ↑j"],"content":"rw [Fin.ext_iff]"},{"tailPos":17047,"headPos":17016,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) }) = ↑j"],"goalsAfter":[],"content":"exact add_tsub_cancel_of_le h.1"},{"tailPos":17047,"headPos":16993,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"goalsAfter":[],"content":"rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1"},{"tailPos":17047,"headPos":16990,"goalsBefore":["case mpr.refine'_2\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)\n⊢ ↑(embedding c i) { val := ↑j - sizeUpTo c ↑i, isLt := (_ : ↑j - sizeUpTo c ↑i < blocksFun c i) } = j"],"goalsAfter":[],"content":"· rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1"},{"tailPos":17047,"headPos":16818,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":[],"content":"intro h\n    apply Set.mem_range.2\n    refine' ⟨⟨j - c.sizeUpTo i, _⟩, _⟩\n    · rw [tsub_lt_iff_left, ← sizeUpTo_succ']\n      · exact h.2\n      · exact h.1\n    · rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1"},{"tailPos":17047,"headPos":16815,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i) → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":[],"content":"· intro h\n    apply Set.mem_range.2\n    refine' ⟨⟨j - c.sizeUpTo i, _⟩, _⟩\n    · rw [tsub_lt_iff_left, ← sizeUpTo_succ']\n      · exact h.2\n      · exact h.1\n    · rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1"},{"tailPos":17047,"headPos":16648,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":[],"content":"constructor\n  · intro h\n    rcases Set.mem_range.2 h with ⟨k, hk⟩\n    rw [Fin.ext_iff] at hk\n    dsimp at hk\n    rw [← hk]\n    simp [sizeUpTo_succ', k.is_lt]\n  · intro h\n    apply Set.mem_range.2\n    refine' ⟨⟨j - c.sizeUpTo i, _⟩, _⟩\n    · rw [tsub_lt_iff_left, ← sizeUpTo_succ']\n      · exact h.2\n      · exact h.1\n    · rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1"},{"tailPos":16645,"headPos":16643,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":[],"content":"by"},{"tailPos":17047,"headPos":16643,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ sizeUpTo c ↑i ≤ ↑j ∧ ↑j < sizeUpTo c (Nat.succ ↑i)"],"goalsAfter":[],"content":"by\n  constructor\n  · intro h\n    rcases Set.mem_range.2 h with ⟨k, hk⟩\n    rw [Fin.ext_iff] at hk\n    dsimp at hk\n    rw [← hk]\n    simp [sizeUpTo_succ', k.is_lt]\n  · intro h\n    apply Set.mem_range.2\n    refine' ⟨⟨j - c.sizeUpTo i, _⟩, _⟩\n    · rw [tsub_lt_iff_left, ← sizeUpTo_succ']\n      · exact h.2\n      · exact h.1\n    · rw [Fin.ext_iff]\n      exact add_tsub_cancel_of_le h.1"},{"tailPos":17391,"headPos":17370,"goalsBefore":["n : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":["case inr\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nthis :\n  ∀ {n : ℕ} (c : Composition n) {i₁ i₂ : Fin (length c)},\n    i₁ ≠ i₂ → i₁ < i₂ → _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nh' : ¬i₁ < i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))","n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"content":"wlog h' : i₁ < i₂"},{"tailPos":17451,"headPos":17396,"goalsBefore":["case inr\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nthis :\n  ∀ {n : ℕ} (c : Composition n) {i₁ i₂ : Fin (length c)},\n    i₁ ≠ i₂ → i₁ < i₂ → _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nh' : ¬i₁ < i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))","n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"content":"exact (this c h.symm (h.lt_or_lt.resolve_left h')).symm"},{"tailPos":17467,"headPos":17456,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\n⊢ False"],"content":"by_contra d"},{"tailPos":17631,"headPos":17472,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\n⊢ False"],"goalsAfter":["case intro.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nx : Fin n\nhx₁ : x ∈ Set.range ↑(embedding c i₁)\nhx₂ : x ∈ Set.range ↑(embedding c i₂)\n⊢ False"],"content":"obtain ⟨x, hx₁, hx₂⟩ :\n      ∃ x : Fin n, x ∈ Set.range (c.embedding i₁) ∧ x ∈ Set.range (c.embedding i₂) :=\n      Set.not_disjoint_iff.1 d"},{"tailPos":17695,"headPos":17636,"goalsBefore":["case intro.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nx : Fin n\nhx₁ : x ∈ Set.range ↑(embedding c i₁)\nhx₂ : x ∈ Set.range ↑(embedding c i₂)\n⊢ False"],"goalsAfter":["case intro.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nx : Fin n\nhx₁ : x ∈ Set.range ↑(embedding c i₁)\nhx₂ : x ∈ Set.range ↑(embedding c i₂)\nA : Nat.succ ↑i₁ ≤ ↑i₂\n⊢ False"],"content":"have A : (i₁ : ℕ).succ ≤ i₂ := Nat.succ_le_of_lt h'"},{"tailPos":17725,"headPos":17700,"goalsBefore":["case intro.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nx : Fin n\nhx₁ : x ∈ Set.range ↑(embedding c i₁)\nhx₂ : x ∈ Set.range ↑(embedding c i₂)\nA : Nat.succ ↑i₁ ≤ ↑i₂\n⊢ False"],"goalsAfter":["case intro.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nx : Fin n\nhx₁ : x ∈ Set.range ↑(embedding c i₁)\nhx₂ : x ∈ Set.range ↑(embedding c i₂)\nA : Nat.succ ↑i₁ ≤ ↑i₂\n⊢ ↑x < ↑x"],"content":"apply lt_irrefl (x : ℕ)"},{"tailPos":17938,"headPos":17730,"goalsBefore":["case intro.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\nh' : i₁ < i₂\nd : ¬_root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))\nx : Fin n\nhx₁ : x ∈ Set.range ↑(embedding c i₁)\nhx₂ : x ∈ Set.range ↑(embedding c i₂)\nA : Nat.succ ↑i₁ ≤ ↑i₂\n⊢ ↑x < ↑x"],"goalsAfter":[],"content":"calc\n      (x : ℕ) < c.sizeUpTo (i₁ : ℕ).succ := (c.mem_range_embedding_iff.1 hx₁).2\n      _ ≤ c.sizeUpTo (i₂ : ℕ) := monotone_sum_take _ A\n      _ ≤ x := (c.mem_range_embedding_iff.1 hx₂).1"},{"tailPos":17938,"headPos":17370,"goalsBefore":["n : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":[],"content":"wlog h' : i₁ < i₂\n    exact (this c h.symm (h.lt_or_lt.resolve_left h')).symm\n    by_contra d\n    obtain ⟨x, hx₁, hx₂⟩ :\n      ∃ x : Fin n, x ∈ Set.range (c.embedding i₁) ∧ x ∈ Set.range (c.embedding i₂) :=\n      Set.not_disjoint_iff.1 d\n    have A : (i₁ : ℕ).succ ≤ i₂ := Nat.succ_le_of_lt h'\n    apply lt_irrefl (x : ℕ)\n    calc\n      (x : ℕ) < c.sizeUpTo (i₁ : ℕ).succ := (c.mem_range_embedding_iff.1 hx₁).2\n      _ ≤ c.sizeUpTo (i₂ : ℕ) := monotone_sum_take _ A\n      _ ≤ x := (c.mem_range_embedding_iff.1 hx₂).1"},{"tailPos":17938,"headPos":17356,"goalsBefore":["n : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":[],"content":"classical\n    wlog h' : i₁ < i₂\n    exact (this c h.symm (h.lt_or_lt.resolve_left h')).symm\n    by_contra d\n    obtain ⟨x, hx₁, hx₂⟩ :\n      ∃ x : Fin n, x ∈ Set.range (c.embedding i₁) ∧ x ∈ Set.range (c.embedding i₂) :=\n      Set.not_disjoint_iff.1 d\n    have A : (i₁ : ℕ).succ ≤ i₂ := Nat.succ_le_of_lt h'\n    apply lt_irrefl (x : ℕ)\n    calc\n      (x : ℕ) < c.sizeUpTo (i₁ : ℕ).succ := (c.mem_range_embedding_iff.1 hx₁).2\n      _ ≤ c.sizeUpTo (i₂ : ℕ) := monotone_sum_take _ A\n      _ ≤ x := (c.mem_range_embedding_iff.1 hx₂).1"},{"tailPos":17353,"headPos":17351,"goalsBefore":["n : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":[],"content":"by"},{"tailPos":17938,"headPos":17351,"goalsBefore":["n : ℕ\nc : Composition n\ni₁ i₂ : Fin (length c)\nh : i₁ ≠ i₂\n⊢ _root_.Disjoint (Set.range ↑(embedding c i₁)) (Set.range ↑(embedding c i₂))"],"goalsAfter":[],"content":"by\n  classical\n    wlog h' : i₁ < i₂\n    exact (this c h.symm (h.lt_or_lt.resolve_left h')).symm\n    by_contra d\n    obtain ⟨x, hx₁, hx₂⟩ :\n      ∃ x : Fin n, x ∈ Set.range (c.embedding i₁) ∧ x ∈ Set.range (c.embedding i₂) :=\n      Set.not_disjoint_iff.1 d\n    have A : (i₁ : ℕ).succ ≤ i₂ := Nat.succ_le_of_lt h'\n    apply lt_irrefl (x : ℕ)\n    calc\n      (x : ℕ) < c.sizeUpTo (i₁ : ℕ).succ := (c.mem_range_embedding_iff.1 hx₁).2\n      _ ≤ c.sizeUpTo (i₂ : ℕ) := monotone_sum_take _ A\n      _ ≤ x := (c.mem_range_embedding_iff.1 hx₂).1"},{"tailPos":18210,"headPos":18093,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\nthis : ↑(embedding c (index c j)) (invEmbedding c j) ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"have : c.embedding (c.index j) (c.invEmbedding j) ∈ Set.range (c.embedding (c.index j)) :=\n    Set.mem_range_self _"},{"tailPos":18282,"headPos":18260,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\nthis : ↑(embedding c (index c j)) (invEmbedding c j) ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\nthis : j ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"c.embedding_comp_inv j"},{"tailPos":18283,"headPos":18282,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\nthis : j ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\nthis : j ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"]"},{"tailPos":18291,"headPos":18256,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\nthis : ↑(embedding c (index c j)) (invEmbedding c j) ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":["n : ℕ\nc : Composition n\nj : Fin n\nthis : j ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"rw [c.embedding_comp_inv j] at this"},{"tailPos":18304,"headPos":18294,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\nthis : j ∈ Set.range ↑(embedding c (index c j))\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":[],"content":"assumption"},{"tailPos":18304,"headPos":18093,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":[],"content":"have : c.embedding (c.index j) (c.invEmbedding j) ∈ Set.range (c.embedding (c.index j)) :=\n    Set.mem_range_self _\n  -- porting note: previously `rwa` closed\n  rw [c.embedding_comp_inv j] at this\n  assumption"},{"tailPos":18090,"headPos":18088,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":[],"content":"by"},{"tailPos":18304,"headPos":18088,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":[],"content":"by\n  have : c.embedding (c.index j) (c.invEmbedding j) ∈ Set.range (c.embedding (c.index j)) :=\n    Set.mem_range_self _\n  -- porting note: previously `rwa` closed\n  rw [c.embedding_comp_inv j] at this\n  assumption"},{"tailPos":18516,"headPos":18505,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ i = index c j"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j","case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"content":"constructor"},{"tailPos":18521,"headPos":18519,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j","case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j"],"content":"·"},{"tailPos":18541,"headPos":18526,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ ¬i = index c j → ¬j ∈ Set.range ↑(embedding c i)"],"content":"← not_imp_not"},{"tailPos":18542,"headPos":18541,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ ¬i = index c j → ¬j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ ¬i = index c j → ¬j ∈ Set.range ↑(embedding c i)"],"content":"]"},{"tailPos":18542,"headPos":18522,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ ¬i = index c j → ¬j ∈ Set.range ↑(embedding c i)"],"content":"rw [← not_imp_not]"},{"tailPos":18554,"headPos":18547,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ ¬i = index c j → ¬j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : ¬i = index c j\n⊢ ¬j ∈ Set.range ↑(embedding c i)"],"content":"intro h"},{"tailPos":18632,"headPos":18559,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : ¬i = index c j\n⊢ ¬j ∈ Set.range ↑(embedding c i)"],"goalsAfter":[],"content":"exact Set.disjoint_right.1 (c.disjoint_range h) (c.mem_range_embedding j)"},{"tailPos":18632,"headPos":18522,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j"],"goalsAfter":[],"content":"rw [← not_imp_not]\n    intro h\n    exact Set.disjoint_right.1 (c.disjoint_range h) (c.mem_range_embedding j)"},{"tailPos":18632,"headPos":18519,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) → i = index c j","case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"content":"· rw [← not_imp_not]\n    intro h\n    exact Set.disjoint_right.1 (c.disjoint_range h) (c.mem_range_embedding j)"},{"tailPos":18637,"headPos":18635,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"content":"·"},{"tailPos":18645,"headPos":18638,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c i)"],"content":"intro h"},{"tailPos":18655,"headPos":18654,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"h"},{"tailPos":18656,"headPos":18655,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"]"},{"tailPos":18656,"headPos":18650,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"content":"rw [h]"},{"tailPos":18690,"headPos":18661,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\nh : i = index c j\n⊢ j ∈ Set.range ↑(embedding c (index c j))"],"goalsAfter":[],"content":"exact c.mem_range_embedding j"},{"tailPos":18690,"headPos":18638,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":[],"content":"intro h\n    rw [h]\n    exact c.mem_range_embedding j"},{"tailPos":18690,"headPos":18635,"goalsBefore":["case mpr\nn : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ i = index c j → j ∈ Set.range ↑(embedding c i)"],"goalsAfter":[],"content":"· intro h\n    rw [h]\n    exact c.mem_range_embedding j"},{"tailPos":18690,"headPos":18505,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ i = index c j"],"goalsAfter":[],"content":"constructor\n  · rw [← not_imp_not]\n    intro h\n    exact Set.disjoint_right.1 (c.disjoint_range h) (c.mem_range_embedding j)\n  · intro h\n    rw [h]\n    exact c.mem_range_embedding j"},{"tailPos":18502,"headPos":18500,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ i = index c j"],"goalsAfter":[],"content":"by"},{"tailPos":18690,"headPos":18500,"goalsBefore":["n : ℕ\nc : Composition n\nj : Fin n\ni : Fin (length c)\n⊢ j ∈ Set.range ↑(embedding c i) ↔ i = index c j"],"goalsAfter":[],"content":"by\n  constructor\n  · rw [← not_imp_not]\n    intro h\n    exact Set.disjoint_right.1 (c.disjoint_range h) (c.mem_range_embedding j)\n  · intro h\n    rw [h]\n    exact c.mem_range_embedding j"},{"tailPos":18890,"headPos":18886,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) j) = i"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ i = index c (↑(embedding c i) j)"],"content":"symm"},{"tailPos":18925,"headPos":18897,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ i = index c (↑(embedding c i) j)"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(embedding c i) j ∈ Set.range ↑(embedding c i)"],"content":"← mem_range_embedding_iff'"},{"tailPos":18926,"headPos":18925,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(embedding c i) j ∈ Set.range ↑(embedding c i)"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(embedding c i) j ∈ Set.range ↑(embedding c i)"],"content":"]"},{"tailPos":18926,"headPos":18893,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ i = index c (↑(embedding c i) j)"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(embedding c i) j ∈ Set.range ↑(embedding c i)"],"content":"rw [← mem_range_embedding_iff']"},{"tailPos":18953,"headPos":18929,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(embedding c i) j ∈ Set.range ↑(embedding c i)"],"goalsAfter":[],"content":"apply Set.mem_range_self"},{"tailPos":18953,"headPos":18886,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) j) = i"],"goalsAfter":[],"content":"symm\n  rw [← mem_range_embedding_iff']\n  apply Set.mem_range_self"},{"tailPos":18883,"headPos":18881,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) j) = i"],"goalsAfter":[],"content":"by"},{"tailPos":18953,"headPos":18881,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) j) = i"],"goalsAfter":[],"content":"by\n  symm\n  rw [← mem_range_embedding_iff']\n  apply Set.mem_range_self"},{"tailPos":19157,"headPos":19148,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) j)) = ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) j)) = ↑j"],"content":"simp_rw ["},{"tailPos":19174,"headPos":19157,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) j)) = ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(↑(embedding c i) j) - sizeUpTo c ↑(index c (↑(embedding c i) j)) = ↑j"],"content":"coe_invEmbedding,"},{"tailPos":19191,"headPos":19175,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(↑(embedding c i) j) - sizeUpTo c ↑(index c (↑(embedding c i) j)) = ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(↑(embedding c i) j) - sizeUpTo c ↑i = ↑j"],"content":"index_embedding,"},{"tailPos":19206,"headPos":19192,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(↑(embedding c i) j) - sizeUpTo c ↑i = ↑j"],"goalsAfter":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ sizeUpTo c ↑i + ↑j - sizeUpTo c ↑i = ↑j"],"content":"coe_embedding,"},{"tailPos":19227,"headPos":19207,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ sizeUpTo c ↑i + ↑j - sizeUpTo c ↑i = ↑j"],"goalsAfter":[],"content":"simp only [add_tsub_cancel_left]"},{"tailPos":19228,"headPos":19148,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) j)) = ↑j"],"goalsAfter":[],"content":"simp_rw [coe_invEmbedding, index_embedding, coe_embedding, add_tsub_cancel_left]"},{"tailPos":19145,"headPos":19143,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) j)) = ↑j"],"goalsAfter":[],"content":"by"},{"tailPos":19228,"headPos":19143,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length c)\nj : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) j)) = ↑j"],"goalsAfter":[],"content":"by\n  simp_rw [coe_invEmbedding, index_embedding, coe_embedding, add_tsub_cancel_left]"},{"tailPos":19629,"headPos":19605,"goalsBefore":["n : ℕ\nc : Composition n\nx : (i : Fin (length c)) × Fin (blocksFun c i)\n⊢ (fun j => { fst := index c j, snd := invEmbedding c j }) ((fun x => ↑(embedding c x.fst) x.snd) x) = x"],"goalsAfter":["case mk\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ (fun j => { fst := index c j, snd := invEmbedding c j })\n      ((fun x => ↑(embedding c x.fst) x.snd) { fst := i, snd := y }) =\n    { fst := i, snd := y }"],"content":"rcases x with ⟨i, y⟩"},{"tailPos":19639,"headPos":19634,"goalsBefore":["case mk\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ (fun j => { fst := index c j, snd := invEmbedding c j })\n      ((fun x => ↑(embedding c x.fst) x.snd) { fst := i, snd := y }) =\n    { fst := i, snd := y }"],"goalsAfter":["case mk\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ { fst := index c (↑(embedding c i) y), snd := invEmbedding c (↑(embedding c i) y) } = { fst := i, snd := y }"],"content":"dsimp only"},{"tailPos":19649,"headPos":19644,"goalsBefore":["case mk\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ { fst := index c (↑(embedding c i) y), snd := invEmbedding c (↑(embedding c i) y) } = { fst := i, snd := y }"],"goalsAfter":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i","case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"content":"congr"},{"tailPos":19651,"headPos":19650,"goalsBefore":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i","case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"goalsAfter":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i","case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"content":";"},{"tailPos":19654,"headPos":19652,"goalsBefore":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i","case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"goalsAfter":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i"],"content":"·"},{"tailPos":19682,"headPos":19655,"goalsBefore":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i"],"goalsAfter":[],"content":"exact c.index_embedding _ _"},{"tailPos":19682,"headPos":19652,"goalsBefore":["case mk.h.e_3.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ index c (↑(embedding c i) y) = i","case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"goalsAfter":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"content":"· exact c.index_embedding _ _"},{"tailPos":19706,"headPos":19691,"goalsBefore":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"goalsAfter":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y","case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"content":"Fin.heq_ext_iff"},{"tailPos":19707,"headPos":19706,"goalsBefore":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y","case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y","case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"content":"]"},{"tailPos":19707,"headPos":19687,"goalsBefore":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ HEq (invEmbedding c (↑(embedding c i) y)) y"],"goalsAfter":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y","case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"content":"rw [Fin.heq_ext_iff]"},{"tailPos":19714,"headPos":19712,"goalsBefore":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y","case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y"],"content":"·"},{"tailPos":19744,"headPos":19715,"goalsBefore":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y"],"goalsAfter":[],"content":"exact c.invEmbedding_comp _ _"},{"tailPos":19744,"headPos":19712,"goalsBefore":["case mk.h.e_4\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ ↑(invEmbedding c (↑(embedding c i) y)) = ↑y","case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"content":"· exact c.invEmbedding_comp _ _"},{"tailPos":19751,"headPos":19749,"goalsBefore":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"content":"·"},{"tailPos":19773,"headPos":19756,"goalsBefore":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c i = blocksFun c i"],"content":"c.index_embedding"},{"tailPos":19774,"headPos":19773,"goalsBefore":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c i = blocksFun c i"],"goalsAfter":[],"content":"]"},{"tailPos":19774,"headPos":19752,"goalsBefore":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":[],"content":"rw [c.index_embedding]"},{"tailPos":19774,"headPos":19749,"goalsBefore":["case mk.h.e_4.h\nn : ℕ\nc : Composition n\ni : Fin (length c)\ny : Fin (blocksFun c i)\n⊢ blocksFun c (index c (↑(embedding c i) y)) = blocksFun c i"],"goalsAfter":[],"content":"· rw [c.index_embedding]"},{"tailPos":19774,"headPos":19605,"goalsBefore":["n : ℕ\nc : Composition n\nx : (i : Fin (length c)) × Fin (blocksFun c i)\n⊢ (fun j => { fst := index c j, snd := invEmbedding c j }) ((fun x => ↑(embedding c x.fst) x.snd) x) = x"],"goalsAfter":[],"content":"rcases x with ⟨i, y⟩\n    dsimp\n    congr ; · exact c.index_embedding _ _\n    rw [Fin.heq_ext_iff]\n    · exact c.invEmbedding_comp _ _\n    · rw [c.index_embedding]"},{"tailPos":19600,"headPos":19598,"goalsBefore":["n : ℕ\nc : Composition n\nx : (i : Fin (length c)) × Fin (blocksFun c i)\n⊢ (fun j => { fst := index c j, snd := invEmbedding c j }) ((fun x => ↑(embedding c x.fst) x.snd) x) = x"],"goalsAfter":[],"content":"by"},{"tailPos":19774,"headPos":19598,"goalsBefore":["n : ℕ\nc : Composition n\nx : (i : Fin (length c)) × Fin (blocksFun c i)\n⊢ (fun j => { fst := index c j, snd := invEmbedding c j }) ((fun x => ↑(embedding c x.fst) x.snd) x) = x"],"goalsAfter":[],"content":"by\n    rcases x with ⟨i, y⟩\n    dsimp\n    congr ; · exact c.index_embedding _ _\n    rw [Fin.heq_ext_iff]\n    · exact c.invEmbedding_comp _ _\n    · rw [c.index_embedding]"},{"tailPos":20170,"headPos":20162,"goalsBefore":["n : ℕ\nc : Composition n\nn₁ n₂ : ℕ\nc₁ : Composition n₁\nc₂ : Composition n₂\ni₁ : Fin (length c₁)\ni₂ : Fin (length c₂)\nhn : n₁ = n₂\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"content":"cases hn"},{"tailPos":20200,"headPos":20177,"goalsBefore":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁ = c₂\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"content":"← Composition.ext_iff"},{"tailPos":20201,"headPos":20200,"goalsBefore":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁ = c₂\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁ = c₂\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"content":"]"},{"tailPos":20207,"headPos":20173,"goalsBefore":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁ = c₂\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"content":"rw [← Composition.ext_iff] at hc"},{"tailPos":20218,"headPos":20210,"goalsBefore":["case refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ : Fin (length c₁)\nc₂ : Composition n₁\ni₂ : Fin (length c₂)\nhc : c₁ = c₂\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":["case refl.refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₁ i₂"],"content":"cases hc"},{"tailPos":20226,"headPos":20221,"goalsBefore":["case refl.refl\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₁ i₂"],"goalsAfter":["case refl.refl.e_a\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ i₁ = i₂"],"content":"congr"},{"tailPos":20245,"headPos":20234,"goalsBefore":["case refl.refl.e_a\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ i₁ = i₂"],"goalsAfter":["case refl.refl.e_a\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ ↑i₁ = ↑i₂"],"content":"Fin.ext_iff"},{"tailPos":20246,"headPos":20245,"goalsBefore":["case refl.refl.e_a\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ ↑i₁ = ↑i₂"],"goalsAfter":["case refl.refl.e_a\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ ↑i₁ = ↑i₂"],"content":"]"},{"tailPos":20246,"headPos":20229,"goalsBefore":["case refl.refl.e_a\nn : ℕ\nc : Composition n\nn₁ : ℕ\nc₁ : Composition n₁\ni₁ i₂ : Fin (length c₁)\nhi : ↑i₁ = ↑i₂\n⊢ i₁ = i₂"],"goalsAfter":[],"content":"rwa [Fin.ext_iff]"},{"tailPos":20246,"headPos":20162,"goalsBefore":["n : ℕ\nc : Composition n\nn₁ n₂ : ℕ\nc₁ : Composition n₁\nc₂ : Composition n₂\ni₁ : Fin (length c₁)\ni₂ : Fin (length c₂)\nhn : n₁ = n₂\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":[],"content":"cases hn\n  rw [← Composition.ext_iff] at hc\n  cases hc\n  congr\n  rwa [Fin.ext_iff]"},{"tailPos":20159,"headPos":20157,"goalsBefore":["n : ℕ\nc : Composition n\nn₁ n₂ : ℕ\nc₁ : Composition n₁\nc₂ : Composition n₂\ni₁ : Fin (length c₁)\ni₂ : Fin (length c₂)\nhn : n₁ = n₂\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":[],"content":"by"},{"tailPos":20246,"headPos":20157,"goalsBefore":["n : ℕ\nc : Composition n\nn₁ n₂ : ℕ\nc₁ : Composition n₁\nc₂ : Composition n₂\ni₁ : Fin (length c₁)\ni₂ : Fin (length c₂)\nhn : n₁ = n₂\nhc : c₁.blocks = c₂.blocks\nhi : ↑i₁ = ↑i₂\n⊢ blocksFun c₁ i₁ = blocksFun c₂ i₂"],"goalsAfter":[],"content":"by\n  cases hn\n  rw [← Composition.ext_iff] at hc\n  cases hc\n  congr\n  rwa [Fin.ext_iff]"},{"tailPos":20592,"headPos":20591,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c = c'\n⊢ c.snd.blocks = c'.snd.blocks"],"goalsAfter":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c = c'\n⊢ c'.snd.blocks = c'.snd.blocks"],"content":"H"},{"tailPos":20593,"headPos":20592,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c = c'\n⊢ c'.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"]"},{"tailPos":20593,"headPos":20587,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c = c'\n⊢ c.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"rw [H]"},{"tailPos":20586,"headPos":20584,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c = c'\n⊢ c.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"by"},{"tailPos":20593,"headPos":20584,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c = c'\n⊢ c.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"by rw [H]"},{"tailPos":20608,"headPos":20564,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\n⊢ c = c' ↔ c.snd.blocks = c'.snd.blocks"],"goalsAfter":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c.snd.blocks = c'.snd.blocks\n⊢ c = c'"],"content":"refine' ⟨fun H => by rw [H], fun H => _⟩"},{"tailPos":20635,"headPos":20611,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\nH : c.snd.blocks = c'.snd.blocks\n⊢ c = c'"],"goalsAfter":["case mk\nn✝ : ℕ\nc✝ : Composition n✝\nc' : (n : ℕ) × Composition n\nn : ℕ\nc : Composition n\nH : { fst := n, snd := c }.snd.blocks = c'.snd.blocks\n⊢ { fst := n, snd := c } = c'"],"content":"rcases c with ⟨n, c⟩"},{"tailPos":20665,"headPos":20638,"goalsBefore":["case mk\nn✝ : ℕ\nc✝ : Composition n✝\nc' : (n : ℕ) × Composition n\nn : ℕ\nc : Composition n\nH : { fst := n, snd := c }.snd.blocks = c'.snd.blocks\n⊢ { fst := n, snd := c } = c'"],"goalsAfter":["case mk.mk\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ { fst := n, snd := c } = { fst := n', snd := c' }"],"content":"rcases c' with ⟨n', c'⟩"},{"tailPos":20709,"headPos":20692,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ n = n'"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ sum c.blocks = n'"],"content":"← c.blocks_sum,"},{"tailPos":20728,"headPos":20710,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ sum c.blocks = n'"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ sum c.blocks = sum c'.blocks"],"content":"← c'.blocks_sum,"},{"tailPos":20730,"headPos":20729,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ sum c.blocks = sum c'.blocks"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ sum { fst := n', snd := c' }.snd.blocks = sum c'.blocks"],"content":"H"},{"tailPos":20731,"headPos":20730,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ sum { fst := n', snd := c' }.snd.blocks = sum c'.blocks"],"goalsAfter":[],"content":"]"},{"tailPos":20731,"headPos":20688,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ n = n'"],"goalsAfter":[],"content":"rw [← c.blocks_sum, ← c'.blocks_sum, H]"},{"tailPos":20687,"headPos":20685,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ n = n'"],"goalsAfter":[],"content":"by"},{"tailPos":20731,"headPos":20685,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ n = n'"],"goalsAfter":[],"content":"by rw [← c.blocks_sum, ← c'.blocks_sum, H]"},{"tailPos":20731,"headPos":20668,"goalsBefore":["case mk.mk\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\n⊢ { fst := n, snd := c } = { fst := n', snd := c' }"],"goalsAfter":["case mk.mk\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\nthis : n = n'\n⊢ { fst := n, snd := c } = { fst := n', snd := c' }"],"content":"have : n = n' := by rw [← c.blocks_sum, ← c'.blocks_sum, H]"},{"tailPos":20748,"headPos":20734,"goalsBefore":["case mk.mk\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n'\nH : { fst := n, snd := c }.snd.blocks = { fst := n', snd := c' }.snd.blocks\nthis : n = n'\n⊢ { fst := n, snd := c } = { fst := n', snd := c' }"],"goalsAfter":["case mk.mk.refl\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n\nH : { fst := n, snd := c }.snd.blocks = { fst := n, snd := c' }.snd.blocks\n⊢ { fst := n, snd := c } = { fst := n, snd := c' }"],"content":"induction this"},{"tailPos":20756,"headPos":20751,"goalsBefore":["case mk.mk.refl\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n\nH : { fst := n, snd := c }.snd.blocks = { fst := n, snd := c' }.snd.blocks\n⊢ { fst := n, snd := c } = { fst := n, snd := c' }"],"goalsAfter":["case mk.mk.refl.e_snd\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n\nH : { fst := n, snd := c }.snd.blocks = { fst := n, snd := c' }.snd.blocks\n⊢ c = c'"],"content":"congr"},{"tailPos":20763,"headPos":20759,"goalsBefore":["case mk.mk.refl.e_snd\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n\nH : { fst := n, snd := c }.snd.blocks = { fst := n, snd := c' }.snd.blocks\n⊢ c = c'"],"goalsAfter":["case mk.mk.refl.e_snd.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n\nH : { fst := n, snd := c }.snd.blocks = { fst := n, snd := c' }.snd.blocks\n⊢ c.blocks = c'.blocks"],"content":"ext1"},{"tailPos":20773,"headPos":20766,"goalsBefore":["case mk.mk.refl.e_snd.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nc : Composition n\nn' : ℕ\nc' : Composition n\nH : { fst := n, snd := c }.snd.blocks = { fst := n, snd := c' }.snd.blocks\n⊢ c.blocks = c'.blocks"],"goalsAfter":[],"content":"exact H"},{"tailPos":20773,"headPos":20564,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\n⊢ c = c' ↔ c.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"refine' ⟨fun H => by rw [H], fun H => _⟩\n  rcases c with ⟨n, c⟩\n  rcases c' with ⟨n', c'⟩\n  have : n = n' := by rw [← c.blocks_sum, ← c'.blocks_sum, H]\n  induction this\n  congr\n  ext1\n  exact H"},{"tailPos":20561,"headPos":20559,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\n⊢ c = c' ↔ c.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"by"},{"tailPos":20773,"headPos":20559,"goalsBefore":["n : ℕ\nc✝ : Composition n\nc c' : (n : ℕ) × Composition n\n⊢ c = c' ↔ c.snd.blocks = c'.snd.blocks"],"goalsAfter":[],"content":"by\n  refine' ⟨fun H => by rw [H], fun H => _⟩\n  rcases c with ⟨n, c⟩\n  rcases c' with ⟨n', c'⟩\n  have : n = n' := by rw [← c.blocks_sum, ← c'.blocks_sum, H]\n  induction this\n  congr\n  ext1\n  exact H"},{"tailPos":21072,"headPos":21038,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn i : ℕ\nhi : i ∈ replicate n 1\n⊢ 0 < i"],"goalsAfter":[],"content":"simp [List.eq_of_mem_replicate hi]"},{"tailPos":21037,"headPos":21035,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn i : ℕ\nhi : i ∈ replicate n 1\n⊢ 0 < i"],"goalsAfter":[],"content":"by"},{"tailPos":21072,"headPos":21035,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn i : ℕ\nhi : i ∈ replicate n 1\n⊢ 0 < i"],"goalsAfter":[],"content":"by simp [List.eq_of_mem_replicate hi]"},{"tailPos":21081,"headPos":21077,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\n⊢ sum (replicate n 1) = n"],"goalsAfter":[],"content":"simp only [sum_replicate, smul_eq_mul, mul_one]"},{"tailPos":21076,"headPos":21074,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\n⊢ sum (replicate n 1) = n"],"goalsAfter":[],"content":"by"},{"tailPos":21081,"headPos":21074,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\n⊢ sum (replicate n 1) = n"],"goalsAfter":[],"content":"by simp"},{"tailPos":21745,"headPos":21683,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\ni : Fin (length (ones n))\n⊢ blocksFun (ones n) i = 1"],"goalsAfter":[],"content":"simp only [blocksFun, ones, blocks, i.2, List.nthLe_replicate]"},{"tailPos":21680,"headPos":21678,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\ni : Fin (length (ones n))\n⊢ blocksFun (ones n) i = 1"],"goalsAfter":[],"content":"by"},{"tailPos":21745,"headPos":21678,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\ni : Fin (length (ones n))\n⊢ blocksFun (ones n) i = 1"],"goalsAfter":[],"content":"by\n  simp only [blocksFun, ones, blocks, i.2, List.nthLe_replicate]"},{"tailPos":21943,"headPos":21899,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn i : ℕ\n⊢ sizeUpTo (ones n) i = min i n"],"goalsAfter":[],"content":"simp [sizeUpTo, ones_blocks, take_replicate]"},{"tailPos":21896,"headPos":21894,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn i : ℕ\n⊢ sizeUpTo (ones n) i = min i n"],"goalsAfter":[],"content":"by"},{"tailPos":21943,"headPos":21894,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn i : ℕ\n⊢ sizeUpTo (ones n) i = min i n"],"goalsAfter":[],"content":"by\n  simp [sizeUpTo, ones_blocks, take_replicate]"},{"tailPos":22192,"headPos":22189,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length (ones n))\nh : 0 < blocksFun (ones n) i\n⊢ ↑(embedding (ones n) i) { val := 0, isLt := h } = { val := ↑i, isLt := (_ : ↑i < n) }"],"goalsAfter":["case h\nn : ℕ\nc : Composition n\ni : Fin (length (ones n))\nh : 0 < blocksFun (ones n) i\n⊢ ↑(↑(embedding (ones n) i) { val := 0, isLt := h }) = ↑{ val := ↑i, isLt := (_ : ↑i < n) }"],"content":"ext"},{"tailPos":22213,"headPos":22195,"goalsBefore":["case h\nn : ℕ\nc : Composition n\ni : Fin (length (ones n))\nh : 0 < blocksFun (ones n) i\n⊢ ↑(↑(embedding (ones n) i) { val := 0, isLt := h }) = ↑{ val := ↑i, isLt := (_ : ↑i < n) }"],"goalsAfter":[],"content":"simpa only [coe_embedding, ones_sizeUpTo, ge_iff_le, add_zero, min_eq_left_iff, ones_length] using i.2.le"},{"tailPos":22213,"headPos":22189,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length (ones n))\nh : 0 < blocksFun (ones n) i\n⊢ ↑(embedding (ones n) i) { val := 0, isLt := h } = { val := ↑i, isLt := (_ : ↑i < n) }"],"goalsAfter":[],"content":"ext\n  simpa using i.2.le"},{"tailPos":22186,"headPos":22184,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length (ones n))\nh : 0 < blocksFun (ones n) i\n⊢ ↑(embedding (ones n) i) { val := 0, isLt := h } = { val := ↑i, isLt := (_ : ↑i < n) }"],"goalsAfter":[],"content":"by"},{"tailPos":22213,"headPos":22184,"goalsBefore":["n : ℕ\nc : Composition n\ni : Fin (length (ones n))\nh : 0 < blocksFun (ones n) i\n⊢ ↑(embedding (ones n) i) { val := 0, isLt := h } = { val := ↑i, isLt := (_ : ↑i < n) }"],"goalsAfter":[],"content":"by\n  ext\n  simpa using i.2.le"},{"tailPos":22378,"headPos":22367,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"goalsAfter":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → ∀ (i : ℕ), i ∈ c.blocks → i = 1","case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"content":"constructor"},{"tailPos":22383,"headPos":22381,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → ∀ (i : ℕ), i ∈ c.blocks → i = 1","case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"goalsAfter":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"content":"·"},{"tailPos":22394,"headPos":22384,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\n⊢ ∀ (i : ℕ), i ∈ (ones n).blocks → i = 1"],"content":"rintro rfl"},{"tailPos":22433,"headPos":22399,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\n⊢ ∀ (i : ℕ), i ∈ (ones n).blocks → i = 1"],"goalsAfter":[],"content":"exact fun i => eq_of_mem_replicate"},{"tailPos":22433,"headPos":22384,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"goalsAfter":[],"content":"rintro rfl\n    exact fun i => eq_of_mem_replicate"},{"tailPos":22433,"headPos":22381,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → ∀ (i : ℕ), i ∈ c.blocks → i = 1","case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"content":"· rintro rfl\n    exact fun i => eq_of_mem_replicate"},{"tailPos":22438,"headPos":22436,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"content":"·"},{"tailPos":22446,"headPos":22439,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\n⊢ c = ones n"],"content":"intro H"},{"tailPos":22455,"headPos":22451,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\n⊢ c = ones n"],"goalsAfter":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\n⊢ c.blocks = (ones n).blocks"],"content":"ext1"},{"tailPos":22532,"headPos":22460,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\n⊢ c.blocks = (ones n).blocks"],"goalsAfter":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ c.blocks = (ones n).blocks"],"content":"have A : c.blocks = replicate c.blocks.length 1 := eq_replicate_of_mem H"},{"tailPos":22609,"headPos":22592,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n| n"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n| sum c.blocks"],"content":"← c.blocks_sum,"},{"tailPos":22611,"headPos":22610,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n| sum c.blocks"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n| sum (replicate (List.length c.blocks) 1)"],"content":"A"},{"tailPos":22612,"headPos":22588,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n| n"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n| sum (replicate (List.length c.blocks) 1)"],"content":"rw [← c.blocks_sum, A]"},{"tailPos":22612,"headPos":22576,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ List.length c.blocks = n"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ List.length c.blocks = sum (replicate (List.length c.blocks) 1)"],"content":"conv_rhs => rw [← c.blocks_sum, A]"},{"tailPos":22623,"headPos":22619,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ List.length c.blocks = sum (replicate (List.length c.blocks) 1)"],"goalsAfter":[],"content":"simp only [sum_replicate, smul_eq_mul, mul_one]"},{"tailPos":22623,"headPos":22576,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ List.length c.blocks = n"],"goalsAfter":[],"content":"conv_rhs => rw [← c.blocks_sum, A]\n      simp"},{"tailPos":22569,"headPos":22567,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ List.length c.blocks = n"],"goalsAfter":[],"content":"by"},{"tailPos":22623,"headPos":22567,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ List.length c.blocks = n"],"goalsAfter":[],"content":"by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp"},{"tailPos":22623,"headPos":22537,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\n⊢ c.blocks = (ones n).blocks"],"goalsAfter":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ c.blocks = (ones n).blocks"],"content":"have : c.blocks.length = n := by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp"},{"tailPos":22634,"headPos":22632,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ c.blocks = (ones n).blocks"],"goalsAfter":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ replicate (List.length c.blocks) 1 = (ones n).blocks"],"content":"A,"},{"tailPos":22640,"headPos":22635,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ replicate (List.length c.blocks) 1 = (ones n).blocks"],"goalsAfter":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ replicate n 1 = (ones n).blocks"],"content":"this,"},{"tailPos":22652,"headPos":22641,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ replicate n 1 = (ones n).blocks"],"goalsAfter":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ replicate n 1 = replicate n 1"],"content":"ones_blocks"},{"tailPos":22653,"headPos":22652,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ replicate n 1 = replicate n 1"],"goalsAfter":[],"content":"]"},{"tailPos":22653,"headPos":22628,"goalsBefore":["case mpr.blocks\nn : ℕ\nc✝ c : Composition n\nH : ∀ (i : ℕ), i ∈ c.blocks → i = 1\nA : c.blocks = replicate (List.length c.blocks) 1\nthis : List.length c.blocks = n\n⊢ c.blocks = (ones n).blocks"],"goalsAfter":[],"content":"rw [A, this, ones_blocks]"},{"tailPos":22653,"headPos":22439,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"goalsAfter":[],"content":"intro H\n    ext1\n    have A : c.blocks = replicate c.blocks.length 1 := eq_replicate_of_mem H\n    have : c.blocks.length = n := by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp\n    rw [A, this, ones_blocks]"},{"tailPos":22653,"headPos":22436,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ (∀ (i : ℕ), i ∈ c.blocks → i = 1) → c = ones n"],"goalsAfter":[],"content":"· intro H\n    ext1\n    have A : c.blocks = replicate c.blocks.length 1 := eq_replicate_of_mem H\n    have : c.blocks.length = n := by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp\n    rw [A, this, ones_blocks]"},{"tailPos":22653,"headPos":22367,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"goalsAfter":[],"content":"constructor\n  · rintro rfl\n    exact fun i => eq_of_mem_replicate\n  · intro H\n    ext1\n    have A : c.blocks = replicate c.blocks.length 1 := eq_replicate_of_mem H\n    have : c.blocks.length = n := by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp\n    rw [A, this, ones_blocks]"},{"tailPos":22364,"headPos":22362,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"goalsAfter":[],"content":"by"},{"tailPos":22653,"headPos":22362,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ ∀ (i : ℕ), i ∈ c.blocks → i = 1"],"goalsAfter":[],"content":"by\n  constructor\n  · rintro rfl\n    exact fun i => eq_of_mem_replicate\n  · intro H\n    ext1\n    have A : c.blocks = replicate c.blocks.length 1 := eq_replicate_of_mem H\n    have : c.blocks.length = n := by\n      conv_rhs => rw [← c.blocks_sum, A]\n      simp\n    rw [A, this, ones_blocks]"},{"tailPos":22842,"headPos":22803,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c ≠ ones n ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\n⊢ (¬∀ (i : ℕ), i ∈ c.blocks → i = 1) ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"content":"refine' (not_congr eq_ones_iff).trans _"},{"tailPos":22950,"headPos":22908,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nj : ℕ\nhj : j ∈ c.blocks\n⊢ j = 1 ↔ j ≤ 1"],"goalsAfter":[],"content":"simp [le_antisymm_iff, c.one_le_blocks hj]"},{"tailPos":22907,"headPos":22905,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nj : ℕ\nhj : j ∈ c.blocks\n⊢ j = 1 ↔ j ≤ 1"],"goalsAfter":[],"content":"by"},{"tailPos":22950,"headPos":22905,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nj : ℕ\nhj : j ∈ c.blocks\n⊢ j = 1 ↔ j ≤ 1"],"goalsAfter":[],"content":"by simp [le_antisymm_iff, c.one_le_blocks hj]"},{"tailPos":22950,"headPos":22845,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ (¬∀ (i : ℕ), i ∈ c.blocks → i = 1) ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\nthis : ∀ (j : ℕ), j ∈ c.blocks → (j = 1 ↔ j ≤ 1)\n⊢ (¬∀ (i : ℕ), i ∈ c.blocks → i = 1) ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"content":"have : ∀ j ∈ c.blocks, j = 1 ↔ j ≤ 1 := fun j hj => by simp [le_antisymm_iff, c.one_le_blocks hj]"},{"tailPos":22999,"headPos":22953,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nthis : ∀ (j : ℕ), j ∈ c.blocks → (j = 1 ↔ j ≤ 1)\n⊢ (¬∀ (i : ℕ), i ∈ c.blocks → i = 1) ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"goalsAfter":[],"content":"simp (config := { contextual := true }) [this]"},{"tailPos":22999,"headPos":22803,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c ≠ ones n ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"goalsAfter":[],"content":"refine' (not_congr eq_ones_iff).trans _\n  have : ∀ j ∈ c.blocks, j = 1 ↔ j ≤ 1 := fun j hj => by simp [le_antisymm_iff, c.one_le_blocks hj]\n  simp (config := { contextual := true }) [this]"},{"tailPos":22800,"headPos":22798,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c ≠ ones n ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"goalsAfter":[],"content":"by"},{"tailPos":22999,"headPos":22798,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c ≠ ones n ↔ ∃ i, i ∈ c.blocks ∧ 1 < i"],"goalsAfter":[],"content":"by\n  refine' (not_congr eq_ones_iff).trans _\n  have : ∀ j ∈ c.blocks, j = 1 ↔ j ≤ 1 := fun j hj => by simp [le_antisymm_iff, c.one_le_blocks hj]\n  simp (config := { contextual := true }) [this]"},{"tailPos":23152,"headPos":23141,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ length c = n"],"goalsAfter":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → length c = n","case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"content":"constructor"},{"tailPos":23157,"headPos":23155,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → length c = n","case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"goalsAfter":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → length c = n"],"content":"·"},{"tailPos":23168,"headPos":23158,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → length c = n"],"goalsAfter":["case mp\nn : ℕ\nc : Composition n\n⊢ length (ones n) = n"],"content":"rintro rfl"},{"tailPos":23192,"headPos":23173,"goalsBefore":["case mp\nn : ℕ\nc : Composition n\n⊢ length (ones n) = n"],"goalsAfter":[],"content":"exact ones_length n"},{"tailPos":23192,"headPos":23158,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → length c = n"],"goalsAfter":[],"content":"rintro rfl\n    exact ones_length n"},{"tailPos":23192,"headPos":23155,"goalsBefore":["case mp\nn : ℕ\nc✝ c : Composition n\n⊢ c = ones n → length c = n","case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"content":"· rintro rfl\n    exact ones_length n"},{"tailPos":23197,"headPos":23195,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"content":"·"},{"tailPos":23208,"headPos":23198,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ ¬c = ones n → ¬length c = n"],"content":"contrapose"},{"tailPos":23229,"headPos":23213,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ ¬c = ones n → ¬length c = n"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ False"],"content":"intro H length_n"},{"tailPos":23251,"headPos":23234,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ False"],"goalsAfter":["case mpr\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ n < n"],"content":"apply lt_irrefl n"},{"tailPos":23316,"headPos":23301,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ n = ∑ i : Fin (length c), 1"],"goalsAfter":[],"content":"simp [length_n]"},{"tailPos":23300,"headPos":23298,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ n = ∑ i : Fin (length c), 1"],"goalsAfter":[],"content":"by"},{"tailPos":23316,"headPos":23298,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ n = ∑ i : Fin (length c), 1"],"goalsAfter":[],"content":"by simp [length_n]"},{"tailPos":23378,"headPos":23377,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"{"},{"tailPos":23462,"headPos":23387,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ c.blocks\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H"},{"tailPos":23494,"headPos":23475,"goalsBefore":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ c.blocks\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ ofFn (blocksFun c)\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"← ofFn_blocksFun,"},{"tailPos":23516,"headPos":23495,"goalsBefore":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ ofFn (blocksFun c)\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ Set.range (blocksFun c)\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"mem_ofFn c.blocksFun,"},{"tailPos":23530,"headPos":23517,"goalsBefore":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ Set.range (blocksFun c)\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : ∃ y, blocksFun c y = i\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"Set.mem_range"},{"tailPos":23531,"headPos":23530,"goalsBefore":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : ∃ y, blocksFun c y = i\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : ∃ y, blocksFun c y = i\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"]"},{"tailPos":23537,"headPos":23471,"goalsBefore":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : i ∈ c.blocks\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : ∃ y, blocksFun c y = i\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi"},{"tailPos":23605,"headPos":23546,"goalsBefore":["case intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nhi : ∃ y, blocksFun c y = i\ni_blocks : 1 < i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\ni_blocks : 1 < i\nj : Fin (length c)\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi"},{"tailPos":23624,"headPos":23618,"goalsBefore":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\ni_blocks : 1 < i\nj : Fin (length c)\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"← hj"},{"tailPos":23625,"headPos":23624,"goalsBefore":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"]"},{"tailPos":23637,"headPos":23614,"goalsBefore":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\ni_blocks : 1 < i\nj : Fin (length c)\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"content":"rw [← hj] at i_blocks"},{"tailPos":23701,"headPos":23685,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni✝ : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i✝\ni : Fin (length c)\nx✝ : i ∈ Finset.univ\n⊢ 1 ≤ blocksFun c i"],"goalsAfter":[],"content":"simp [blocksFun]"},{"tailPos":23684,"headPos":23682,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni✝ : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i✝\ni : Fin (length c)\nx✝ : i ∈ Finset.univ\n⊢ 1 ≤ blocksFun c i"],"goalsAfter":[],"content":"by"},{"tailPos":23701,"headPos":23682,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni✝ : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i✝\ni : Fin (length c)\nx✝ : i ∈ Finset.univ\n⊢ 1 ≤ blocksFun c i"],"goalsAfter":[],"content":"by simp [blocksFun]"},{"tailPos":23739,"headPos":23646,"goalsBefore":["case intro.intro.intro\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\ni : ℕ\nj : Fin (length c)\ni_blocks : 1 < blocksFun c j\nhj : blocksFun c j = i\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":[],"content":"exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩"},{"tailPos":23749,"headPos":23377,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":[],"content":"{\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }"},{"tailPos":23368,"headPos":23366,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":[],"content":"by"},{"tailPos":23749,"headPos":23366,"goalsBefore":["n : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ ∑ i : Fin (length c), 1 < ∑ i : Fin (length c), blocksFun c i"],"goalsAfter":[],"content":"by\n        {\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }"},{"tailPos":23780,"headPos":23256,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\nH : ¬c = ones n\nlength_n : length c = n\n⊢ n < n"],"goalsAfter":[],"content":"calc\n      n = ∑ i : Fin c.length, 1 := by simp [length_n]\n      _ < ∑ i : Fin c.length, c.blocksFun i := by\n        {\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }\n      _ = n := c.sum_blocksFun"},{"tailPos":23780,"headPos":23198,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"goalsAfter":[],"content":"contrapose\n    intro H length_n\n    apply lt_irrefl n\n    calc\n      n = ∑ i : Fin c.length, 1 := by simp [length_n]\n      _ < ∑ i : Fin c.length, c.blocksFun i := by\n        {\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }\n      _ = n := c.sum_blocksFun"},{"tailPos":23780,"headPos":23195,"goalsBefore":["case mpr\nn : ℕ\nc✝ c : Composition n\n⊢ length c = n → c = ones n"],"goalsAfter":[],"content":"· contrapose\n    intro H length_n\n    apply lt_irrefl n\n    calc\n      n = ∑ i : Fin c.length, 1 := by simp [length_n]\n      _ < ∑ i : Fin c.length, c.blocksFun i := by\n        {\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }\n      _ = n := c.sum_blocksFun"},{"tailPos":23780,"headPos":23141,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ length c = n"],"goalsAfter":[],"content":"constructor\n  · rintro rfl\n    exact ones_length n\n  · contrapose\n    intro H length_n\n    apply lt_irrefl n\n    calc\n      n = ∑ i : Fin c.length, 1 := by simp [length_n]\n      _ < ∑ i : Fin c.length, c.blocksFun i := by\n        {\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }\n      _ = n := c.sum_blocksFun"},{"tailPos":23138,"headPos":23136,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ length c = n"],"goalsAfter":[],"content":"by"},{"tailPos":23780,"headPos":23136,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ length c = n"],"goalsAfter":[],"content":"by\n  constructor\n  · rintro rfl\n    exact ones_length n\n  · contrapose\n    intro H length_n\n    apply lt_irrefl n\n    calc\n      n = ∑ i : Fin c.length, 1 := by simp [length_n]\n      _ < ∑ i : Fin c.length, c.blocksFun i := by\n        {\n        obtain ⟨i, hi, i_blocks⟩ : ∃ i ∈ c.blocks, 1 < i := ne_ones_iff.1 H\n        rw [← ofFn_blocksFun, mem_ofFn c.blocksFun, Set.mem_range] at hi\n        obtain ⟨j : Fin c.length, hj : c.blocksFun j = i⟩ := hi\n        rw [← hj] at i_blocks\n        exact Finset.sum_lt_sum (fun i _ => by simp [blocksFun]) ⟨j, Finset.mem_univ _, i_blocks⟩\n        }\n      _ = n := c.sum_blocksFun"},{"tailPos":23996,"headPos":23941,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ n ≤ length c"],"goalsAfter":[],"content":"simp [eq_ones_iff_length, le_antisymm_iff, c.length_le]"},{"tailPos":23938,"headPos":23936,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ n ≤ length c"],"goalsAfter":[],"content":"by"},{"tailPos":23996,"headPos":23936,"goalsBefore":["n : ℕ\nc✝ c : Composition n\n⊢ c = ones n ↔ n ≤ length c"],"goalsAfter":[],"content":"by\n  simp [eq_ones_iff_length, le_antisymm_iff, c.length_le]"},{"tailPos":24254,"headPos":24246,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\n⊢ ∀ {i : ℕ}, i ∈ [n] → 0 < i"],"goalsAfter":[],"content":"simp [h]"},{"tailPos":24245,"headPos":24243,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\n⊢ ∀ {i : ℕ}, i ∈ [n] → 0 < i"],"goalsAfter":[],"content":"by"},{"tailPos":24254,"headPos":24243,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\n⊢ ∀ {i : ℕ}, i ∈ [n] → 0 < i"],"goalsAfter":[],"content":"by simp [h]"},{"tailPos":24263,"headPos":24259,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\n⊢ sum [n] = n"],"goalsAfter":[],"content":"simp only [sum_cons, sum_nil, add_zero]"},{"tailPos":24258,"headPos":24256,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\n⊢ sum [n] = n"],"goalsAfter":[],"content":"by"},{"tailPos":24263,"headPos":24256,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\n⊢ sum [n] = n"],"goalsAfter":[],"content":"by simp"},{"tailPos":24772,"headPos":24735,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin (length (single n h))\n⊢ blocksFun (single n h) i = n"],"goalsAfter":[],"content":"simp [blocksFun, single, blocks, i.2]"},{"tailPos":24734,"headPos":24732,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin (length (single n h))\n⊢ blocksFun (single n h) i = n"],"goalsAfter":[],"content":"by"},{"tailPos":24772,"headPos":24732,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin (length (single n h))\n⊢ blocksFun (single n h) i = n"],"goalsAfter":[],"content":"by simp [blocksFun, single, blocks, i.2]"},{"tailPos":24967,"headPos":24964,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin n\n⊢ ↑(embedding (single n h) 0) i = i"],"goalsAfter":["case h\nn✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin n\n⊢ ↑(↑(embedding (single n h) 0) i) = ↑i"],"content":"ext"},{"tailPos":24974,"headPos":24970,"goalsBefore":["case h\nn✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin n\n⊢ ↑(↑(embedding (single n h) 0) i) = ↑i"],"goalsAfter":[],"content":"simp only [coe_embedding, single_length, Fin.coe_fin_one, sizeUpTo_zero, zero_add]"},{"tailPos":24974,"headPos":24964,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin n\n⊢ ↑(embedding (single n h) 0) i = i"],"goalsAfter":[],"content":"ext\n  simp"},{"tailPos":24961,"headPos":24959,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin n\n⊢ ↑(embedding (single n h) 0) i = i"],"goalsAfter":[],"content":"by"},{"tailPos":24974,"headPos":24959,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nh : 0 < n\ni : Fin n\n⊢ ↑(embedding (single n h) 0) i = i"],"goalsAfter":[],"content":"by\n  ext\n  simp"},{"tailPos":25169,"headPos":25158,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h ↔ length c = 1"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h → length c = 1","case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"content":"constructor"},{"tailPos":25174,"headPos":25172,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h → length c = 1","case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h → length c = 1"],"content":"·"},{"tailPos":25182,"headPos":25175,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h → length c = 1"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length c = 1"],"content":"intro H"},{"tailPos":25192,"headPos":25191,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length c = 1"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length (single n h) = 1"],"content":"H"},{"tailPos":25193,"headPos":25192,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length (single n h) = 1"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length (single n h) = 1"],"content":"]"},{"tailPos":25193,"headPos":25187,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length c = 1"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length (single n h) = 1"],"content":"rw [H]"},{"tailPos":25219,"headPos":25198,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : c = single n h\n⊢ length (single n h) = 1"],"goalsAfter":[],"content":"exact single_length h"},{"tailPos":25219,"headPos":25175,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h → length c = 1"],"goalsAfter":[],"content":"intro H\n    rw [H]\n    exact single_length h"},{"tailPos":25219,"headPos":25172,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h → length c = 1","case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"goalsAfter":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"content":"· intro H\n    rw [H]\n    exact single_length h"},{"tailPos":25224,"headPos":25222,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"goalsAfter":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"content":"·"},{"tailPos":25232,"headPos":25225,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"goalsAfter":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\n⊢ c = single n h"],"content":"intro H"},{"tailPos":25241,"headPos":25237,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\n⊢ c = single n h"],"goalsAfter":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\n⊢ c.blocks = (single n h).blocks"],"content":"ext1"},{"tailPos":25299,"headPos":25246,"goalsBefore":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\n⊢ c.blocks = (single n h).blocks"],"goalsAfter":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\n⊢ c.blocks = (single n h).blocks"],"content":"have A : c.blocks.length = 1 := H ▸ c.blocks_length"},{"tailPos":25345,"headPos":25304,"goalsBefore":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\n⊢ c.blocks = (single n h).blocks"],"goalsAfter":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum c.blocks = n\n⊢ c.blocks = (single n h).blocks"],"content":"have B : c.blocks.sum = n := c.blocks_sum"},{"tailPos":25377,"headPos":25354,"goalsBefore":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum c.blocks = n\n⊢ c.blocks = (single n h).blocks"],"goalsAfter":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = n\n⊢ [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = (single n h).blocks"],"content":"eq_cons_of_length_one A"},{"tailPos":25378,"headPos":25377,"goalsBefore":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = n\n⊢ [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = (single n h).blocks"],"goalsAfter":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = n\n⊢ [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = (single n h).blocks"],"content":"]"},{"tailPos":25386,"headPos":25350,"goalsBefore":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum c.blocks = n\n⊢ c.blocks = (single n h).blocks"],"goalsAfter":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = n\n⊢ [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = (single n h).blocks"],"content":"rw [eq_cons_of_length_one A] at B⊢"},{"tailPos":25420,"headPos":25391,"goalsBefore":["case mpr.blocks\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\nH : length c = 1\nA : List.length c.blocks = 1\nB : sum [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = n\n⊢ [nthLe c.blocks 0 (_ : 0 < List.length c.blocks)] = (single n h).blocks"],"goalsAfter":[],"content":"simpa only [single_blocks, cons.injEq, and_true, sum_cons, sum_nil, add_zero] using B"},{"tailPos":25420,"headPos":25225,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"goalsAfter":[],"content":"intro H\n    ext1\n    have A : c.blocks.length = 1 := H ▸ c.blocks_length\n    have B : c.blocks.sum = n := c.blocks_sum\n    rw [eq_cons_of_length_one A] at B⊢\n    simpa [single_blocks] using B"},{"tailPos":25420,"headPos":25222,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ length c = 1 → c = single n h"],"goalsAfter":[],"content":"· intro H\n    ext1\n    have A : c.blocks.length = 1 := H ▸ c.blocks_length\n    have B : c.blocks.sum = n := c.blocks_sum\n    rw [eq_cons_of_length_one A] at B⊢\n    simpa [single_blocks] using B"},{"tailPos":25420,"headPos":25158,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h ↔ length c = 1"],"goalsAfter":[],"content":"constructor\n  · intro H\n    rw [H]\n    exact single_length h\n  · intro H\n    ext1\n    have A : c.blocks.length = 1 := H ▸ c.blocks_length\n    have B : c.blocks.sum = n := c.blocks_sum\n    rw [eq_cons_of_length_one A] at B⊢\n    simpa [single_blocks] using B"},{"tailPos":25155,"headPos":25153,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h ↔ length c = 1"],"goalsAfter":[],"content":"by"},{"tailPos":25420,"headPos":25153,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nh : 0 < n\nc : Composition n\n⊢ c = single n h ↔ length c = 1"],"goalsAfter":[],"content":"by\n  constructor\n  · intro H\n    rw [H]\n    exact single_length h\n  · intro H\n    ext1\n    have A : c.blocks.length = 1 := H ▸ c.blocks_length\n    have B : c.blocks.sum = n := c.blocks_sum\n    rw [eq_cons_of_length_one A] at B⊢\n    simpa [single_blocks] using B"},{"tailPos":25640,"headPos":25625,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c ≠ single n hn ↔ ∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ ¬c ≠ single n hn ↔ ¬∀ (i : Fin (length c)), blocksFun c i < n"],"content":"← not_iff_not"},{"tailPos":25641,"headPos":25640,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ ¬c ≠ single n hn ↔ ¬∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ ¬c ≠ single n hn ↔ ¬∀ (i : Fin (length c)), blocksFun c i < n"],"content":"]"},{"tailPos":25641,"headPos":25621,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c ≠ single n hn ↔ ∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ ¬c ≠ single n hn ↔ ¬∀ (i : Fin (length c)), blocksFun c i < n"],"content":"rw [← not_iff_not]"},{"tailPos":25652,"headPos":25644,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ ¬c ≠ single n hn ↔ ¬∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn ↔ ∃ i, n ≤ blocksFun c i"],"content":"push_neg"},{"tailPos":25666,"headPos":25655,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn ↔ ∃ i, n ≤ blocksFun c i"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn → ∃ i, n ≤ blocksFun c i","case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"content":"constructor"},{"tailPos":25671,"headPos":25669,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn → ∃ i, n ≤ blocksFun c i","case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"goalsAfter":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn → ∃ i, n ≤ blocksFun c i"],"content":"·"},{"tailPos":25682,"headPos":25672,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn → ∃ i, n ≤ blocksFun c i"],"goalsAfter":["case mp\nn✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ ∃ i, n ≤ blocksFun (single n hn) i"],"content":"rintro rfl"},{"tailPos":25709,"headPos":25705,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ 0 < length (single n hn)"],"goalsAfter":[],"content":"simp only [single_length, zero_lt_one]"},{"tailPos":25704,"headPos":25702,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ 0 < length (single n hn)"],"goalsAfter":[],"content":"by"},{"tailPos":25709,"headPos":25702,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ 0 < length (single n hn)"],"goalsAfter":[],"content":"by simp"},{"tailPos":25721,"headPos":25717,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ n ≤ blocksFun (single n hn) { val := 0, isLt := (_ : 0 < 1) }"],"goalsAfter":[],"content":"simp only [single_length, single_blocksFun, le_refl]"},{"tailPos":25716,"headPos":25714,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ n ≤ blocksFun (single n hn) { val := 0, isLt := (_ : 0 < 1) }"],"goalsAfter":[],"content":"by"},{"tailPos":25721,"headPos":25714,"goalsBefore":["n✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ n ≤ blocksFun (single n hn) { val := 0, isLt := (_ : 0 < 1) }"],"goalsAfter":[],"content":"by simp"},{"tailPos":25724,"headPos":25687,"goalsBefore":["case mp\nn✝ : ℕ\nc : Composition n✝\nn : ℕ\nhn : 0 < n\n⊢ ∃ i, n ≤ blocksFun (single n hn) i"],"goalsAfter":[],"content":"exact ⟨⟨0, by simp⟩, by simp⟩"},{"tailPos":25724,"headPos":25672,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn → ∃ i, n ≤ blocksFun c i"],"goalsAfter":[],"content":"rintro rfl\n    exact ⟨⟨0, by simp⟩, by simp⟩"},{"tailPos":25724,"headPos":25669,"goalsBefore":["case mp\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c = single n hn → ∃ i, n ≤ blocksFun c i","case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"goalsAfter":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"content":"· rintro rfl\n    exact ⟨⟨0, by simp⟩, by simp⟩"},{"tailPos":25729,"headPos":25727,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"goalsAfter":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"content":"·"},{"tailPos":25748,"headPos":25730,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"goalsAfter":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ c = single n hn"],"content":"rintro ⟨i, hi⟩"},{"tailPos":25777,"headPos":25757,"goalsBefore":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ c = single n hn"],"goalsAfter":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ length c = 1"],"content":"eq_single_iff_length"},{"tailPos":25778,"headPos":25777,"goalsBefore":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ length c = 1"],"goalsAfter":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ length c = 1"],"content":"]"},{"tailPos":25778,"headPos":25753,"goalsBefore":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ c = single n hn"],"goalsAfter":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ length c = 1"],"content":"rw [eq_single_iff_length]"},{"tailPos":25837,"headPos":25830,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ ∀ (j : Fin (length c)), j = i"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\n⊢ j = i"],"content":"intro j"},{"tailPos":25856,"headPos":25844,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\n⊢ j = i"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ False"],"content":"by_contra ji"},{"tailPos":25901,"headPos":25863,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ False"],"goalsAfter":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ ∑ k : Fin (length c), blocksFun c k < ∑ k : Fin (length c), blocksFun c k"],"content":"apply lt_irrefl (∑ k, c.blocksFun k)"},{"tailPos":25999,"headPos":25968,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ ∑ k : Fin (length c), blocksFun c k ≤ blocksFun c i"],"goalsAfter":[],"content":"simp only [c.sum_blocksFun, hi]"},{"tailPos":25967,"headPos":25965,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ ∑ k : Fin (length c), blocksFun c k ≤ blocksFun c i"],"goalsAfter":[],"content":"by"},{"tailPos":25999,"headPos":25965,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ ∑ k : Fin (length c), blocksFun c k ≤ blocksFun c i"],"goalsAfter":[],"content":"by simp only [c.sum_blocksFun, hi]"},{"tailPos":26167,"headPos":25908,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nj : Fin (length c)\nji : ¬j = i\n⊢ ∑ k : Fin (length c), blocksFun c k < ∑ k : Fin (length c), blocksFun c k"],"goalsAfter":[],"content":"calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _"},{"tailPos":26167,"headPos":25830,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ ∀ (j : Fin (length c)), j = i"],"goalsAfter":[],"content":"intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _"},{"tailPos":25823,"headPos":25821,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ ∀ (j : Fin (length c)), j = i"],"goalsAfter":[],"content":"by"},{"tailPos":26167,"headPos":25821,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ ∀ (j : Fin (length c)), j = i"],"goalsAfter":[],"content":"by\n      intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _"},{"tailPos":26167,"headPos":25783,"goalsBefore":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\n⊢ length c = 1"],"goalsAfter":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nthis : ∀ (j : Fin (length c)), j = i\n⊢ length c = 1"],"content":"have : ∀ j : Fin c.length, j = i := by\n      intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _"},{"tailPos":26222,"headPos":26173,"goalsBefore":["case mpr.intro\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\ni : Fin (length c)\nhi : n ≤ blocksFun c i\nthis : ∀ (j : Fin (length c)), j = i\n⊢ length c = 1"],"goalsAfter":[],"content":"simpa only [Fintype.card_fin] using Fintype.card_eq_one_of_forall_eq this"},{"tailPos":26222,"headPos":25730,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"goalsAfter":[],"content":"rintro ⟨i, hi⟩\n    rw [eq_single_iff_length]\n    have : ∀ j : Fin c.length, j = i := by\n      intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _\n\n    simpa using Fintype.card_eq_one_of_forall_eq this"},{"tailPos":26222,"headPos":25727,"goalsBefore":["case mpr\nn✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ (∃ i, n ≤ blocksFun c i) → c = single n hn"],"goalsAfter":[],"content":"· rintro ⟨i, hi⟩\n    rw [eq_single_iff_length]\n    have : ∀ j : Fin c.length, j = i := by\n      intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _\n\n    simpa using Fintype.card_eq_one_of_forall_eq this"},{"tailPos":26222,"headPos":25621,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c ≠ single n hn ↔ ∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":[],"content":"rw [← not_iff_not]\n  push_neg\n  constructor\n  · rintro rfl\n    exact ⟨⟨0, by simp⟩, by simp⟩\n  · rintro ⟨i, hi⟩\n    rw [eq_single_iff_length]\n    have : ∀ j : Fin c.length, j = i := by\n      intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _\n\n    simpa using Fintype.card_eq_one_of_forall_eq this"},{"tailPos":25618,"headPos":25616,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c ≠ single n hn ↔ ∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":[],"content":"by"},{"tailPos":26222,"headPos":25616,"goalsBefore":["n✝ : ℕ\nc✝ : Composition n✝\nn : ℕ\nhn : 0 < n\nc : Composition n\n⊢ c ≠ single n hn ↔ ∀ (i : Fin (length c)), blocksFun c i < n"],"goalsAfter":[],"content":"by\n  rw [← not_iff_not]\n  push_neg\n  constructor\n  · rintro rfl\n    exact ⟨⟨0, by simp⟩, by simp⟩\n  · rintro ⟨i, hi⟩\n    rw [eq_single_iff_length]\n    have : ∀ j : Fin c.length, j = i := by\n      intro j\n      by_contra ji\n      apply lt_irrefl (∑ k, c.blocksFun k)\n      calc\n        (∑ k, c.blocksFun k) ≤ c.blocksFun i := by simp only [c.sum_blocksFun, hi]\n        _ < ∑ k, c.blocksFun k :=\n          Finset.single_lt_sum ji (Finset.mem_univ _) (Finset.mem_univ _) (c.one_le_blocksFun j)\n            fun _ _ _ => zero_le _\n\n    simpa using Fintype.card_eq_one_of_forall_eq this"},{"tailPos":28051,"headPos":28022,"goalsBefore":["n✝ : ℕ\nα : Type u_1\nl : List α\nn : ℕ\nns : List ℕ\n⊢ splitWrtCompositionAux l (n :: ns) = take n l :: splitWrtCompositionAux (drop n l) ns"],"goalsAfter":[],"content":"simp [splitWrtCompositionAux]"},{"tailPos":28019,"headPos":28017,"goalsBefore":["n✝ : ℕ\nα : Type u_1\nl : List α\nn : ℕ\nns : List ℕ\n⊢ splitWrtCompositionAux l (n :: ns) = take n l :: splitWrtCompositionAux (drop n l) ns"],"goalsAfter":[],"content":"by"},{"tailPos":28051,"headPos":28017,"goalsBefore":["n✝ : ℕ\nα : Type u_1\nl : List α\nn : ℕ\nns : List ℕ\n⊢ splitWrtCompositionAux l (n :: ns) = take n l :: splitWrtCompositionAux (drop n l) ns"],"goalsAfter":[],"content":"by\n  simp [splitWrtCompositionAux]"},{"tailPos":28278,"headPos":28251,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\n⊢ length (splitWrtCompositionAux l ns) = length ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\n⊢ length (splitWrtCompositionAux l []) = length []","case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"content":"induction ns generalizing l"},{"tailPos":28284,"headPos":28283,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\n⊢ length (splitWrtCompositionAux l []) = length []","case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\n⊢ length (splitWrtCompositionAux l []) = length []"],"content":"."},{"tailPos":28317,"headPos":28285,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\n⊢ length (splitWrtCompositionAux l []) = length []"],"goalsAfter":[],"content":"simp [splitWrtCompositionAux, *]"},{"tailPos":28317,"headPos":28283,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\n⊢ length (splitWrtCompositionAux l []) = length []","case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"goalsAfter":["case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"content":". simp [splitWrtCompositionAux, *]"},{"tailPos":28323,"headPos":28322,"goalsBefore":["case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"goalsAfter":["case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"content":"."},{"tailPos":28332,"headPos":28324,"goalsBefore":["case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":28332,"headPos":28322,"goalsBefore":["case cons\nn : ℕ\nα : Type u_1\nhead✝ : ℕ\ntail✝ : List ℕ\ntail_ih✝ : ∀ (l : List α), length (splitWrtCompositionAux l tail✝) = length tail✝\nl : List α\n⊢ length (splitWrtCompositionAux l (head✝ :: tail✝)) = length (head✝ :: tail✝)"],"goalsAfter":[],"content":". simp [*]"},{"tailPos":28332,"headPos":28251,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\n⊢ length (splitWrtCompositionAux l ns) = length ns"],"goalsAfter":[],"content":"induction ns generalizing l\n    . simp [splitWrtCompositionAux, *]\n    . simp [*]"},{"tailPos":28246,"headPos":28244,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\n⊢ length (splitWrtCompositionAux l ns) = length ns"],"goalsAfter":[],"content":"by"},{"tailPos":28332,"headPos":28244,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\n⊢ length (splitWrtCompositionAux l ns) = length ns"],"goalsAfter":[],"content":"by\n    induction ns generalizing l\n    . simp [splitWrtCompositionAux, *]\n    . simp [*]"},{"tailPos":28948,"headPos":28922,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] ≤ length l → map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\n⊢ ∀ {l : List α}, sum (n :: ns) ≤ length l → map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"induction' ns with n ns IH"},{"tailPos":28952,"headPos":28949,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] ≤ length l → map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\n⊢ ∀ {l : List α}, sum (n :: ns) ≤ length l → map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] ≤ length l → map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\n⊢ ∀ {l : List α}, sum (n :: ns) ≤ length l → map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"<;>"},{"tailPos":28962,"headPos":28953,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] ≤ length l → map length (splitWrtCompositionAux l []) = []"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] ≤ length l\n⊢ map length (splitWrtCompositionAux l []) = []"],"content":"intro l h"},{"tailPos":28962,"headPos":28953,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\n⊢ ∀ {l : List α}, sum (n :: ns) ≤ length l → map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : sum (n :: ns) ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"intro l h"},{"tailPos":28962,"headPos":28922,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] ≤ length l\n⊢ map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : sum (n :: ns) ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"induction' ns with n ns IH <;> intro l h"},{"tailPos":28966,"headPos":28963,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] ≤ length l\n⊢ map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : sum (n :: ns) ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] ≤ length l\n⊢ map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : sum (n :: ns) ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"<;>"},{"tailPos":28976,"headPos":28967,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] ≤ length l\n⊢ map length (splitWrtCompositionAux l []) = []"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : True\n⊢ map length (splitWrtCompositionAux l []) = []"],"content":"simp at h"},{"tailPos":28976,"headPos":28967,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : sum (n :: ns) ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"simp at h"},{"tailPos":28976,"headPos":28922,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : True\n⊢ map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"induction' ns with n ns IH <;> intro l h <;> simp at h"},{"tailPos":28980,"headPos":28979,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : True\n⊢ map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : True\n⊢ map length (splitWrtCompositionAux l []) = []"],"content":"."},{"tailPos":28985,"headPos":28981,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : True\n⊢ map length (splitWrtCompositionAux l []) = []"],"goalsAfter":[],"content":"simp only [map]"},{"tailPos":28985,"headPos":28979,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : True\n⊢ map length (splitWrtCompositionAux l []) = []","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":". simp"},{"tailPos":29029,"headPos":28988,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"content":"have := le_trans (Nat.le_add_right _ _) h"},{"tailPos":29077,"headPos":29032,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ map length (splitWrtCompositionAux l (n :: ns)) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ map length (take n l :: splitWrtCompositionAux (drop n l) ns) = n :: ns"],"content":"simp only [splitWrtCompositionAux_cons, this]"},{"tailPos":29079,"headPos":29078,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ map length (take n l :: splitWrtCompositionAux (drop n l) ns) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ map length (take n l :: splitWrtCompositionAux (drop n l) ns) = n :: ns"],"content":";"},{"tailPos":29085,"headPos":29080,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ map length (take n l :: splitWrtCompositionAux (drop n l) ns) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ length (take n l) :: map length (splitWrtCompositionAux (drop n l) ns) = n :: ns"],"content":"dsimp only [_private.Std.Data.List.Init.Lemmas.0.List.map._eq_2]"},{"tailPos":29104,"headPos":29092,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ length (take n l) :: map length (splitWrtCompositionAux (drop n l) ns) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: map length (splitWrtCompositionAux (drop n l) ns) = n :: ns"],"content":"length_take,"},{"tailPos":29107,"headPos":29105,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: map length (splitWrtCompositionAux (drop n l) ns) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"content":"IH"},{"tailPos":29108,"headPos":29107,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"content":"]"},{"tailPos":29108,"headPos":29088,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ length (take n l) :: map length (splitWrtCompositionAux (drop n l) ns) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"content":"rw [length_take, IH]"},{"tailPos":29112,"headPos":29109,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"content":"<;>"},{"tailPos":29131,"headPos":29113,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ min n (length l) :: ns = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ n ≤ length l"],"content":"simp [length_drop]"},{"tailPos":29131,"headPos":29113,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"content":"simp [length_drop]"},{"tailPos":29131,"headPos":29088,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ length (take n l) :: map length (splitWrtCompositionAux (drop n l) ns) = n :: ns"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ n ≤ length l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"content":"rw [length_take, IH] <;> simp [length_drop]"},{"tailPos":29135,"headPos":29134,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ n ≤ length l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ n ≤ length l"],"content":"."},{"tailPos":29146,"headPos":29136,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ n ≤ length l"],"goalsAfter":[],"content":"assumption"},{"tailPos":29146,"headPos":29134,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ n ≤ length l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"content":". assumption"},{"tailPos":29150,"headPos":29149,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"content":"."},{"tailPos":29181,"headPos":29151,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"goalsAfter":[],"content":"exact le_tsub_of_add_le_left h"},{"tailPos":29181,"headPos":29149,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns\nl : List α\nh : n + sum ns ≤ length l\nthis : n ≤ length l\n⊢ sum ns ≤ length l - n"],"goalsAfter":[],"content":". exact le_tsub_of_add_le_left h"},{"tailPos":29181,"headPos":28922,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns"],"goalsAfter":[],"content":"induction' ns with n ns IH <;> intro l h <;> simp at h\n  . simp\n  have := le_trans (Nat.le_add_right _ _) h\n  simp only [splitWrtCompositionAux_cons, this] ; dsimp\n  rw [length_take, IH] <;> simp [length_drop]\n  . assumption\n  . exact le_tsub_of_add_le_left h"},{"tailPos":28919,"headPos":28917,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns"],"goalsAfter":[],"content":"by"},{"tailPos":29181,"headPos":28917,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns ≤ length l → map length (splitWrtCompositionAux l ns) = ns"],"goalsAfter":[],"content":"by\n  induction' ns with n ns IH <;> intro l h <;> simp at h\n  . simp\n  have := le_trans (Nat.le_add_right _ _) h\n  simp only [splitWrtCompositionAux_cons, this] ; dsimp\n  rw [length_take, IH] <;> simp [length_drop]\n  . assumption\n  . exact le_tsub_of_add_le_left h"},{"tailPos":29941,"headPos":29838,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\n⊢ 0 < length l'"],"goalsAfter":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ map length (splitWrtComposition l c)\n⊢ 0 < length l'"],"content":"have : l'.length ∈ (l.splitWrtComposition c).map List.length :=\n    List.mem_map_of_mem List.length h"},{"tailPos":29978,"headPos":29948,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ map length (splitWrtComposition l c)\n⊢ 0 < length l'"],"goalsAfter":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ c.blocks\n⊢ 0 < length l'"],"content":"map_length_splitWrtComposition"},{"tailPos":29979,"headPos":29978,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ c.blocks\n⊢ 0 < length l'"],"goalsAfter":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ c.blocks\n⊢ 0 < length l'"],"content":"]"},{"tailPos":29987,"headPos":29944,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ map length (splitWrtComposition l c)\n⊢ 0 < length l'"],"goalsAfter":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ c.blocks\n⊢ 0 < length l'"],"content":"rw [map_length_splitWrtComposition] at this"},{"tailPos":30013,"headPos":29990,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\nthis : length l' ∈ c.blocks\n⊢ 0 < length l'"],"goalsAfter":[],"content":"exact c.blocks_pos this"},{"tailPos":30013,"headPos":29838,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\n⊢ 0 < length l'"],"goalsAfter":[],"content":"have : l'.length ∈ (l.splitWrtComposition c).map List.length :=\n    List.mem_map_of_mem List.length h\n  rw [map_length_splitWrtComposition] at this\n  exact c.blocks_pos this"},{"tailPos":29835,"headPos":29833,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\n⊢ 0 < length l'"],"goalsAfter":[],"content":"by"},{"tailPos":30013,"headPos":29833,"goalsBefore":["n : ℕ\nα : Type u_1\nl l' : List α\nc : Composition (length l)\nh : l' ∈ splitWrtComposition l c\n⊢ 0 < length l'"],"goalsAfter":[],"content":"by\n  have : l'.length ∈ (l.splitWrtComposition c).map List.length :=\n    List.mem_map_of_mem List.length h\n  rw [map_length_splitWrtComposition] at this\n  exact c.blocks_pos this"},{"tailPos":30295,"headPos":30290,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nc : Composition (length l)\ni : ℕ\n⊢ sum (take i (map length (splitWrtComposition l c))) = Composition.sizeUpTo c i"],"goalsAfter":["case e_a.e_a\nn : ℕ\nα : Type u_1\nl : List α\nc : Composition (length l)\ni : ℕ\n⊢ map length (splitWrtComposition l c) = c.blocks"],"content":"congr"},{"tailPos":30338,"headPos":30298,"goalsBefore":["case e_a.e_a\nn : ℕ\nα : Type u_1\nl : List α\nc : Composition (length l)\ni : ℕ\n⊢ map length (splitWrtComposition l c) = c.blocks"],"goalsAfter":[],"content":"exact map_length_splitWrtComposition l c"},{"tailPos":30338,"headPos":30290,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nc : Composition (length l)\ni : ℕ\n⊢ sum (take i (map length (splitWrtComposition l c))) = Composition.sizeUpTo c i"],"goalsAfter":[],"content":"congr\n  exact map_length_splitWrtComposition l c"},{"tailPos":30287,"headPos":30285,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nc : Composition (length l)\ni : ℕ\n⊢ sum (take i (map length (splitWrtComposition l c))) = Composition.sizeUpTo c i"],"goalsAfter":[],"content":"by"},{"tailPos":30338,"headPos":30285,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nc : Composition (length l)\ni : ℕ\n⊢ sum (take i (map length (splitWrtComposition l c))) = Composition.sizeUpTo c i"],"goalsAfter":[],"content":"by\n  congr\n  exact map_length_splitWrtComposition l c"},{"tailPos":30763,"headPos":30720,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\ni : ℕ\nhi : i < length (splitWrtCompositionAux l ns)\n⊢ nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl✝ : List α\nns : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l [])\n⊢ nthLe (splitWrtCompositionAux l []) i hi = drop (sum (take i [])) (take (sum (take (i + 1) [])) l)","case cons\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) i hi =\n    drop (sum (take i (n :: ns))) (take (sum (take (i + 1) (n :: ns))) l)"],"content":"induction' ns with n ns IH generalizing l i"},{"tailPos":30768,"headPos":30766,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl✝ : List α\nns : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l [])\n⊢ nthLe (splitWrtCompositionAux l []) i hi = drop (sum (take i [])) (take (sum (take (i + 1) [])) l)","case cons\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) i hi =\n    drop (sum (take i (n :: ns))) (take (sum (take (i + 1) (n :: ns))) l)"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl✝ : List α\nns : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l [])\n⊢ nthLe (splitWrtCompositionAux l []) i hi = drop (sum (take i [])) (take (sum (take (i + 1) [])) l)"],"content":"·"},{"tailPos":30777,"headPos":30769,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl✝ : List α\nns : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l [])\n⊢ nthLe (splitWrtCompositionAux l []) i hi = drop (sum (take i [])) (take (sum (take (i + 1) [])) l)"],"goalsAfter":[],"content":"cases hi"},{"tailPos":30777,"headPos":30766,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl✝ : List α\nns : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l [])\n⊢ nthLe (splitWrtCompositionAux l []) i hi = drop (sum (take i [])) (take (sum (take (i + 1) [])) l)","case cons\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) i hi =\n    drop (sum (take i (n :: ns))) (take (sum (take (i + 1) (n :: ns))) l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) i hi =\n    drop (sum (take i (n :: ns))) (take (sum (take (i + 1) (n :: ns))) l)"],"content":"· cases hi"},{"tailPos":30795,"headPos":30780,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) i hi =\n    drop (sum (take i (n :: ns))) (take (sum (take (i + 1) (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)","case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"content":"cases' i with i"},{"tailPos":30799,"headPos":30798,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)","case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)"],"content":"."},{"tailPos":30817,"headPos":30804,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take 1 (n :: ns))) l)"],"content":"Nat.add_zero,"},{"tailPos":30833,"headPos":30818,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take 1 (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi = drop (sum []) (take (sum (take 1 (n :: ns))) l)"],"content":"List.take_zero,"},{"tailPos":30842,"headPos":30834,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi = drop (sum []) (take (sum (take 1 (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi = drop 0 (take (sum (take 1 (n :: ns))) l)"],"content":"sum_nil,"},{"tailPos":30853,"headPos":30843,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi = drop 0 (take (sum (take 1 (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"content":"nthLe_zero"},{"tailPos":30854,"headPos":30853,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"content":"]"},{"tailPos":30854,"headPos":30800,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"content":"rw [Nat.add_zero, List.take_zero, sum_nil, nthLe_zero]"},{"tailPos":30855,"headPos":30854,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"content":";"},{"tailPos":30861,"headPos":30856,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = drop 0 (take (sum (take 1 (n :: ns))) l)"],"goalsAfter":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = take (sum [n]) l"],"content":"dsimp only [_private.Std.Data.List.Init.Lemmas.0.List.take._eq_3,\n  _private.Std.Data.List.Init.Lemmas.0.List.take._eq_1, _private.Std.Data.List.Init.Lemmas.0.List.drop._eq_1]"},{"tailPos":30934,"headPos":30866,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ head! (splitWrtCompositionAux l (n :: ns)) = take (sum [n]) l"],"goalsAfter":[],"content":"simp only [splitWrtCompositionAux_cons, head!, sum, foldl, zero_add]"},{"tailPos":30934,"headPos":30800,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)"],"goalsAfter":[],"content":"rw [Nat.add_zero, List.take_zero, sum_nil, nthLe_zero]; dsimp\n    simp only [splitWrtCompositionAux_cons, head!, sum, foldl, zero_add]"},{"tailPos":30934,"headPos":30798,"goalsBefore":["case cons.zero\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni : ℕ\nhi✝ : i < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\nhi : Nat.zero < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) Nat.zero hi =\n    drop (sum (take Nat.zero (n :: ns))) (take (sum (take (Nat.zero + 1) (n :: ns))) l)","case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"content":". rw [Nat.add_zero, List.take_zero, sum_nil, nthLe_zero]; dsimp\n    simp only [splitWrtCompositionAux_cons, head!, sum, foldl, zero_add]"},{"tailPos":30938,"headPos":30937,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"content":"."},{"tailPos":31049,"headPos":30939,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ (if h : False then take n l\n    else drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l))) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"simp only [splitWrtCompositionAux_cons, take, sum_cons,\n      Nat.add_eq, add_zero, gt_iff_lt, nthLe_cons, IH]"},{"tailPos":31050,"headPos":31049,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ (if h : False then take n l\n    else drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l))) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ (if h : False then take n l\n    else drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l))) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":";"},{"tailPos":31056,"headPos":31051,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ (if h : False then take n l\n    else drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l))) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"dsimp only [dite_eq_ite, ite_false]"},{"tailPos":31090,"headPos":31065,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (i - 0) ns)) (take (sum (take (i - 0 + 1) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"Nat.succ_sub_succ_eq_sub,"},{"tailPos":31114,"headPos":31091,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (i - 0) ns)) (take (sum (take (i - 0 + 1) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (i - 0) ns)) (take (sum (take (Nat.succ (i - 0)) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"←Nat.succ_eq_add_one,"},{"tailPos":31123,"headPos":31114,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (i - 0) ns)) (take (sum (take (Nat.succ (i - 0)) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns)) (take (sum (take (Nat.succ i) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"tsub_zero"},{"tailPos":31124,"headPos":31123,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns)) (take (sum (take (Nat.succ i) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns)) (take (sum (take (Nat.succ i) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"]"},{"tailPos":31124,"headPos":31061,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take (Nat.succ i - 1) ns)) (take (sum (take (Nat.succ i - 1 + 1) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns)) (take (sum (take (Nat.succ i) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"rw [Nat.succ_sub_succ_eq_sub, ←Nat.succ_eq_add_one,tsub_zero]"},{"tailPos":31165,"headPos":31129,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns)) (take (sum (take (Nat.succ i) ns)) (drop n l)) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns) + n) (take (n + sum (take (Nat.succ i) ns)) l) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"simp only [← drop_take, drop_drop]"},{"tailPos":31182,"headPos":31174,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns) + n) (take (n + sum (take (Nat.succ i) ns)) l) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"content":"add_comm"},{"tailPos":31183,"headPos":31182,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":[],"content":"]"},{"tailPos":31183,"headPos":31170,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ drop (sum (take i ns) + n) (take (n + sum (take (Nat.succ i) ns)) l) =\n    drop (n + sum (take i ns)) (take (n + sum (take (Nat.succ i) ns)) l)"],"goalsAfter":[],"content":"rw [add_comm]"},{"tailPos":31183,"headPos":30939,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"goalsAfter":[],"content":"simp only [splitWrtCompositionAux_cons, take, sum_cons,\n      Nat.add_eq, add_zero, gt_iff_lt, nthLe_cons, IH]; dsimp\n    rw [Nat.succ_sub_succ_eq_sub, ←Nat.succ_eq_add_one,tsub_zero]\n    simp only [← drop_take, drop_drop]\n    rw [add_comm]"},{"tailPos":31183,"headPos":30937,"goalsBefore":["case cons.succ\nn✝ : ℕ\nα : Type u_1\nl✝ : List α\nns✝ : List ℕ\ni✝ : ℕ\nhi✝ : i✝ < length (splitWrtCompositionAux l✝ ns✝)\nn : ℕ\nns : List ℕ\nIH :\n  ∀ (l : List α) {i : ℕ} (hi : i < length (splitWrtCompositionAux l ns)),\n    nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)\nl : List α\ni : ℕ\nhi : Nat.succ i < length (splitWrtCompositionAux l (n :: ns))\n⊢ nthLe (splitWrtCompositionAux l (n :: ns)) (Nat.succ i) hi =\n    drop (sum (take (Nat.succ i) (n :: ns))) (take (sum (take (Nat.succ i + 1) (n :: ns))) l)"],"goalsAfter":[],"content":". simp only [splitWrtCompositionAux_cons, take, sum_cons,\n      Nat.add_eq, add_zero, gt_iff_lt, nthLe_cons, IH]; dsimp\n    rw [Nat.succ_sub_succ_eq_sub, ←Nat.succ_eq_add_one,tsub_zero]\n    simp only [← drop_take, drop_drop]\n    rw [add_comm]"},{"tailPos":31183,"headPos":30720,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\ni : ℕ\nhi : i < length (splitWrtCompositionAux l ns)\n⊢ nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)"],"goalsAfter":[],"content":"induction' ns with n ns IH generalizing l i\n  · cases hi\n  cases' i with i\n  . rw [Nat.add_zero, List.take_zero, sum_nil, nthLe_zero]; dsimp\n    simp only [splitWrtCompositionAux_cons, head!, sum, foldl, zero_add]\n  . simp only [splitWrtCompositionAux_cons, take, sum_cons,\n      Nat.add_eq, add_zero, gt_iff_lt, nthLe_cons, IH]; dsimp\n    rw [Nat.succ_sub_succ_eq_sub, ←Nat.succ_eq_add_one,tsub_zero]\n    simp only [← drop_take, drop_drop]\n    rw [add_comm]"},{"tailPos":30717,"headPos":30715,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\ni : ℕ\nhi : i < length (splitWrtCompositionAux l ns)\n⊢ nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)"],"goalsAfter":[],"content":"by"},{"tailPos":31183,"headPos":30715,"goalsBefore":["n : ℕ\nα : Type u_1\nl : List α\nns : List ℕ\ni : ℕ\nhi : i < length (splitWrtCompositionAux l ns)\n⊢ nthLe (splitWrtCompositionAux l ns) i hi = drop (sum (take i ns)) (take (sum (take (i + 1) ns)) l)"],"goalsAfter":[],"content":"by\n  induction' ns with n ns IH generalizing l i\n  · cases hi\n  cases' i with i\n  . rw [Nat.add_zero, List.take_zero, sum_nil, nthLe_zero]; dsimp\n    simp only [splitWrtCompositionAux_cons, head!, sum, foldl, zero_add]\n  . simp only [splitWrtCompositionAux_cons, take, sum_cons,\n      Nat.add_eq, add_zero, gt_iff_lt, nthLe_cons, IH]; dsimp\n    rw [Nat.succ_sub_succ_eq_sub, ←Nat.succ_eq_add_one,tsub_zero]\n    simp only [← drop_take, drop_drop]\n    rw [add_comm]"},{"tailPos":32073,"headPos":32047,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] = length l → join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\n⊢ ∀ {l : List α}, sum (n :: ns) = length l → join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"induction' ns with n ns IH"},{"tailPos":32077,"headPos":32074,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] = length l → join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\n⊢ ∀ {l : List α}, sum (n :: ns) = length l → join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] = length l → join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\n⊢ ∀ {l : List α}, sum (n :: ns) = length l → join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"<;>"},{"tailPos":32087,"headPos":32078,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\n⊢ ∀ {l : List α}, sum [] = length l → join (splitWrtCompositionAux l []) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] = length l\n⊢ join (splitWrtCompositionAux l []) = l"],"content":"intro l h"},{"tailPos":32087,"headPos":32078,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\n⊢ ∀ {l : List α}, sum (n :: ns) = length l → join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : sum (n :: ns) = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"intro l h"},{"tailPos":32087,"headPos":32047,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] = length l\n⊢ join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : sum (n :: ns) = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"induction' ns with n ns IH <;> intro l h"},{"tailPos":32091,"headPos":32088,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] = length l\n⊢ join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : sum (n :: ns) = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] = length l\n⊢ join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : sum (n :: ns) = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"<;>"},{"tailPos":32101,"headPos":32092,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : sum [] = length l\n⊢ join (splitWrtCompositionAux l []) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : 0 = length l\n⊢ join (splitWrtCompositionAux l []) = l"],"content":"simp at h"},{"tailPos":32101,"headPos":32092,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : sum (n :: ns) = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"simp at h"},{"tailPos":32101,"headPos":32047,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : 0 = length l\n⊢ join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"induction' ns with n ns IH <;> intro l h <;> simp at h"},{"tailPos":32106,"headPos":32104,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : 0 = length l\n⊢ join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : 0 = length l\n⊢ join (splitWrtCompositionAux l []) = l"],"content":"·"},{"tailPos":32143,"headPos":32107,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : 0 = length l\n⊢ join (splitWrtCompositionAux l []) = l"],"goalsAfter":[],"content":"exact (length_eq_zero.1 h.symm).symm"},{"tailPos":32143,"headPos":32104,"goalsBefore":["case nil\nn : ℕ\nα : Type u_1\nl : List α\nh : 0 = length l\n⊢ join (splitWrtCompositionAux l []) = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"content":"· exact (length_eq_zero.1 h.symm).symm"},{"tailPos":32185,"headPos":32146,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (splitWrtCompositionAux l (n :: ns)) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (take n l :: splitWrtCompositionAux (drop n l) ns) = l"],"content":"simp only [splitWrtCompositionAux_cons]"},{"tailPos":32187,"headPos":32186,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (take n l :: splitWrtCompositionAux (drop n l) ns) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (take n l :: splitWrtCompositionAux (drop n l) ns) = l"],"content":";"},{"tailPos":32193,"headPos":32188,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ join (take n l :: splitWrtCompositionAux (drop n l) ns) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ join (splitWrtCompositionAux (drop n l) ns) = l"],"content":"dsimp only [_private.Std.Data.List.Init.Lemmas.0.List.join._eq_2]"},{"tailPos":32202,"headPos":32200,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ join (splitWrtCompositionAux (drop n l) ns) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"content":"IH"},{"tailPos":32203,"headPos":32202,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"content":"]"},{"tailPos":32203,"headPos":32196,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ join (splitWrtCompositionAux (drop n l) ns) = l"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"content":"rw [IH]"},{"tailPos":32208,"headPos":32206,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l"],"content":"·"},{"tailPos":32213,"headPos":32209,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l"],"goalsAfter":[],"content":"simp only [take_append_drop]"},{"tailPos":32213,"headPos":32206,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ take n l ++ drop n l = l","case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"content":"· simp"},{"tailPos":32217,"headPos":32216,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"content":"."},{"tailPos":32234,"headPos":32222,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length l - n"],"content":"length_drop,"},{"tailPos":32241,"headPos":32235,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length l - n"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = n + sum ns - n"],"content":"← h,"},{"tailPos":32262,"headPos":32242,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = n + sum ns - n"],"goalsAfter":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = sum ns"],"content":"add_tsub_cancel_left"},{"tailPos":32263,"headPos":32262,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = sum ns"],"goalsAfter":[],"content":"]"},{"tailPos":32263,"headPos":32218,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":[],"content":"rw [length_drop, ← h, add_tsub_cancel_left]"},{"tailPos":32263,"headPos":32216,"goalsBefore":["case cons\nn✝ : ℕ\nα : Type u_1\nn : ℕ\nns : List ℕ\nIH : ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l\nl : List α\nh : n + sum ns = length l\n⊢ sum ns = length (drop n l)"],"goalsAfter":[],"content":". rw [length_drop, ← h, add_tsub_cancel_left]"},{"tailPos":32263,"headPos":32047,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l"],"goalsAfter":[],"content":"induction' ns with n ns IH <;> intro l h <;> simp at h\n  · exact (length_eq_zero.1 h.symm).symm\n  simp only [splitWrtCompositionAux_cons] ; dsimp\n  rw [IH]\n  · simp\n  . rw [length_drop, ← h, add_tsub_cancel_left]"},{"tailPos":32044,"headPos":32042,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l"],"goalsAfter":[],"content":"by"},{"tailPos":32263,"headPos":32042,"goalsBefore":["n : ℕ\nα : Type u_1\nns : List ℕ\n⊢ ∀ {l : List α}, sum ns = length l → join (splitWrtCompositionAux l ns) = l"],"goalsAfter":[],"content":"by\n  induction' ns with n ns IH <;> intro l h <;> simp at h\n  · exact (length_eq_zero.1 h.symm).symm\n  simp only [splitWrtCompositionAux_cons] ; dsimp\n  rw [IH]\n  · simp\n  . rw [length_drop, ← h, add_tsub_cancel_left]"},{"tailPos":33119,"headPos":32996,"goalsBefore":["n : ℕ\nα : Type u_1\nL : List (List α)\nc : Composition (length (join L))\nh : map length L = c.blocks\n⊢ splitWrtComposition (join L) c = L"],"goalsAfter":[],"content":"simp only [eq_self_iff_true, and_self_iff, eq_iff_join_eq, join_splitWrtComposition,\n    map_length_splitWrtComposition, h]"},{"tailPos":32993,"headPos":32991,"goalsBefore":["n : ℕ\nα : Type u_1\nL : List (List α)\nc : Composition (length (join L))\nh : map length L = c.blocks\n⊢ splitWrtComposition (join L) c = L"],"goalsAfter":[],"content":"by"},{"tailPos":33119,"headPos":32991,"goalsBefore":["n : ℕ\nα : Type u_1\nL : List (List α)\nc : Composition (length (join L))\nh : map length L = c.blocks\n⊢ splitWrtComposition (join L) c = L"],"goalsAfter":[],"content":"by\n  simp only [eq_self_iff_true, and_self_iff, eq_iff_join_eq, join_splitWrtComposition,\n    map_length_splitWrtComposition, h]"},{"tailPos":33830,"headPos":33788,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + ↑i < Nat.succ n"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + (n - 1) ≤ Nat.succ n"],"content":"apply (add_lt_add_left i.is_lt 1).trans_le"},{"tailPos":33869,"headPos":33849,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + (n - 1) ≤ Nat.succ n"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + (n - 1) ≤ n + 1"],"content":"Nat.succ_eq_add_one,"},{"tailPos":33878,"headPos":33870,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + (n - 1) ≤ n + 1"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ n - 1 + 1 ≤ n + 1"],"content":"add_comm"},{"tailPos":33879,"headPos":33878,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ n - 1 + 1 ≤ n + 1"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ n - 1 + 1 ≤ n + 1"],"content":"]"},{"tailPos":33879,"headPos":33845,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + (n - 1) ≤ Nat.succ n"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ n - 1 + 1 ≤ n + 1"],"content":"rw [Nat.succ_eq_add_one, add_comm]"},{"tailPos":33939,"headPos":33894,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ n - 1 + 1 ≤ n + 1"],"goalsAfter":[],"content":"exact add_le_add (Nat.sub_le n 1) (le_refl 1)"},{"tailPos":33939,"headPos":33788,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + ↑i < Nat.succ n"],"goalsAfter":[],"content":"apply (add_lt_add_left i.is_lt 1).trans_le\n              rw [Nat.succ_eq_add_one, add_comm]\n              exact add_le_add (Nat.sub_le n 1) (le_refl 1)"},{"tailPos":33773,"headPos":33771,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + ↑i < Nat.succ n"],"goalsAfter":[],"content":"by"},{"tailPos":33939,"headPos":33771,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (n - 1)\n⊢ 1 + ↑i < Nat.succ n"],"goalsAfter":[],"content":"by\n              apply (add_lt_add_left i.is_lt 1).trans_le\n              rw [Nat.succ_eq_add_one, add_comm]\n              exact add_le_add (Nat.sub_le n 1) (le_refl 1)"},{"tailPos":34201,"headPos":34197,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}"],"goalsAfter":[],"content":"simp only [exists_prop, Set.toFinset_setOf, Finset.mem_univ, forall_true_left, Finset.mem_filter,\n  Fin.val_zero, true_or, and_self]"},{"tailPos":34196,"headPos":34194,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}"],"goalsAfter":[],"content":"by"},{"tailPos":34201,"headPos":34194,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}"],"goalsAfter":[],"content":"by simp"},{"tailPos":34230,"headPos":34226,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}"],"goalsAfter":[],"content":"simp only [exists_prop, Set.toFinset_setOf, Finset.mem_univ, forall_true_left, Finset.mem_filter,\n  Fin.val_last, true_or, or_true, and_self]"},{"tailPos":34225,"headPos":34223,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}"],"goalsAfter":[],"content":"by"},{"tailPos":34230,"headPos":34223,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}"],"goalsAfter":[],"content":"by simp"},{"tailPos":34261,"headPos":34254,"goalsBefore":["n✝ n : ℕ\n⊢ Function.LeftInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\n⊢ (fun s =>\n        { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n          zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n          getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n      ((fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}) c) =\n    c"],"content":"intro c"},{"tailPos":34271,"headPos":34266,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\n⊢ (fun s =>\n        { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n          zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n          getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n      ((fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}) c) =\n    c"],"goalsAfter":["case boundaries.a\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈\n      ((fun s =>\n            { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n              zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n              getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n          ((fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n            c)).boundaries ↔\n    i ∈ c.boundaries"],"content":"ext i"},{"tailPos":34398,"headPos":34276,"goalsBefore":["case boundaries.a\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈\n      ((fun s =>\n            { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n              zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n              getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n          ((fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n            c)).boundaries ↔\n    i ∈ c.boundaries"],"goalsAfter":["case boundaries.a\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) ↔\n    i ∈ c.boundaries"],"content":"simp only [add_comm, Set.toFinset_setOf, Finset.mem_univ,\n     forall_true_left, Finset.mem_filter, true_and, exists_prop]"},{"tailPos":34414,"headPos":34403,"goalsBefore":["case boundaries.a\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) ↔\n    i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) →\n    i ∈ c.boundaries","case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"constructor"},{"tailPos":34421,"headPos":34419,"goalsBefore":["case boundaries.a.mp\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) →\n    i ∈ c.boundaries","case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mp\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) →\n    i ∈ c.boundaries"],"content":"·"},{"tailPos":34460,"headPos":34422,"goalsBefore":["case boundaries.a.mp\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) →\n    i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ 0 ∈ c.boundaries","case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries","case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"content":"rintro (rfl | rfl | ⟨j, hj1, hj2⟩)"},{"tailPos":34469,"headPos":34467,"goalsBefore":["case boundaries.a.mp.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ 0 ∈ c.boundaries","case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries","case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ 0 ∈ c.boundaries"],"content":"·"},{"tailPos":34486,"headPos":34470,"goalsBefore":["case boundaries.a.mp.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ 0 ∈ c.boundaries"],"goalsAfter":[],"content":"exact c.zero_mem"},{"tailPos":34486,"headPos":34467,"goalsBefore":["case boundaries.a.mp.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ 0 ∈ c.boundaries","case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries","case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries","case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"content":"· exact c.zero_mem"},{"tailPos":34495,"headPos":34493,"goalsBefore":["case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries","case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries"],"content":"·"},{"tailPos":34515,"headPos":34496,"goalsBefore":["case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries"],"goalsAfter":[],"content":"exact c.getLast_mem"},{"tailPos":34515,"headPos":34493,"goalsBefore":["case boundaries.a.mp.inr.inl\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n ∈ c.boundaries","case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"content":"· exact c.getLast_mem"},{"tailPos":34524,"headPos":34522,"goalsBefore":["case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":["case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"content":"·"},{"tailPos":34536,"headPos":34525,"goalsBefore":["case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":[],"content":"convert hj1"},{"tailPos":34536,"headPos":34522,"goalsBefore":["case boundaries.a.mp.inr.inr.intro.intro\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\nj : Fin (n - 1)\nhj1 : { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries\nhj2 : ↑i = ↑j + 1\n⊢ i ∈ c.boundaries"],"goalsAfter":[],"content":"· convert hj1"},{"tailPos":34536,"headPos":34422,"goalsBefore":["case boundaries.a.mp\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) →\n    i ∈ c.boundaries"],"goalsAfter":[],"content":"rintro (rfl | rfl | ⟨j, hj1, hj2⟩)\n      · exact c.zero_mem\n      · exact c.getLast_mem\n      · convert hj1"},{"tailPos":34536,"headPos":34419,"goalsBefore":["case boundaries.a.mp\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ (i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1) →\n    i ∈ c.boundaries","case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"· rintro (rfl | rfl | ⟨j, hj1, hj2⟩)\n      · exact c.zero_mem\n      · exact c.getLast_mem\n      · convert hj1"},{"tailPos":34543,"headPos":34541,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"·"},{"tailPos":34575,"headPos":34544,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    ¬i = 0 → ¬i = Fin.last n → ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"simp only [or_iff_not_imp_left]"},{"tailPos":34613,"headPos":34582,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    ¬i = 0 → ¬i = Fin.last n → ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬i = 0\ni_ne_last : ¬i = Fin.last n\n⊢ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"intro i_mem i_ne_zero i_ne_last"},{"tailPos":34661,"headPos":34620,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬i = 0\ni_ne_last : ¬i = Fin.last n\n⊢ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"simp [Fin.ext_iff] at i_ne_zero i_ne_last"},{"tailPos":34735,"headPos":34727,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ↑i - 1 + 1 = ↑i"],"content":"add_comm"},{"tailPos":34736,"headPos":34735,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ↑i - 1 + 1 = ↑i"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ↑i - 1 + 1 = ↑i"],"content":"]"},{"tailPos":34736,"headPos":34723,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ↑i - 1 + 1 = ↑i"],"content":"rw [add_comm]"},{"tailPos":34806,"headPos":34745,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ↑i - 1 + 1 = ↑i"],"goalsAfter":[],"content":"exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)"},{"tailPos":34806,"headPos":34723,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":[],"content":"rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)"},{"tailPos":34714,"headPos":34712,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":[],"content":"by"},{"tailPos":34806,"headPos":34712,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":[],"content":"by\n        rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)"},{"tailPos":34806,"headPos":34668,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\n⊢ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"content":"have A : (1 + (i - 1) : ℕ) = (i : ℕ) := by\n        rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)"},{"tailPos":34847,"headPos":34813,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 < n - 1","case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1,\n      isLt := (_ : ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1 < Nat.succ n) } ∈\n    c.boundaries","case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1"],"content":"refine' ⟨⟨i - 1, _⟩, _, _⟩"},{"tailPos":34856,"headPos":34854,"goalsBefore":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 < n - 1","case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1,\n      isLt := (_ : ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1 < Nat.succ n) } ∈\n    c.boundaries","case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 < n - 1"],"content":"·"},{"tailPos":34888,"headPos":34857,"goalsBefore":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 < n - 1"],"goalsAfter":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\nthis : ↑i < n + 1\n⊢ ↑i - 1 < n - 1"],"content":"have : (i : ℕ) < n + 1 := i.2"},{"tailPos":34947,"headPos":34897,"goalsBefore":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\nthis : ↑i < n + 1\n⊢ ↑i - 1 < n - 1"],"goalsAfter":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\nthis : ↑i < n\n⊢ ↑i - 1 < n - 1"],"content":"simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this"},{"tailPos":34993,"headPos":34956,"goalsBefore":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\nthis : ↑i < n\n⊢ ↑i - 1 < n - 1"],"goalsAfter":[],"content":"exact Nat.pred_lt_pred i_ne_zero this"},{"tailPos":34993,"headPos":34857,"goalsBefore":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 < n - 1"],"goalsAfter":[],"content":"have : (i : ℕ) < n + 1 := i.2\n        simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this\n        exact Nat.pred_lt_pred i_ne_zero this"},{"tailPos":34993,"headPos":34854,"goalsBefore":["case boundaries.a.mpr.refine'_1\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 < n - 1","case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1,\n      isLt := (_ : ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1 < Nat.succ n) } ∈\n    c.boundaries","case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := ?boundaries.a.mpr.refine'_1 } + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1,\n      isLt :=\n        (_ : ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 < Nat.succ n) } ∈\n    c.boundaries","case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"content":"· have : (i : ℕ) < n + 1 := i.2\n        simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this\n        exact Nat.pred_lt_pred i_ne_zero this"},{"tailPos":35002,"headPos":35000,"goalsBefore":["case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1,\n      isLt :=\n        (_ : ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 < Nat.succ n) } ∈\n    c.boundaries","case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1,\n      isLt :=\n        (_ : ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 < Nat.succ n) } ∈\n    c.boundaries"],"content":"·"},{"tailPos":35016,"headPos":35003,"goalsBefore":["case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1,\n      isLt :=\n        (_ : ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 < Nat.succ n) } ∈\n    c.boundaries"],"goalsAfter":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 = ↑i"],"content":"convert i_mem"},{"tailPos":35046,"headPos":35025,"goalsBefore":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 = ↑i"],"goalsAfter":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 + 1 = ↑i"],"content":"simp only [ge_iff_le]"},{"tailPos":35068,"headPos":35060,"goalsBefore":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 + 1 = ↑i"],"goalsAfter":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ 1 + (↑i - 1) = ↑i"],"content":"add_comm"},{"tailPos":35069,"headPos":35068,"goalsBefore":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ 1 + (↑i - 1) = ↑i"],"content":"]"},{"tailPos":35069,"headPos":35055,"goalsBefore":["case h.e'_4.h.e'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 + 1 = ↑i"],"goalsAfter":[],"content":"rwa [add_comm]"},{"tailPos":35069,"headPos":35003,"goalsBefore":["case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1,\n      isLt :=\n        (_ : ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 < Nat.succ n) } ∈\n    c.boundaries"],"goalsAfter":[],"content":"convert i_mem\n        simp only [ge_iff_le]\n        rwa [add_comm]"},{"tailPos":35069,"headPos":35000,"goalsBefore":["case boundaries.a.mpr.refine'_2\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ { val := ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1,\n      isLt :=\n        (_ : ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1 < Nat.succ n) } ∈\n    c.boundaries","case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"content":"· convert i_mem\n        simp only [ge_iff_le]\n        rwa [add_comm]"},{"tailPos":35078,"headPos":35076,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"content":"·"},{"tailPos":35100,"headPos":35079,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑i - 1 + 1"],"content":"simp only [ge_iff_le]"},{"tailPos":35113,"headPos":35109,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑i - 1 + 1"],"goalsAfter":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 + 1 = ↑i"],"content":"symm"},{"tailPos":35135,"headPos":35127,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 + 1 = ↑i"],"goalsAfter":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ 1 + (↑i - 1) = ↑i"],"content":"add_comm"},{"tailPos":35136,"headPos":35135,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ 1 + (↑i - 1) = ↑i"],"goalsAfter":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ 1 + (↑i - 1) = ↑i"],"content":"]"},{"tailPos":35136,"headPos":35122,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i - 1 + 1 = ↑i"],"goalsAfter":[],"content":"rwa [add_comm]"},{"tailPos":35136,"headPos":35079,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"goalsAfter":[],"content":"simp only [ge_iff_le]\n        symm\n        rwa [add_comm]"},{"tailPos":35136,"headPos":35076,"goalsBefore":["case boundaries.a.mpr.refine'_3\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\ni_mem : i ∈ c.boundaries\ni_ne_zero : ¬↑i = 0\ni_ne_last : ¬↑i = n\nA : 1 + (↑i - 1) = ↑i\n⊢ ↑i = ↑{ val := ↑i - 1, isLt := (_ : Nat.pred (Nat.sub (↑i) 0) < Nat.pred (Nat.sub n 0)) } + 1"],"goalsAfter":[],"content":"· simp only [ge_iff_le]\n        symm\n        rwa [add_comm]"},{"tailPos":35136,"headPos":34544,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":[],"content":"simp only [or_iff_not_imp_left]\n      intro i_mem i_ne_zero i_ne_last\n      simp [Fin.ext_iff] at i_ne_zero i_ne_last\n      have A : (1 + (i - 1) : ℕ) = (i : ℕ) := by\n        rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)\n      refine' ⟨⟨i - 1, _⟩, _, _⟩\n      · have : (i : ℕ) < n + 1 := i.2\n        simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this\n        exact Nat.pred_lt_pred i_ne_zero this\n      · convert i_mem\n        simp only [ge_iff_le]\n        rwa [add_comm]\n      · simp only [ge_iff_le]\n        symm\n        rwa [add_comm]"},{"tailPos":35136,"headPos":34541,"goalsBefore":["case boundaries.a.mpr\nn✝ n : ℕ\nc : CompositionAsSet n\ni : Fin (Nat.succ n)\n⊢ i ∈ c.boundaries →\n    i = 0 ∨ i = Fin.last n ∨ ∃ j, { val := ↑j + 1, isLt := (_ : ↑j + 1 < Nat.succ n) } ∈ c.boundaries ∧ ↑i = ↑j + 1"],"goalsAfter":[],"content":"· simp only [or_iff_not_imp_left]\n      intro i_mem i_ne_zero i_ne_last\n      simp [Fin.ext_iff] at i_ne_zero i_ne_last\n      have A : (1 + (i - 1) : ℕ) = (i : ℕ) := by\n        rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)\n      refine' ⟨⟨i - 1, _⟩, _, _⟩\n      · have : (i : ℕ) < n + 1 := i.2\n        simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this\n        exact Nat.pred_lt_pred i_ne_zero this\n      · convert i_mem\n        simp only [ge_iff_le]\n        rwa [add_comm]\n      · simp only [ge_iff_le]\n        symm\n        rwa [add_comm]"},{"tailPos":35136,"headPos":34254,"goalsBefore":["n✝ n : ℕ\n⊢ Function.LeftInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":[],"content":"intro c\n    ext i\n    simp only [add_comm, Set.toFinset_setOf, Finset.mem_univ,\n     forall_true_left, Finset.mem_filter, true_and, exists_prop]\n    constructor\n    · rintro (rfl | rfl | ⟨j, hj1, hj2⟩)\n      · exact c.zero_mem\n      · exact c.getLast_mem\n      · convert hj1\n    · simp only [or_iff_not_imp_left]\n      intro i_mem i_ne_zero i_ne_last\n      simp [Fin.ext_iff] at i_ne_zero i_ne_last\n      have A : (1 + (i - 1) : ℕ) = (i : ℕ) := by\n        rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)\n      refine' ⟨⟨i - 1, _⟩, _, _⟩\n      · have : (i : ℕ) < n + 1 := i.2\n        simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this\n        exact Nat.pred_lt_pred i_ne_zero this\n      · convert i_mem\n        simp only [ge_iff_le]\n        rwa [add_comm]\n      · simp only [ge_iff_le]\n        symm\n        rwa [add_comm]"},{"tailPos":34249,"headPos":34247,"goalsBefore":["n✝ n : ℕ\n⊢ Function.LeftInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":[],"content":"by"},{"tailPos":35136,"headPos":34247,"goalsBefore":["n✝ n : ℕ\n⊢ Function.LeftInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":[],"content":"by\n    intro c\n    ext i\n    simp only [add_comm, Set.toFinset_setOf, Finset.mem_univ,\n     forall_true_left, Finset.mem_filter, true_and, exists_prop]\n    constructor\n    · rintro (rfl | rfl | ⟨j, hj1, hj2⟩)\n      · exact c.zero_mem\n      · exact c.getLast_mem\n      · convert hj1\n    · simp only [or_iff_not_imp_left]\n      intro i_mem i_ne_zero i_ne_last\n      simp [Fin.ext_iff] at i_ne_zero i_ne_last\n      have A : (1 + (i - 1) : ℕ) = (i : ℕ) := by\n        rw [add_comm]\n        exact Nat.succ_pred_eq_of_pos (pos_iff_ne_zero.mpr i_ne_zero)\n      refine' ⟨⟨i - 1, _⟩, _, _⟩\n      · have : (i : ℕ) < n + 1 := i.2\n        simp [Nat.lt_succ_iff_lt_or_eq, i_ne_last] at this\n        exact Nat.pred_lt_pred i_ne_zero this\n      · convert i_mem\n        simp only [ge_iff_le]\n        rwa [add_comm]\n      · simp only [ge_iff_le]\n        symm\n        rwa [add_comm]"},{"tailPos":35166,"headPos":35159,"goalsBefore":["n✝ n : ℕ\n⊢ Function.RightInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ (fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n      ((fun s =>\n          { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n            zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n            getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n        s) =\n    s"],"content":"intro s"},{"tailPos":35176,"headPos":35171,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\n⊢ (fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n      ((fun s =>\n          { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n            zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n            getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n        s) =\n    s"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ i ∈\n      (fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n        ((fun s =>\n            { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n              zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n              getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n          s) ↔\n    i ∈ s"],"content":"ext i"},{"tailPos":35234,"headPos":35220,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 1 + ↑i ≠ n"],"goalsAfter":["case h\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 1 + ↑i < n"],"content":"apply ne_of_lt"},{"tailPos":35274,"headPos":35241,"goalsBefore":["case h\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 1 + ↑i < n"],"goalsAfter":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = 1 + (n - 1)"],"content":"convert add_lt_add_left i.is_lt 1"},{"tailPos":35293,"headPos":35285,"goalsBefore":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = 1 + (n - 1)"],"goalsAfter":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = n - 1 + 1"],"content":"add_comm"},{"tailPos":35294,"headPos":35293,"goalsBefore":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = n - 1 + 1"],"goalsAfter":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = n - 1 + 1"],"content":"]"},{"tailPos":35294,"headPos":35281,"goalsBefore":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = 1 + (n - 1)"],"goalsAfter":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = n - 1 + 1"],"content":"rw [add_comm]"},{"tailPos":35339,"headPos":35301,"goalsBefore":["case h.e'_4\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ n = n - 1 + 1"],"goalsAfter":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 0 < n"],"content":"apply (Nat.succ_pred_eq_of_pos _).symm"},{"tailPos":35408,"headPos":35346,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 0 < n"],"goalsAfter":[],"content":"exact (zero_le i.val).trans_lt (i.2.trans_le (Nat.sub_le n 1))"},{"tailPos":35408,"headPos":35220,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 1 + ↑i ≠ n"],"goalsAfter":[],"content":"apply ne_of_lt\n      convert add_lt_add_left i.is_lt 1\n      rw [add_comm]\n      apply (Nat.succ_pred_eq_of_pos _).symm\n      exact (zero_le i.val).trans_lt (i.2.trans_le (Nat.sub_le n 1))"},{"tailPos":35213,"headPos":35211,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 1 + ↑i ≠ n"],"goalsAfter":[],"content":"by"},{"tailPos":35408,"headPos":35211,"goalsBefore":["n✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ 1 + ↑i ≠ n"],"goalsAfter":[],"content":"by\n      apply ne_of_lt\n      convert add_lt_add_left i.is_lt 1\n      rw [add_comm]\n      apply (Nat.succ_pred_eq_of_pos _).symm\n      exact (zero_le i.val).trans_lt (i.2.trans_le (Nat.sub_le n 1))"},{"tailPos":35408,"headPos":35181,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\n⊢ i ∈\n      (fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n        ((fun s =>\n            { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n              zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n              getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n          s) ↔\n    i ∈ s"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈\n      (fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n        ((fun s =>\n            { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n              zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n              getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n          s) ↔\n    i ∈ s"],"content":"have : 1 + (i : ℕ) ≠ n := by\n      apply ne_of_lt\n      convert add_lt_add_left i.is_lt 1\n      rw [add_comm]\n      apply (Nat.succ_pred_eq_of_pos _).symm\n      exact (zero_le i.val).trans_lt (i.2.trans_le (Nat.sub_le n 1))"},{"tailPos":35635,"headPos":35413,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈\n      (fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries})\n        ((fun s =>\n            { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n              zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n              getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n          s) ↔\n    i ∈ s"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s"],"content":"simp only [add_comm, Fin.ext_iff, Fin.val_zero, Fin.val_last, exists_prop, Set.toFinset_setOf,\n      Finset.mem_univ, forall_true_left, Finset.mem_filter, add_eq_zero_iff, and_false,\n      add_left_inj, false_or, true_and]"},{"tailPos":35661,"headPos":35645,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s.val"],"content":"Set.mem_setOf_eq"},{"tailPos":35662,"headPos":35661,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s.val"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s.val"],"content":"]"},{"tailPos":35662,"headPos":35640,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s.val"],"content":"erw [Set.mem_setOf_eq]"},{"tailPos":35770,"headPos":35667,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s.val"],"goalsAfter":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s"],"content":"simp [this, false_or_iff, add_right_inj, add_eq_zero_iff, one_ne_zero, false_and_iff,\n      Fin.val_mk]"},{"tailPos":35786,"headPos":35775,"goalsBefore":["case a\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) ↔ i ∈ s"],"goalsAfter":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) → i ∈ s","case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"content":"constructor"},{"tailPos":35793,"headPos":35791,"goalsBefore":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) → i ∈ s","case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) → i ∈ s"],"content":"·"},{"tailPos":35801,"headPos":35794,"goalsBefore":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) → i ∈ s"],"goalsAfter":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"content":"intro h"},{"tailPos":35825,"headPos":35808,"goalsBefore":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s","case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"content":"cases' h with n h"},{"tailPos":35833,"headPos":35832,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s","case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"content":"."},{"tailPos":35846,"headPos":35838,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : ↑i + 1 ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"content":"add_comm"},{"tailPos":35847,"headPos":35846,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : ↑i + 1 ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : ↑i + 1 ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"content":"]"},{"tailPos":35855,"headPos":35834,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : ↑i + 1 ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"content":"rw [add_comm] at this"},{"tailPos":35877,"headPos":35864,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : ↑i + 1 ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"goalsAfter":[],"content":"contradiction"},{"tailPos":35877,"headPos":35834,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s"],"goalsAfter":[],"content":"rw [add_comm] at this\n        contradiction"},{"tailPos":35877,"headPos":35832,"goalsBefore":["case a.mp.inl\nn✝¹ n✝ : ℕ\ns : Finset (Fin (n✝ - 1))\ni : Fin (n✝ - 1)\nthis : 1 + ↑i ≠ n✝\nn : ↑i + 1 = n✝\n⊢ i ∈ s","case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"content":". rw [add_comm] at this\n        contradiction"},{"tailPos":35885,"headPos":35884,"goalsBefore":["case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"content":"."},{"tailPos":35903,"headPos":35886,"goalsBefore":["case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh : w ∈ s ∧ ↑i = ↑w\n⊢ i ∈ s"],"content":"cases' h with w h"},{"tailPos":35904,"headPos":35903,"goalsBefore":["case a.mp.inr.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh : w ∈ s ∧ ↑i = ↑w\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh : w ∈ s ∧ ↑i = ↑w\n⊢ i ∈ s"],"content":";"},{"tailPos":35928,"headPos":35905,"goalsBefore":["case a.mp.inr.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh : w ∈ s ∧ ↑i = ↑w\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : ↑i = ↑w\n⊢ i ∈ s"],"content":"cases' h with h₁ h₂"},{"tailPos":35955,"headPos":35941,"goalsBefore":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : ↑i = ↑w\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ i ∈ s"],"content":"←Fin.ext_iff"},{"tailPos":35956,"headPos":35955,"goalsBefore":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ i ∈ s"],"content":"]"},{"tailPos":35964,"headPos":35937,"goalsBefore":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : ↑i = ↑w\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ i ∈ s"],"content":"rw [←Fin.ext_iff] at h₂"},{"tailPos":35982,"headPos":35978,"goalsBefore":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ i ∈ s"],"goalsAfter":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ w ∈ s"],"content":"h₂"},{"tailPos":35983,"headPos":35982,"goalsBefore":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ w ∈ s"],"goalsAfter":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ w ∈ s"],"content":"]"},{"tailPos":35983,"headPos":35973,"goalsBefore":["case a.mp.inr.intro.intro\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nw : Fin (n - 1)\nh₁ : w ∈ s\nh₂ : i = w\n⊢ i ∈ s"],"goalsAfter":[],"content":"rwa [h₂]"},{"tailPos":35983,"headPos":35886,"goalsBefore":["case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":[],"content":"cases' h with w h; cases' h with h₁ h₂\n        rw [←Fin.ext_iff] at h₂\n        rwa [h₂]"},{"tailPos":35983,"headPos":35884,"goalsBefore":["case a.mp.inr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : ∃ j, j ∈ s ∧ ↑i = ↑j\n⊢ i ∈ s"],"goalsAfter":[],"content":". cases' h with w h; cases' h with h₁ h₂\n        rw [←Fin.ext_iff] at h₂\n        rwa [h₂]"},{"tailPos":35983,"headPos":35794,"goalsBefore":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) → i ∈ s"],"goalsAfter":[],"content":"intro h\n      cases' h with n h\n      . rw [add_comm] at this\n        contradiction\n      . cases' h with w h; cases' h with h₁ h₂\n        rw [←Fin.ext_iff] at h₂\n        rwa [h₂]"},{"tailPos":35983,"headPos":35791,"goalsBefore":["case a.mp\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ (↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j) → i ∈ s","case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"content":"· intro h\n      cases' h with n h\n      . rw [add_comm] at this\n        contradiction\n      . cases' h with w h; cases' h with h₁ h₂\n        rw [←Fin.ext_iff] at h₂\n        rwa [h₂]"},{"tailPos":35990,"headPos":35988,"goalsBefore":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"content":"·"},{"tailPos":35998,"headPos":35991,"goalsBefore":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : i ∈ s\n⊢ ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"content":"intro h"},{"tailPos":36017,"headPos":36005,"goalsBefore":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : i ∈ s\n⊢ ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":["case a.mpr.h\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : i ∈ s\n⊢ ∃ j, j ∈ s ∧ ↑i = ↑j"],"content":"apply Or.inr"},{"tailPos":36029,"headPos":36024,"goalsBefore":["case a.mpr.h\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : i ∈ s\n⊢ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":["case a.mpr.h\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : i ∈ s\n⊢ i ∈ s ∧ ↑i = ↑i"],"content":"use i"},{"tailPos":36054,"headPos":36036,"goalsBefore":["case a.mpr.h\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\nh : i ∈ s\n⊢ i ∈ s ∧ ↑i = ↑i"],"goalsAfter":[],"content":"exact ⟨h, rfl⟩"},{"tailPos":36054,"headPos":35991,"goalsBefore":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":[],"content":"intro h\n      apply Or.inr\n      use i\n      exact ⟨h, rfl⟩"},{"tailPos":36054,"headPos":35988,"goalsBefore":["case a.mpr\nn✝ n : ℕ\ns : Finset (Fin (n - 1))\ni : Fin (n - 1)\nthis : 1 + ↑i ≠ n\n⊢ i ∈ s → ↑i + 1 = n ∨ ∃ j, j ∈ s ∧ ↑i = ↑j"],"goalsAfter":[],"content":"· intro h\n      apply Or.inr\n      use i\n      exact ⟨h, rfl⟩"},{"tailPos":36054,"headPos":35159,"goalsBefore":["n✝ n : ℕ\n⊢ Function.RightInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":[],"content":"intro s\n    ext i\n    have : 1 + (i : ℕ) ≠ n := by\n      apply ne_of_lt\n      convert add_lt_add_left i.is_lt 1\n      rw [add_comm]\n      apply (Nat.succ_pred_eq_of_pos _).symm\n      exact (zero_le i.val).trans_lt (i.2.trans_le (Nat.sub_le n 1))\n    simp only [add_comm, Fin.ext_iff, Fin.val_zero, Fin.val_last, exists_prop, Set.toFinset_setOf,\n      Finset.mem_univ, forall_true_left, Finset.mem_filter, add_eq_zero_iff, and_false,\n      add_left_inj, false_or, true_and]\n    erw [Set.mem_setOf_eq]\n    simp [this, false_or_iff, add_right_inj, add_eq_zero_iff, one_ne_zero, false_and_iff,\n      Fin.val_mk]\n    constructor\n    · intro h\n      cases' h with n h\n      . rw [add_comm] at this\n        contradiction\n      . cases' h with w h; cases' h with h₁ h₂\n        rw [←Fin.ext_iff] at h₂\n        rwa [h₂]\n    · intro h\n      apply Or.inr\n      use i\n      exact ⟨h, rfl⟩"},{"tailPos":35154,"headPos":35152,"goalsBefore":["n✝ n : ℕ\n⊢ Function.RightInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":[],"content":"by"},{"tailPos":36054,"headPos":35152,"goalsBefore":["n✝ n : ℕ\n⊢ Function.RightInverse\n    (fun s =>\n      { boundaries := Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1},\n        zero_mem := (_ : 0 ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}),\n        getLast_mem := (_ : Fin.last n ∈ Set.toFinset {i | i = 0 ∨ i = Fin.last n ∨ ∃ j _hj, ↑i = ↑j + 1}) })\n    fun c => Set.toFinset {i | { val := 1 + ↑i, isLt := (_ : 1 + ↑i < Nat.succ n) } ∈ c.boundaries}"],"goalsAfter":[],"content":"by\n    intro s\n    ext i\n    have : 1 + (i : ℕ) ≠ n := by\n      apply ne_of_lt\n      convert add_lt_add_left i.is_lt 1\n      rw [add_comm]\n      apply (Nat.succ_pred_eq_of_pos _).symm\n      exact (zero_le i.val).trans_lt (i.2.trans_le (Nat.sub_le n 1))\n    simp only [add_comm, Fin.ext_iff, Fin.val_zero, Fin.val_last, exists_prop, Set.toFinset_setOf,\n      Finset.mem_univ, forall_true_left, Finset.mem_filter, add_eq_zero_iff, and_false,\n      add_left_inj, false_or, true_and]\n    erw [Set.mem_setOf_eq]\n    simp [this, false_or_iff, add_right_inj, add_eq_zero_iff, one_ne_zero, false_and_iff,\n      Fin.val_mk]\n    constructor\n    · intro h\n      cases' h with n h\n      . rw [add_comm] at this\n        contradiction\n      . cases' h with w h; cases' h with h₁ h₂\n        rw [←Fin.ext_iff] at h₂\n        rwa [h₂]\n    · intro h\n      apply Or.inr\n      use i\n      exact ⟨h, rfl⟩"},{"tailPos":36462,"headPos":36458,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"simp only [ge_iff_le, Fintype.card_finset, Fintype.card_fin]"},{"tailPos":36457,"headPos":36455,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"by"},{"tailPos":36462,"headPos":36455,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"by simp"},{"tailPos":36462,"headPos":36395,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"goalsAfter":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"content":"have : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1) := by simp"},{"tailPos":36477,"headPos":36469,"goalsBefore":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"goalsAfter":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = Fintype.card (Finset (Fin (n - 1)))"],"content":"← this"},{"tailPos":36478,"headPos":36477,"goalsBefore":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = Fintype.card (Finset (Fin (n - 1)))"],"goalsAfter":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = Fintype.card (Finset (Fin (n - 1)))"],"content":"]"},{"tailPos":36478,"headPos":36465,"goalsBefore":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"goalsAfter":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = Fintype.card (Finset (Fin (n - 1)))"],"content":"rw [← this]"},{"tailPos":36531,"headPos":36481,"goalsBefore":["n✝ n : ℕ\nthis : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1)\n⊢ Fintype.card (CompositionAsSet n) = Fintype.card (Finset (Fin (n - 1)))"],"goalsAfter":[],"content":"exact Fintype.card_congr (compositionAsSetEquiv n)"},{"tailPos":36531,"headPos":36395,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"have : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1) := by simp\n  rw [← this]\n  exact Fintype.card_congr (compositionAsSetEquiv n)"},{"tailPos":36392,"headPos":36390,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"by"},{"tailPos":36531,"headPos":36390,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (CompositionAsSet n) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"by\n  have : Fintype.card (Finset (Fin (n - 1))) = 2 ^ (n - 1) := by simp\n  rw [← this]\n  exact Fintype.card_congr (compositionAsSetEquiv n)"},{"tailPos":37528,"headPos":37496,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < Finset.card c.boundaries"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < length c + 1"],"content":"c.card_boundaries_eq_succ_length"},{"tailPos":37529,"headPos":37528,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < length c + 1"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < length c + 1"],"content":"]"},{"tailPos":37529,"headPos":37492,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < Finset.card c.boundaries"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < length c + 1"],"content":"rw [c.card_boundaries_eq_succ_length]"},{"tailPos":37550,"headPos":37532,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < length c + 1"],"goalsAfter":[],"content":"exact lt_add_one _"},{"tailPos":37550,"headPos":37492,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < Finset.card c.boundaries"],"goalsAfter":[],"content":"rw [c.card_boundaries_eq_succ_length]\n  exact lt_add_one _"},{"tailPos":37489,"headPos":37487,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < Finset.card c.boundaries"],"goalsAfter":[],"content":"by"},{"tailPos":37550,"headPos":37487,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ length c < Finset.card c.boundaries"],"goalsAfter":[],"content":"by\n  rw [c.card_boundaries_eq_succ_length]\n  exact lt_add_one _"},{"tailPos":38355,"headPos":38346,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } = 0"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries))\n      { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } =\n    0"],"content":"boundary,"},{"tailPos":38407,"headPos":38356,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries))\n      { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } =\n    0"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ Finset.min' c.boundaries (_ : Finset.Nonempty c.boundaries) = 0"],"content":"Finset.orderEmbOfFin_zero rfl c.card_boundaries_pos"},{"tailPos":38408,"headPos":38407,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Finset.min' c.boundaries (_ : Finset.Nonempty c.boundaries) = 0"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ Finset.min' c.boundaries (_ : Finset.Nonempty c.boundaries) = 0"],"content":"]"},{"tailPos":38408,"headPos":38342,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } = 0"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\n⊢ Finset.min' c.boundaries (_ : Finset.Nonempty c.boundaries) = 0"],"content":"rw [boundary, Finset.orderEmbOfFin_zero rfl c.card_boundaries_pos]"},{"tailPos":38476,"headPos":38411,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Finset.min' c.boundaries (_ : Finset.Nonempty c.boundaries) = 0"],"goalsAfter":[],"content":"exact le_antisymm (Finset.min'_le _ _ c.zero_mem) (Fin.zero_le _)"},{"tailPos":38476,"headPos":38342,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } = 0"],"goalsAfter":[],"content":"rw [boundary, Finset.orderEmbOfFin_zero rfl c.card_boundaries_pos]\n  exact le_antisymm (Finset.min'_le _ _ c.zero_mem) (Fin.zero_le _)"},{"tailPos":38339,"headPos":38337,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } = 0"],"goalsAfter":[],"content":"by"},{"tailPos":38476,"headPos":38337,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := 0, isLt := (_ : 0 < Finset.card c.boundaries) } = 0"],"goalsAfter":[],"content":"by\n  rw [boundary, Finset.orderEmbOfFin_zero rfl c.card_boundaries_pos]\n  exact le_antisymm (Finset.min'_le _ _ c.zero_mem) (Fin.zero_le _)"},{"tailPos":38718,"headPos":38659,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := length c, isLt := (_ : length c < Finset.card c.boundaries) } = Fin.last n"],"goalsAfter":["case h.e'_3\nn : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n = Finset.max' c.boundaries (_ : Finset.Nonempty c.boundaries)"],"content":"convert Finset.orderEmbOfFin_last rfl c.card_boundaries_pos"},{"tailPos":38789,"headPos":38721,"goalsBefore":["case h.e'_3\nn : ℕ\nc : CompositionAsSet n\n⊢ Fin.last n = Finset.max' c.boundaries (_ : Finset.Nonempty c.boundaries)"],"goalsAfter":[],"content":"exact le_antisymm (Finset.le_max' _ _ c.getLast_mem) (Fin.le_last _)"},{"tailPos":38789,"headPos":38659,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := length c, isLt := (_ : length c < Finset.card c.boundaries) } = Fin.last n"],"goalsAfter":[],"content":"convert Finset.orderEmbOfFin_last rfl c.card_boundaries_pos\n  exact le_antisymm (Finset.le_max' _ _ c.getLast_mem) (Fin.le_last _)"},{"tailPos":38656,"headPos":38654,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := length c, isLt := (_ : length c < Finset.card c.boundaries) } = Fin.last n"],"goalsAfter":[],"content":"by"},{"tailPos":38789,"headPos":38654,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ↑(boundary c) { val := length c, isLt := (_ : length c < Finset.card c.boundaries) } = Fin.last n"],"goalsAfter":[],"content":"by\n  convert Finset.orderEmbOfFin_last rfl c.card_boundaries_pos\n  exact le_antisymm (Finset.le_max' _ _ c.getLast_mem) (Fin.le_last _)"},{"tailPos":40051,"headPos":40029,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni : ℕ\nh : i < Finset.card c.boundaries\n⊢ sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })"],"goalsAfter":["case zero\nn : ℕ\nc : CompositionAsSet n\ni : ℕ\nh✝ : i < Finset.card c.boundaries\nh : Nat.zero < Finset.card c.boundaries\n⊢ sum (take Nat.zero (blocks c)) = ↑(↑(boundary c) { val := Nat.zero, isLt := h })","case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"induction' i with i IH"},{"tailPos":40056,"headPos":40054,"goalsBefore":["case zero\nn : ℕ\nc : CompositionAsSet n\ni : ℕ\nh✝ : i < Finset.card c.boundaries\nh : Nat.zero < Finset.card c.boundaries\n⊢ sum (take Nat.zero (blocks c)) = ↑(↑(boundary c) { val := Nat.zero, isLt := h })","case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case zero\nn : ℕ\nc : CompositionAsSet n\ni : ℕ\nh✝ : i < Finset.card c.boundaries\nh : Nat.zero < Finset.card c.boundaries\n⊢ sum (take Nat.zero (blocks c)) = ↑(↑(boundary c) { val := Nat.zero, isLt := h })"],"content":"·"},{"tailPos":40061,"headPos":40057,"goalsBefore":["case zero\nn : ℕ\nc : CompositionAsSet n\ni : ℕ\nh✝ : i < Finset.card c.boundaries\nh : Nat.zero < Finset.card c.boundaries\n⊢ sum (take Nat.zero (blocks c)) = ↑(↑(boundary c) { val := Nat.zero, isLt := h })"],"goalsAfter":[],"content":"simp only [take, sum_nil, Nat.zero_eq, boundary_zero, Fin.val_zero]"},{"tailPos":40061,"headPos":40054,"goalsBefore":["case zero\nn : ℕ\nc : CompositionAsSet n\ni : ℕ\nh✝ : i < Finset.card c.boundaries\nh : Nat.zero < Finset.card c.boundaries\n⊢ sum (take Nat.zero (blocks c)) = ↑(↑(boundary c) { val := Nat.zero, isLt := h })","case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"· simp"},{"tailPos":40139,"headPos":40107,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ i < List.length (blocks c)"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < length c + 1\n⊢ i < List.length (blocks c)"],"content":"c.card_boundaries_eq_succ_length"},{"tailPos":40140,"headPos":40139,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < length c + 1\n⊢ i < List.length (blocks c)"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < length c + 1\n⊢ i < List.length (blocks c)"],"content":"]"},{"tailPos":40145,"headPos":40103,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ i < List.length (blocks c)"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < length c + 1\n⊢ i < List.length (blocks c)"],"content":"rw [c.card_boundaries_eq_succ_length] at h"},{"tailPos":40189,"headPos":40150,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < length c + 1\n⊢ i < List.length (blocks c)"],"goalsAfter":[],"content":"simp [blocks, Nat.lt_of_succ_lt_succ h]"},{"tailPos":40189,"headPos":40103,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ i < List.length (blocks c)"],"goalsAfter":[],"content":"rw [c.card_boundaries_eq_succ_length] at h\n    simp [blocks, Nat.lt_of_succ_lt_succ h]"},{"tailPos":40098,"headPos":40096,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ i < List.length (blocks c)"],"goalsAfter":[],"content":"by"},{"tailPos":40189,"headPos":40096,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ i < List.length (blocks c)"],"goalsAfter":[],"content":"by\n    rw [c.card_boundaries_eq_succ_length] at h\n    simp [blocks, Nat.lt_of_succ_lt_succ h]"},{"tailPos":40189,"headPos":40064,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"have A : i < c.blocks.length := by\n    rw [c.card_boundaries_eq_succ_length] at h\n    simp [blocks, Nat.lt_of_succ_lt_succ h]"},{"tailPos":40280,"headPos":40247,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\n⊢ List.length (blocks c) ≤ Finset.card c.boundaries"],"goalsAfter":[],"content":"simp [blocks, length, Nat.sub_le]"},{"tailPos":40246,"headPos":40244,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\n⊢ List.length (blocks c) ≤ Finset.card c.boundaries"],"goalsAfter":[],"content":"by"},{"tailPos":40280,"headPos":40244,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\n⊢ List.length (blocks c) ≤ Finset.card c.boundaries"],"goalsAfter":[],"content":"by simp [blocks, length, Nat.sub_le]"},{"tailPos":40281,"headPos":40192,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"have B : i < c.boundaries.card := lt_of_lt_of_le A (by simp [blocks, length, Nat.sub_le])"},{"tailPos":40308,"headPos":40288,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ sum (take i (blocks c)) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"sum_take_succ _ _ A,"},{"tailPos":40313,"headPos":40309,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ sum (take i (blocks c)) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"IH B"},{"tailPos":40314,"headPos":40313,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"]"},{"tailPos":40314,"headPos":40284,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ sum (take (Nat.succ i) (blocks c)) = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"rw [sum_take_succ _ _ A, IH B]"},{"tailPos":40359,"headPos":40317,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) + nthLe (blocks c) i A = ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) +\n      (↑(↑(boundary c)\n            { val := i + 1, isLt := (_ : ↑{ val := i, isLt := (_ : i < length c) } + 1 < Finset.card c.boundaries) }) -\n        ↑(↑(boundary c)\n            { val := i, isLt := (_ : ↑{ val := i, isLt := (_ : i < length c) } < Finset.card c.boundaries) })) =\n    ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"content":"simp only [blocks, blocksFun, nthLe_ofFn']"},{"tailPos":40389,"headPos":40362,"goalsBefore":["case succ\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) +\n      (↑(↑(boundary c)\n            { val := i + 1, isLt := (_ : ↑{ val := i, isLt := (_ : i < length c) } + 1 < Finset.card c.boundaries) }) -\n        ↑(↑(boundary c)\n            { val := i, isLt := (_ : ↑{ val := i, isLt := (_ : i < length c) } < Finset.card c.boundaries) })) =\n    ↑(↑(boundary c) { val := Nat.succ i, isLt := h })"],"goalsAfter":["case succ.h\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) ≤\n    ↑(↑(boundary c)\n        { val := i + 1, isLt := (_ : ↑{ val := i, isLt := (_ : i < length c) } + 1 < Finset.card c.boundaries) })"],"content":"apply add_tsub_cancel_of_le"},{"tailPos":40396,"headPos":40392,"goalsBefore":["case succ.h\nn : ℕ\nc : CompositionAsSet n\ni✝ : ℕ\nh✝ : i✝ < Finset.card c.boundaries\ni : ℕ\nIH : ∀ (h : i < Finset.card c.boundaries), sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })\nh : Nat.succ i < Finset.card c.boundaries\nA : i < List.length (blocks c)\nB : i < Finset.card c.boundaries\n⊢ ↑(↑(boundary c) { val := i, isLt := B }) ≤\n    ↑(↑(boundary c)\n        { val := i + 1, isLt := (_ : ↑{ val := i, isLt := (_ : i < length c) } + 1 < Finset.card c.boundaries) })"],"goalsAfter":[],"content":"simp only [Fin.val_fin_le, OrderEmbedding.le_iff_le, Fin.mk_le_mk, le_add_iff_nonneg_right]"},{"tailPos":40396,"headPos":40029,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni : ℕ\nh : i < Finset.card c.boundaries\n⊢ sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })"],"goalsAfter":[],"content":"induction' i with i IH\n  · simp\n  have A : i < c.blocks.length := by\n    rw [c.card_boundaries_eq_succ_length] at h\n    simp [blocks, Nat.lt_of_succ_lt_succ h]\n  have B : i < c.boundaries.card := lt_of_lt_of_le A (by simp [blocks, length, Nat.sub_le])\n  rw [sum_take_succ _ _ A, IH B]\n  simp only [blocks, blocksFun, nthLe_ofFn']\n  apply add_tsub_cancel_of_le\n  simp"},{"tailPos":40026,"headPos":40024,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni : ℕ\nh : i < Finset.card c.boundaries\n⊢ sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })"],"goalsAfter":[],"content":"by"},{"tailPos":40396,"headPos":40024,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\ni : ℕ\nh : i < Finset.card c.boundaries\n⊢ sum (take i (blocks c)) = ↑(↑(boundary c) { val := i, isLt := h })"],"goalsAfter":[],"content":"by\n  induction' i with i IH\n  · simp\n  have A : i < c.blocks.length := by\n    rw [c.card_boundaries_eq_succ_length] at h\n    simp [blocks, Nat.lt_of_succ_lt_succ h]\n  have B : i < c.boundaries.card := lt_of_lt_of_le A (by simp [blocks, length, Nat.sub_le])\n  rw [sum_take_succ _ _ A, IH B]\n  simp only [blocks, blocksFun, nthLe_ofFn']\n  apply add_tsub_cancel_of_le\n  simp"},{"tailPos":40651,"headPos":40640,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries ↔ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries → ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j","case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"content":"constructor"},{"tailPos":40656,"headPos":40654,"goalsBefore":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries → ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j","case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"goalsAfter":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries → ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"·"},{"tailPos":40665,"headPos":40657,"goalsBefore":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries → ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"intro hj"},{"tailPos":40748,"headPos":40670,"goalsBefore":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i =\n    { val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"rcases(c.boundaries.orderIsoOfFin rfl).surjective ⟨j, hj⟩ with ⟨i, hi⟩"},{"tailPos":40773,"headPos":40757,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i =\n    { val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"Subtype.ext_iff,"},{"tailPos":40788,"headPos":40774,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"Subtype.coe_mk"},{"tailPos":40789,"headPos":40788,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"]"},{"tailPos":40795,"headPos":40753,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i =\n    { val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"rw [Subtype.ext_iff, Subtype.coe_mk] at hi"},{"tailPos":40825,"headPos":40800,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"content":"refine' ⟨i.1, i.2, _⟩"},{"tailPos":40841,"headPos":40830,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi :\n  ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i) =\n    ↑{ val := j, property := hj }\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"content":"dsimp at hi"},{"tailPos":40857,"headPos":40850,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ sum (take (↑i) (blocks c)) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"content":"← hi,"},{"tailPos":40882,"headPos":40858,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ sum (take (↑i) (blocks c)) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ ↑(↑(boundary c) { val := ↑i, isLt := (_ : ↑i < Finset.card c.boundaries) }) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"content":"c.blocks_partial_sum i.2"},{"tailPos":40883,"headPos":40882,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ ↑(↑(boundary c) { val := ↑i, isLt := (_ : ↑i < Finset.card c.boundaries) }) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ ↑(↑(boundary c) { val := ↑i, isLt := (_ : ↑i < Finset.card c.boundaries) }) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"content":"]"},{"tailPos":40883,"headPos":40846,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"goalsAfter":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ ↑(↑(boundary c) { val := ↑i, isLt := (_ : ↑i < Finset.card c.boundaries) }) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"content":"rw [← hi, c.blocks_partial_sum i.2]"},{"tailPos":40891,"headPos":40888,"goalsBefore":["case mp.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\nhj : j ∈ c.boundaries\ni : Fin (Finset.card c.boundaries)\nhi : ↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i = j\n⊢ ↑(↑(boundary c) { val := ↑i, isLt := (_ : ↑i < Finset.card c.boundaries) }) =\n    ↑(↑(Finset.orderEmbOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries)) i)"],"goalsAfter":[],"content":"rfl"},{"tailPos":40891,"headPos":40657,"goalsBefore":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries → ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":[],"content":"intro hj\n    rcases(c.boundaries.orderIsoOfFin rfl).surjective ⟨j, hj⟩ with ⟨i, hi⟩\n    rw [Subtype.ext_iff, Subtype.coe_mk] at hi\n    refine' ⟨i.1, i.2, _⟩\n    dsimp at hi\n    rw [← hi, c.blocks_partial_sum i.2]\n    rfl"},{"tailPos":40891,"headPos":40654,"goalsBefore":["case mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries → ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j","case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"goalsAfter":["case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"content":"· intro hj\n    rcases(c.boundaries.orderIsoOfFin rfl).surjective ⟨j, hj⟩ with ⟨i, hi⟩\n    rw [Subtype.ext_iff, Subtype.coe_mk] at hi\n    refine' ⟨i.1, i.2, _⟩\n    dsimp at hi\n    rw [← hi, c.blocks_partial_sum i.2]\n    rfl"},{"tailPos":40896,"headPos":40894,"goalsBefore":["case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"goalsAfter":["case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"content":"·"},{"tailPos":40918,"headPos":40897,"goalsBefore":["case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"goalsAfter":["case mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ j ∈ c.boundaries"],"content":"rintro ⟨i, hi, H⟩"},{"tailPos":40977,"headPos":40923,"goalsBefore":["case mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ j ∈ c.boundaries"],"goalsAfter":["case h.e'_4\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ j =\n    ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries))\n        { val := i, isLt := hi })"],"content":"convert (c.boundaries.orderIsoOfFin rfl ⟨i, hi⟩).2"},{"tailPos":41039,"headPos":41027,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ ↑(boundary c) { val := i, isLt := hi } = j"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ ↑(↑(boundary c) { val := i, isLt := hi }) = ↑j"],"content":"Fin.ext_iff,"},{"tailPos":41067,"headPos":41040,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ ↑(↑(boundary c) { val := i, isLt := hi }) = ↑j"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ sum (take i (blocks c)) = ↑j"],"content":"← c.blocks_partial_sum hi"},{"tailPos":41068,"headPos":41067,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ sum (take i (blocks c)) = ↑j"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ sum (take i (blocks c)) = ↑j"],"content":"]"},{"tailPos":41068,"headPos":41022,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ ↑(boundary c) { val := i, isLt := hi } = j"],"goalsAfter":[],"content":"rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]"},{"tailPos":41021,"headPos":41019,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ ↑(boundary c) { val := i, isLt := hi } = j"],"goalsAfter":[],"content":"by"},{"tailPos":41068,"headPos":41019,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ ↑(boundary c) { val := i, isLt := hi } = j"],"goalsAfter":[],"content":"by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]"},{"tailPos":41068,"headPos":40982,"goalsBefore":["case h.e'_4\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\n⊢ j =\n    ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries))\n        { val := i, isLt := hi })"],"goalsAfter":["case h.e'_4\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\nthis : ↑(boundary c) { val := i, isLt := hi } = j\n⊢ j =\n    ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries))\n        { val := i, isLt := hi })"],"content":"have : c.boundary ⟨i, hi⟩ = j := by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]"},{"tailPos":41088,"headPos":41073,"goalsBefore":["case h.e'_4\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\nhi : i < Finset.card c.boundaries\nH : sum (take i (blocks c)) = ↑j\nthis : ↑(boundary c) { val := i, isLt := hi } = j\n⊢ j =\n    ↑(↑(Finset.orderIsoOfFin c.boundaries (_ : Finset.card c.boundaries = Finset.card c.boundaries))\n        { val := i, isLt := hi })"],"goalsAfter":[],"content":"exact this.symm"},{"tailPos":41088,"headPos":40897,"goalsBefore":["case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"goalsAfter":[],"content":"rintro ⟨i, hi, H⟩\n    convert (c.boundaries.orderIsoOfFin rfl ⟨i, hi⟩).2\n    have : c.boundary ⟨i, hi⟩ = j := by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]\n    exact this.symm"},{"tailPos":41088,"headPos":40894,"goalsBefore":["case mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) → j ∈ c.boundaries"],"goalsAfter":[],"content":"· rintro ⟨i, hi, H⟩\n    convert (c.boundaries.orderIsoOfFin rfl ⟨i, hi⟩).2\n    have : c.boundary ⟨i, hi⟩ = j := by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]\n    exact this.symm"},{"tailPos":41088,"headPos":40640,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries ↔ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":[],"content":"constructor\n  · intro hj\n    rcases(c.boundaries.orderIsoOfFin rfl).surjective ⟨j, hj⟩ with ⟨i, hi⟩\n    rw [Subtype.ext_iff, Subtype.coe_mk] at hi\n    refine' ⟨i.1, i.2, _⟩\n    dsimp at hi\n    rw [← hi, c.blocks_partial_sum i.2]\n    rfl\n  · rintro ⟨i, hi, H⟩\n    convert (c.boundaries.orderIsoOfFin rfl ⟨i, hi⟩).2\n    have : c.boundary ⟨i, hi⟩ = j := by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]\n    exact this.symm"},{"tailPos":40637,"headPos":40635,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries ↔ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":[],"content":"by"},{"tailPos":41088,"headPos":40635,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ c.boundaries ↔ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":[],"content":"by\n  constructor\n  · intro hj\n    rcases(c.boundaries.orderIsoOfFin rfl).surjective ⟨j, hj⟩ with ⟨i, hi⟩\n    rw [Subtype.ext_iff, Subtype.coe_mk] at hi\n    refine' ⟨i.1, i.2, _⟩\n    dsimp at hi\n    rw [← hi, c.blocks_partial_sum i.2]\n    rfl\n  · rintro ⟨i, hi, H⟩\n    convert (c.boundaries.orderIsoOfFin rfl ⟨i, hi⟩).2\n    have : c.boundary ⟨i, hi⟩ = j := by rwa [Fin.ext_iff, ← c.blocks_partial_sum hi]\n    exact this.symm"},{"tailPos":41345,"headPos":41332,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ List.length (blocks c) ≤ length c"],"goalsAfter":[],"content":"simp [blocks]"},{"tailPos":41331,"headPos":41329,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ List.length (blocks c) ≤ length c"],"goalsAfter":[],"content":"by"},{"tailPos":41345,"headPos":41329,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ List.length (blocks c) ≤ length c"],"goalsAfter":[],"content":"by simp [blocks]"},{"tailPos":41346,"headPos":41269,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ sum (blocks c) = n"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ sum (blocks c) = n"],"content":"have : c.blocks.take c.length = c.blocks := take_all_of_le (by simp [blocks])"},{"tailPos":41362,"headPos":41353,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ sum (blocks c) = n"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ sum (take (length c) (blocks c)) = n"],"content":"← this,"},{"tailPos":41412,"headPos":41363,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ sum (take (length c) (blocks c)) = n"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(↑(boundary c) { val := length c, isLt := (_ : length c < Finset.card c.boundaries) }) = n"],"content":"c.blocks_partial_sum c.length_lt_card_boundaries,"},{"tailPos":41430,"headPos":41413,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(↑(boundary c) { val := length c, isLt := (_ : length c < Finset.card c.boundaries) }) = n"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(Fin.last n) = n"],"content":"c.boundary_length"},{"tailPos":41431,"headPos":41430,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(Fin.last n) = n"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(Fin.last n) = n"],"content":"]"},{"tailPos":41431,"headPos":41349,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ sum (blocks c) = n"],"goalsAfter":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(Fin.last n) = n"],"content":"rw [← this, c.blocks_partial_sum c.length_lt_card_boundaries, c.boundary_length]"},{"tailPos":41437,"headPos":41434,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nthis : take (length c) (blocks c) = blocks c\n⊢ ↑(Fin.last n) = n"],"goalsAfter":[],"content":"rfl"},{"tailPos":41437,"headPos":41269,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ sum (blocks c) = n"],"goalsAfter":[],"content":"have : c.blocks.take c.length = c.blocks := take_all_of_le (by simp [blocks])\n  rw [← this, c.blocks_partial_sum c.length_lt_card_boundaries, c.boundary_length]\n  rfl"},{"tailPos":41266,"headPos":41264,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ sum (blocks c) = n"],"goalsAfter":[],"content":"by"},{"tailPos":41437,"headPos":41264,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ sum (blocks c) = n"],"goalsAfter":[],"content":"by\n  have : c.blocks.take c.length = c.blocks := take_all_of_le (by simp [blocks])\n  rw [← this, c.blocks_partial_sum c.length_lt_card_boundaries, c.boundary_length]\n  rfl"},{"tailPos":41792,"headPos":41719,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ∀ {i : ℕ}, i ∈ blocks c → 0 < i"],"goalsAfter":[],"content":"simp only [blocks, forall_mem_ofFn_iff, blocksFun_pos c, forall_true_iff]"},{"tailPos":41718,"headPos":41716,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ∀ {i : ℕ}, i ∈ blocks c → 0 < i"],"goalsAfter":[],"content":"by"},{"tailPos":41792,"headPos":41716,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ ∀ {i : ℕ}, i ∈ blocks c → 0 < i"],"goalsAfter":[],"content":"by simp only [blocks, forall_mem_ofFn_iff, blocksFun_pos c, forall_true_iff]"},{"tailPos":42471,"headPos":42375,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.length (toCompositionAsSet c) = length c"],"goalsAfter":[],"content":"simp [Composition.toCompositionAsSet, CompositionAsSet.length, c.card_boundaries_eq_succ_length]"},{"tailPos":42372,"headPos":42370,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.length (toCompositionAsSet c) = length c"],"goalsAfter":[],"content":"by"},{"tailPos":42471,"headPos":42370,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.length (toCompositionAsSet c) = length c"],"goalsAfter":[],"content":"by\n  simp [Composition.toCompositionAsSet, CompositionAsSet.length, c.card_boundaries_eq_succ_length]"},{"tailPos":42763,"headPos":42686,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.length (toComposition c) = length c"],"goalsAfter":[],"content":"simp [CompositionAsSet.toComposition, Composition.length, Composition.blocks]"},{"tailPos":42683,"headPos":42681,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.length (toComposition c) = length c"],"goalsAfter":[],"content":"by"},{"tailPos":42763,"headPos":42681,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.length (toComposition c) = length c"],"goalsAfter":[],"content":"by\n  simp [CompositionAsSet.toComposition, Composition.length, Composition.blocks]"},{"tailPos":43007,"headPos":42978,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.blocks (toCompositionAsSet c) = c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ CompositionAsSet.blocks (toCompositionAsSet c) = c.blocks"],"content":"let d := c.toCompositionAsSet"},{"tailPos":43036,"headPos":43010,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ CompositionAsSet.blocks (toCompositionAsSet c) = c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ CompositionAsSet.blocks d = c.blocks"],"content":"change d.blocks = c.blocks"},{"tailPos":43135,"headPos":43100,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ List.length (CompositionAsSet.blocks d) = List.length c.blocks"],"goalsAfter":["case h.e'_2\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ List.length (CompositionAsSet.blocks d) = CompositionAsSet.length (toCompositionAsSet c)"],"content":"convert c.toCompositionAsSet_length"},{"tailPos":43170,"headPos":43140,"goalsBefore":["case h.e'_2\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ List.length (CompositionAsSet.blocks d) = CompositionAsSet.length (toCompositionAsSet c)"],"goalsAfter":[],"content":"simp [CompositionAsSet.blocks]"},{"tailPos":43170,"headPos":43100,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ List.length (CompositionAsSet.blocks d) = List.length c.blocks"],"goalsAfter":[],"content":"convert c.toCompositionAsSet_length\n    simp [CompositionAsSet.blocks]"},{"tailPos":43095,"headPos":43093,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ List.length (CompositionAsSet.blocks d) = List.length c.blocks"],"goalsAfter":[],"content":"by"},{"tailPos":43170,"headPos":43093,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ List.length (CompositionAsSet.blocks d) = List.length c.blocks"],"goalsAfter":[],"content":"by\n    convert c.toCompositionAsSet_length\n    simp [CompositionAsSet.blocks]"},{"tailPos":43170,"headPos":43039,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\n⊢ CompositionAsSet.blocks d = c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\n⊢ CompositionAsSet.blocks d = c.blocks"],"content":"have length_eq : d.blocks.length = c.blocks.length := by\n    convert c.toCompositionAsSet_length\n    simp [CompositionAsSet.blocks]"},{"tailPos":43258,"headPos":43173,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\n⊢ CompositionAsSet.blocks d = c.blocks"],"goalsAfter":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\nH :\n  ∀ (i : ℕ),\n    i ≤ List.length (CompositionAsSet.blocks d) → sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)\n⊢ CompositionAsSet.blocks d = c.blocks","case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\n⊢ ∀ (i : ℕ),\n    i ≤ List.length (CompositionAsSet.blocks d) → sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"suffices H : ∀ i ≤ d.blocks.length, (d.blocks.take i).sum = (c.blocks.take i).sum"},{"tailPos":43296,"headPos":43261,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\nH :\n  ∀ (i : ℕ),\n    i ≤ List.length (CompositionAsSet.blocks d) → sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)\n⊢ CompositionAsSet.blocks d = c.blocks","case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\n⊢ ∀ (i : ℕ),\n    i ≤ List.length (CompositionAsSet.blocks d) → sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\n⊢ ∀ (i : ℕ),\n    i ≤ List.length (CompositionAsSet.blocks d) → sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"exact eq_of_sum_take_eq length_eq H"},{"tailPos":43309,"headPos":43299,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\n⊢ ∀ (i : ℕ),\n    i ≤ List.length (CompositionAsSet.blocks d) → sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"intro i hi"},{"tailPos":43580,"headPos":43448,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\n⊢ i < Finset.card d.boundaries"],"goalsAfter":[],"content":"simpa only [Nat.succ_eq_add_one, d.card_boundaries_eq_succ_length, toCompositionAsSet_length,\n  CompositionAsSet.blocks, length_ofFn] using Nat.lt_succ_iff.2 hi"},{"tailPos":43351,"headPos":43349,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\n⊢ i < Finset.card d.boundaries"],"goalsAfter":[],"content":"by"},{"tailPos":43580,"headPos":43349,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\n⊢ i < Finset.card d.boundaries"],"goalsAfter":[],"content":"by\n    -- porting note: relied on `convert` unfolding definitions, switched to using a `simpa`\n    simpa [CompositionAsSet.blocks, length_ofFn, Nat.succ_eq_add_one,\n      d.card_boundaries_eq_succ_length] using Nat.lt_succ_iff.2 hi"},{"tailPos":43580,"headPos":43312,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"have i_lt : i < d.boundaries.card := by\n    -- porting note: relied on `convert` unfolding definitions, switched to using a `simpa`\n    simpa [CompositionAsSet.blocks, length_ofFn, Nat.succ_eq_add_one,\n      d.card_boundaries_eq_succ_length] using Nat.lt_succ_iff.2 hi"},{"tailPos":43625,"headPos":43583,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"have i_lt' : i < c.boundaries.card := i_lt"},{"tailPos":43702,"headPos":43670,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\n⊢ i < length c + 1"],"goalsAfter":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < length c + 1\n⊢ i < length c + 1"],"content":"c.card_boundaries_eq_succ_length"},{"tailPos":43703,"headPos":43702,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < length c + 1\n⊢ i < length c + 1"],"goalsAfter":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < length c + 1\n⊢ i < length c + 1"],"content":"]"},{"tailPos":43712,"headPos":43665,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\n⊢ i < length c + 1"],"goalsAfter":[],"content":"rwa [c.card_boundaries_eq_succ_length] at i_lt'"},{"tailPos":43664,"headPos":43662,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\n⊢ i < length c + 1"],"goalsAfter":[],"content":"by"},{"tailPos":43712,"headPos":43662,"goalsBefore":["n : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\n⊢ i < length c + 1"],"goalsAfter":[],"content":"by rwa [c.card_boundaries_eq_succ_length] at i_lt'"},{"tailPos":43712,"headPos":43628,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"have i_lt'' : i < c.length + 1 := by rwa [c.card_boundaries_eq_succ_length] at i_lt'"},{"tailPos":43867,"headPos":43715,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"have A :\n    d.boundaries.orderEmbOfFin rfl ⟨i, i_lt⟩ =\n      c.boundaries.orderEmbOfFin c.card_boundaries_eq_succ_length ⟨i, i_lt''⟩ :=\n    rfl"},{"tailPos":43927,"headPos":43870,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"content":"have B : c.sizeUpTo i = c.boundary ⟨i, i_lt''⟩ := rfl"},{"tailPos":43960,"headPos":43934,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(CompositionAsSet.boundary d) { val := i, isLt := i_lt }) = sum (take i c.blocks)"],"content":"d.blocks_partial_sum i_lt,"},{"tailPos":43987,"headPos":43961,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(CompositionAsSet.boundary d) { val := i, isLt := i_lt }) = sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n        { val := i, isLt := i_lt }) =\n    sum (take i c.blocks)"],"content":"CompositionAsSet.boundary,"},{"tailPos":44013,"headPos":43988,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n        { val := i, isLt := i_lt }) =\n    sum (take i c.blocks)"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n        { val := i, isLt := i_lt }) =\n    sizeUpTo c i"],"content":"← Composition.sizeUpTo,"},{"tailPos":44016,"headPos":44014,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n        { val := i, isLt := i_lt }) =\n    sizeUpTo c i"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n        { val := i, isLt := i_lt }) =\n    ↑(↑(boundary c) { val := i, isLt := i_lt'' })"],"content":"B,"},{"tailPos":44019,"headPos":44017,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n        { val := i, isLt := i_lt }) =\n    ↑(↑(boundary c) { val := i, isLt := i_lt'' })"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1))\n        { val := i, isLt := i_lt'' }) =\n    ↑(↑(boundary c) { val := i, isLt := i_lt'' })"],"content":"A,"},{"tailPos":44050,"headPos":44024,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1))\n        { val := i, isLt := i_lt'' }) =\n    ↑(↑(boundary c) { val := i, isLt := i_lt'' })"],"goalsAfter":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(boundary c) { val := i, isLt := i_lt'' }) = ↑(↑(boundary c) { val := i, isLt := i_lt'' })"],"content":"c.orderEmbOfFin_boundaries"},{"tailPos":44051,"headPos":44050,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ ↑(↑(boundary c) { val := i, isLt := i_lt'' }) = ↑(↑(boundary c) { val := i, isLt := i_lt'' })"],"goalsAfter":[],"content":"]"},{"tailPos":44051,"headPos":43930,"goalsBefore":["case H\nn : ℕ\nc : Composition n\nd : CompositionAsSet n := toCompositionAsSet c\nlength_eq : List.length (CompositionAsSet.blocks d) = List.length c.blocks\ni : ℕ\nhi : i ≤ List.length (CompositionAsSet.blocks d)\ni_lt : i < Finset.card d.boundaries\ni_lt' : i < Finset.card (boundaries c)\ni_lt'' : i < length c + 1\nA :\n  ↑(Finset.orderEmbOfFin d.boundaries (_ : Finset.card d.boundaries = Finset.card d.boundaries))\n      { val := i, isLt := i_lt } =\n    ↑(Finset.orderEmbOfFin (boundaries c) (_ : Finset.card (boundaries c) = length c + 1)) { val := i, isLt := i_lt'' }\nB : sizeUpTo c i = ↑(↑(boundary c) { val := i, isLt := i_lt'' })\n⊢ sum (take i (CompositionAsSet.blocks d)) = sum (take i c.blocks)"],"goalsAfter":[],"content":"rw [d.blocks_partial_sum i_lt, CompositionAsSet.boundary, ← Composition.sizeUpTo, B, A,\n    c.orderEmbOfFin_boundaries]"},{"tailPos":44051,"headPos":42978,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.blocks (toCompositionAsSet c) = c.blocks"],"goalsAfter":[],"content":"let d := c.toCompositionAsSet\n  change d.blocks = c.blocks\n  have length_eq : d.blocks.length = c.blocks.length := by\n    convert c.toCompositionAsSet_length\n    simp [CompositionAsSet.blocks]\n  suffices H : ∀ i ≤ d.blocks.length, (d.blocks.take i).sum = (c.blocks.take i).sum\n  exact eq_of_sum_take_eq length_eq H\n  intro i hi\n  have i_lt : i < d.boundaries.card := by\n    -- porting note: relied on `convert` unfolding definitions, switched to using a `simpa`\n    simpa [CompositionAsSet.blocks, length_ofFn, Nat.succ_eq_add_one,\n      d.card_boundaries_eq_succ_length] using Nat.lt_succ_iff.2 hi\n  have i_lt' : i < c.boundaries.card := i_lt\n  have i_lt'' : i < c.length + 1 := by rwa [c.card_boundaries_eq_succ_length] at i_lt'\n  have A :\n    d.boundaries.orderEmbOfFin rfl ⟨i, i_lt⟩ =\n      c.boundaries.orderEmbOfFin c.card_boundaries_eq_succ_length ⟨i, i_lt''⟩ :=\n    rfl\n  have B : c.sizeUpTo i = c.boundary ⟨i, i_lt''⟩ := rfl\n  rw [d.blocks_partial_sum i_lt, CompositionAsSet.boundary, ← Composition.sizeUpTo, B, A,\n    c.orderEmbOfFin_boundaries]"},{"tailPos":42975,"headPos":42973,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.blocks (toCompositionAsSet c) = c.blocks"],"goalsAfter":[],"content":"by"},{"tailPos":44051,"headPos":42973,"goalsBefore":["n : ℕ\nc : Composition n\n⊢ CompositionAsSet.blocks (toCompositionAsSet c) = c.blocks"],"goalsAfter":[],"content":"by\n  let d := c.toCompositionAsSet\n  change d.blocks = c.blocks\n  have length_eq : d.blocks.length = c.blocks.length := by\n    convert c.toCompositionAsSet_length\n    simp [CompositionAsSet.blocks]\n  suffices H : ∀ i ≤ d.blocks.length, (d.blocks.take i).sum = (c.blocks.take i).sum\n  exact eq_of_sum_take_eq length_eq H\n  intro i hi\n  have i_lt : i < d.boundaries.card := by\n    -- porting note: relied on `convert` unfolding definitions, switched to using a `simpa`\n    simpa [CompositionAsSet.blocks, length_ofFn, Nat.succ_eq_add_one,\n      d.card_boundaries_eq_succ_length] using Nat.lt_succ_iff.2 hi\n  have i_lt' : i < c.boundaries.card := i_lt\n  have i_lt'' : i < c.length + 1 := by rwa [c.card_boundaries_eq_succ_length] at i_lt'\n  have A :\n    d.boundaries.orderEmbOfFin rfl ⟨i, i_lt⟩ =\n      c.boundaries.orderEmbOfFin c.card_boundaries_eq_succ_length ⟨i, i_lt''⟩ :=\n    rfl\n  have B : c.sizeUpTo i = c.boundary ⟨i, i_lt''⟩ := rfl\n  rw [d.blocks_partial_sum i_lt, CompositionAsSet.boundary, ← Composition.sizeUpTo, B, A,\n    c.orderEmbOfFin_boundaries]"},{"tailPos":44498,"headPos":44493,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.boundaries (toComposition c) = c.boundaries"],"goalsAfter":["case a\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ Composition.boundaries (toComposition c) ↔ j ∈ c.boundaries"],"content":"ext j"},{"tailPos":44599,"headPos":44501,"goalsBefore":["case a\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ j ∈ Composition.boundaries (toComposition c) ↔ j ∈ c.boundaries"],"goalsAfter":["case a\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) ↔\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"simp only [c.mem_boundaries_iff_exists_blocks_sum_take_eq, Composition.boundaries, Finset.mem_map]"},{"tailPos":44613,"headPos":44602,"goalsBefore":["case a\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) ↔\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case a.mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) →\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j","case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"content":"constructor"},{"tailPos":44618,"headPos":44616,"goalsBefore":["case a.mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) →\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j","case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":["case a.mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) →\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"·"},{"tailPos":44640,"headPos":44619,"goalsBefore":["case a.mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) →\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case a.mp.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"content":"rintro ⟨i, _, hi⟩"},{"tailPos":44668,"headPos":44645,"goalsBefore":["case a.mp.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":["case a.mp.intro.intro.refine'_1\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ ↑i < Finset.card c.boundaries","case a.mp.intro.intro.refine'_2\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"content":"refine' ⟨i.1, _, _⟩"},{"tailPos":44723,"headPos":44673,"goalsBefore":["case a.mp.intro.intro.refine'_1\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ ↑i < Finset.card c.boundaries","case a.mp.intro.intro.refine'_2\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"goalsAfter":["case a.mp.intro.intro.refine'_2\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"content":"simpa only [c.card_boundaries_eq_succ_length, toComposition_length] using i.2"},{"tailPos":44785,"headPos":44728,"goalsBefore":["case a.mp.intro.intro.refine'_2\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : Fin (Composition.length (toComposition c) + 1)\nleft✝ : i ∈ Finset.univ\nhi : ↑(Composition.boundary (toComposition c)).toEmbedding i = j\n⊢ sum (take (↑i) (blocks c)) = ↑j"],"goalsAfter":[],"content":"simp [Composition.boundary, Composition.sizeUpTo, ← hi]"},{"tailPos":44785,"headPos":44619,"goalsBefore":["case a.mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) →\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j"],"goalsAfter":[],"content":"rintro ⟨i, _, hi⟩\n    refine' ⟨i.1, _, _⟩\n    simpa [c.card_boundaries_eq_succ_length] using i.2\n    simp [Composition.boundary, Composition.sizeUpTo, ← hi]"},{"tailPos":44785,"headPos":44616,"goalsBefore":["case a.mp\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j) →\n    ∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j","case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":["case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"content":"· rintro ⟨i, _, hi⟩\n    refine' ⟨i.1, _, _⟩\n    simpa [c.card_boundaries_eq_succ_length] using i.2\n    simp [Composition.boundary, Composition.sizeUpTo, ← hi]"},{"tailPos":44790,"headPos":44788,"goalsBefore":["case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":["case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"content":"·"},{"tailPos":44815,"headPos":44791,"goalsBefore":["case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"content":"rintro ⟨i, i_lt, hi⟩"},{"tailPos":44841,"headPos":44837,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑i ∈ Finset.univ"],"goalsAfter":[],"content":"simp only [Finset.mem_univ]"},{"tailPos":44836,"headPos":44834,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑i ∈ Finset.univ"],"goalsAfter":[],"content":"by"},{"tailPos":44841,"headPos":44834,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑i ∈ Finset.univ"],"goalsAfter":[],"content":"by simp"},{"tailPos":44847,"headPos":44820,"goalsBefore":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"content":"refine' ⟨i, by simp, _⟩"},{"tailPos":44888,"headPos":44856,"goalsBefore":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"goalsAfter":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < length c + 1\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"content":"c.card_boundaries_eq_succ_length"},{"tailPos":44889,"headPos":44888,"goalsBefore":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < length c + 1\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"goalsAfter":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < length c + 1\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"content":"]"},{"tailPos":44897,"headPos":44852,"goalsBefore":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < Finset.card c.boundaries\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"goalsAfter":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < length c + 1\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"content":"rw [c.card_boundaries_eq_succ_length] at i_lt"},{"tailPos":44978,"headPos":44902,"goalsBefore":["case a.mpr.intro.intro\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\ni : ℕ\ni_lt : i < length c + 1\nhi : sum (take i (blocks c)) = ↑j\n⊢ ↑(Composition.boundary (toComposition c)).toEmbedding ↑i = j"],"goalsAfter":[],"content":"simp [Composition.boundary, Nat.mod_eq_of_lt i_lt, Composition.sizeUpTo, hi]"},{"tailPos":44978,"headPos":44791,"goalsBefore":["case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":[],"content":"rintro ⟨i, i_lt, hi⟩\n    refine' ⟨i, by simp, _⟩\n    rw [c.card_boundaries_eq_succ_length] at i_lt\n    simp [Composition.boundary, Nat.mod_eq_of_lt i_lt, Composition.sizeUpTo, hi]"},{"tailPos":44978,"headPos":44788,"goalsBefore":["case a.mpr\nn : ℕ\nc : CompositionAsSet n\nj : Fin (n + 1)\n⊢ (∃ i, i < Finset.card c.boundaries ∧ sum (take i (blocks c)) = ↑j) →\n    ∃ a, a ∈ Finset.univ ∧ ↑(Composition.boundary (toComposition c)).toEmbedding a = j"],"goalsAfter":[],"content":"· rintro ⟨i, i_lt, hi⟩\n    refine' ⟨i, by simp, _⟩\n    rw [c.card_boundaries_eq_succ_length] at i_lt\n    simp [Composition.boundary, Nat.mod_eq_of_lt i_lt, Composition.sizeUpTo, hi]"},{"tailPos":44978,"headPos":44493,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.boundaries (toComposition c) = c.boundaries"],"goalsAfter":[],"content":"ext j\n  simp only [c.mem_boundaries_iff_exists_blocks_sum_take_eq, Composition.boundaries, Finset.mem_map]\n  constructor\n  · rintro ⟨i, _, hi⟩\n    refine' ⟨i.1, _, _⟩\n    simpa [c.card_boundaries_eq_succ_length] using i.2\n    simp [Composition.boundary, Composition.sizeUpTo, ← hi]\n  · rintro ⟨i, i_lt, hi⟩\n    refine' ⟨i, by simp, _⟩\n    rw [c.card_boundaries_eq_succ_length] at i_lt\n    simp [Composition.boundary, Nat.mod_eq_of_lt i_lt, Composition.sizeUpTo, hi]"},{"tailPos":44490,"headPos":44488,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.boundaries (toComposition c) = c.boundaries"],"goalsAfter":[],"content":"by"},{"tailPos":44978,"headPos":44488,"goalsBefore":["n : ℕ\nc : CompositionAsSet n\n⊢ Composition.boundaries (toComposition c) = c.boundaries"],"goalsAfter":[],"content":"by\n  ext j\n  simp only [c.mem_boundaries_iff_exists_blocks_sum_take_eq, Composition.boundaries, Finset.mem_map]\n  constructor\n  · rintro ⟨i, _, hi⟩\n    refine' ⟨i.1, _, _⟩\n    simpa [c.card_boundaries_eq_succ_length] using i.2\n    simp [Composition.boundary, Composition.sizeUpTo, ← hi]\n  · rintro ⟨i, i_lt, hi⟩\n    refine' ⟨i, by simp, _⟩\n    rw [c.card_boundaries_eq_succ_length] at i_lt\n    simp [Composition.boundary, Nat.mod_eq_of_lt i_lt, Composition.sizeUpTo, hi]"},{"tailPos":45549,"headPos":45545,"goalsBefore":["n✝ n : ℕ\nc : Composition n\n⊢ (fun c => CompositionAsSet.toComposition c) ((fun c => Composition.toCompositionAsSet c) c) = c"],"goalsAfter":["case blocks\nn✝ n : ℕ\nc : Composition n\n⊢ ((fun c => CompositionAsSet.toComposition c) ((fun c => Composition.toCompositionAsSet c) c)).blocks = c.blocks"],"content":"ext1"},{"tailPos":45587,"headPos":45554,"goalsBefore":["case blocks\nn✝ n : ℕ\nc : Composition n\n⊢ ((fun c => CompositionAsSet.toComposition c) ((fun c => Composition.toCompositionAsSet c) c)).blocks = c.blocks"],"goalsAfter":[],"content":"exact c.toCompositionAsSet_blocks"},{"tailPos":45587,"headPos":45545,"goalsBefore":["n✝ n : ℕ\nc : Composition n\n⊢ (fun c => CompositionAsSet.toComposition c) ((fun c => Composition.toCompositionAsSet c) c) = c"],"goalsAfter":[],"content":"ext1\n    exact c.toCompositionAsSet_blocks"},{"tailPos":45540,"headPos":45538,"goalsBefore":["n✝ n : ℕ\nc : Composition n\n⊢ (fun c => CompositionAsSet.toComposition c) ((fun c => Composition.toCompositionAsSet c) c) = c"],"goalsAfter":[],"content":"by"},{"tailPos":45587,"headPos":45538,"goalsBefore":["n✝ n : ℕ\nc : Composition n\n⊢ (fun c => CompositionAsSet.toComposition c) ((fun c => Composition.toCompositionAsSet c) c) = c"],"goalsAfter":[],"content":"by\n    ext1\n    exact c.toCompositionAsSet_blocks"},{"tailPos":45616,"headPos":45612,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\n⊢ (fun c => Composition.toCompositionAsSet c) ((fun c => CompositionAsSet.toComposition c) c) = c"],"goalsAfter":["case boundaries\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ ((fun c => Composition.toCompositionAsSet c) ((fun c => CompositionAsSet.toComposition c) c)).boundaries =\n    c.boundaries"],"content":"ext1"},{"tailPos":45653,"headPos":45621,"goalsBefore":["case boundaries\nn✝ n : ℕ\nc : CompositionAsSet n\n⊢ ((fun c => Composition.toCompositionAsSet c) ((fun c => CompositionAsSet.toComposition c) c)).boundaries =\n    c.boundaries"],"goalsAfter":[],"content":"exact c.toComposition_boundaries"},{"tailPos":45653,"headPos":45612,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\n⊢ (fun c => Composition.toCompositionAsSet c) ((fun c => CompositionAsSet.toComposition c) c) = c"],"goalsAfter":[],"content":"ext1\n    exact c.toComposition_boundaries"},{"tailPos":45607,"headPos":45605,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\n⊢ (fun c => Composition.toCompositionAsSet c) ((fun c => CompositionAsSet.toComposition c) c) = c"],"goalsAfter":[],"content":"by"},{"tailPos":45653,"headPos":45605,"goalsBefore":["n✝ n : ℕ\nc : CompositionAsSet n\n⊢ (fun c => Composition.toCompositionAsSet c) ((fun c => CompositionAsSet.toComposition c) c) = c"],"goalsAfter":[],"content":"by\n    ext1\n    exact c.toComposition_boundaries"},{"tailPos":45976,"headPos":45949,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = 2 ^ (n - 1)"],"goalsAfter":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = Fintype.card (CompositionAsSet n)"],"content":"← compositionAsSet_card n"},{"tailPos":45977,"headPos":45976,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = Fintype.card (CompositionAsSet n)"],"goalsAfter":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = Fintype.card (CompositionAsSet n)"],"content":"]"},{"tailPos":45977,"headPos":45945,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = 2 ^ (n - 1)"],"goalsAfter":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = Fintype.card (CompositionAsSet n)"],"content":"rw [← compositionAsSet_card n]"},{"tailPos":46025,"headPos":45980,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = Fintype.card (CompositionAsSet n)"],"goalsAfter":[],"content":"exact Fintype.card_congr (compositionEquiv n)"},{"tailPos":46025,"headPos":45945,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"rw [← compositionAsSet_card n]\n  exact Fintype.card_congr (compositionEquiv n)"},{"tailPos":45942,"headPos":45940,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"by"},{"tailPos":46025,"headPos":45940,"goalsBefore":["n✝ n : ℕ\n⊢ Fintype.card (Composition n) = 2 ^ (n - 1)"],"goalsAfter":[],"content":"by\n  rw [← compositionAsSet_card n]\n  exact Fintype.card_congr (compositionEquiv n)"}]
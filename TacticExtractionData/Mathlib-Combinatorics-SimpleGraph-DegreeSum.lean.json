[{"tailPos":2078,"headPos":2073,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ filter (fun d => d.fst = v) univ = image (dartOfNeighborSet G v) univ"],"goalsAfter":["case a\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d ∈ filter (fun d => d.fst = v) univ ↔ d ∈ image (dartOfNeighborSet G v) univ"],"content":"ext d"},{"tailPos":2174,"headPos":2081,"goalsBefore":["case a\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d ∈ filter (fun d => d.fst = v) univ ↔ d ∈ image (dartOfNeighborSet G v) univ"],"goalsAfter":["case a\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v ↔ ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d"],"content":"simp only [mem_image, true_and_iff, mem_filter, SetCoe.exists, mem_univ, exists_prop_of_true]"},{"tailPos":2188,"headPos":2177,"goalsBefore":["case a\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v ↔ ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d"],"goalsAfter":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v → ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d","case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"content":"constructor"},{"tailPos":2193,"headPos":2191,"goalsBefore":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v → ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d","case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"goalsAfter":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v → ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d"],"content":"·"},{"tailPos":2204,"headPos":2194,"goalsBefore":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v → ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d"],"goalsAfter":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ ∃ x h, dartOfNeighborSet G d.fst { val := x, property := h } = d"],"content":"rintro rfl"},{"tailPos":2237,"headPos":2234,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) } = d"],"goalsAfter":["case h.h₁\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.fst = d.fst","case h.h₂\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.snd = d.snd"],"content":"ext"},{"tailPos":2241,"headPos":2238,"goalsBefore":["case h.h₁\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.fst = d.fst","case h.h₂\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.snd = d.snd"],"goalsAfter":["case h.h₁\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.fst = d.fst","case h.h₂\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.snd = d.snd"],"content":"<;>"},{"tailPos":2245,"headPos":2242,"goalsBefore":["case h.h₁\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.fst = d.fst"],"goalsAfter":[],"content":"rfl"},{"tailPos":2245,"headPos":2242,"goalsBefore":["case h.h₂\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ (dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) }).toProd.snd = d.snd"],"goalsAfter":[],"content":"rfl"},{"tailPos":2245,"headPos":2234,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) } = d"],"goalsAfter":[],"content":"ext <;> rfl"},{"tailPos":2233,"headPos":2231,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) } = d"],"goalsAfter":[],"content":"by"},{"tailPos":2245,"headPos":2231,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ dartOfNeighborSet G d.fst { val := d.snd, property := (_ : Adj G d.fst d.snd) } = d"],"goalsAfter":[],"content":"by ext <;> rfl"},{"tailPos":2248,"headPos":2209,"goalsBefore":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n⊢ ∃ x h, dartOfNeighborSet G d.fst { val := x, property := h } = d"],"goalsAfter":[],"content":"exact ⟨_, d.is_adj, by ext <;> rfl⟩"},{"tailPos":2248,"headPos":2194,"goalsBefore":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v → ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d"],"goalsAfter":[],"content":"rintro rfl\n    exact ⟨_, d.is_adj, by ext <;> rfl⟩"},{"tailPos":2248,"headPos":2191,"goalsBefore":["case a.mp\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ d.fst = v → ∃ x h, dartOfNeighborSet G v { val := x, property := h } = d","case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"goalsAfter":["case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"content":"· rintro rfl\n    exact ⟨_, d.is_adj, by ext <;> rfl⟩"},{"tailPos":2253,"headPos":2251,"goalsBefore":["case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"goalsAfter":["case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"content":"·"},{"tailPos":2277,"headPos":2254,"goalsBefore":["case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"goalsAfter":["case a.mpr.intro.intro\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv e : V\nhe : e ∈ neighborSet G v\n⊢ (dartOfNeighborSet G v { val := e, property := he }).toProd.fst = v"],"content":"rintro ⟨e, he, rfl⟩"},{"tailPos":2285,"headPos":2282,"goalsBefore":["case a.mpr.intro.intro\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv e : V\nhe : e ∈ neighborSet G v\n⊢ (dartOfNeighborSet G v { val := e, property := he }).toProd.fst = v"],"goalsAfter":[],"content":"rfl"},{"tailPos":2285,"headPos":2254,"goalsBefore":["case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"goalsAfter":[],"content":"rintro ⟨e, he, rfl⟩\n    rfl"},{"tailPos":2285,"headPos":2251,"goalsBefore":["case a.mpr\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\nd : Dart G\n⊢ (∃ x h, dartOfNeighborSet G v { val := x, property := h } = d) → d.fst = v"],"goalsAfter":[],"content":"· rintro ⟨e, he, rfl⟩\n    rfl"},{"tailPos":2285,"headPos":2073,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ filter (fun d => d.fst = v) univ = image (dartOfNeighborSet G v) univ"],"goalsAfter":[],"content":"ext d\n  simp only [mem_image, true_and_iff, mem_filter, SetCoe.exists, mem_univ, exists_prop_of_true]\n  constructor\n  · rintro rfl\n    exact ⟨_, d.is_adj, by ext <;> rfl⟩\n  · rintro ⟨e, he, rfl⟩\n    rfl"},{"tailPos":2070,"headPos":2068,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ filter (fun d => d.fst = v) univ = image (dartOfNeighborSet G v) univ"],"goalsAfter":[],"content":"by"},{"tailPos":2285,"headPos":2068,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ filter (fun d => d.fst = v) univ = image (dartOfNeighborSet G v) univ"],"goalsAfter":[],"content":"by\n  ext d\n  simp only [mem_image, true_and_iff, mem_filter, SetCoe.exists, mem_univ, exists_prop_of_true]\n  constructor\n  · rintro rfl\n    exact ⟨_, d.is_adj, by ext <;> rfl⟩\n  · rintro ⟨e, he, rfl⟩\n    rfl"},{"tailPos":2631,"headPos":2485,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ card (filter (fun d => d.fst = v) univ) = degree G v"],"goalsAfter":[],"content":"simpa only [dart_fst_fiber, card_univ, card_neighborSet_eq_degree] using\n  card_image_of_injective univ (G.dartOfNeighborSet_injective v)"},{"tailPos":2482,"headPos":2480,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ card (filter (fun d => d.fst = v) univ) = degree G v"],"goalsAfter":[],"content":"by"},{"tailPos":2631,"headPos":2480,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nv : V\n⊢ card (filter (fun d => d.fst = v) univ) = degree G v"],"goalsAfter":[],"content":"by\n  simpa only [dart_fst_fiber, Finset.card_univ, card_neighborSet_eq_degree] using\n    card_image_of_injective univ (G.dartOfNeighborSet_injective v)"},{"tailPos":2834,"headPos":2808,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\n⊢ Fintype.card (Dart G) = ∑ v : V, degree G v"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ Fintype.card (Dart G) = ∑ v : V, degree G v"],"content":"haveI := Classical.decEq V"},{"tailPos":2897,"headPos":2837,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ Fintype.card (Dart G) = ∑ v : V, degree G v"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ card univ = ∑ x : V, card (filter (fun d => d.fst = x) univ)"],"content":"simp only [← card_univ, ← dart_fst_fiber_card_eq_degree]"},{"tailPos":2941,"headPos":2937,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ ∀ (x : Dart G), x ∈ univ → x.fst ∈ univ"],"goalsAfter":[],"content":"simp only [mem_univ, forall_true_left, implies_true]"},{"tailPos":2936,"headPos":2934,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ ∀ (x : Dart G), x ∈ univ → x.fst ∈ univ"],"goalsAfter":[],"content":"by"},{"tailPos":2941,"headPos":2934,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ ∀ (x : Dart G), x ∈ univ → x.fst ∈ univ"],"goalsAfter":[],"content":"by simp"},{"tailPos":2942,"headPos":2900,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\nthis : DecidableEq V\n⊢ card univ = ∑ x : V, card (filter (fun d => d.fst = x) univ)"],"goalsAfter":[],"content":"exact card_eq_sum_card_fiberwise (by simp)"},{"tailPos":2942,"headPos":2808,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\n⊢ Fintype.card (Dart G) = ∑ v : V, degree G v"],"goalsAfter":[],"content":"haveI := Classical.decEq V\n  simp only [← card_univ, ← dart_fst_fiber_card_eq_degree]\n  exact card_eq_sum_card_fiberwise (by simp)"},{"tailPos":2805,"headPos":2803,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\n⊢ Fintype.card (Dart G) = ∑ v : V, degree G v"],"goalsAfter":[],"content":"by"},{"tailPos":2942,"headPos":2803,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableRel G.Adj\ninst✝ : Fintype (Sym2 V)\n⊢ Fintype.card (Dart G) = ∑ v : V, degree G v"],"goalsAfter":[],"content":"by\n  haveI := Classical.decEq V\n  simp only [← card_univ, ← dart_fst_fiber_card_eq_degree]\n  exact card_eq_sum_card_fiberwise (by simp)"},{"tailPos":3225,"headPos":3192,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd d' : Dart G\n⊢ d' ∈ filter (fun d' => edge d' = edge d) univ ↔ d' ∈ {d, symm d}"],"goalsAfter":[],"content":"simpa only [mem_univ, forall_true_left, mem_filter, true_and, mem_singleton, mem_insert] using\n  dart_edge_eq_iff d' d"},{"tailPos":3191,"headPos":3189,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd d' : Dart G\n⊢ d' ∈ filter (fun d' => edge d' = edge d) univ ↔ d' ∈ {d, symm d}"],"goalsAfter":[],"content":"by"},{"tailPos":3225,"headPos":3189,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd d' : Dart G\n⊢ d' ∈ filter (fun d' => edge d' = edge d) univ ↔ d' ∈ {d, symm d}"],"goalsAfter":[],"content":"by simpa using dart_edge_eq_iff d' d"},{"tailPos":3472,"headPos":3435,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeSet G\n⊢ card (filter (fun d => Dart.edge d = e) univ) = 2"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\n⊢ card (filter (fun d => Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (v, w)) univ) = 2"],"content":"refine' Sym2.ind (fun v w h => _) e h"},{"tailPos":3508,"headPos":3475,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\n⊢ card (filter (fun d => Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (v, w)) univ) = 2"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ card (filter (fun d => Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (v, w)) univ) = 2"],"content":"let d : G.Dart := ⟨(v, w), h⟩"},{"tailPos":3546,"headPos":3511,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ card (filter (fun d => Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (v, w)) univ) = 2"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = card {d, Dart.symm d}"],"content":"convert congr_arg card d.edge_fiber"},{"tailPos":3576,"headPos":3553,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = card {d, Dart.symm d}"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = card {Dart.symm d} + 1","case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"content":"card_insert_of_not_mem,"},{"tailPos":3591,"headPos":3577,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = card {Dart.symm d} + 1","case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = 1 + 1","case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"content":"card_singleton"},{"tailPos":3592,"headPos":3591,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = 1 + 1","case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"content":"]"},{"tailPos":3592,"headPos":3549,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ 2 = card {d, Dart.symm d}"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"content":"rw [card_insert_of_not_mem, card_singleton]"},{"tailPos":3612,"headPos":3599,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d = Dart.symm d"],"content":"mem_singleton"},{"tailPos":3613,"headPos":3612,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d = Dart.symm d"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d = Dart.symm d"],"content":"]"},{"tailPos":3613,"headPos":3595,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d ∈ {Dart.symm d}"],"goalsAfter":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d = Dart.symm d"],"content":"rw [mem_singleton]"},{"tailPos":3636,"headPos":3616,"goalsBefore":["case h.e'_3\nV : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh✝ : e ∈ edgeSet G\nv w : V\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ edgeSet G\nd : Dart G := { toProd := (v, w), is_adj := h }\n⊢ ¬d = Dart.symm d"],"goalsAfter":[],"content":"exact d.symm_ne.symm"},{"tailPos":3636,"headPos":3435,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeSet G\n⊢ card (filter (fun d => Dart.edge d = e) univ) = 2"],"goalsAfter":[],"content":"refine' Sym2.ind (fun v w h => _) e h\n  let d : G.Dart := ⟨(v, w), h⟩\n  convert congr_arg card d.edge_fiber\n  rw [card_insert_of_not_mem, card_singleton]\n  rw [mem_singleton]\n  exact d.symm_ne.symm"},{"tailPos":3432,"headPos":3430,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeSet G\n⊢ card (filter (fun d => Dart.edge d = e) univ) = 2"],"goalsAfter":[],"content":"by"},{"tailPos":3636,"headPos":3430,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeSet G\n⊢ card (filter (fun d => Dart.edge d = e) univ) = 2"],"goalsAfter":[],"content":"by\n  refine' Sym2.ind (fun v w h => _) e h\n  let d : G.Dart := ⟨(v, w), h⟩\n  convert congr_arg card d.edge_fiber\n  rw [card_insert_of_not_mem, card_singleton]\n  rw [mem_singleton]\n  exact d.symm_ne.symm"},{"tailPos":3821,"headPos":3808,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ Fintype.card (Dart G) = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card univ = 2 * card (edgeFinset G)"],"content":"← card_univ"},{"tailPos":3822,"headPos":3821,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card univ = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card univ = 2 * card (edgeFinset G)"],"content":"]"},{"tailPos":3822,"headPos":3804,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ Fintype.card (Dart G) = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card univ = 2 * card (edgeFinset G)"],"content":"rw [← card_univ]"},{"tailPos":3927,"headPos":3913,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeFinset G"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"content":"mem_edgeFinset"},{"tailPos":3928,"headPos":3927,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"content":"]"},{"tailPos":3928,"headPos":3909,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeFinset G"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"content":"rw [mem_edgeFinset]"},{"tailPos":3929,"headPos":3928,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"content":";"},{"tailPos":3949,"headPos":3930,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeSet G"],"goalsAfter":[],"content":"apply Dart.edge_mem"},{"tailPos":3949,"headPos":3909,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeFinset G"],"goalsAfter":[],"content":"rw [mem_edgeFinset]; apply Dart.edge_mem"},{"tailPos":3908,"headPos":3906,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeFinset G"],"goalsAfter":[],"content":"by"},{"tailPos":3949,"headPos":3906,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\nd : Dart G\n_h : d ∈ univ\n⊢ Dart.edge d ∈ edgeFinset G"],"goalsAfter":[],"content":"by rw [mem_edgeFinset]; apply Dart.edge_mem"},{"tailPos":3949,"headPos":3829,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card univ = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = 2 * card (edgeFinset G)"],"content":"@card_eq_sum_card_fiberwise _ _ _ Dart.edge _ G.edgeFinset fun d _h =>\n      by rw [mem_edgeFinset]; apply Dart.edge_mem"},{"tailPos":3950,"headPos":3949,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = 2 * card (edgeFinset G)"],"content":"]"},{"tailPos":3950,"headPos":3825,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card univ = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = 2 * card (edgeFinset G)"],"content":"rw [@card_eq_sum_card_fiberwise _ _ _ Dart.edge _ G.edgeFinset fun d _h =>\n      by rw [mem_edgeFinset]; apply Dart.edge_mem]"},{"tailPos":3970,"headPos":3957,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = card (edgeFinset G) * 2"],"content":"← mul_comm,"},{"tailPos":3984,"headPos":3971,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = card (edgeFinset G) * 2"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card (edgeFinset G) * ?m.22783 = card (edgeFinset G) * 2","V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∀ (x : Sym2 V), x ∈ edgeFinset G → card (filter (fun x_1 => Dart.edge x_1 = x) univ) = ?m.22783","V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ℕ"],"content":"sum_const_nat"},{"tailPos":3985,"headPos":3984,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ card (edgeFinset G) * ?m.22783 = card (edgeFinset G) * 2","V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∀ (x : Sym2 V), x ∈ edgeFinset G → card (filter (fun x_1 => Dart.edge x_1 = x) univ) = ?m.22783","V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ℕ"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∀ (x : Sym2 V), x ∈ edgeFinset G → card (filter (fun x_1 => Dart.edge x_1 = x) univ) = 2"],"content":"]"},{"tailPos":3985,"headPos":3953,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∑ a in edgeFinset G, card (filter (fun x => Dart.edge x = a) univ) = 2 * card (edgeFinset G)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∀ (x : Sym2 V), x ∈ edgeFinset G → card (filter (fun x_1 => Dart.edge x_1 = x) univ) = 2"],"content":"rw [← mul_comm, sum_const_nat]"},{"tailPos":3997,"headPos":3988,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ ∀ (x : Sym2 V), x ∈ edgeFinset G → card (filter (fun x_1 => Dart.edge x_1 = x) univ) = 2"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ card (filter (fun x => Dart.edge x = e) univ) = 2"],"content":"intro e h"},{"tailPos":4030,"headPos":4000,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ card (filter (fun x => Dart.edge x = e) univ) = 2"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ e ∈ edgeSet G"],"content":"apply G.dart_edge_fiber_card e"},{"tailPos":4056,"headPos":4038,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ e ∈ edgeSet G"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ e ∈ edgeFinset G"],"content":"← mem_edgeFinset"},{"tailPos":4057,"headPos":4056,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ e ∈ edgeFinset G"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ e ∈ edgeFinset G"],"content":"]"},{"tailPos":4057,"headPos":4033,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\ne : Sym2 V\nh : e ∈ edgeFinset G\n⊢ e ∈ edgeSet G"],"goalsAfter":[],"content":"rwa [← mem_edgeFinset]"},{"tailPos":4057,"headPos":3804,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ Fintype.card (Dart G) = 2 * card (edgeFinset G)"],"goalsAfter":[],"content":"rw [← card_univ]\n  rw [@card_eq_sum_card_fiberwise _ _ _ Dart.edge _ G.edgeFinset fun d _h =>\n      by rw [mem_edgeFinset]; apply Dart.edge_mem]\n  rw [← mul_comm, sum_const_nat]\n  intro e h\n  apply G.dart_edge_fiber_card e\n  rwa [← mem_edgeFinset]"},{"tailPos":3801,"headPos":3799,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ Fintype.card (Dart G) = 2 * card (edgeFinset G)"],"goalsAfter":[],"content":"by"},{"tailPos":4057,"headPos":3799,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝³ : Fintype V\ninst✝² : DecidableRel G.Adj\ninst✝¹ : Fintype (Sym2 V)\ninst✝ : DecidableEq V\n⊢ Fintype.card (Dart G) = 2 * card (edgeFinset G)"],"goalsAfter":[],"content":"by\n  rw [← card_univ]\n  rw [@card_eq_sum_card_fiberwise _ _ _ Dart.edge _ G.edgeFinset fun d _h =>\n      by rw [mem_edgeFinset]; apply Dart.edge_mem]\n  rw [← mul_comm, sum_const_nat]\n  intro e h\n  apply G.dart_edge_fiber_card e\n  rwa [← mem_edgeFinset]"},{"tailPos":4907,"headPos":4821,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : (fun n => ↑n) (∑ v : V, degree G v) = (fun n => ↑n) (2 * card (edgeFinset G))\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"have h := congr_arg (fun n => ↑n : ℕ → ZMod 2) G.sum_degrees_eq_twice_card_edges"},{"tailPos":4984,"headPos":4912,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : (fun n => ↑n) (∑ v : V, degree G v) = (fun n => ↑n) (2 * card (edgeFinset G))\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : ↑(∑ v : V, degree G v) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"simp only [ZMod.nat_cast_self, MulZeroClass.zero_mul, Nat.cast_mul] at h"},{"tailPos":5006,"headPos":4993,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : ↑(∑ v : V, degree G v) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : ∑ x : V, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"Nat.cast_sum,"},{"tailPos":5029,"headPos":5007,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : ∑ x : V, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"← sum_filter_ne_zero"},{"tailPos":5030,"headPos":5029,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"]"},{"tailPos":5035,"headPos":4989,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh : ↑(∑ v : V, degree G v) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"rw [Nat.cast_sum, ← sum_filter_ne_zero] at h"},{"tailPos":5126,"headPos":5044,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))","V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"content":"@sum_congr _ _ _ _ (fun v => (G.degree v : ZMod 2)) (fun _v => (1 : ZMod 2)) _ rfl"},{"tailPos":5127,"headPos":5126,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))","V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))","V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"content":"]"},{"tailPos":5132,"headPos":5040,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))","V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"content":"rw [@sum_congr _ _ _ _ (fun v => (G.degree v : ZMod 2)) (fun _v => (1 : ZMod 2)) _ rfl] at h"},{"tailPos":5139,"headPos":5137,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))","V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"·"},{"tailPos":5211,"headPos":5140,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"content":"simp only [filter_congr, mul_one, nsmul_eq_mul, sum_const, Ne.def] at h"},{"tailPos":5247,"headPos":5222,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ ↑(card (filter (fun v => Odd (degree G v)) univ)) = 0"],"content":"← ZMod.eq_zero_iff_even"},{"tailPos":5248,"headPos":5247,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ ↑(card (filter (fun v => Odd (degree G v)) univ)) = 0"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ ↑(card (filter (fun v => Odd (degree G v)) univ)) = 0"],"content":"]"},{"tailPos":5248,"headPos":5218,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ ↑(card (filter (fun v => Odd (degree G v)) univ)) = 0"],"content":"rw [← ZMod.eq_zero_iff_even]"},{"tailPos":5264,"headPos":5255,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\n⊢ ↑(card (filter (fun v => Odd (degree G v)) univ)) = 0"],"goalsAfter":["case h.e'_2.h.e'_3.h.e'_2.h.e'_2.h.a\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\nx✝ : V\n⊢ Odd (degree G x✝) ↔ ¬↑(degree G x✝) = 0"],"content":"convert h"},{"tailPos":5302,"headPos":5271,"goalsBefore":["case h.e'_2.h.e'_3.h.e'_2.h.e'_2.h.a\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ↑(card (filter (fun x => ¬↑(degree G x) = 0) univ)) = 0\nx✝ : V\n⊢ Odd (degree G x✝) ↔ ¬↑(degree G x✝) = 0"],"goalsAfter":[],"content":"exact ZMod.ne_zero_iff_odd.symm"},{"tailPos":5302,"headPos":5140,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":[],"content":"simp only [filter_congr, mul_one, nsmul_eq_mul, sum_const, Ne.def] at h\n      rw [← ZMod.eq_zero_iff_even]\n      convert h\n      exact ZMod.ne_zero_iff_odd.symm"},{"tailPos":5302,"headPos":5137,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ _v in filter (fun x => ↑(degree G x) ≠ 0) univ, 1 = 0\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))","V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"content":"· simp only [filter_congr, mul_one, nsmul_eq_mul, sum_const, Ne.def] at h\n      rw [← ZMod.eq_zero_iff_even]\n      convert h\n      exact ZMod.ne_zero_iff_odd.symm"},{"tailPos":5309,"headPos":5307,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"content":"·"},{"tailPos":5317,"headPos":5310,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ v ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G v) = 1"],"content":"intro v"},{"tailPos":5378,"headPos":5324,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ v ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G v) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬↑(degree G v) = 0 → ↑(degree G v) = 1"],"content":"simp only [true_and_iff, mem_filter, mem_univ, Ne.def]"},{"tailPos":5411,"headPos":5389,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬↑(degree G v) = 0 → ↑(degree G v) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬Even (degree G v) → ↑(degree G v) = 1"],"content":"ZMod.eq_zero_iff_even,"},{"tailPos":5432,"headPos":5412,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬Even (degree G v) → ↑(degree G v) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬Even (degree G v) → Odd (degree G v)"],"content":"ZMod.eq_one_iff_odd,"},{"tailPos":5454,"headPos":5433,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬Even (degree G v) → Odd (degree G v)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬Even (degree G v) → ¬Even (degree G v)"],"content":"Nat.odd_iff_not_even,"},{"tailPos":5463,"headPos":5455,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬Even (degree G v) → ¬Even (degree G v)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ True"],"content":"imp_self"},{"tailPos":5464,"headPos":5463,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ True"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ True"],"content":"]"},{"tailPos":5464,"headPos":5385,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ ¬↑(degree G v) = 0 → ↑(degree G v) = 1"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ True"],"content":"rw [ZMod.eq_zero_iff_even, ZMod.eq_one_iff_odd, Nat.odd_iff_not_even, imp_self]"},{"tailPos":5478,"headPos":5471,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\nv : V\n⊢ True"],"goalsAfter":[],"content":"trivial"},{"tailPos":5478,"headPos":5310,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":[],"content":"intro v\n      simp only [true_and_iff, mem_filter, mem_univ, Ne.def]\n      rw [ZMod.eq_zero_iff_even, ZMod.eq_one_iff_odd, Nat.odd_iff_not_even, imp_self]\n      trivial"},{"tailPos":5478,"headPos":5307,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nh✝ : ∑ x : V, ↑(degree G x) = 0\nh : ∑ x in filter (fun x => ↑(degree G x) ≠ 0) univ, ↑(degree G x) = 0\n⊢ ∀ (x : V), x ∈ filter (fun x => ↑(degree G x) ≠ 0) univ → ↑(degree G x) = 1"],"goalsAfter":[],"content":"· intro v\n      simp only [true_and_iff, mem_filter, mem_univ, Ne.def]\n      rw [ZMod.eq_zero_iff_even, ZMod.eq_one_iff_odd, Nat.odd_iff_not_even, imp_self]\n      trivial"},{"tailPos":5478,"headPos":4821,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":[],"content":"have h := congr_arg (fun n => ↑n : ℕ → ZMod 2) G.sum_degrees_eq_twice_card_edges\n    simp only [ZMod.nat_cast_self, MulZeroClass.zero_mul, Nat.cast_mul] at h\n    rw [Nat.cast_sum, ← sum_filter_ne_zero] at h\n    rw [@sum_congr _ _ _ _ (fun v => (G.degree v : ZMod 2)) (fun _v => (1 : ZMod 2)) _ rfl] at h\n    · simp only [filter_congr, mul_one, nsmul_eq_mul, sum_const, Ne.def] at h\n      rw [← ZMod.eq_zero_iff_even]\n      convert h\n      exact ZMod.ne_zero_iff_odd.symm\n    · intro v\n      simp only [true_and_iff, mem_filter, mem_univ, Ne.def]\n      rw [ZMod.eq_zero_iff_even, ZMod.eq_one_iff_odd, Nat.odd_iff_not_even, imp_self]\n      trivial"},{"tailPos":5478,"headPos":4807,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":[],"content":"classical\n    have h := congr_arg (fun n => ↑n : ℕ → ZMod 2) G.sum_degrees_eq_twice_card_edges\n    simp only [ZMod.nat_cast_self, MulZeroClass.zero_mul, Nat.cast_mul] at h\n    rw [Nat.cast_sum, ← sum_filter_ne_zero] at h\n    rw [@sum_congr _ _ _ _ (fun v => (G.degree v : ZMod 2)) (fun _v => (1 : ZMod 2)) _ rfl] at h\n    · simp only [filter_congr, mul_one, nsmul_eq_mul, sum_const, Ne.def] at h\n      rw [← ZMod.eq_zero_iff_even]\n      convert h\n      exact ZMod.ne_zero_iff_odd.symm\n    · intro v\n      simp only [true_and_iff, mem_filter, mem_univ, Ne.def]\n      rw [ZMod.eq_zero_iff_even, ZMod.eq_one_iff_odd, Nat.odd_iff_not_even, imp_self]\n      trivial"},{"tailPos":4804,"headPos":4802,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":[],"content":"by"},{"tailPos":5478,"headPos":4802,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (card (filter (fun v => Odd (degree G v)) univ))"],"goalsAfter":[],"content":"by\n  classical\n    have h := congr_arg (fun n => ↑n : ℕ → ZMod 2) G.sum_degrees_eq_twice_card_edges\n    simp only [ZMod.nat_cast_self, MulZeroClass.zero_mul, Nat.cast_mul] at h\n    rw [Nat.cast_sum, ← sum_filter_ne_zero] at h\n    rw [@sum_congr _ _ _ _ (fun v => (G.degree v : ZMod 2)) (fun _v => (1 : ZMod 2)) _ rfl] at h\n    · simp only [filter_congr, mul_one, nsmul_eq_mul, sum_const, Ne.def] at h\n      rw [← ZMod.eq_zero_iff_even]\n      convert h\n      exact ZMod.ne_zero_iff_odd.symm\n    · intro v\n      simp only [true_and_iff, mem_filter, mem_univ, Ne.def]\n      rw [ZMod.eq_zero_iff_even, ZMod.eq_one_iff_odd, Nat.odd_iff_not_even, imp_self]\n      trivial"},{"tailPos":5822,"headPos":5767,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"content":"rcases G.even_card_odd_degree_vertices with ⟨k, hg⟩"},{"tailPos":5933,"headPos":5928,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ v ∈ filter (fun v => Odd (degree G v)) univ"],"content":"use v"},{"tailPos":5986,"headPos":5940,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ v ∈ filter (fun v => Odd (degree G v)) univ"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Odd (degree G v)"],"content":"simp only [true_and_iff, mem_filter, mem_univ]"},{"tailPos":6000,"headPos":5993,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Odd (degree G v)"],"goalsAfter":[],"content":"exact h"},{"tailPos":6000,"headPos":5928,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)"],"goalsAfter":[],"content":"use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h"},{"tailPos":5921,"headPos":5919,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)"],"goalsAfter":[],"content":"by"},{"tailPos":6000,"headPos":5919,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)"],"goalsAfter":[],"content":"by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h"},{"tailPos":6000,"headPos":5851,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ 0 < k"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)\n⊢ 0 < k"],"content":"have hh : (filter (fun v : V => Odd (G.degree v)) univ).Nonempty := by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h"},{"tailPos":6023,"headPos":6010,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)\n⊢ 0 < k"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < card (filter (fun v => Odd (degree G v)) univ)\n⊢ 0 < k"],"content":"← card_pos,"},{"tailPos":6027,"headPos":6024,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < card (filter (fun v => Odd (degree G v)) univ)\n⊢ 0 < k"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < k + k\n⊢ 0 < k"],"content":"hg,"},{"tailPos":6040,"headPos":6028,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < k + k\n⊢ 0 < k"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < k"],"content":"← two_mul,"},{"tailPos":6057,"headPos":6041,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < k"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < k\n⊢ 0 < k","V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < 2"],"content":"zero_lt_mul_left"},{"tailPos":6058,"headPos":6057,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < k\n⊢ 0 < k","V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < 2"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < k\n⊢ 0 < k","V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < 2"],"content":"]"},{"tailPos":6064,"headPos":6005,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : Finset.Nonempty (filter (fun v => Odd (degree G v)) univ)\n⊢ 0 < k"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < 2"],"content":"rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh"},{"tailPos":6086,"headPos":6069,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhh : 0 < 2 * k\n⊢ 0 < 2"],"goalsAfter":[],"content":"exact zero_lt_two"},{"tailPos":6086,"headPos":5851,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ 0 < k"],"goalsAfter":[],"content":"have hh : (filter (fun v : V => Odd (G.degree v)) univ).Nonempty := by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h\n    rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh\n    exact zero_lt_two"},{"tailPos":5846,"headPos":5844,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ 0 < k"],"goalsAfter":[],"content":"by"},{"tailPos":6086,"headPos":5844,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ 0 < k"],"goalsAfter":[],"content":"by\n    have hh : (filter (fun v : V => Odd (G.degree v)) univ).Nonempty := by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h\n    rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh\n    exact zero_lt_two"},{"tailPos":6086,"headPos":5825,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"content":"have hk : 0 < k := by\n    have hh : (filter (fun v : V => Odd (G.degree v)) univ).Nonempty := by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h\n    rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh\n    exact zero_lt_two"},{"tailPos":6202,"headPos":6197,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\n⊢ (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v"],"goalsAfter":["case h.a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nw : V\n⊢ w ≠ v ∧ Odd (degree G w) ↔ Odd (degree G w) ∧ w ≠ v"],"content":"ext w"},{"tailPos":6219,"headPos":6211,"goalsBefore":["case h.a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nw : V\n⊢ w ≠ v ∧ Odd (degree G w) ↔ Odd (degree G w) ∧ w ≠ v"],"goalsAfter":["case h.a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nw : V\n⊢ Odd (degree G w) ∧ w ≠ v ↔ Odd (degree G w) ∧ w ≠ v"],"content":"and_comm"},{"tailPos":6220,"headPos":6219,"goalsBefore":["case h.a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nw : V\n⊢ Odd (degree G w) ∧ w ≠ v ↔ Odd (degree G w) ∧ w ≠ v"],"goalsAfter":[],"content":"]"},{"tailPos":6220,"headPos":6207,"goalsBefore":["case h.a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nw : V\n⊢ w ≠ v ∧ Odd (degree G w) ↔ Odd (degree G w) ∧ w ≠ v"],"goalsAfter":[],"content":"rw [and_comm]"},{"tailPos":6220,"headPos":6197,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\n⊢ (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v"],"goalsAfter":[],"content":"ext w\n    rw [and_comm]"},{"tailPos":6192,"headPos":6190,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\n⊢ (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v"],"goalsAfter":[],"content":"by"},{"tailPos":6220,"headPos":6190,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\n⊢ (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v"],"goalsAfter":[],"content":"by\n    ext w\n    rw [and_comm]"},{"tailPos":6220,"headPos":6089,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"content":"have hc : (fun w : V => w ≠ v ∧ Odd (G.degree w)) = fun w : V => Odd (G.degree w) ∧ w ≠ v := by\n    ext w\n    rw [and_comm]"},{"tailPos":6251,"headPos":6223,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w) ∧ w ≠ v) univ))"],"content":"simp only [hc, filter_congr]"},{"tailPos":6276,"headPos":6258,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w) ∧ w ≠ v) univ))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => w ≠ v) (filter (fun w => Odd (degree G w)) univ)))"],"content":"← filter_filter,"},{"tailPos":6288,"headPos":6277,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => w ≠ v) (filter (fun w => Odd (degree G w)) univ)))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (erase (filter (fun w => Odd (degree G w)) univ) v))"],"content":"filter_ne',"},{"tailPos":6306,"headPos":6289,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (erase (filter (fun w => Odd (degree G w)) univ) v))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)","case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"content":"card_erase_of_mem"},{"tailPos":6307,"headPos":6306,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)","case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)","case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"content":"]"},{"tailPos":6307,"headPos":6254,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w) ∧ w ≠ v) univ))"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)","case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"content":"rw [← filter_filter, filter_ne', card_erase_of_mem]"},{"tailPos":6312,"headPos":6310,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)","case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)"],"content":"·"},{"tailPos":6365,"headPos":6313,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + 1 + 1"],"content":"refine' ⟨k - 1, tsub_eq_of_eq_add <| hg.trans _⟩"},{"tailPos":6384,"headPos":6374,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + 1 + 1"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + (1 + 1)"],"content":"add_assoc,"},{"tailPos":6404,"headPos":6385,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + (1 + 1)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + 2"],"content":"one_add_one_eq_two,"},{"tailPos":6422,"headPos":6405,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + 2"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * Nat.succ (k - 1)"],"content":"← Nat.mul_succ,"},{"tailPos":6434,"headPos":6423,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * Nat.succ (k - 1)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ 2 * k = 2 * Nat.succ (k - 1)"],"content":"← two_mul"},{"tailPos":6435,"headPos":6434,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ 2 * k = 2 * Nat.succ (k - 1)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ 2 * k = 2 * Nat.succ (k - 1)"],"content":"]"},{"tailPos":6435,"headPos":6370,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k + k = 2 * (k - 1) + 1 + 1"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ 2 * k = 2 * Nat.succ (k - 1)"],"content":"rw [add_assoc, one_add_one_eq_two, ← Nat.mul_succ, ← two_mul]"},{"tailPos":6445,"headPos":6440,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ 2 * k = 2 * Nat.succ (k - 1)"],"goalsAfter":["case intro.e_a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k = Nat.succ (k - 1)"],"content":"congr"},{"tailPos":6508,"headPos":6450,"goalsBefore":["case intro.e_a\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ k = Nat.succ (k - 1)"],"goalsAfter":[],"content":"exact (tsub_add_cancel_of_le <| Nat.succ_le_iff.2 hk).symm"},{"tailPos":6508,"headPos":6313,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)"],"goalsAfter":[],"content":"refine' ⟨k - 1, tsub_eq_of_eq_add <| hg.trans _⟩\n    rw [add_assoc, one_add_one_eq_two, ← Nat.mul_succ, ← two_mul]\n    congr\n    exact (tsub_add_cancel_of_le <| Nat.succ_le_iff.2 hk).symm"},{"tailPos":6508,"headPos":6310,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ Odd (card (filter (fun w => Odd (degree G w)) univ) - 1)","case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"content":"· refine' ⟨k - 1, tsub_eq_of_eq_add <| hg.trans _⟩\n    rw [add_assoc, one_add_one_eq_two, ← Nat.mul_succ, ← two_mul]\n    congr\n    exact (tsub_add_cancel_of_le <| Nat.succ_le_iff.2 hk).symm"},{"tailPos":6513,"headPos":6511,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"content":"·"},{"tailPos":6561,"headPos":6514,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"goalsAfter":[],"content":"simpa only [mem_filter, mem_univ, true_and_iff]"},{"tailPos":6561,"headPos":6511,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nk : ℕ\nhg : card (filter (fun v => Odd (degree G v)) univ) = k + k\nhk : 0 < k\nhc : (fun w => w ≠ v ∧ Odd (degree G w)) = fun w => Odd (degree G w) ∧ w ≠ v\n⊢ v ∈ filter (fun w => Odd (degree G w)) univ"],"goalsAfter":[],"content":"· simpa only [true_and_iff, mem_filter, mem_univ]"},{"tailPos":6561,"headPos":5767,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":[],"content":"rcases G.even_card_odd_degree_vertices with ⟨k, hg⟩\n  have hk : 0 < k := by\n    have hh : (filter (fun v : V => Odd (G.degree v)) univ).Nonempty := by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h\n    rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh\n    exact zero_lt_two\n  have hc : (fun w : V => w ≠ v ∧ Odd (G.degree w)) = fun w : V => Odd (G.degree w) ∧ w ≠ v := by\n    ext w\n    rw [and_comm]\n  simp only [hc, filter_congr]\n  rw [← filter_filter, filter_ne', card_erase_of_mem]\n  · refine' ⟨k - 1, tsub_eq_of_eq_add <| hg.trans _⟩\n    rw [add_assoc, one_add_one_eq_two, ← Nat.mul_succ, ← two_mul]\n    congr\n    exact (tsub_add_cancel_of_le <| Nat.succ_le_iff.2 hk).symm\n  · simpa only [true_and_iff, mem_filter, mem_univ]"},{"tailPos":5764,"headPos":5762,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":[],"content":"by"},{"tailPos":6561,"headPos":5762,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝² : Fintype V\ninst✝¹ : DecidableEq V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ Odd (card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ))"],"goalsAfter":[],"content":"by\n  rcases G.even_card_odd_degree_vertices with ⟨k, hg⟩\n  have hk : 0 < k := by\n    have hh : (filter (fun v : V => Odd (G.degree v)) univ).Nonempty := by\n      use v\n      simp only [true_and_iff, mem_filter, mem_univ]\n      exact h\n    rwa [← card_pos, hg, ← two_mul, zero_lt_mul_left] at hh\n    exact zero_lt_two\n  have hc : (fun w : V => w ≠ v ∧ Odd (G.degree w)) = fun w : V => Odd (G.degree w) ∧ w ≠ v := by\n    ext w\n    rw [and_comm]\n  simp only [hc, filter_congr]\n  rw [← filter_filter, filter_ne', card_erase_of_mem]\n  · refine' ⟨k - 1, tsub_eq_of_eq_add <| hg.trans _⟩\n    rw [add_assoc, one_add_one_eq_two, ← Nat.mul_succ, ← two_mul]\n    congr\n    exact (tsub_add_cancel_of_le <| Nat.succ_le_iff.2 hk).symm\n  · simpa only [true_and_iff, mem_filter, mem_univ]"},{"tailPos":6853,"headPos":6827,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"content":"haveI := Classical.decEq V"},{"tailPos":6917,"headPos":6856,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"content":"rcases G.odd_card_odd_degree_vertices_ne v h with ⟨k, hg⟩"},{"tailPos":7014,"headPos":7012,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ 2 * k + 1 > 0"],"content":"hg"},{"tailPos":7015,"headPos":7014,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ 2 * k + 1 > 0"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ 2 * k + 1 > 0"],"content":"]"},{"tailPos":7015,"headPos":7008,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0"],"goalsAfter":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ 2 * k + 1 > 0"],"content":"rw [hg]"},{"tailPos":7038,"headPos":7020,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ 2 * k + 1 > 0"],"goalsAfter":[],"content":"apply Nat.succ_pos"},{"tailPos":7038,"headPos":7008,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0"],"goalsAfter":[],"content":"rw [hg]\n    apply Nat.succ_pos"},{"tailPos":7003,"headPos":7001,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0"],"goalsAfter":[],"content":"by"},{"tailPos":7038,"headPos":7001,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0"],"goalsAfter":[],"content":"by\n    rw [hg]\n    apply Nat.succ_pos"},{"tailPos":7038,"headPos":6920,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\nhg' : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"content":"have hg' : (filter (fun w : V => w ≠ v ∧ Odd (G.degree w)) univ).card > 0 := by\n    rw [hg]\n    apply Nat.succ_pos"},{"tailPos":7080,"headPos":7041,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\nhg' : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":["case intro.intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\nhg' : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0\nw : V\nhw : w ∈ filter (fun w => w ≠ v ∧ Odd (degree G w)) univ\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"content":"rcases card_pos.mp hg' with ⟨w, hw⟩"},{"tailPos":7143,"headPos":7083,"goalsBefore":["case intro.intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\nhg' : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0\nw : V\nhw : w ∈ filter (fun w => w ≠ v ∧ Odd (degree G w)) univ\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":["case intro.intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\nhg' : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0\nw : V\nhw : ¬w = v ∧ Odd (degree G w)\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"content":"simp only [true_and_iff, mem_filter, mem_univ, Ne.def] at hw"},{"tailPos":7163,"headPos":7146,"goalsBefore":["case intro.intro\nV : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\nthis : DecidableEq V\nk : ℕ\nhg : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) = 2 * k + 1\nhg' : card (filter (fun w => w ≠ v ∧ Odd (degree G w)) univ) > 0\nw : V\nhw : ¬w = v ∧ Odd (degree G w)\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":[],"content":"exact ⟨w, hw⟩"},{"tailPos":7163,"headPos":6827,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":[],"content":"haveI := Classical.decEq V\n  rcases G.odd_card_odd_degree_vertices_ne v h with ⟨k, hg⟩\n  have hg' : (filter (fun w : V => w ≠ v ∧ Odd (G.degree w)) univ).card > 0 := by\n    rw [hg]\n    apply Nat.succ_pos\n  rcases card_pos.mp hg' with ⟨w, hw⟩\n  simp only [true_and_iff, mem_filter, mem_univ, Ne.def] at hw\n  exact ⟨w, hw⟩"},{"tailPos":6824,"headPos":6822,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":[],"content":"by"},{"tailPos":7163,"headPos":6822,"goalsBefore":["V : Type u\nG : SimpleGraph V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nv : V\nh : Odd (degree G v)\n⊢ ∃ w, w ≠ v ∧ Odd (degree G w)"],"goalsAfter":[],"content":"by\n  haveI := Classical.decEq V\n  rcases G.odd_card_odd_degree_vertices_ne v h with ⟨k, hg⟩\n  have hg' : (filter (fun w : V => w ≠ v ∧ Odd (G.degree w)) univ).card > 0 := by\n    rw [hg]\n    apply Nat.succ_pos\n  rcases card_pos.mp hg' with ⟨w, hw⟩\n  simp only [true_and_iff, mem_filter, mem_univ, Ne.def] at hw\n  exact ⟨w, hw⟩"}]
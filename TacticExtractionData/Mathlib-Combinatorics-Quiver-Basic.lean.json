[{"tailPos":3354,"headPos":3333,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF G : Prefunctor V W\nh_obj : ∀ (X : V), F.obj X = G.obj X\nh_map : ∀ (X Y : V) (f : X ⟶ Y), F.map f = Eq.recOn (_ : G.obj Y = F.obj Y) (Eq.recOn (_ : G.obj X = F.obj X) (G.map f))\n⊢ F = G"],"goalsAfter":["case mk\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nG : Prefunctor V W\nF_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝ }.obj X = G.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝ }.map f =\n      Eq.recOn (_ : G.obj Y = { obj := F_obj, map := map✝ }.obj Y)\n        (Eq.recOn (_ : G.obj X = { obj := F_obj, map := map✝ }.obj X) (G.map f))\n⊢ { obj := F_obj, map := map✝ } = G"],"content":"cases' F with F_obj _"},{"tailPos":3378,"headPos":3357,"goalsBefore":["case mk\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nG : Prefunctor V W\nF_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝ }.obj X = G.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝ }.map f =\n      Eq.recOn (_ : G.obj Y = { obj := F_obj, map := map✝ }.obj Y)\n        (Eq.recOn (_ : G.obj X = { obj := F_obj, map := map✝ }.obj X) (G.map f))\n⊢ { obj := F_obj, map := map✝ } = G"],"goalsAfter":["case mk.mk\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\n⊢ { obj := F_obj, map := map✝¹ } = { obj := G_obj, map := map✝ }"],"content":"cases' G with G_obj _"},{"tailPos":3423,"headPos":3418,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\n⊢ F_obj = G_obj"],"goalsAfter":["case h\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\nX : V\n⊢ F_obj X = G_obj X"],"content":"ext X"},{"tailPos":3439,"headPos":3428,"goalsBefore":["case h\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\nX : V\n⊢ F_obj X = G_obj X"],"goalsAfter":[],"content":"apply h_obj"},{"tailPos":3439,"headPos":3418,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\n⊢ F_obj = G_obj"],"goalsAfter":[],"content":"ext X\n    apply h_obj"},{"tailPos":3413,"headPos":3411,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\n⊢ F_obj = G_obj"],"goalsAfter":[],"content":"by"},{"tailPos":3439,"headPos":3411,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\n⊢ F_obj = G_obj"],"goalsAfter":[],"content":"by\n    ext X\n    apply h_obj"},{"tailPos":3439,"headPos":3381,"goalsBefore":["case mk.mk\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nG_obj : V → W\nmap✝ : {X Y : V} → (X ⟶ Y) → (G_obj X ⟶ G_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := G_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := G_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := G_obj, map := map✝ }.map f))\n⊢ { obj := F_obj, map := map✝¹ } = { obj := G_obj, map := map✝ }"],"goalsAfter":["case mk.mk\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ map✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := F_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := F_obj, map := map✝ }.map f))\n⊢ { obj := F_obj, map := map✝¹ } = { obj := F_obj, map := map✝ }"],"content":"obtain rfl : F_obj = G_obj := by\n    ext X\n    apply h_obj"},{"tailPos":3447,"headPos":3442,"goalsBefore":["case mk.mk\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ map✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := F_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := F_obj, map := map✝ }.map f))\n⊢ { obj := F_obj, map := map✝¹ } = { obj := F_obj, map := map✝ }"],"goalsAfter":["case mk.mk.e_map\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ map✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := F_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := F_obj, map := map✝ }.map f))\n⊢ map✝¹ = map✝"],"content":"congr"},{"tailPos":3462,"headPos":3450,"goalsBefore":["case mk.mk.e_map\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ map✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := F_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := F_obj, map := map✝ }.map f))\n⊢ map✝¹ = map✝"],"goalsAfter":["case mk.mk.e_map.h.h.h\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ map✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := F_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := F_obj, map := map✝ }.map f))\nX Y : V\nf : X ⟶ Y\n⊢ map✝¹ f = map✝ f"],"content":"funext X Y f"},{"tailPos":3488,"headPos":3465,"goalsBefore":["case mk.mk.e_map.h.h.h\nV : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF_obj : V → W\nmap✝¹ map✝ : {X Y : V} → (X ⟶ Y) → (F_obj X ⟶ F_obj Y)\nh_obj : ∀ (X : V), { obj := F_obj, map := map✝¹ }.obj X = { obj := F_obj, map := map✝ }.obj X\nh_map :\n  ∀ (X Y : V) (f : X ⟶ Y),\n    { obj := F_obj, map := map✝¹ }.map f =\n      Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj Y = { obj := F_obj, map := map✝¹ }.obj Y)\n        (Eq.recOn (_ : { obj := F_obj, map := map✝ }.obj X = { obj := F_obj, map := map✝¹ }.obj X)\n          ({ obj := F_obj, map := map✝ }.map f))\nX Y : V\nf : X ⟶ Y\n⊢ map✝¹ f = map✝ f"],"goalsAfter":[],"content":"simpa only using h_map X Y f"},{"tailPos":3488,"headPos":3333,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF G : Prefunctor V W\nh_obj : ∀ (X : V), F.obj X = G.obj X\nh_map : ∀ (X Y : V) (f : X ⟶ Y), F.map f = Eq.recOn (_ : G.obj Y = F.obj Y) (Eq.recOn (_ : G.obj X = F.obj X) (G.map f))\n⊢ F = G"],"goalsAfter":[],"content":"cases' F with F_obj _\n  cases' G with G_obj _\n  obtain rfl : F_obj = G_obj := by\n    ext X\n    apply h_obj\n  congr\n  funext X Y f\n  simpa using h_map X Y f"},{"tailPos":3330,"headPos":3328,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF G : Prefunctor V W\nh_obj : ∀ (X : V), F.obj X = G.obj X\nh_map : ∀ (X Y : V) (f : X ⟶ Y), F.map f = Eq.recOn (_ : G.obj Y = F.obj Y) (Eq.recOn (_ : G.obj X = F.obj X) (G.map f))\n⊢ F = G"],"goalsAfter":[],"content":"by"},{"tailPos":3488,"headPos":3328,"goalsBefore":["V : Type u\ninst✝¹ : Quiver V\nW : Type u₂\ninst✝ : Quiver W\nF G : Prefunctor V W\nh_obj : ∀ (X : V), F.obj X = G.obj X\nh_map : ∀ (X Y : V) (f : X ⟶ Y), F.map f = Eq.recOn (_ : G.obj Y = F.obj Y) (Eq.recOn (_ : G.obj X = F.obj X) (G.map f))\n⊢ F = G"],"goalsAfter":[],"content":"by\n  cases' F with F_obj _\n  cases' G with G_obj _\n  obtain rfl : F_obj = G_obj := by\n    ext X\n    apply h_obj\n  congr\n  funext X Y f\n  simpa using h_map X Y f"}]
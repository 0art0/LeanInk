[{"tailPos":2399,"headPos":2359,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = 0 ↔ u = v ∨ ¬Reachable G u v"],"goalsAfter":[],"content":"simp [dist, Nat.sInf_eq_zero, Reachable]"},{"tailPos":2358,"headPos":2356,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = 0 ↔ u = v ∨ ¬Reachable G u v"],"goalsAfter":[],"content":"by"},{"tailPos":2399,"headPos":2356,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = 0 ↔ u = v ∨ ¬Reachable G u v"],"goalsAfter":[],"content":"by simp [dist, Nat.sInf_eq_zero, Reachable]"},{"tailPos":2560,"headPos":2556,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nv : V\n⊢ dist G v v = 0"],"goalsAfter":[],"content":"simp only [dist_eq_zero_iff_eq_or_not_reachable, true_or]"},{"tailPos":2555,"headPos":2553,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nv : V\n⊢ dist G v v = 0"],"goalsAfter":[],"content":"by"},{"tailPos":2560,"headPos":2553,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nv : V\n⊢ dist G v v = 0"],"goalsAfter":[],"content":"by simp"},{"tailPos":2738,"headPos":2729,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhr : Reachable G u v\n⊢ dist G u v = 0 ↔ u = v"],"goalsAfter":[],"content":"simp [hr]"},{"tailPos":2728,"headPos":2726,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhr : Reachable G u v\n⊢ dist G u v = 0 ↔ u = v"],"goalsAfter":[],"content":"by"},{"tailPos":2738,"headPos":2726,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhr : Reachable G u v\n⊢ dist G u v = 0 ↔ u = v"],"goalsAfter":[],"content":"by simp [hr]"},{"tailPos":2979,"headPos":2966,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":[],"content":"simp [h, hne]"},{"tailPos":2965,"headPos":2963,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":[],"content":"by"},{"tailPos":2979,"headPos":2963,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":[],"content":"by simp [h, hne]"},{"tailPos":3194,"headPos":3178,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v : V\n⊢ dist G u v = 0 ↔ u = v"],"goalsAfter":[],"content":"simp [hconn u v]"},{"tailPos":3177,"headPos":3175,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v : V\n⊢ dist G u v = 0 ↔ u = v"],"goalsAfter":[],"content":"by"},{"tailPos":3194,"headPos":3175,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v : V\n⊢ dist G u v = 0 ↔ u = v"],"goalsAfter":[],"content":"by simp [hconn u v]"},{"tailPos":3429,"headPos":3422,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\nh : dist G u v = 0\n⊢ False"],"content":"intro h"},{"tailPos":3430,"headPos":3429,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\nh : dist G u v = 0\n⊢ False"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\nh : dist G u v = 0\n⊢ False"],"content":";"},{"tailPos":3483,"headPos":3431,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\nh : dist G u v = 0\n⊢ False"],"goalsAfter":[],"content":"exact False.elim (hne (hconn.dist_eq_zero_iff.mp h))"},{"tailPos":3483,"headPos":3422,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":[],"content":"intro h; exact False.elim (hne (hconn.dist_eq_zero_iff.mp h))"},{"tailPos":3421,"headPos":3419,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":[],"content":"by"},{"tailPos":3483,"headPos":3419,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nhconn : Connected G\nhne : u ≠ v\n⊢ dist G u v ≠ 0"],"goalsAfter":[],"content":"by intro h; exact False.elim (hne (hconn.dist_eq_zero_iff.mp h))"},{"tailPos":3673,"headPos":3665,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = 0"],"goalsAfter":[],"content":"simp [h]"},{"tailPos":3662,"headPos":3660,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = 0"],"goalsAfter":[],"content":"by"},{"tailPos":3673,"headPos":3660,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = 0"],"goalsAfter":[],"content":"by\n  simp [h]"},{"tailPos":3988,"headPos":3880,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : 0 < dist G u v\n⊢ Set.Nonempty Set.univ"],"goalsAfter":[],"content":"simpa only [Set.range_nonempty_iff_nonempty, Set.nonempty_iff_univ_nonempty] using Nat.nonempty_of_pos_sInf h"},{"tailPos":3877,"headPos":3875,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : 0 < dist G u v\n⊢ Set.Nonempty Set.univ"],"goalsAfter":[],"content":"by"},{"tailPos":3988,"headPos":3875,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : 0 < dist G u v\n⊢ Set.Nonempty Set.univ"],"goalsAfter":[],"content":"by\n  simpa [Set.range_nonempty_iff_nonempty, Set.nonempty_iff_univ_nonempty] using\n    Nat.nonempty_of_pos_sInf h"},{"tailPos":4244,"headPos":4193,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":["case intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\n⊢ dist G u w ≤ dist G u v + dist G v w"],"content":"obtain ⟨p, hp⟩ := hconn.exists_walk_of_dist u v"},{"tailPos":4298,"headPos":4247,"goalsBefore":["case intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ dist G u v + dist G v w"],"content":"obtain ⟨q, hq⟩ := hconn.exists_walk_of_dist v w"},{"tailPos":4312,"headPos":4305,"goalsBefore":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length p + dist G v w"],"content":"← hp,"},{"tailPos":4320,"headPos":4313,"goalsBefore":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length p + dist G v w"],"goalsAfter":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length p + Walk.length q"],"content":"← hq,"},{"tailPos":4343,"headPos":4321,"goalsBefore":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length p + Walk.length q"],"goalsAfter":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length (Walk.append p q)"],"content":"← Walk.length_append"},{"tailPos":4344,"headPos":4343,"goalsBefore":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length (Walk.append p q)"],"goalsAfter":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length (Walk.append p q)"],"content":"]"},{"tailPos":4344,"headPos":4301,"goalsBefore":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length (Walk.append p q)"],"content":"rw [← hp, ← hq, ← Walk.length_append]"},{"tailPos":4360,"headPos":4347,"goalsBefore":["case intro.intro\nV : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\np : Walk G u v\nhp : Walk.length p = dist G u v\nq : Walk G v w\nhq : Walk.length q = dist G v w\n⊢ dist G u w ≤ Walk.length (Walk.append p q)"],"goalsAfter":[],"content":"apply dist_le"},{"tailPos":4360,"headPos":4193,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":[],"content":"obtain ⟨p, hp⟩ := hconn.exists_walk_of_dist u v\n  obtain ⟨q, hq⟩ := hconn.exists_walk_of_dist v w\n  rw [← hp, ← hq, ← Walk.length_append]\n  apply dist_le"},{"tailPos":4190,"headPos":4188,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":[],"content":"by"},{"tailPos":4360,"headPos":4188,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nhconn : Connected G\nu v w : V\n⊢ dist G u w ≤ dist G u v + dist G v w"],"goalsAfter":[],"content":"by\n  obtain ⟨p, hp⟩ := hconn.exists_walk_of_dist u v\n  obtain ⟨q, hq⟩ := hconn.exists_walk_of_dist v w\n  rw [← hp, ← hq, ← Walk.length_append]\n  apply dist_le"},{"tailPos":4588,"headPos":4540,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v ≤ dist G v u"],"goalsAfter":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ dist G v u"],"content":"obtain ⟨p, hp⟩ := h.symm.exists_walk_of_dist"},{"tailPos":4602,"headPos":4595,"goalsBefore":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ dist G v u"],"goalsAfter":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length p"],"content":"← hp,"},{"tailPos":4626,"headPos":4603,"goalsBefore":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length p"],"goalsAfter":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length (Walk.reverse p)"],"content":"← Walk.length_reverse"},{"tailPos":4627,"headPos":4626,"goalsBefore":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length (Walk.reverse p)"],"goalsAfter":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length (Walk.reverse p)"],"content":"]"},{"tailPos":4627,"headPos":4591,"goalsBefore":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ dist G v u"],"goalsAfter":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length (Walk.reverse p)"],"content":"rw [← hp, ← Walk.length_reverse]"},{"tailPos":4643,"headPos":4630,"goalsBefore":["case intro\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\np : Walk G v u\nhp : Walk.length p = dist G v u\n⊢ dist G u v ≤ Walk.length (Walk.reverse p)"],"goalsAfter":[],"content":"apply dist_le"},{"tailPos":4643,"headPos":4540,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v ≤ dist G v u"],"goalsAfter":[],"content":"obtain ⟨p, hp⟩ := h.symm.exists_walk_of_dist\n  rw [← hp, ← Walk.length_reverse]\n  apply dist_le"},{"tailPos":4537,"headPos":4535,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v ≤ dist G v u"],"goalsAfter":[],"content":"by"},{"tailPos":4643,"headPos":4535,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v ≤ dist G v u"],"goalsAfter":[],"content":"by\n  obtain ⟨p, hp⟩ := h.symm.exists_walk_of_dist\n  rw [← hp, ← Walk.length_reverse]\n  apply dist_le"},{"tailPos":4735,"headPos":4707,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = dist G v u"],"goalsAfter":["case pos\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v = dist G v u","case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"content":"by_cases h : G.Reachable u v"},{"tailPos":4740,"headPos":4738,"goalsBefore":["case pos\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v = dist G v u","case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":["case pos\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v = dist G v u"],"content":"·"},{"tailPos":4799,"headPos":4741,"goalsBefore":["case pos\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"apply le_antisymm (dist_comm_aux h) (dist_comm_aux h.symm)"},{"tailPos":4799,"headPos":4738,"goalsBefore":["case pos\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : Reachable G u v\n⊢ dist G u v = dist G v u","case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"content":"· apply le_antisymm (dist_comm_aux h) (dist_comm_aux h.symm)"},{"tailPos":4804,"headPos":4802,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"content":"·"},{"tailPos":4862,"headPos":4805,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\nh' : ¬Reachable G v u\n⊢ dist G u v = dist G v u"],"content":"have h' : ¬G.Reachable v u := fun h' => absurd h'.symm h"},{"tailPos":4910,"headPos":4867,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\nh' : ¬Reachable G v u\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"simp [h, h', dist_eq_zero_of_not_reachable]"},{"tailPos":4910,"headPos":4805,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"have h' : ¬G.Reachable v u := fun h' => absurd h'.symm h\n    simp [h, h', dist_eq_zero_of_not_reachable]"},{"tailPos":4910,"headPos":4802,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\nu v : V\nh : ¬Reachable G u v\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"· have h' : ¬G.Reachable v u := fun h' => absurd h'.symm h\n    simp [h, h', dist_eq_zero_of_not_reachable]"},{"tailPos":4910,"headPos":4707,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"by_cases h : G.Reachable u v\n  · apply le_antisymm (dist_comm_aux h) (dist_comm_aux h.symm)\n  · have h' : ¬G.Reachable v u := fun h' => absurd h'.symm h\n    simp [h, h', dist_eq_zero_of_not_reachable]"},{"tailPos":4704,"headPos":4702,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"by"},{"tailPos":4910,"headPos":4702,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ dist G u v = dist G v u"],"goalsAfter":[],"content":"by\n  by_cases h : G.Reachable u v\n  · apply le_antisymm (dist_comm_aux h) (dist_comm_aux h.symm)\n  · have h' : ¬G.Reachable v u := fun h' => absurd h'.symm h\n    simp [h, h', dist_eq_zero_of_not_reachable]"}]
[{"tailPos":3813,"headPos":3759,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ partOfVertex P v ∈ P.parts"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\nh : Exists.choose (_ : ∃! b x, v ∈ b) ∈ P.parts\n⊢ partOfVertex P v ∈ P.parts"],"content":"obtain ⟨h, -⟩ := (P.isPartition.2 v).choose_spec.1"},{"tailPos":3823,"headPos":3816,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\nh : Exists.choose (_ : ∃! b x, v ∈ b) ∈ P.parts\n⊢ partOfVertex P v ∈ P.parts"],"goalsAfter":[],"content":"exact h"},{"tailPos":3823,"headPos":3759,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ partOfVertex P v ∈ P.parts"],"goalsAfter":[],"content":"obtain ⟨h, -⟩ := (P.isPartition.2 v).choose_spec.1\n  exact h"},{"tailPos":3756,"headPos":3754,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ partOfVertex P v ∈ P.parts"],"goalsAfter":[],"content":"by"},{"tailPos":3823,"headPos":3754,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ partOfVertex P v ∈ P.parts"],"goalsAfter":[],"content":"by\n  obtain ⟨h, -⟩ := (P.isPartition.2 v).choose_spec.1\n  exact h"},{"tailPos":4044,"headPos":3979,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ v ∈ partOfVertex P v"],"goalsAfter":["case intro.intro\nV : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n_h3 : ∀ (y : Set V), (fun b => ∃! x, v ∈ b) y → y = Exists.choose (_ : ∃! b x, v ∈ b)\nh1 : Exists.choose (_ : ∃! b x, v ∈ b) ∈ P.parts\nh2 :\n  (fun x => v ∈ Exists.choose (_ : ∃! b x, v ∈ b)) h1 ∧\n    ∀ (y : Exists.choose (_ : ∃! b x, v ∈ b) ∈ P.parts), (fun x => v ∈ Exists.choose (_ : ∃! b x, v ∈ b)) y → y = h1\n⊢ v ∈ partOfVertex P v"],"content":"obtain ⟨⟨h1, h2⟩, _h3⟩ := (P.isPartition.2 v).choose_spec"},{"tailPos":4057,"headPos":4047,"goalsBefore":["case intro.intro\nV : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n_h3 : ∀ (y : Set V), (fun b => ∃! x, v ∈ b) y → y = Exists.choose (_ : ∃! b x, v ∈ b)\nh1 : Exists.choose (_ : ∃! b x, v ∈ b) ∈ P.parts\nh2 :\n  (fun x => v ∈ Exists.choose (_ : ∃! b x, v ∈ b)) h1 ∧\n    ∀ (y : Exists.choose (_ : ∃! b x, v ∈ b) ∈ P.parts), (fun x => v ∈ Exists.choose (_ : ∃! b x, v ∈ b)) y → y = h1\n⊢ v ∈ partOfVertex P v"],"goalsAfter":[],"content":"exact h2.1"},{"tailPos":4057,"headPos":3979,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ v ∈ partOfVertex P v"],"goalsAfter":[],"content":"obtain ⟨⟨h1, h2⟩, _h3⟩ := (P.isPartition.2 v).choose_spec\n  exact h2.1"},{"tailPos":3976,"headPos":3974,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ v ∈ partOfVertex P v"],"goalsAfter":[],"content":"by"},{"tailPos":4057,"headPos":3974,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv : V\n⊢ v ∈ partOfVertex P v"],"goalsAfter":[],"content":"by\n  obtain ⟨⟨h1, h2⟩, _h3⟩ := (P.isPartition.2 v).choose_spec\n  exact h2.1"},{"tailPos":4260,"headPos":4252,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\n⊢ partOfVertex P v ≠ partOfVertex P w"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\n⊢ False"],"content":"intro hn"},{"tailPos":4294,"headPos":4263,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\n⊢ False"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P w\n⊢ False"],"content":"have hw := P.mem_partOfVertex w"},{"tailPos":4307,"headPos":4301,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P w\n⊢ False"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P v\n⊢ False"],"content":"← hn"},{"tailPos":4308,"headPos":4307,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P v\n⊢ False"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P v\n⊢ False"],"content":"]"},{"tailPos":4314,"headPos":4297,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P w\n⊢ False"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P v\n⊢ False"],"content":"rw [← hn] at hw"},{"tailPos":4405,"headPos":4317,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\nhn : partOfVertex P v = partOfVertex P w\nhw : w ∈ partOfVertex P v\n⊢ False"],"goalsAfter":[],"content":"exact P.independent _ (P.partOfVertex_mem v) (P.mem_partOfVertex v) hw (G.ne_of_adj h) h"},{"tailPos":4405,"headPos":4252,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\n⊢ partOfVertex P v ≠ partOfVertex P w"],"goalsAfter":[],"content":"intro hn\n  have hw := P.mem_partOfVertex w\n  rw [← hn] at hw\n  exact P.independent _ (P.partOfVertex_mem v) (P.mem_partOfVertex v) hw (G.ne_of_adj h) h"},{"tailPos":4249,"headPos":4247,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\n⊢ partOfVertex P v ≠ partOfVertex P w"],"goalsAfter":[],"content":"by"},{"tailPos":4405,"headPos":4247,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv w : V\nh : Adj G v w\n⊢ partOfVertex P v ≠ partOfVertex P w"],"goalsAfter":[],"content":"by\n  intro hn\n  have hw := P.mem_partOfVertex w\n  rw [← hn] at hw\n  exact P.independent _ (P.partOfVertex_mem v) (P.mem_partOfVertex v) hw (G.ne_of_adj h) h"},{"tailPos":4768,"headPos":4761,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ ≠\n    (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬(fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ =\n      (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"content":"Ne.def,"},{"tailPos":4785,"headPos":4769,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬(fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ =\n      (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬partOfVertex P v✝ = partOfVertex P w✝"],"content":"Subtype.mk_eq_mk"},{"tailPos":4786,"headPos":4785,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬partOfVertex P v✝ = partOfVertex P w✝"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬partOfVertex P v✝ = partOfVertex P w✝"],"content":"]"},{"tailPos":4786,"headPos":4757,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ ≠\n    (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬partOfVertex P v✝ = partOfVertex P w✝"],"content":"rw [Ne.def, Subtype.mk_eq_mk]"},{"tailPos":4825,"headPos":4791,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ ¬partOfVertex P v✝ = partOfVertex P w✝"],"goalsAfter":[],"content":"exact P.partOfVertex_ne_of_adj hvw"},{"tailPos":4825,"headPos":4757,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ ≠\n    (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"goalsAfter":[],"content":"rw [Ne.def, Subtype.mk_eq_mk]\n    exact P.partOfVertex_ne_of_adj hvw"},{"tailPos":4752,"headPos":4750,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ ≠\n    (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"goalsAfter":[],"content":"by"},{"tailPos":4825,"headPos":4750,"goalsBefore":["V : Type u\nG : SimpleGraph V\nP : Partition G\nv✝ w✝ : V\nhvw : Adj G v✝ w✝\n⊢ (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) v✝ ≠\n    (fun v => { val := partOfVertex P v, property := (_ : partOfVertex P v ∈ P.parts) }) w✝"],"goalsAfter":[],"content":"by\n    rw [Ne.def, Subtype.mk_eq_mk]\n    exact P.partOfVertex_ne_of_adj hvw"},{"tailPos":5642,"headPos":5621,"goalsBefore":["V : Type u\nG : SimpleGraph V\nα : Type v\nC : Coloring G α\n⊢ ∀ (s : Set V), s ∈ colorClasses C → IsAntichain G.Adj s"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\nα : Type v\nC : Coloring G α\nc : V\n⊢ IsAntichain G.Adj {x | Setoid.Rel (Setoid.ker ↑C) x c}"],"content":"rintro s ⟨c, rfl⟩"},{"tailPos":5680,"headPos":5647,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\nα : Type v\nC : Coloring G α\nc : V\n⊢ IsAntichain G.Adj {x | Setoid.Rel (Setoid.ker ↑C) x c}"],"goalsAfter":[],"content":"apply C.color_classes_independent"},{"tailPos":5680,"headPos":5621,"goalsBefore":["V : Type u\nG : SimpleGraph V\nα : Type v\nC : Coloring G α\n⊢ ∀ (s : Set V), s ∈ colorClasses C → IsAntichain G.Adj s"],"goalsAfter":[],"content":"rintro s ⟨c, rfl⟩\n    apply C.color_classes_independent"},{"tailPos":5616,"headPos":5614,"goalsBefore":["V : Type u\nG : SimpleGraph V\nα : Type v\nC : Coloring G α\n⊢ ∀ (s : Set V), s ∈ colorClasses C → IsAntichain G.Adj s"],"goalsAfter":[],"content":"by"},{"tailPos":5680,"headPos":5614,"goalsBefore":["V : Type u\nG : SimpleGraph V\nα : Type v\nC : Coloring G α\n⊢ ∀ (s : Set V), s ∈ colorClasses C → IsAntichain G.Adj s"],"goalsAfter":[],"content":"by\n    rintro s ⟨c, rfl⟩\n    apply C.color_classes_independent"},{"tailPos":6001,"headPos":5990,"goalsBefore":["V : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n ↔ Colorable G n"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n → Colorable G n","case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"content":"constructor"},{"tailPos":6006,"headPos":6004,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n → Colorable G n","case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n → Colorable G n"],"content":"·"},{"tailPos":6029,"headPos":6007,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n → Colorable G n"],"goalsAfter":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nhc : Finset.card (Set.Finite.toFinset hf) ≤ n\n⊢ Colorable G n"],"content":"rintro ⟨P, hf, hc⟩"},{"tailPos":6070,"headPos":6034,"goalsBefore":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nhc : Finset.card (Set.Finite.toFinset hf) ≤ n\n⊢ Colorable G n"],"goalsAfter":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nhc : Finset.card (Set.Finite.toFinset hf) ≤ n\nthis : Fintype ↑P.parts\n⊢ Colorable G n"],"content":"have : Fintype P.parts := hf.fintype"},{"tailPos":6106,"headPos":6079,"goalsBefore":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nhc : Finset.card (Set.Finite.toFinset hf) ≤ n\nthis : Fintype ↑P.parts\n⊢ Colorable G n"],"goalsAfter":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nthis : Fintype ↑P.parts\nhc : Fintype.card ↑P.parts ≤ n\n⊢ Colorable G n"],"content":"Set.Finite.card_toFinset hf"},{"tailPos":6107,"headPos":6106,"goalsBefore":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nthis : Fintype ↑P.parts\nhc : Fintype.card ↑P.parts ≤ n\n⊢ Colorable G n"],"goalsAfter":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nthis : Fintype ↑P.parts\nhc : Fintype.card ↑P.parts ≤ n\n⊢ Colorable G n"],"content":"]"},{"tailPos":6113,"headPos":6075,"goalsBefore":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nhc : Finset.card (Set.Finite.toFinset hf) ≤ n\nthis : Fintype ↑P.parts\n⊢ Colorable G n"],"goalsAfter":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nthis : Fintype ↑P.parts\nhc : Fintype.card ↑P.parts ≤ n\n⊢ Colorable G n"],"content":"rw [Set.Finite.card_toFinset hf] at hc"},{"tailPos":6146,"headPos":6118,"goalsBefore":["case mp.intro.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nP : Partition G\nhf : Set.Finite P.parts\nthis : Fintype ↑P.parts\nhc : Fintype.card ↑P.parts ≤ n\n⊢ Colorable G n"],"goalsAfter":[],"content":"apply P.to_colorable.mono hc"},{"tailPos":6146,"headPos":6007,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n → Colorable G n"],"goalsAfter":[],"content":"rintro ⟨P, hf, hc⟩\n    have : Fintype P.parts := hf.fintype\n    rw [Set.Finite.card_toFinset hf] at hc\n    apply P.to_colorable.mono hc"},{"tailPos":6146,"headPos":6004,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n → Colorable G n","case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"content":"· rintro ⟨P, hf, hc⟩\n    have : Fintype P.parts := hf.fintype\n    rw [Set.Finite.card_toFinset hf] at hc\n    apply P.to_colorable.mono hc"},{"tailPos":6151,"headPos":6149,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"content":"·"},{"tailPos":6166,"headPos":6152,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\n⊢ Partitionable G n"],"content":"rintro ⟨C⟩"},{"tailPos":6257,"headPos":6171,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\n⊢ Partitionable G n"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\n⊢ Finset.card (Set.Finite.toFinset (_ : Set.Finite (Coloring.colorClasses C))) ≤ Fintype.card (Fin n)"],"content":"refine' ⟨C.toPartition, C.colorClasses_finite, le_trans _ (Fintype.card_fin n).le⟩"},{"tailPos":6281,"headPos":6262,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\n⊢ Finset.card (Set.Finite.toFinset (_ : Set.Finite (Coloring.colorClasses C))) ≤ Fintype.card (Fin n)"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\n⊢ Finset.card (Set.Finite.toFinset h) ≤ Fintype.card (Fin n)"],"content":"generalize_proofs h"},{"tailPos":6349,"headPos":6286,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\n⊢ Finset.card (Set.Finite.toFinset h) ≤ Fintype.card (Fin n)"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Finset.card (Set.Finite.toFinset h) ≤ Fintype.card (Fin n)"],"content":"haveI : Fintype C.colorClasses := C.colorClasses_finite.fintype"},{"tailPos":6373,"headPos":6358,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Finset.card (Set.Finite.toFinset h) ≤ Fintype.card (Fin n)"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Fintype.card ↑(Coloring.colorClasses C) ≤ Fintype.card (Fin n)"],"content":"h.card_toFinset"},{"tailPos":6374,"headPos":6373,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Fintype.card ↑(Coloring.colorClasses C) ≤ Fintype.card (Fin n)"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Fintype.card ↑(Coloring.colorClasses C) ≤ Fintype.card (Fin n)"],"content":"]"},{"tailPos":6374,"headPos":6354,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Finset.card (Set.Finite.toFinset h) ≤ Fintype.card (Fin n)"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Fintype.card ↑(Coloring.colorClasses C) ≤ Fintype.card (Fin n)"],"content":"rw [h.card_toFinset]"},{"tailPos":6407,"headPos":6379,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nn : ℕ\nC : Coloring G (Fin n)\nh : Set.Finite (Coloring.colorClasses C)\nthis : Fintype ↑(Coloring.colorClasses C)\n⊢ Fintype.card ↑(Coloring.colorClasses C) ≤ Fintype.card (Fin n)"],"goalsAfter":[],"content":"exact C.card_colorClasses_le"},{"tailPos":6407,"headPos":6152,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"goalsAfter":[],"content":"rintro ⟨C⟩\n    refine' ⟨C.toPartition, C.colorClasses_finite, le_trans _ (Fintype.card_fin n).le⟩\n    generalize_proofs h\n    haveI : Fintype C.colorClasses := C.colorClasses_finite.fintype\n    rw [h.card_toFinset]\n    exact C.card_colorClasses_le"},{"tailPos":6407,"headPos":6149,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Colorable G n → Partitionable G n"],"goalsAfter":[],"content":"· rintro ⟨C⟩\n    refine' ⟨C.toPartition, C.colorClasses_finite, le_trans _ (Fintype.card_fin n).le⟩\n    generalize_proofs h\n    haveI : Fintype C.colorClasses := C.colorClasses_finite.fintype\n    rw [h.card_toFinset]\n    exact C.card_colorClasses_le"},{"tailPos":6407,"headPos":5990,"goalsBefore":["V : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n ↔ Colorable G n"],"goalsAfter":[],"content":"constructor\n  · rintro ⟨P, hf, hc⟩\n    have : Fintype P.parts := hf.fintype\n    rw [Set.Finite.card_toFinset hf] at hc\n    apply P.to_colorable.mono hc\n  · rintro ⟨C⟩\n    refine' ⟨C.toPartition, C.colorClasses_finite, le_trans _ (Fintype.card_fin n).le⟩\n    generalize_proofs h\n    haveI : Fintype C.colorClasses := C.colorClasses_finite.fintype\n    rw [h.card_toFinset]\n    exact C.card_colorClasses_le"},{"tailPos":5987,"headPos":5985,"goalsBefore":["V : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n ↔ Colorable G n"],"goalsAfter":[],"content":"by"},{"tailPos":6407,"headPos":5985,"goalsBefore":["V : Type u\nG : SimpleGraph V\nn : ℕ\n⊢ Partitionable G n ↔ Colorable G n"],"goalsAfter":[],"content":"by\n  constructor\n  · rintro ⟨P, hf, hc⟩\n    have : Fintype P.parts := hf.fintype\n    rw [Set.Finite.card_toFinset hf] at hc\n    apply P.to_colorable.mono hc\n  · rintro ⟨C⟩\n    refine' ⟨C.toPartition, C.colorClasses_finite, le_trans _ (Fintype.card_fin n).le⟩\n    generalize_proofs h\n    haveI : Fintype C.colorClasses := C.colorClasses_finite.fintype\n    rw [h.card_toFinset]\n    exact C.card_colorClasses_le"}]
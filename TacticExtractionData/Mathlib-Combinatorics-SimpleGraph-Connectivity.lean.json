[{"tailPos":5158,"headPos":5148,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' u'' v'' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\nhu' : u' = u''\nhv' : v' = v''\n⊢ Walk.copy (Walk.copy p hu hv) hu' hv' = Walk.copy p (_ : u = u'') (_ : v = v'')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu'' v'' : V\np : Walk G u'' v''\n⊢ Walk.copy (Walk.copy p (_ : u'' = u'') (_ : v'' = v'')) (_ : u'' = u'') (_ : v'' = v'') =\n    Walk.copy p (_ : u'' = u'') (_ : v'' = v'')"],"content":"subst_vars"},{"tailPos":5164,"headPos":5161,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu'' v'' : V\np : Walk G u'' v''\n⊢ Walk.copy (Walk.copy p (_ : u'' = u'') (_ : v'' = v'')) (_ : u'' = u'') (_ : v'' = v'') =\n    Walk.copy p (_ : u'' = u'') (_ : v'' = v'')"],"goalsAfter":[],"content":"rfl"},{"tailPos":5164,"headPos":5148,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' u'' v'' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\nhu' : u' = u''\nhv' : v' = v''\n⊢ Walk.copy (Walk.copy p hu hv) hu' hv' = Walk.copy p (_ : u = u'') (_ : v = v'')"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":5145,"headPos":5143,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' u'' v'' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\nhu' : u' = u''\nhv' : v' = v''\n⊢ Walk.copy (Walk.copy p hu hv) hu' hv' = Walk.copy p (_ : u = u'') (_ : v = v'')"],"goalsAfter":[],"content":"by"},{"tailPos":5164,"headPos":5143,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' u'' v'' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\nhu' : u' = u''\nhv' : v' = v''\n⊢ Walk.copy (Walk.copy p hu hv) hu' hv' = Walk.copy p (_ : u = u'') (_ : v = v'')"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":5340,"headPos":5330,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\nhu : u = u'\n⊢ Walk.copy nil hu hu = nil"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' : V\n⊢ Walk.copy nil (_ : u' = u') (_ : u' = u') = nil"],"content":"subst_vars"},{"tailPos":5346,"headPos":5343,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' : V\n⊢ Walk.copy nil (_ : u' = u') (_ : u' = u') = nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":5346,"headPos":5330,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\nhu : u = u'\n⊢ Walk.copy nil hu hu = nil"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":5327,"headPos":5325,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\nhu : u = u'\n⊢ Walk.copy nil hu hu = nil"],"goalsAfter":[],"content":"by"},{"tailPos":5346,"headPos":5325,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\nhu : u = u'\n⊢ Walk.copy nil hu hu = nil"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":5591,"headPos":5581,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' w' : V\nh : Adj G u v\np : Walk G v w\nhu : u = u'\nhw : w = w'\n⊢ Walk.copy (cons h p) hu hw = cons (_ : Adj G u' v) (Walk.copy p (_ : v = v) hw)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv u' w' : V\nh : Adj G u' v\np : Walk G v w'\n⊢ Walk.copy (cons h p) (_ : u' = u') (_ : w' = w') = cons (_ : Adj G u' v) (Walk.copy p (_ : v = v) (_ : w' = w'))"],"content":"subst_vars"},{"tailPos":5597,"headPos":5594,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv u' w' : V\nh : Adj G u' v\np : Walk G v w'\n⊢ Walk.copy (cons h p) (_ : u' = u') (_ : w' = w') = cons (_ : Adj G u' v) (Walk.copy p (_ : v = v) (_ : w' = w'))"],"goalsAfter":[],"content":"rfl"},{"tailPos":5597,"headPos":5581,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' w' : V\nh : Adj G u v\np : Walk G v w\nhu : u = u'\nhw : w = w'\n⊢ Walk.copy (cons h p) hu hw = cons (_ : Adj G u' v) (Walk.copy p (_ : v = v) hw)"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":5578,"headPos":5576,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' w' : V\nh : Adj G u v\np : Walk G v w\nhu : u = u'\nhw : w = w'\n⊢ Walk.copy (cons h p) hu hw = cons (_ : Adj G u' v) (Walk.copy p (_ : v = v) hw)"],"goalsAfter":[],"content":"by"},{"tailPos":5597,"headPos":5576,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' w' : V\nh : Adj G u v\np : Walk G v w\nhu : u = u'\nhw : w = w'\n⊢ Walk.copy (cons h p) hu hw = cons (_ : Adj G u' v) (Walk.copy p (_ : v = v) hw)"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":5854,"headPos":5844,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v' w' : V\nh : Adj G u v\np : Walk G v' w'\nhv : v' = v\nhw : w' = w\n⊢ cons h (Walk.copy p hv hw) = Walk.copy (cons (_ : Adj G u v') p) (_ : u = u) hw"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v' w' : V\np : Walk G v' w'\nh : Adj G u v'\n⊢ cons h (Walk.copy p (_ : v' = v') (_ : w' = w')) = Walk.copy (cons (_ : Adj G u v') p) (_ : u = u) (_ : w' = w')"],"content":"subst_vars"},{"tailPos":5860,"headPos":5857,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v' w' : V\np : Walk G v' w'\nh : Adj G u v'\n⊢ cons h (Walk.copy p (_ : v' = v') (_ : w' = w')) = Walk.copy (cons (_ : Adj G u v') p) (_ : u = u) (_ : w' = w')"],"goalsAfter":[],"content":"rfl"},{"tailPos":5860,"headPos":5844,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v' w' : V\nh : Adj G u v\np : Walk G v' w'\nhv : v' = v\nhw : w' = w\n⊢ cons h (Walk.copy p hv hw) = Walk.copy (cons (_ : Adj G u v') p) (_ : u = u) hw"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":5841,"headPos":5839,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v' w' : V\nh : Adj G u v\np : Walk G v' w'\nhv : v' = v\nhw : w' = w\n⊢ cons h (Walk.copy p hv hw) = Walk.copy (cons (_ : Adj G u v') p) (_ : u = u) hw"],"goalsAfter":[],"content":"by"},{"tailPos":5860,"headPos":5839,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v' w' : V\nh : Adj G u v\np : Walk G v' w'\nhv : v' = v\nhw : w' = w\n⊢ cons h (Walk.copy p hv hw) = Walk.copy (cons (_ : Adj G u v') p) (_ : u = u) hw"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":8036,"headPos":8029,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\n⊢ getVert w 0 = u"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ getVert nil 0 = u","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ getVert (cons h✝ p✝) 0 = u"],"content":"cases w"},{"tailPos":8040,"headPos":8037,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ getVert nil 0 = u","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ getVert (cons h✝ p✝) 0 = u"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ getVert nil 0 = u","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ getVert (cons h✝ p✝) 0 = u"],"content":"<;>"},{"tailPos":8044,"headPos":8041,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ getVert nil 0 = u"],"goalsAfter":[],"content":"rfl"},{"tailPos":8044,"headPos":8041,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ getVert (cons h✝ p✝) 0 = u"],"goalsAfter":[],"content":"rfl"},{"tailPos":8044,"headPos":8029,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\n⊢ getVert w 0 = u"],"goalsAfter":[],"content":"cases w <;> rfl"},{"tailPos":8028,"headPos":8026,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\n⊢ getVert w 0 = u"],"goalsAfter":[],"content":"by"},{"tailPos":8044,"headPos":8026,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\n⊢ getVert w 0 = u"],"goalsAfter":[],"content":"by cases w <;> rfl"},{"tailPos":8275,"headPos":8272,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\ni : ℕ\nhi : length nil ≤ i\n⊢ getVert nil i = u✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":8275,"headPos":8263,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\ni : ℕ\nhi : length nil ≤ i\n⊢ getVert nil i = u✝"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":8306,"headPos":8299,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\ni : ℕ\nhi : length (cons h✝ p✝) ≤ i\n⊢ getVert (cons h✝ p✝) i = w✝"],"goalsAfter":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nhi : length (cons h✝ p✝) ≤ Nat.zero\n⊢ getVert (cons h✝ p✝) Nat.zero = w✝","case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"content":"cases i"},{"tailPos":8313,"headPos":8311,"goalsBefore":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nhi : length (cons h✝ p✝) ≤ Nat.zero\n⊢ getVert (cons h✝ p✝) Nat.zero = w✝","case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"goalsAfter":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nhi : length (cons h✝ p✝) ≤ Nat.zero\n⊢ getVert (cons h✝ p✝) Nat.zero = w✝"],"content":"·"},{"tailPos":8322,"headPos":8314,"goalsBefore":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nhi : length (cons h✝ p✝) ≤ Nat.zero\n⊢ getVert (cons h✝ p✝) Nat.zero = w✝"],"goalsAfter":[],"content":"cases hi"},{"tailPos":8322,"headPos":8311,"goalsBefore":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nhi : length (cons h✝ p✝) ≤ Nat.zero\n⊢ getVert (cons h✝ p✝) Nat.zero = w✝","case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"goalsAfter":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"content":"· cases hi"},{"tailPos":8329,"headPos":8327,"goalsBefore":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"goalsAfter":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"content":"·"},{"tailPos":8366,"headPos":8330,"goalsBefore":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"goalsAfter":[],"content":"exact ih (Nat.succ_le_succ_iff.1 hi)"},{"tailPos":8366,"headPos":8327,"goalsBefore":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\nn✝ : ℕ\nhi : length (cons h✝ p✝) ≤ Nat.succ n✝\n⊢ getVert (cons h✝ p✝) (Nat.succ n✝) = w✝"],"goalsAfter":[],"content":"· exact ih (Nat.succ_le_succ_iff.1 hi)"},{"tailPos":8366,"headPos":8299,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\ni : ℕ\nhi : length (cons h✝ p✝) ≤ i\n⊢ getVert (cons h✝ p✝) i = w✝"],"goalsAfter":[],"content":"cases i\n    · cases hi\n    · exact ih (Nat.succ_le_succ_iff.1 hi)"},{"tailPos":8366,"headPos":8278,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, length p✝ ≤ i → getVert p✝ i = w✝\ni : ℕ\nhi : length (cons h✝ p✝) ≤ i\n⊢ getVert (cons h✝ p✝) i = w✝"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    cases i\n    · cases hi\n    · exact ih (Nat.succ_le_succ_iff.1 hi)"},{"tailPos":8366,"headPos":8229,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : length w ≤ i\n⊢ getVert w i = v"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : length w ≤ i\n⊢ getVert w i = v"],"content":"induction w generalizing i with\n  | nil => rfl\n  | cons _ _ ih =>\n    cases i\n    · cases hi\n    · exact ih (Nat.succ_le_succ_iff.1 hi)"},{"tailPos":8226,"headPos":8224,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : length w ≤ i\n⊢ getVert w i = v"],"goalsAfter":[],"content":"by"},{"tailPos":8366,"headPos":8224,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : length w ≤ i\n⊢ getVert w i = v"],"goalsAfter":[],"content":"by\n  induction w generalizing i with\n  | nil => rfl\n  | cons _ _ ih =>\n    cases i\n    · cases hi\n    · exact ih (Nat.succ_le_succ_iff.1 hi)"},{"tailPos":8824,"headPos":8816,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\ni : ℕ\nhi : i < length nil\n⊢ Adj G (getVert nil i) (getVert nil (i + 1))"],"goalsAfter":[],"content":"cases hi"},{"tailPos":8824,"headPos":8807,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\ni : ℕ\nhi : i < length nil\n⊢ Adj G (getVert nil i) (getVert nil (i + 1))"],"goalsAfter":[],"content":"| nil => cases hi"},{"tailPos":8857,"headPos":8850,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\ni : ℕ\nhi : i < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) i) (getVert (cons hxy p✝) (i + 1))"],"goalsAfter":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nhi : Nat.zero < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) Nat.zero) (getVert (cons hxy p✝) (Nat.zero + 1))","case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"content":"cases i"},{"tailPos":8864,"headPos":8862,"goalsBefore":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nhi : Nat.zero < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) Nat.zero) (getVert (cons hxy p✝) (Nat.zero + 1))","case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"goalsAfter":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nhi : Nat.zero < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) Nat.zero) (getVert (cons hxy p✝) (Nat.zero + 1))"],"content":"·"},{"tailPos":8884,"headPos":8865,"goalsBefore":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nhi : Nat.zero < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) Nat.zero) (getVert (cons hxy p✝) (Nat.zero + 1))"],"goalsAfter":[],"content":"simp [getVert, hxy]"},{"tailPos":8884,"headPos":8862,"goalsBefore":["case cons.zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nhi : Nat.zero < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) Nat.zero) (getVert (cons hxy p✝) (Nat.zero + 1))","case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"goalsAfter":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"content":"· simp [getVert, hxy]"},{"tailPos":8891,"headPos":8889,"goalsBefore":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"goalsAfter":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"content":"·"},{"tailPos":8928,"headPos":8892,"goalsBefore":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"goalsAfter":[],"content":"exact ih (Nat.succ_lt_succ_iff.1 hi)"},{"tailPos":8928,"headPos":8889,"goalsBefore":["case cons.succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\nn✝ : ℕ\nhi : Nat.succ n✝ < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) (Nat.succ n✝)) (getVert (cons hxy p✝) (Nat.succ n✝ + 1))"],"goalsAfter":[],"content":"· exact ih (Nat.succ_lt_succ_iff.1 hi)"},{"tailPos":8928,"headPos":8850,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\ni : ℕ\nhi : i < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) i) (getVert (cons hxy p✝) (i + 1))"],"goalsAfter":[],"content":"cases i\n    · simp [getVert, hxy]\n    · exact ih (Nat.succ_lt_succ_iff.1 hi)"},{"tailPos":8928,"headPos":8827,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nhxy : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {i : ℕ}, i < length p✝ → Adj G (getVert p✝ i) (getVert p✝ (i + 1))\ni : ℕ\nhi : i < length (cons hxy p✝)\n⊢ Adj G (getVert (cons hxy p✝) i) (getVert (cons hxy p✝) (i + 1))"],"goalsAfter":[],"content":"| cons hxy _ ih =>\n    cases i\n    · simp [getVert, hxy]\n    · exact ih (Nat.succ_lt_succ_iff.1 hi)"},{"tailPos":8928,"headPos":8773,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : i < length w\n⊢ Adj G (getVert w i) (getVert w (i + 1))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : i < length w\n⊢ Adj G (getVert w i) (getVert w (i + 1))"],"content":"induction w generalizing i with\n  | nil => cases hi\n  | cons hxy _ ih =>\n    cases i\n    · simp [getVert, hxy]\n    · exact ih (Nat.succ_lt_succ_iff.1 hi)"},{"tailPos":8770,"headPos":8768,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : i < length w\n⊢ Adj G (getVert w i) (getVert w (i + 1))"],"goalsAfter":[],"content":"by"},{"tailPos":8928,"headPos":8768,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nw : Walk G u v\ni : ℕ\nhi : i < length w\n⊢ Adj G (getVert w i) (getVert w (i + 1))"],"goalsAfter":[],"content":"by\n  induction w generalizing i with\n  | nil => cases hi\n  | cons hxy _ ih =>\n    cases i\n    · simp [getVert, hxy]\n    · exact ih (Nat.succ_lt_succ_iff.1 hi)"},{"tailPos":9531,"headPos":9528,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ append nil nil = nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":9531,"headPos":9519,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ append nil nil = nil"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":9567,"headPos":9555,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ append (cons h✝ p✝) nil = cons h✝ p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ cons h✝ (append p✝ nil) = cons h✝ p✝"],"content":"cons_append,"},{"tailPos":9570,"headPos":9568,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ cons h✝ (append p✝ nil) = cons h✝ p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ cons h✝ p✝ = cons h✝ p✝"],"content":"ih"},{"tailPos":9571,"headPos":9570,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ cons h✝ p✝ = cons h✝ p✝"],"goalsAfter":[],"content":"]"},{"tailPos":9571,"headPos":9551,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ append (cons h✝ p✝) nil = cons h✝ p✝"],"goalsAfter":[],"content":"rw [cons_append, ih]"},{"tailPos":9571,"headPos":9534,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : append p✝ nil = p✝\n⊢ append (cons h✝ p✝) nil = cons h✝ p✝"],"goalsAfter":[],"content":"| cons _ _ ih => rw [cons_append, ih]"},{"tailPos":9571,"headPos":9500,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ append p nil = p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ append p nil = p"],"content":"induction p with\n  | nil => rfl\n  | cons _ _ ih => rw [cons_append, ih]"},{"tailPos":9497,"headPos":9495,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ append p nil = p"],"goalsAfter":[],"content":"by"},{"tailPos":9571,"headPos":9495,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ append p nil = p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons _ _ ih => rw [cons_append, ih]"},{"tailPos":9961,"headPos":9958,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ : V\nq : Walk G u✝ w\n⊢ append nil (append q r) = append (append nil q) r"],"goalsAfter":[],"content":"rfl"},{"tailPos":9961,"headPos":9949,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ : V\nq : Walk G u✝ w\n⊢ append nil (append q r) = append (append nil q) r"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":10005,"headPos":9986,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ append (cons h p') (append q r) = append (append (cons h p') q) r"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ cons h (append p' (append q r)) = cons h (append (append p' q) r)"],"content":"dsimp only [append]"},{"tailPos":10016,"headPos":10014,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ cons h (append p' (append q r)) = cons h (append (append p' q) r)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ cons h (append (append p' q) r) = cons h (append (append p' q) r)"],"content":"ih"},{"tailPos":10017,"headPos":10016,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ cons h (append (append p' q) r) = cons h (append (append p' q) r)"],"goalsAfter":[],"content":"]"},{"tailPos":10017,"headPos":10010,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ cons h (append p' (append q r)) = cons h (append (append p' q) r)"],"goalsAfter":[],"content":"rw [ih]"},{"tailPos":10017,"headPos":9986,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ append (cons h p') (append q r) = append (append (cons h p') q) r"],"goalsAfter":[],"content":"dsimp only [append]\n    rw [ih]"},{"tailPos":10017,"headPos":9964,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), append p' (append q r) = append (append p' q) r\nq : Walk G w✝ w\n⊢ append (cons h p') (append q r) = append (append (cons h p') q) r"],"goalsAfter":[],"content":"| cons h p' ih =>\n    dsimp only [append]\n    rw [ih]"},{"tailPos":10017,"headPos":9930,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G w x\n⊢ append p (append q r) = append (append p q) r"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G w x\n⊢ append p (append q r) = append (append p q) r"],"content":"induction p with\n  | nil => rfl\n  | cons h p' ih =>\n    dsimp only [append]\n    rw [ih]"},{"tailPos":9927,"headPos":9925,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G w x\n⊢ append p (append q r) = append (append p q) r"],"goalsAfter":[],"content":"by"},{"tailPos":10017,"headPos":9925,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G w x\n⊢ append p (append q r) = append (append p q) r"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons h p' ih =>\n    dsimp only [append]\n    rw [ih]"},{"tailPos":10304,"headPos":10294,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' v' w' : V\np : Walk G u v\nq : Walk G v w\nhu : u = u'\nhv : v = v'\nhw : w = w'\n⊢ append (Walk.copy p hu hv) (Walk.copy q hv hw) = Walk.copy (append p q) hu hw"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' w' : V\np : Walk G u' v'\nq : Walk G v' w'\n⊢ append (Walk.copy p (_ : u' = u') (_ : v' = v')) (Walk.copy q (_ : v' = v') (_ : w' = w')) =\n    Walk.copy (append p q) (_ : u' = u') (_ : w' = w')"],"content":"subst_vars"},{"tailPos":10310,"headPos":10307,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' w' : V\np : Walk G u' v'\nq : Walk G v' w'\n⊢ append (Walk.copy p (_ : u' = u') (_ : v' = v')) (Walk.copy q (_ : v' = v') (_ : w' = w')) =\n    Walk.copy (append p q) (_ : u' = u') (_ : w' = w')"],"goalsAfter":[],"content":"rfl"},{"tailPos":10310,"headPos":10294,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' v' w' : V\np : Walk G u v\nq : Walk G v w\nhu : u = u'\nhv : v = v'\nhw : w = w'\n⊢ append (Walk.copy p hu hv) (Walk.copy q hv hw) = Walk.copy (append p q) hu hw"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":10291,"headPos":10289,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' v' w' : V\np : Walk G u v\nq : Walk G v w\nhu : u = u'\nhv : v = v'\nhw : w = w'\n⊢ append (Walk.copy p hu hv) (Walk.copy q hv hw) = Walk.copy (append p q) hu hw"],"goalsAfter":[],"content":"by"},{"tailPos":10310,"headPos":10289,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u' v' w' : V\np : Walk G u v\nq : Walk G v w\nhu : u = u'\nhv : v = v'\nhw : w = w'\n⊢ append (Walk.copy p hu hv) (Walk.copy q hv hw) = Walk.copy (append p q) hu hw"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":11145,"headPos":11128,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append (concat p h) q = append p (cons h q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append (append p (cons h nil)) q = append p (cons h q)"],"content":"concat_eq_append,"},{"tailPos":11163,"headPos":11146,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append (append p (cons h nil)) q = append p (cons h q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append p (append (cons h nil) q) = append p (cons h q)"],"content":"← append_assoc,"},{"tailPos":11179,"headPos":11164,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append p (append (cons h nil) q) = append p (cons h q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append p (cons h q) = append p (cons h q)"],"content":"cons_nil_append"},{"tailPos":11180,"headPos":11179,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append p (cons h q) = append p (cons h q)"],"goalsAfter":[],"content":"]"},{"tailPos":11180,"headPos":11124,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append (concat p h) q = append p (cons h q)"],"goalsAfter":[],"content":"rw [concat_eq_append, ← append_assoc, cons_nil_append]"},{"tailPos":11121,"headPos":11119,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append (concat p h) q = append p (cons h q)"],"goalsAfter":[],"content":"by"},{"tailPos":11180,"headPos":11119,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nh : Adj G v w\nq : Walk G w x\n⊢ append (concat p h) q = append p (cons h q)"],"goalsAfter":[],"content":"by\n  rw [concat_eq_append, ← append_assoc, cons_nil_append]"},{"tailPos":11548,"headPos":11522,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ u : V\nh : Adj G u u✝\n⊢ ∃ x q h', cons h nil = concat q h'"],"goalsAfter":[],"content":"exact ⟨_, nil, h, rfl⟩"},{"tailPos":11548,"headPos":11513,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ u : V\nh : Adj G u u✝\n⊢ ∃ x q h', cons h nil = concat q h'"],"goalsAfter":[],"content":"| nil => exact ⟨_, nil, h, rfl⟩"},{"tailPos":11608,"headPos":11573,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\n⊢ ∃ x q h'_1, cons h (cons h' p) = concat q h'_1"],"goalsAfter":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ ∃ x q h'_1, cons h (cons h' p) = concat q h'_1"],"content":"obtain ⟨y, q, h'', hc⟩ := ih h'"},{"tailPos":11646,"headPos":11613,"goalsBefore":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ ∃ x q h'_1, cons h (cons h' p) = concat q h'_1"],"goalsAfter":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (cons h' p) = concat (cons h q) h''"],"content":"refine' ⟨y, cons h q, h'', _⟩"},{"tailPos":11667,"headPos":11655,"goalsBefore":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (cons h' p) = concat (cons h q) h''"],"goalsAfter":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (cons h' p) = cons h (concat q h'')"],"content":"concat_cons,"},{"tailPos":11670,"headPos":11668,"goalsBefore":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (cons h' p) = cons h (concat q h'')"],"goalsAfter":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (concat q h'') = cons h (concat q h'')"],"content":"hc"},{"tailPos":11671,"headPos":11670,"goalsBefore":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (concat q h'') = cons h (concat q h'')"],"goalsAfter":[],"content":"]"},{"tailPos":11671,"headPos":11651,"goalsBefore":["case cons.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\ny : V\nq : Walk G u✝ y\nh'' : Adj G y w✝\nhc : cons h' p = concat q h''\n⊢ cons h (cons h' p) = concat (cons h q) h''"],"goalsAfter":[],"content":"rw [concat_cons, hc]"},{"tailPos":11671,"headPos":11573,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\n⊢ ∃ x q h'_1, cons h (cons h' p) = concat q h'_1"],"goalsAfter":[],"content":"obtain ⟨y, q, h'', hc⟩ := ih h'\n    refine' ⟨y, cons h q, h'', _⟩\n    rw [concat_cons, hc]"},{"tailPos":11671,"headPos":11551,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {u : V} (h : Adj G u v✝), ∃ x q h', cons h p = concat q h'\nu : V\nh : Adj G u u✝\n⊢ ∃ x q h'_1, cons h (cons h' p) = concat q h'_1"],"goalsAfter":[],"content":"| cons h' p ih =>\n    obtain ⟨y, q, h'', hc⟩ := ih h'\n    refine' ⟨y, cons h q, h'', _⟩\n    rw [concat_cons, hc]"},{"tailPos":11671,"headPos":11479,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ ∃ x q h', cons h p = concat q h'"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ ∃ x q h', cons h p = concat q h'"],"content":"induction p generalizing u with\n  | nil => exact ⟨_, nil, h, rfl⟩\n  | cons h' p ih =>\n    obtain ⟨y, q, h'', hc⟩ := ih h'\n    refine' ⟨y, cons h q, h'', _⟩\n    rw [concat_cons, hc]"},{"tailPos":11476,"headPos":11474,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ ∃ x q h', cons h p = concat q h'"],"goalsAfter":[],"content":"by"},{"tailPos":11671,"headPos":11474,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ ∃ x q h', cons h p = concat q h'"],"goalsAfter":[],"content":"by\n  induction p generalizing u with\n  | nil => exact ⟨_, nil, h, rfl⟩\n  | cons h' p ih =>\n    obtain ⟨y, q, h'', hc⟩ := ih h'\n    refine' ⟨y, cons h q, h'', _⟩\n    rw [concat_cons, hc]"},{"tailPos":12969,"headPos":12966,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x u✝ : V\nq : Walk G u✝ w\nr : Walk G u✝ x\n⊢ Walk.reverseAux (append nil q) r = Walk.reverseAux q (Walk.reverseAux nil r)"],"goalsAfter":[],"content":"rfl"},{"tailPos":12969,"headPos":12957,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x u✝ : V\nq : Walk G u✝ w\nr : Walk G u✝ x\n⊢ Walk.reverseAux (append nil q) r = Walk.reverseAux q (Walk.reverseAux nil r)"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":13019,"headPos":12989,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x u✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w) (r : Walk G v✝ x), Walk.reverseAux (append p✝ q) r = Walk.reverseAux q (Walk.reverseAux p✝ r)\nq : Walk G w✝ w\nr : Walk G u✝ x\n⊢ Walk.reverseAux (append (cons h p✝) q) r = Walk.reverseAux q (Walk.reverseAux (cons h p✝) r)"],"goalsAfter":[],"content":"exact ih q (cons (G.symm h) r)"},{"tailPos":13019,"headPos":12972,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x u✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w) (r : Walk G v✝ x), Walk.reverseAux (append p✝ q) r = Walk.reverseAux q (Walk.reverseAux p✝ r)\nq : Walk G w✝ w\nr : Walk G u✝ x\n⊢ Walk.reverseAux (append (cons h p✝) q) r = Walk.reverseAux q (Walk.reverseAux (cons h p✝) r)"],"goalsAfter":[],"content":"| cons h _ ih => exact ih q (cons (G.symm h) r)"},{"tailPos":13019,"headPos":12938,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G u x\n⊢ Walk.reverseAux (append p q) r = Walk.reverseAux q (Walk.reverseAux p r)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G u x\n⊢ Walk.reverseAux (append p q) r = Walk.reverseAux q (Walk.reverseAux p r)"],"content":"induction p with\n  | nil => rfl\n  | cons h _ ih => exact ih q (cons (G.symm h) r)"},{"tailPos":12935,"headPos":12933,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G u x\n⊢ Walk.reverseAux (append p q) r = Walk.reverseAux q (Walk.reverseAux p r)"],"goalsAfter":[],"content":"by"},{"tailPos":13019,"headPos":12933,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G v w\nr : Walk G u x\n⊢ Walk.reverseAux (append p q) r = Walk.reverseAux q (Walk.reverseAux p r)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons h _ ih => exact ih q (cons (G.symm h) r)"},{"tailPos":13312,"headPos":13309,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ : V\nq : Walk G u✝ w\n⊢ append (Walk.reverseAux nil q) r = Walk.reverseAux nil (append q r)"],"goalsAfter":[],"content":"rfl"},{"tailPos":13312,"headPos":13300,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ : V\nq : Walk G u✝ w\n⊢ append (Walk.reverseAux nil q) r = Walk.reverseAux nil (append q r)"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":13361,"headPos":13332,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G v✝ w), append (Walk.reverseAux p✝ q) r = Walk.reverseAux p✝ (append q r)\nq : Walk G u✝ w\n⊢ append (Walk.reverseAux (cons h p✝) q) r = Walk.reverseAux (cons h p✝) (append q r)"],"goalsAfter":[],"content":"simp [ih (cons (G.symm h) q)]"},{"tailPos":13361,"headPos":13315,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\nr : Walk G w x\nu✝ v✝ w✝ : V\nh : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G v✝ w), append (Walk.reverseAux p✝ q) r = Walk.reverseAux p✝ (append q r)\nq : Walk G u✝ w\n⊢ append (Walk.reverseAux (cons h p✝) q) r = Walk.reverseAux (cons h p✝) (append q r)"],"goalsAfter":[],"content":"| cons h _ ih => simp [ih (cons (G.symm h) q)]"},{"tailPos":13361,"headPos":13281,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G u w\nr : Walk G w x\n⊢ append (Walk.reverseAux p q) r = Walk.reverseAux p (append q r)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G u w\nr : Walk G w x\n⊢ append (Walk.reverseAux p q) r = Walk.reverseAux p (append q r)"],"content":"induction p with\n  | nil => rfl\n  | cons h _ ih => simp [ih (cons (G.symm h) q)]"},{"tailPos":13278,"headPos":13276,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G u w\nr : Walk G w x\n⊢ append (Walk.reverseAux p q) r = Walk.reverseAux p (append q r)"],"goalsAfter":[],"content":"by"},{"tailPos":13361,"headPos":13276,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x : V\np : Walk G u v\nq : Walk G u w\nr : Walk G w x\n⊢ append (Walk.reverseAux p q) r = Walk.reverseAux p (append q r)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons h _ ih => simp [ih (cons (G.symm h) q)]"},{"tailPos":13597,"headPos":13583,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ Walk.reverseAux p q = append (reverse p) q"],"goalsAfter":[],"content":"simp [reverse]"},{"tailPos":13582,"headPos":13580,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ Walk.reverseAux p q = append (reverse p) q"],"goalsAfter":[],"content":"by"},{"tailPos":13597,"headPos":13580,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ Walk.reverseAux p q = append (reverse p) q"],"goalsAfter":[],"content":"by simp [reverse]"},{"tailPos":13860,"headPos":13846,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ reverse (cons h p) = append (reverse p) (cons (_ : Adj G v u) nil)"],"goalsAfter":[],"content":"simp [reverse]"},{"tailPos":13845,"headPos":13843,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ reverse (cons h p) = append (reverse p) (cons (_ : Adj G v u) nil)"],"goalsAfter":[],"content":"by"},{"tailPos":13860,"headPos":13843,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ reverse (cons h p) = append (reverse p) (cons (_ : Adj G v u) nil)"],"goalsAfter":[],"content":"by simp [reverse]"},{"tailPos":14086,"headPos":14076,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ reverse (Walk.copy p hu hv) = Walk.copy (reverse p) hv hu"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ reverse (Walk.copy p (_ : u' = u') (_ : v' = v')) = Walk.copy (reverse p) (_ : v' = v') (_ : u' = u')"],"content":"subst_vars"},{"tailPos":14092,"headPos":14089,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ reverse (Walk.copy p (_ : u' = u') (_ : v' = v')) = Walk.copy (reverse p) (_ : v' = v') (_ : u' = u')"],"goalsAfter":[],"content":"rfl"},{"tailPos":14092,"headPos":14076,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ reverse (Walk.copy p hu hv) = Walk.copy (reverse p) hv hu"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":14073,"headPos":14071,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ reverse (Walk.copy p hu hv) = Walk.copy (reverse p) hv hu"],"goalsAfter":[],"content":"by"},{"tailPos":14092,"headPos":14071,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ reverse (Walk.copy p hu hv) = Walk.copy (reverse p) hv hu"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":14315,"headPos":14301,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ reverse (append p q) = append (reverse q) (reverse p)"],"goalsAfter":[],"content":"simp [reverse]"},{"tailPos":14300,"headPos":14298,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ reverse (append p q) = append (reverse q) (reverse p)"],"goalsAfter":[],"content":"by"},{"tailPos":14315,"headPos":14298,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ reverse (append p q) = append (reverse q) (reverse p)"],"goalsAfter":[],"content":"by simp [reverse]"},{"tailPos":14549,"headPos":14526,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (concat p h) = cons (_ : Adj G w v) (reverse p)"],"goalsAfter":[],"content":"simp [concat_eq_append]"},{"tailPos":14525,"headPos":14523,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (concat p h) = cons (_ : Adj G w v) (reverse p)"],"goalsAfter":[],"content":"by"},{"tailPos":14549,"headPos":14523,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (concat p h) = cons (_ : Adj G w v) (reverse p)"],"goalsAfter":[],"content":"by simp [concat_eq_append]"},{"tailPos":14745,"headPos":14742,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ reverse (reverse nil) = nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":14745,"headPos":14733,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ reverse (reverse nil) = nil"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":14774,"headPos":14765,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : reverse (reverse p✝) = p✝\n⊢ reverse (reverse (cons h✝ p✝)) = cons h✝ p✝"],"goalsAfter":[],"content":"simp [ih]"},{"tailPos":14774,"headPos":14748,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : reverse (reverse p✝) = p✝\n⊢ reverse (reverse (cons h✝ p✝)) = cons h✝ p✝"],"goalsAfter":[],"content":"| cons _ _ ih => simp [ih]"},{"tailPos":14774,"headPos":14714,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ reverse (reverse p) = p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ reverse (reverse p) = p"],"content":"induction p with\n  | nil => rfl\n  | cons _ _ ih => simp [ih]"},{"tailPos":14711,"headPos":14709,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ reverse (reverse p) = p"],"goalsAfter":[],"content":"by"},{"tailPos":14774,"headPos":14709,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ reverse (reverse p) = p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons _ _ ih => simp [ih]"},{"tailPos":15317,"headPos":15307,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ length (Walk.copy p hu hv) = length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ length (Walk.copy p (_ : u' = u') (_ : v' = v')) = length p"],"content":"subst_vars"},{"tailPos":15323,"headPos":15320,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ length (Walk.copy p (_ : u' = u') (_ : v' = v')) = length p"],"goalsAfter":[],"content":"rfl"},{"tailPos":15323,"headPos":15307,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ length (Walk.copy p hu hv) = length p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":15304,"headPos":15302,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ length (Walk.copy p hu hv) = length p"],"goalsAfter":[],"content":"by"},{"tailPos":15323,"headPos":15302,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ length (Walk.copy p hu hv) = length p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":15555,"headPos":15551,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ length (append nil q) = length nil + length q"],"goalsAfter":[],"content":"simp only [nil_append, length_nil, zero_add]"},{"tailPos":15555,"headPos":15542,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ length (append nil q) = length nil + length q"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":15620,"headPos":15575,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), length (append p✝ q) = length p✝ + length q\nq : Walk G w✝ w\n⊢ length (append (cons h✝ p✝) q) = length (cons h✝ p✝) + length q"],"goalsAfter":[],"content":"simp [ih, add_comm, add_left_comm, add_assoc]"},{"tailPos":15620,"headPos":15558,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G w✝ w), length (append p✝ q) = length p✝ + length q\nq : Walk G w✝ w\n⊢ length (append (cons h✝ p✝) q) = length (cons h✝ p✝) + length q"],"goalsAfter":[],"content":"| cons _ _ ih => simp [ih, add_comm, add_left_comm, add_assoc]"},{"tailPos":15620,"headPos":15523,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ length (append p q) = length p + length q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ length (append p q) = length p + length q"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih => simp [ih, add_comm, add_left_comm, add_assoc]"},{"tailPos":15520,"headPos":15518,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ length (append p q) = length p + length q"],"goalsAfter":[],"content":"by"},{"tailPos":15620,"headPos":15518,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ length (append p q) = length p + length q"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih => simp [ih, add_comm, add_left_comm, add_assoc]"},{"tailPos":16083,"headPos":16078,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ length (Walk.reverseAux nil q) = length nil + length q"],"goalsAfter":[],"content":"simp (config :=\n  (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [Walk.reverseAux, length, zero_add]"},{"tailPos":16083,"headPos":16069,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ length (Walk.reverseAux nil q) = length nil + length q"],"goalsAfter":[],"content":"| nil => simp!"},{"tailPos":16140,"headPos":16103,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G v✝ w), length (Walk.reverseAux p✝ q) = length p✝ + length q\nq : Walk G u✝ w\n⊢ length (Walk.reverseAux (cons h✝ p✝) q) = length (cons h✝ p✝) + length q"],"goalsAfter":[],"content":"simp [ih, Nat.add_succ, Nat.succ_add]"},{"tailPos":16140,"headPos":16086,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (q : Walk G v✝ w), length (Walk.reverseAux p✝ q) = length p✝ + length q\nq : Walk G u✝ w\n⊢ length (Walk.reverseAux (cons h✝ p✝) q) = length (cons h✝ p✝) + length q"],"goalsAfter":[],"content":"| cons _ _ ih => simp [ih, Nat.add_succ, Nat.succ_add]"},{"tailPos":16140,"headPos":16050,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ length (Walk.reverseAux p q) = length p + length q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ length (Walk.reverseAux p q) = length p + length q"],"content":"induction p with\n  | nil => simp!\n  | cons _ _ ih => simp [ih, Nat.add_succ, Nat.succ_add]"},{"tailPos":16047,"headPos":16045,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ length (Walk.reverseAux p q) = length p + length q"],"goalsAfter":[],"content":"by"},{"tailPos":16140,"headPos":16045,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G u w\n⊢ length (Walk.reverseAux p q) = length p + length q"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp!\n  | cons _ _ ih => simp [ih, Nat.add_succ, Nat.succ_add]"},{"tailPos":16329,"headPos":16315,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ length (reverse p) = length p"],"goalsAfter":[],"content":"simp [reverse]"},{"tailPos":16314,"headPos":16312,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ length (reverse p) = length p"],"goalsAfter":[],"content":"by"},{"tailPos":16329,"headPos":16312,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ length (reverse p) = length p"],"goalsAfter":[],"content":"by simp [reverse]"},{"tailPos":16710,"headPos":16699,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) ↔ u = v"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) → u = v","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"content":"constructor"},{"tailPos":16715,"headPos":16713,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) → u = v","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) → u = v"],"content":"·"},{"tailPos":16734,"headPos":16716,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) → u = v"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nhp : length p = 0\n⊢ u = v"],"content":"rintro ⟨p, hp⟩"},{"tailPos":16768,"headPos":16739,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nhp : length p = 0\n⊢ u = v"],"goalsAfter":[],"content":"exact eq_of_length_eq_zero hp"},{"tailPos":16768,"headPos":16716,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) → u = v"],"goalsAfter":[],"content":"rintro ⟨p, hp⟩\n    exact eq_of_length_eq_zero hp"},{"tailPos":16768,"headPos":16713,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) → u = v","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"content":"· rintro ⟨p, hp⟩\n    exact eq_of_length_eq_zero hp"},{"tailPos":16773,"headPos":16771,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"content":"·"},{"tailPos":16784,"headPos":16774,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ ∃ p, length p = 0"],"content":"rintro rfl"},{"tailPos":16809,"headPos":16789,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ ∃ p, length p = 0"],"goalsAfter":[],"content":"exact ⟨nil, rfl⟩"},{"tailPos":16809,"headPos":16774,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"goalsAfter":[],"content":"rintro rfl\n    exact ⟨nil, rfl⟩"},{"tailPos":16809,"headPos":16771,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u = v → ∃ p, length p = 0"],"goalsAfter":[],"content":"· rintro rfl\n    exact ⟨nil, rfl⟩"},{"tailPos":16809,"headPos":16699,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) ↔ u = v"],"goalsAfter":[],"content":"constructor\n  · rintro ⟨p, hp⟩\n    exact eq_of_length_eq_zero hp\n  · rintro rfl\n    exact ⟨nil, rfl⟩"},{"tailPos":16696,"headPos":16694,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) ↔ u = v"],"goalsAfter":[],"content":"by"},{"tailPos":16809,"headPos":16694,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ (∃ p, length p = 0) ↔ u = v"],"goalsAfter":[],"content":"by\n  constructor\n  · rintro ⟨p, hp⟩\n    exact eq_of_length_eq_zero hp\n  · rintro rfl\n    exact ⟨nil, rfl⟩"},{"tailPos":17005,"headPos":16998,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ length p = 0 ↔ p = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ length nil = 0 ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ length (cons h✝ p✝) = 0 ↔ cons h✝ p✝ = nil"],"content":"cases p"},{"tailPos":17009,"headPos":17006,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ length nil = 0 ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ length (cons h✝ p✝) = 0 ↔ cons h✝ p✝ = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ length nil = 0 ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ length (cons h✝ p✝) = 0 ↔ cons h✝ p✝ = nil"],"content":"<;>"},{"tailPos":17014,"headPos":17010,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ length nil = 0 ↔ nil = nil"],"goalsAfter":[],"content":"simp only [length_nil]"},{"tailPos":17014,"headPos":17010,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ length (cons h✝ p✝) = 0 ↔ cons h✝ p✝ = nil"],"goalsAfter":[],"content":"simp only [length_nil]"},{"tailPos":17014,"headPos":16998,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ length p = 0 ↔ p = nil"],"goalsAfter":[],"content":"cases p <;> simp"},{"tailPos":16997,"headPos":16995,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ length p = 0 ↔ p = nil"],"goalsAfter":[],"content":"by"},{"tailPos":17014,"headPos":16995,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ length p = 0 ↔ p = nil"],"goalsAfter":[],"content":"by cases p <;> simp"},{"tailPos":18417,"headPos":18396,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ concatRec Hnil Hconcat (concat p h) = Hconcat p h (concatRec Hnil Hconcat p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ (_ : reverse (reverse (concat p h)) = concat p h) ▸ concatRecAux Hnil Hconcat (reverse (concat p h)) =\n    Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p))"],"content":"simp only [concatRec]"},{"tailPos":18435,"headPos":18420,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ (_ : reverse (reverse (concat p h)) = concat p h) ▸ concatRecAux Hnil Hconcat (reverse (concat p h)) =\n    Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p))"],"goalsAfter":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq ((_ : reverse (reverse (concat p h)) = concat p h) ▸ concatRecAux Hnil Hconcat (reverse (concat p h)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"apply eq_of_heq"},{"tailPos":18458,"headPos":18438,"goalsBefore":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq ((_ : reverse (reverse (concat p h)) = concat p h) ▸ concatRecAux Hnil Hconcat (reverse (concat p h)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["case h.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"apply rec_heq_of_heq"},{"tailPos":18518,"headPos":18461,"goalsBefore":["case h.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h))) (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"trans concatRecAux @Hnil @Hconcat (cons h.symm p.reverse)"},{"tailPos":18523,"headPos":18521,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h))) (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h))) (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))"],"content":"·"},{"tailPos":18529,"headPos":18524,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h))) (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))"],"goalsAfter":["case e_8.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (concat p h) = cons (_ : Adj G w v) (reverse p)"],"content":"congr"},{"tailPos":18538,"headPos":18534,"goalsBefore":["case e_8.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (concat p h) = cons (_ : Adj G w v) (reverse p)"],"goalsAfter":[],"content":"simp only [reverse_concat]"},{"tailPos":18538,"headPos":18524,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h))) (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))"],"goalsAfter":[],"content":"congr\n    simp"},{"tailPos":18538,"headPos":18521,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse (concat p h))) (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"· congr\n    simp"},{"tailPos":18543,"headPos":18541,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"·"},{"tailPos":18561,"headPos":18548,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq\n    ((_ : append (reverse (reverse p)) (cons (_ : Adj G v w) nil) = reverse (cons (_ : Adj G w v) (reverse p))) ▸\n      Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"concatRecAux,"},{"tailPos":18577,"headPos":18562,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq\n    ((_ : append (reverse (reverse p)) (cons (_ : Adj G v w) nil) = reverse (cons (_ : Adj G w v) (reverse p))) ▸\n      Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"rec_heq_iff_heq"},{"tailPos":18578,"headPos":18577,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"]"},{"tailPos":18578,"headPos":18544,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"content":"rw [concatRecAux, rec_heq_iff_heq]"},{"tailPos":18588,"headPos":18583,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":["case e_4.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (reverse p) = p","case e_6\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse p)) ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p))"],"content":"congr"},{"tailPos":18592,"headPos":18589,"goalsBefore":["case e_4.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (reverse p) = p","case e_6\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse p)) ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p))"],"goalsAfter":["case e_4.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (reverse p) = p","case e_6\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse p)) ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p))"],"content":"<;>"},{"tailPos":18615,"headPos":18593,"goalsBefore":["case e_4.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ reverse (reverse p) = p"],"goalsAfter":[],"content":"simp [heq_rec_iff_heq]"},{"tailPos":18615,"headPos":18593,"goalsBefore":["case e_6\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (reverse p)) ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p))"],"goalsAfter":[],"content":"simp [heq_rec_iff_heq]"},{"tailPos":18615,"headPos":18583,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (Hconcat (reverse (reverse p)) (_ : Adj G v w) (concatRecAux Hnil Hconcat (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":[],"content":"congr <;> simp [heq_rec_iff_heq]"},{"tailPos":18615,"headPos":18544,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":[],"content":"rw [concatRecAux, rec_heq_iff_heq]\n    congr <;> simp [heq_rec_iff_heq]"},{"tailPos":18615,"headPos":18541,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ HEq (concatRecAux Hnil Hconcat (cons (_ : Adj G w v) (reverse p)))\n    (Hconcat p h ((_ : reverse (reverse p) = p) ▸ concatRecAux Hnil Hconcat (reverse p)))"],"goalsAfter":[],"content":"· rw [concatRecAux, rec_heq_iff_heq]\n    congr <;> simp [heq_rec_iff_heq]"},{"tailPos":18615,"headPos":18396,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ concatRec Hnil Hconcat (concat p h) = Hconcat p h (concatRec Hnil Hconcat p)"],"goalsAfter":[],"content":"simp only [concatRec]\n  apply eq_of_heq\n  apply rec_heq_of_heq\n  trans concatRecAux @Hnil @Hconcat (cons h.symm p.reverse)\n  · congr\n    simp\n  · rw [concatRecAux, rec_heq_iff_heq]\n    congr <;> simp [heq_rec_iff_heq]"},{"tailPos":18393,"headPos":18391,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ concatRec Hnil Hconcat (concat p h) = Hconcat p h (concatRec Hnil Hconcat p)"],"goalsAfter":[],"content":"by"},{"tailPos":18615,"headPos":18391,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nmotive : (u v : V) → Walk G u v → Sort u_1\nHnil : {u : V} → motive u u nil\nHconcat : {u v w : V} → (p : Walk G u v) → (h : Adj G v w) → motive u v p → motive u w (concat p h)\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ concatRec Hnil Hconcat (concat p h) = Hconcat p h (concatRec Hnil Hconcat p)"],"goalsAfter":[],"content":"by\n  simp only [concatRec]\n  apply eq_of_heq\n  apply rec_heq_of_heq\n  trans concatRecAux @Hnil @Hconcat (cons h.symm p.reverse)\n  · congr\n    simp\n  · rw [concatRecAux, rec_heq_iff_heq]\n    congr <;> simp [heq_rec_iff_heq]"},{"tailPos":18810,"headPos":18803,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : Adj G v u\n⊢ concat p h ≠ nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nh : Adj G u u\n⊢ concat nil h ≠ nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G v u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ concat (cons h✝ p✝) h ≠ nil"],"content":"cases p"},{"tailPos":18814,"headPos":18811,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nh : Adj G u u\n⊢ concat nil h ≠ nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G v u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ concat (cons h✝ p✝) h ≠ nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nh : Adj G u u\n⊢ concat nil h ≠ nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G v u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ concat (cons h✝ p✝) h ≠ nil"],"content":"<;>"},{"tailPos":18828,"headPos":18815,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nh : Adj G u u\n⊢ concat nil h ≠ nil"],"goalsAfter":[],"content":"simp [concat]"},{"tailPos":18828,"headPos":18815,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G v u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ concat (cons h✝ p✝) h ≠ nil"],"goalsAfter":[],"content":"simp [concat]"},{"tailPos":18828,"headPos":18803,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : Adj G v u\n⊢ concat p h ≠ nil"],"goalsAfter":[],"content":"cases p <;> simp [concat]"},{"tailPos":18800,"headPos":18798,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : Adj G v u\n⊢ concat p h ≠ nil"],"goalsAfter":[],"content":"by"},{"tailPos":18828,"headPos":18798,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : Adj G v u\n⊢ concat p h ≠ nil"],"goalsAfter":[],"content":"by\n  cases p <;> simp [concat]"},{"tailPos":19127,"headPos":19119,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\np' : Walk G u✝ v'\nhe : concat nil h = concat p' h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = p'"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' h : Adj G v' w\nhe : concat nil h = concat nil h'\n⊢ ∃ hv, Walk.copy nil (_ : v' = v') hv = nil","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"cases p'"},{"tailPos":19134,"headPos":19132,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' h : Adj G v' w\nhe : concat nil h = concat nil h'\n⊢ ∃ hv, Walk.copy nil (_ : v' = v') hv = nil","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' h : Adj G v' w\nhe : concat nil h = concat nil h'\n⊢ ∃ hv, Walk.copy nil (_ : v' = v') hv = nil"],"content":"·"},{"tailPos":19155,"headPos":19135,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' h : Adj G v' w\nhe : concat nil h = concat nil h'\n⊢ ∃ hv, Walk.copy nil (_ : v' = v') hv = nil"],"goalsAfter":[],"content":"exact ⟨rfl, rfl⟩"},{"tailPos":19155,"headPos":19132,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' h : Adj G v' w\nhe : concat nil h = concat nil h'\n⊢ ∃ hv, Walk.copy nil (_ : v' = v') hv = nil","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"· exact ⟨rfl, rfl⟩"},{"tailPos":19162,"headPos":19160,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"·"},{"tailPos":19170,"headPos":19163,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case nil.cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ False"],"content":"exfalso"},{"tailPos":19230,"headPos":19177,"goalsBefore":["case nil.cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ False"],"goalsAfter":["case nil.cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : w = v✝ ∧ HEq nil (concat p✝ h')\n⊢ False"],"content":"simp only [concat_nil, concat_cons, cons.injEq] at he"},{"tailPos":19263,"headPos":19237,"goalsBefore":["case nil.cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : w = v✝ ∧ HEq nil (concat p✝ h')\n⊢ False"],"goalsAfter":["case nil.cons.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh h✝ : Adj G u✝ w\np✝ : Walk G w v'\nhe : HEq nil (concat p✝ h')\n⊢ False"],"content":"obtain ⟨rfl, he⟩ := he"},{"tailPos":19298,"headPos":19270,"goalsBefore":["case nil.cons.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh h✝ : Adj G u✝ w\np✝ : Walk G w v'\nhe : HEq nil (concat p✝ h')\n⊢ False"],"goalsAfter":["case nil.cons.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh h✝ : Adj G u✝ w\np✝ : Walk G w v'\nhe : nil = concat p✝ h'\n⊢ False"],"content":"simp only [heq_iff_eq] at he"},{"tailPos":19336,"headPos":19305,"goalsBefore":["case nil.cons.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh h✝ : Adj G u✝ w\np✝ : Walk G w v'\nhe : nil = concat p✝ h'\n⊢ False"],"goalsAfter":[],"content":"exact concat_ne_nil _ _ he.symm"},{"tailPos":19336,"headPos":19163,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":[],"content":"exfalso\n      simp only [concat_nil, concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      simp only [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he.symm"},{"tailPos":19336,"headPos":19160,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat nil h = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":[],"content":"· exfalso\n      simp only [concat_nil, concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      simp only [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he.symm"},{"tailPos":19336,"headPos":19119,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\np' : Walk G u✝ v'\nhe : concat nil h = concat p' h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = p'"],"goalsAfter":[],"content":"cases p'\n    · exact ⟨rfl, rfl⟩\n    · exfalso\n      simp only [concat_nil, concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      simp only [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he.symm"},{"tailPos":19336,"headPos":19106,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ : V\nh : Adj G u✝ w\np' : Walk G u✝ v'\nhe : concat nil h = concat p' h'\n⊢ ∃ hv, Walk.copy nil (_ : u✝ = u✝) hv = p'"],"goalsAfter":[],"content":"| nil =>\n    cases p'\n    · exact ⟨rfl, rfl⟩\n    · exfalso\n      simp only [concat_nil, concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      simp only [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he.symm"},{"tailPos":19375,"headPos":19364,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : concat (cons h✝ p✝) h = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : cons h✝ (concat p✝ h) = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"content":"concat_cons"},{"tailPos":19376,"headPos":19375,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : cons h✝ (concat p✝ h) = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : cons h✝ (concat p✝ h) = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"content":"]"},{"tailPos":19382,"headPos":19360,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : concat (cons h✝ p✝) h = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : cons h✝ (concat p✝ h) = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"content":"rw [concat_cons] at he"},{"tailPos":19395,"headPos":19387,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : cons h✝ (concat p✝ h) = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"goalsAfter":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : v' = v') hv = nil","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"cases p'"},{"tailPos":19402,"headPos":19400,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : v' = v') hv = nil","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : v' = v') hv = nil"],"content":"·"},{"tailPos":19410,"headPos":19403,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : v' = v') hv = nil"],"goalsAfter":["case cons.nil.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ False"],"content":"exfalso"},{"tailPos":19457,"headPos":19417,"goalsBefore":["case cons.nil.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ False"],"goalsAfter":["case cons.nil.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : v✝ = w ∧ HEq (concat p✝ h) nil\n⊢ False"],"content":"simp only [concat_nil, cons.injEq] at he"},{"tailPos":19490,"headPos":19464,"goalsBefore":["case cons.nil.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : v✝ = w ∧ HEq (concat p✝ h) nil\n⊢ False"],"goalsAfter":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : HEq (concat p✝ h) nil\n⊢ False"],"content":"obtain ⟨rfl, he⟩ := he"},{"tailPos":19511,"headPos":19501,"goalsBefore":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : HEq (concat p✝ h) nil\n⊢ False"],"goalsAfter":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : concat p✝ h = nil\n⊢ False"],"content":"heq_iff_eq"},{"tailPos":19512,"headPos":19511,"goalsBefore":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : concat p✝ h = nil\n⊢ False"],"goalsAfter":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : concat p✝ h = nil\n⊢ False"],"content":"]"},{"tailPos":19518,"headPos":19497,"goalsBefore":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : HEq (concat p✝ h) nil\n⊢ False"],"goalsAfter":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : concat p✝ h = nil\n⊢ False"],"content":"rw [heq_iff_eq] at he"},{"tailPos":19551,"headPos":19525,"goalsBefore":["case cons.nil.h.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' v✝ w✝ : V\np✝ : Walk G v✝ w✝\nh✝ h' : Adj G v' v✝\nih : ∀ {h : Adj G w✝ v✝} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ v✝\nhe : concat p✝ h = nil\n⊢ False"],"goalsAfter":[],"content":"exact concat_ne_nil _ _ he"},{"tailPos":19551,"headPos":19403,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : v' = v') hv = nil"],"goalsAfter":[],"content":"exfalso\n      simp only [concat_nil, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he"},{"tailPos":19551,"headPos":19400,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nv✝ w✝ : V\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G v' v✝\nhe : cons h✝ (concat p✝ h) = concat nil h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : v' = v') hv = nil","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"· exfalso\n      simp only [concat_nil, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he"},{"tailPos":19558,"headPos":19556,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"·"},{"tailPos":19575,"headPos":19563,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = cons h✝ (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"concat_cons,"},{"tailPos":19586,"headPos":19576,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = cons h✝ (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : v✝¹ = v✝ ∧ HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"cons.injEq"},{"tailPos":19587,"headPos":19586,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : v✝¹ = v✝ ∧ HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : v✝¹ = v✝ ∧ HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"]"},{"tailPos":19593,"headPos":19559,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : v✝¹ = v✝ ∧ HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"rw [concat_cons, cons.injEq] at he"},{"tailPos":19626,"headPos":19600,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : v✝¹ = v✝ ∧ HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"obtain ⟨rfl, he⟩ := he"},{"tailPos":19647,"headPos":19637,"goalsBefore":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat p✝¹ h = concat p✝ h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"heq_iff_eq"},{"tailPos":19648,"headPos":19647,"goalsBefore":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat p✝¹ h = concat p✝ h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat p✝¹ h = concat p✝ h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"]"},{"tailPos":19654,"headPos":19633,"goalsBefore":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : HEq (concat p✝¹ h) (concat p✝ h')\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat p✝¹ h = concat p✝ h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"content":"rw [heq_iff_eq] at he"},{"tailPos":19691,"headPos":19661,"goalsBefore":["case cons.cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : concat p✝¹ h = concat p✝ h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":["case cons.cons.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\nh' : Adj G w✝ w\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ w✝}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nhe : concat p✝ h = concat (Walk.copy p✝ (_ : v✝ = v✝) (_ : w✝ = w✝)) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝) (_ : u✝ = u✝) hv = cons h✝ (Walk.copy p✝ (_ : v✝ = v✝) (_ : w✝ = w✝))"],"content":"obtain ⟨rfl, rfl⟩ := ih he"},{"tailPos":19718,"headPos":19698,"goalsBefore":["case cons.cons.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : Adj G w✝ w\nh✝ : Adj G u✝ v✝\nh' : Adj G w✝ w\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ w✝}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nhe : concat p✝ h = concat (Walk.copy p✝ (_ : v✝ = v✝) (_ : w✝ = w✝)) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝) (_ : u✝ = u✝) hv = cons h✝ (Walk.copy p✝ (_ : v✝ = v✝) (_ : w✝ = w✝))"],"goalsAfter":[],"content":"exact ⟨rfl, rfl⟩"},{"tailPos":19718,"headPos":19559,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":[],"content":"rw [concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      obtain ⟨rfl, rfl⟩ := ih he\n      exact ⟨rfl, rfl⟩"},{"tailPos":19718,"headPos":19556,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝¹ v'}, concat p✝¹ h = concat p' h' → ∃ hv, Walk.copy p✝¹ (_ : v✝¹ = v✝¹) hv = p'\nh : Adj G w✝ w\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ v'\nhe : cons h✝¹ (concat p✝¹ h) = concat (cons h✝ p✝) h'\n⊢ ∃ hv, Walk.copy (cons h✝¹ p✝¹) (_ : u✝ = u✝) hv = cons h✝ p✝"],"goalsAfter":[],"content":"· rw [concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      obtain ⟨rfl, rfl⟩ := ih he\n      exact ⟨rfl, rfl⟩"},{"tailPos":19718,"headPos":19360,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : concat (cons h✝ p✝) h = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"goalsAfter":[],"content":"rw [concat_cons] at he\n    cases p'\n    · exfalso\n      simp only [concat_nil, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he\n    · rw [concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      obtain ⟨rfl, rfl⟩ := ih he\n      exact ⟨rfl, rfl⟩"},{"tailPos":19718,"headPos":19339,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\nh' : Adj G v' w\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ {h : Adj G w✝ w} {p' : Walk G v✝ v'}, concat p✝ h = concat p' h' → ∃ hv, Walk.copy p✝ (_ : v✝ = v✝) hv = p'\nh : Adj G w✝ w\np' : Walk G u✝ v'\nhe : concat (cons h✝ p✝) h = concat p' h'\n⊢ ∃ hv, Walk.copy (cons h✝ p✝) (_ : u✝ = u✝) hv = p'"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    rw [concat_cons] at he\n    cases p'\n    · exfalso\n      simp only [concat_nil, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he\n    · rw [concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      obtain ⟨rfl, rfl⟩ := ih he\n      exact ⟨rfl, rfl⟩"},{"tailPos":19718,"headPos":19087,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\np : Walk G u v\nh : Adj G v w\np' : Walk G u v'\nh' : Adj G v' w\nhe : concat p h = concat p' h'\n⊢ ∃ hv, Walk.copy p (_ : u = u) hv = p'"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\np : Walk G u v\nh : Adj G v w\np' : Walk G u v'\nh' : Adj G v' w\nhe : concat p h = concat p' h'\n⊢ ∃ hv, Walk.copy p (_ : u = u) hv = p'"],"content":"induction p with\n  | nil =>\n    cases p'\n    · exact ⟨rfl, rfl⟩\n    · exfalso\n      simp only [concat_nil, concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      simp only [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he.symm\n  | cons _ _ ih =>\n    rw [concat_cons] at he\n    cases p'\n    · exfalso\n      simp only [concat_nil, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he\n    · rw [concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      obtain ⟨rfl, rfl⟩ := ih he\n      exact ⟨rfl, rfl⟩"},{"tailPos":19084,"headPos":19082,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\np : Walk G u v\nh : Adj G v w\np' : Walk G u v'\nh' : Adj G v' w\nhe : concat p h = concat p' h'\n⊢ ∃ hv, Walk.copy p (_ : u = u) hv = p'"],"goalsAfter":[],"content":"by"},{"tailPos":19718,"headPos":19082,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v' w : V\np : Walk G u v\nh : Adj G v w\np' : Walk G u v'\nh' : Adj G v' w\nhe : concat p h = concat p' h'\n⊢ ∃ hv, Walk.copy p (_ : u = u) hv = p'"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil =>\n    cases p'\n    · exact ⟨rfl, rfl⟩\n    · exfalso\n      simp only [concat_nil, concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      simp only [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he.symm\n  | cons _ _ ih =>\n    rw [concat_cons] at he\n    cases p'\n    · exfalso\n      simp only [concat_nil, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      exact concat_ne_nil _ _ he\n    · rw [concat_cons, cons.injEq] at he\n      obtain ⟨rfl, he⟩ := he\n      rw [heq_iff_eq] at he\n      obtain ⟨rfl, rfl⟩ := ih he\n      exact ⟨rfl, rfl⟩"},{"tailPos":21001,"headPos":20990,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ support (concat p h) = List.concat (support p) w"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ support (concat nil h) = List.concat (support nil) w","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), support (concat p✝ h) = List.concat (support p✝) w\nh : Adj G w✝ w\n⊢ support (concat (cons h✝ p✝) h) = List.concat (support (cons h✝ p✝)) w"],"content":"induction p"},{"tailPos":21005,"headPos":21002,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ support (concat nil h) = List.concat (support nil) w","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), support (concat p✝ h) = List.concat (support p✝) w\nh : Adj G w✝ w\n⊢ support (concat (cons h✝ p✝) h) = List.concat (support (cons h✝ p✝)) w"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ support (concat nil h) = List.concat (support nil) w","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), support (concat p✝ h) = List.concat (support p✝) w\nh : Adj G w✝ w\n⊢ support (concat (cons h✝ p✝) h) = List.concat (support (cons h✝ p✝)) w"],"content":"<;>"},{"tailPos":21026,"headPos":21006,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ support (concat nil h) = List.concat (support nil) w"],"goalsAfter":[],"content":"simp [*, concat_nil]"},{"tailPos":21026,"headPos":21006,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), support (concat p✝ h) = List.concat (support p✝) w\nh : Adj G w✝ w\n⊢ support (concat (cons h✝ p✝) h) = List.concat (support (cons h✝ p✝)) w"],"goalsAfter":[],"content":"simp [*, concat_nil]"},{"tailPos":21026,"headPos":20990,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ support (concat p h) = List.concat (support p) w"],"goalsAfter":[],"content":"induction p <;> simp [*, concat_nil]"},{"tailPos":20987,"headPos":20985,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ support (concat p h) = List.concat (support p) w"],"goalsAfter":[],"content":"by"},{"tailPos":21026,"headPos":20985,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ support (concat p h) = List.concat (support p) w"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*, concat_nil]"},{"tailPos":21245,"headPos":21235,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ support (Walk.copy p hu hv) = support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ support (Walk.copy p (_ : u' = u') (_ : v' = v')) = support p"],"content":"subst_vars"},{"tailPos":21251,"headPos":21248,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ support (Walk.copy p (_ : u' = u') (_ : v' = v')) = support p"],"goalsAfter":[],"content":"rfl"},{"tailPos":21251,"headPos":21235,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ support (Walk.copy p hu hv) = support p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":21232,"headPos":21230,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ support (Walk.copy p hu hv) = support p"],"goalsAfter":[],"content":"by"},{"tailPos":21251,"headPos":21230,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ support (Walk.copy p hu hv) = support p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":21469,"headPos":21458,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ support (append p p') = support p ++ List.tail (support p')"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ support (append nil p') = support nil ++ List.tail (support p')","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝ p') = support p✝ ++ List.tail (support p')\np' : Walk G w✝ w\n⊢ support (append (cons h✝ p✝) p') = support (cons h✝ p✝) ++ List.tail (support p')"],"content":"induction p"},{"tailPos":21473,"headPos":21470,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ support (append nil p') = support nil ++ List.tail (support p')","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝ p') = support p✝ ++ List.tail (support p')\np' : Walk G w✝ w\n⊢ support (append (cons h✝ p✝) p') = support (cons h✝ p✝) ++ List.tail (support p')"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ support (append nil p') = support nil ++ List.tail (support p')","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝ p') = support p✝ ++ List.tail (support p')\np' : Walk G w✝ w\n⊢ support (append (cons h✝ p✝) p') = support (cons h✝ p✝) ++ List.tail (support p')"],"content":"<;>"},{"tailPos":21482,"headPos":21474,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ support (append nil p') = support nil ++ List.tail (support p')"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\n⊢ support (append nil nil) = support nil ++ List.tail (support nil)","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append nil (cons h✝ p✝)) = support nil ++ List.tail (support (cons h✝ p✝))"],"content":"cases p'"},{"tailPos":21482,"headPos":21474,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝ p') = support p✝ ++ List.tail (support p')\np' : Walk G w✝ w\n⊢ support (append (cons h✝ p✝) p') = support (cons h✝ p✝) ++ List.tail (support p')"],"goalsAfter":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\np_ih✝ : ∀ (p' : Walk G w w), support (append p✝ p') = support p✝ ++ List.tail (support p')\n⊢ support (append (cons h✝ p✝) nil) = support (cons h✝ p✝) ++ List.tail (support nil)","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝¹ p') = support p✝¹ ++ List.tail (support p')\nv✝ : V\nh✝ : Adj G w✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append (cons h✝¹ p✝¹) (cons h✝ p✝)) = support (cons h✝¹ p✝¹) ++ List.tail (support (cons h✝ p✝))"],"content":"cases p'"},{"tailPos":21482,"headPos":21458,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ support (append p p') = support p ++ List.tail (support p')"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\n⊢ support (append nil nil) = support nil ++ List.tail (support nil)","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append nil (cons h✝ p✝)) = support nil ++ List.tail (support (cons h✝ p✝))","case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\np_ih✝ : ∀ (p' : Walk G w w), support (append p✝ p') = support p✝ ++ List.tail (support p')\n⊢ support (append (cons h✝ p✝) nil) = support (cons h✝ p✝) ++ List.tail (support nil)","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝¹ p') = support p✝¹ ++ List.tail (support p')\nv✝ : V\nh✝ : Adj G w✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append (cons h✝¹ p✝¹) (cons h✝ p✝)) = support (cons h✝¹ p✝¹) ++ List.tail (support (cons h✝ p✝))"],"content":"induction p <;> cases p'"},{"tailPos":21486,"headPos":21483,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\n⊢ support (append nil nil) = support nil ++ List.tail (support nil)","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append nil (cons h✝ p✝)) = support nil ++ List.tail (support (cons h✝ p✝))","case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\np_ih✝ : ∀ (p' : Walk G w w), support (append p✝ p') = support p✝ ++ List.tail (support p')\n⊢ support (append (cons h✝ p✝) nil) = support (cons h✝ p✝) ++ List.tail (support nil)","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝¹ p') = support p✝¹ ++ List.tail (support p')\nv✝ : V\nh✝ : Adj G w✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append (cons h✝¹ p✝¹) (cons h✝ p✝)) = support (cons h✝¹ p✝¹) ++ List.tail (support (cons h✝ p✝))"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\n⊢ support (append nil nil) = support nil ++ List.tail (support nil)","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append nil (cons h✝ p✝)) = support nil ++ List.tail (support (cons h✝ p✝))","case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\np_ih✝ : ∀ (p' : Walk G w w), support (append p✝ p') = support p✝ ++ List.tail (support p')\n⊢ support (append (cons h✝ p✝) nil) = support (cons h✝ p✝) ++ List.tail (support nil)","case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝¹ p') = support p✝¹ ++ List.tail (support p')\nv✝ : V\nh✝ : Adj G w✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append (cons h✝¹ p✝¹) (cons h✝ p✝)) = support (cons h✝¹ p✝¹) ++ List.tail (support (cons h✝ p✝))"],"content":"<;>"},{"tailPos":21495,"headPos":21487,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\n⊢ support (append nil nil) = support nil ++ List.tail (support nil)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":21495,"headPos":21487,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append nil (cons h✝ p✝)) = support nil ++ List.tail (support (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":21495,"headPos":21487,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w\np_ih✝ : ∀ (p' : Walk G w w), support (append p✝ p') = support p✝ ++ List.tail (support p')\n⊢ support (append (cons h✝ p✝) nil) = support (cons h✝ p✝) ++ List.tail (support nil)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":21495,"headPos":21487,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), support (append p✝¹ p') = support p✝¹ ++ List.tail (support p')\nv✝ : V\nh✝ : Adj G w✝ v✝\np✝ : Walk G v✝ w\n⊢ support (append (cons h✝¹ p✝¹) (cons h✝ p✝)) = support (cons h✝¹ p✝¹) ++ List.tail (support (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":21495,"headPos":21458,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ support (append p p') = support p ++ List.tail (support p')"],"goalsAfter":[],"content":"induction p <;> cases p' <;> simp [*]"},{"tailPos":21455,"headPos":21453,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ support (append p p') = support p ++ List.tail (support p')"],"goalsAfter":[],"content":"by"},{"tailPos":21495,"headPos":21453,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ support (append p p') = support p ++ List.tail (support p')"],"goalsAfter":[],"content":"by\n  induction p <;> cases p' <;> simp [*]"},{"tailPos":21687,"headPos":21676,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support (reverse p) = List.reverse (support p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ support (reverse nil) = List.reverse (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (reverse p✝) = List.reverse (support p✝)\n⊢ support (reverse (cons h✝ p✝)) = List.reverse (support (cons h✝ p✝))"],"content":"induction p"},{"tailPos":21691,"headPos":21688,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ support (reverse nil) = List.reverse (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (reverse p✝) = List.reverse (support p✝)\n⊢ support (reverse (cons h✝ p✝)) = List.reverse (support (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ support (reverse nil) = List.reverse (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (reverse p✝) = List.reverse (support p✝)\n⊢ support (reverse (cons h✝ p✝)) = List.reverse (support (cons h✝ p✝))"],"content":"<;>"},{"tailPos":21716,"headPos":21692,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ support (reverse nil) = List.reverse (support nil)"],"goalsAfter":[],"content":"simp [support_append, *]"},{"tailPos":21716,"headPos":21692,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (reverse p✝) = List.reverse (support p✝)\n⊢ support (reverse (cons h✝ p✝)) = List.reverse (support (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [support_append, *]"},{"tailPos":21716,"headPos":21676,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support (reverse p) = List.reverse (support p)"],"goalsAfter":[],"content":"induction p <;> simp [support_append, *]"},{"tailPos":21673,"headPos":21671,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support (reverse p) = List.reverse (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":21716,"headPos":21671,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support (reverse p) = List.reverse (support p)"],"goalsAfter":[],"content":"by\n  induction p <;> simp [support_append, *]"},{"tailPos":21874,"headPos":21867,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p ≠ []"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil ≠ []","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) ≠ []"],"content":"cases p"},{"tailPos":21878,"headPos":21875,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil ≠ []","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) ≠ []"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil ≠ []","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) ≠ []"],"content":"<;>"},{"tailPos":21883,"headPos":21879,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil ≠ []"],"goalsAfter":[],"content":"simp only [support_nil, ne_eq, not_false_eq_true]"},{"tailPos":21883,"headPos":21879,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) ≠ []"],"goalsAfter":[],"content":"simp only [support_nil, ne_eq, not_false_eq_true]"},{"tailPos":21883,"headPos":21867,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p ≠ []"],"goalsAfter":[],"content":"cases p <;> simp"},{"tailPos":21866,"headPos":21864,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p ≠ []"],"goalsAfter":[],"content":"by"},{"tailPos":21883,"headPos":21864,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p ≠ []"],"goalsAfter":[],"content":"by cases p <;> simp"},{"tailPos":22128,"headPos":22113,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support (append p p')) = List.tail (support p) ++ List.tail (support p')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support p ++ List.tail (support p')) = List.tail (support p) ++ List.tail (support p')"],"content":"support_append,"},{"tailPos":22178,"headPos":22129,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support p ++ List.tail (support p')) = List.tail (support p) ++ List.tail (support p')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support p) ++ List.tail (support p') = List.tail (support p) ++ List.tail (support p')"],"content":"List.tail_append_of_ne_nil _ _ (support_ne_nil _)"},{"tailPos":22179,"headPos":22178,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support p) ++ List.tail (support p') = List.tail (support p) ++ List.tail (support p')"],"goalsAfter":[],"content":"]"},{"tailPos":22179,"headPos":22109,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support (append p p')) = List.tail (support p) ++ List.tail (support p')"],"goalsAfter":[],"content":"rw [support_append, List.tail_append_of_ne_nil _ _ (support_ne_nil _)]"},{"tailPos":22106,"headPos":22104,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support (append p p')) = List.tail (support p) ++ List.tail (support p')"],"goalsAfter":[],"content":"by"},{"tailPos":22179,"headPos":22104,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ List.tail (support (append p p')) = List.tail (support p) ++ List.tail (support p')"],"goalsAfter":[],"content":"by\n  rw [support_append, List.tail_append_of_ne_nil _ _ (support_ne_nil _)]"},{"tailPos":22363,"headPos":22356,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p = u :: List.tail (support p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil = u :: List.tail (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) = u :: List.tail (support (cons h✝ p✝))"],"content":"cases p"},{"tailPos":22367,"headPos":22364,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil = u :: List.tail (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) = u :: List.tail (support (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil = u :: List.tail (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) = u :: List.tail (support (cons h✝ p✝))"],"content":"<;>"},{"tailPos":22372,"headPos":22368,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ support nil = u :: List.tail (support nil)"],"goalsAfter":[],"content":"simp only [support_nil, List.tail_cons]"},{"tailPos":22372,"headPos":22368,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ support (cons h✝ p✝) = u :: List.tail (support (cons h✝ p✝))"],"goalsAfter":[],"content":"simp only [support_nil, List.tail_cons]"},{"tailPos":22372,"headPos":22356,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p = u :: List.tail (support p)"],"goalsAfter":[],"content":"cases p <;> simp"},{"tailPos":22353,"headPos":22351,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p = u :: List.tail (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":22372,"headPos":22351,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ support p = u :: List.tail (support p)"],"goalsAfter":[],"content":"by\n  cases p <;> simp"},{"tailPos":22540,"headPos":22533,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ support p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ u ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ u ∈ support (cons h✝ p✝)"],"content":"cases p"},{"tailPos":22544,"headPos":22541,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ u ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ u ∈ support (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ u ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ u ∈ support (cons h✝ p✝)"],"content":"<;>"},{"tailPos":22549,"headPos":22545,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ u ∈ support nil"],"goalsAfter":[],"content":"simp only [support_nil, List.mem_singleton]"},{"tailPos":22549,"headPos":22545,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ u ∈ support (cons h✝ p✝)"],"goalsAfter":[],"content":"simp only [support_nil, List.mem_singleton]"},{"tailPos":22549,"headPos":22533,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ support p"],"goalsAfter":[],"content":"cases p <;> simp"},{"tailPos":22532,"headPos":22530,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":22549,"headPos":22530,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by cases p <;> simp"},{"tailPos":22723,"headPos":22712,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ v ∈ support p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : w✝ ∈ support p✝\n⊢ w✝ ∈ support (cons h✝ p✝)"],"content":"induction p"},{"tailPos":22727,"headPos":22724,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : w✝ ∈ support p✝\n⊢ w✝ ∈ support (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : w✝ ∈ support p✝\n⊢ w✝ ∈ support (cons h✝ p✝)"],"content":"<;>"},{"tailPos":22736,"headPos":22728,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ ∈ support nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":22736,"headPos":22728,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : w✝ ∈ support p✝\n⊢ w✝ ∈ support (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":22736,"headPos":22712,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ v ∈ support p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":22711,"headPos":22709,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ v ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":22736,"headPos":22709,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ v ∈ support p"],"goalsAfter":[],"content":"by induction p <;> simp [*]"},{"tailPos":22925,"headPos":22921,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ {w | w ∈ support p}"],"goalsAfter":[],"content":"simp only [Set.mem_setOf_eq, start_mem_support]"},{"tailPos":22920,"headPos":22918,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ {w | w ∈ support p}"],"goalsAfter":[],"content":"by"},{"tailPos":22925,"headPos":22918,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u ∈ {w | w ∈ support p}"],"goalsAfter":[],"content":"by simp"},{"tailPos":23127,"headPos":23120,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ w = u ∨ w ∈ List.tail (support p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu w : V\n⊢ w ∈ support nil ↔ w = u ∨ w ∈ List.tail (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ w ∈ support (cons h✝ p✝) ↔ w = u ∨ w ∈ List.tail (support (cons h✝ p✝))"],"content":"cases p"},{"tailPos":23131,"headPos":23128,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu w : V\n⊢ w ∈ support nil ↔ w = u ∨ w ∈ List.tail (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ w ∈ support (cons h✝ p✝) ↔ w = u ∨ w ∈ List.tail (support (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu w : V\n⊢ w ∈ support nil ↔ w = u ∨ w ∈ List.tail (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ w ∈ support (cons h✝ p✝) ↔ w = u ∨ w ∈ List.tail (support (cons h✝ p✝))"],"content":"<;>"},{"tailPos":23136,"headPos":23132,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu w : V\n⊢ w ∈ support nil ↔ w = u ∨ w ∈ List.tail (support nil)"],"goalsAfter":[],"content":"simp only [support_nil, List.mem_singleton, List.tail_cons, List.find?, List.not_mem_nil, or_false]"},{"tailPos":23136,"headPos":23132,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ w ∈ support (cons h✝ p✝) ↔ w = u ∨ w ∈ List.tail (support (cons h✝ p✝))"],"goalsAfter":[],"content":"simp only [support_nil, List.mem_singleton, List.tail_cons, List.find?, List.not_mem_nil, or_false]"},{"tailPos":23136,"headPos":23120,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ w = u ∨ w ∈ List.tail (support p)"],"goalsAfter":[],"content":"cases p <;> simp"},{"tailPos":23119,"headPos":23117,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ w = u ∨ w ∈ List.tail (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":23136,"headPos":23117,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ w = u ∨ w ∈ List.tail (support p)"],"goalsAfter":[],"content":"by cases p <;> simp"},{"tailPos":23305,"headPos":23301,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u ∈ support nil ↔ u = v"],"goalsAfter":[],"content":"simp only [support_nil, List.mem_singleton]"},{"tailPos":23300,"headPos":23298,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u ∈ support nil ↔ u = v"],"goalsAfter":[],"content":"by"},{"tailPos":23305,"headPos":23298,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ u ∈ support nil ↔ u = v"],"goalsAfter":[],"content":"by simp"},{"tailPos":23604,"headPos":23584,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support (append p p')) ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support p) ++ List.tail (support p') ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"content":"tail_support_append,"},{"tailPos":23620,"headPos":23605,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support p) ++ List.tail (support p') ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"content":"List.mem_append"},{"tailPos":23621,"headPos":23620,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"]"},{"tailPos":23621,"headPos":23580,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support (append p p')) ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"rw [tail_support_append, List.mem_append]"},{"tailPos":23577,"headPos":23575,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support (append p p')) ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"by"},{"tailPos":23621,"headPos":23575,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ List.tail (support (append p p')) ↔ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"by\n  rw [tail_support_append, List.mem_append]"},{"tailPos":23889,"headPos":23836,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ v ∈ List.tail (support p)"],"goalsAfter":["case intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\nw✝² : V\nw✝¹ : Adj G u w✝²\nw✝ : Walk G w✝² v\n⊢ v ∈ List.tail (support (cons w✝¹ w✝))"],"content":"obtain ⟨_, _, _, rfl⟩ := exists_eq_cons_of_ne h p"},{"tailPos":23896,"headPos":23892,"goalsBefore":["case intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\nw✝² : V\nw✝¹ : Adj G u w✝²\nw✝ : Walk G w✝² v\n⊢ v ∈ List.tail (support (cons w✝¹ w✝))"],"goalsAfter":[],"content":"simp only [support_cons, List.tail_cons, end_mem_support]"},{"tailPos":23896,"headPos":23836,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ v ∈ List.tail (support p)"],"goalsAfter":[],"content":"obtain ⟨_, _, _, rfl⟩ := exists_eq_cons_of_ne h p\n  simp"},{"tailPos":23833,"headPos":23831,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ v ∈ List.tail (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":23896,"headPos":23831,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ v ∈ List.tail (support p)"],"goalsAfter":[],"content":"by\n  obtain ⟨_, _, _, rfl⟩ := exists_eq_cons_of_ne h p\n  simp"},{"tailPos":24249,"headPos":24193,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ support (append p p') ↔ t ∈ support p ∨ t ∈ support p'"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"simp only [mem_support_iff, mem_tail_support_append_iff]"},{"tailPos":24282,"headPos":24252,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"obtain rfl | h := eq_or_ne t v"},{"tailPos":24286,"headPos":24283,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"<;>"},{"tailPos":24318,"headPos":24287,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"obtain rfl | h' := eq_or_ne t u"},{"tailPos":24318,"headPos":24287,"goalsBefore":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"obtain rfl | h' := eq_or_ne t u"},{"tailPos":24318,"headPos":24252,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"obtain rfl | h := eq_or_ne t v <;> obtain rfl | h' := eq_or_ne t u"},{"tailPos":24322,"headPos":24319,"goalsBefore":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"<;>"},{"tailPos":24407,"headPos":24392,"goalsBefore":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"have := h'.symm"},{"tailPos":24407,"headPos":24388,"goalsBefore":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"try have := h'.symm"},{"tailPos":24408,"headPos":24387,"goalsBefore":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"(try have := h'.symm)"},{"tailPos":24407,"headPos":24392,"goalsBefore":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"have := h'.symm"},{"tailPos":24407,"headPos":24388,"goalsBefore":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"try have := h'.symm"},{"tailPos":24408,"headPos":24387,"goalsBefore":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"content":"(try have := h'.symm)"},{"tailPos":24407,"headPos":24392,"goalsBefore":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"have := h'.symm"},{"tailPos":24407,"headPos":24388,"goalsBefore":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"try have := h'.symm"},{"tailPos":24408,"headPos":24387,"goalsBefore":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"(try have := h'.symm)"},{"tailPos":24407,"headPos":24392,"goalsBefore":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"have := h'.symm"},{"tailPos":24407,"headPos":24388,"goalsBefore":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"try have := h'.symm"},{"tailPos":24408,"headPos":24387,"goalsBefore":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"(try have := h'.symm)"},{"tailPos":24408,"headPos":24252,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"obtain rfl | h := eq_or_ne t v <;> obtain rfl | h' := eq_or_ne t u <;>\n    -- this `have` triggers the unusedHavesSuffices linter:\n    (try have := h'.symm)"},{"tailPos":24412,"headPos":24409,"goalsBefore":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')","case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')","case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"content":"<;>"},{"tailPos":24421,"headPos":24413,"goalsBefore":["case inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt w : V\np' : Walk G t w\np : Walk G t t\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":24421,"headPos":24413,"goalsBefore":["case inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u w : V\np : Walk G u t\np' : Walk G t w\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = t ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":24421,"headPos":24413,"goalsBefore":["case inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt v w : V\np' : Walk G v w\nh : t ≠ v\np : Walk G t v\n⊢ t = t ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = t ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":24421,"headPos":24413,"goalsBefore":["case inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\nh : t ≠ v\nh' : t ≠ u\nthis : u ≠ t\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":24421,"headPos":24252,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t = u ∨ t ∈ List.tail (support p) ∨ t ∈ List.tail (support p') ↔\n    (t = u ∨ t ∈ List.tail (support p)) ∨ t = v ∨ t ∈ List.tail (support p')"],"goalsAfter":[],"content":"obtain rfl | h := eq_or_ne t v <;> obtain rfl | h' := eq_or_ne t u <;>\n    -- this `have` triggers the unusedHavesSuffices linter:\n    (try have := h'.symm) <;> simp [*]"},{"tailPos":24421,"headPos":24193,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ support (append p p') ↔ t ∈ support p ∨ t ∈ support p'"],"goalsAfter":[],"content":"simp only [mem_support_iff, mem_tail_support_append_iff]\n  obtain rfl | h := eq_or_ne t v <;> obtain rfl | h' := eq_or_ne t u <;>\n    -- this `have` triggers the unusedHavesSuffices linter:\n    (try have := h'.symm) <;> simp [*]"},{"tailPos":24190,"headPos":24188,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ support (append p p') ↔ t ∈ support p ∨ t ∈ support p'"],"goalsAfter":[],"content":"by"},{"tailPos":24421,"headPos":24188,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G u v\np' : Walk G v w\n⊢ t ∈ support (append p p') ↔ t ∈ support p ∨ t ∈ support p'"],"goalsAfter":[],"content":"by\n  simp only [mem_support_iff, mem_tail_support_append_iff]\n  obtain rfl | h := eq_or_ne t v <;> obtain rfl | h' := eq_or_ne t u <;>\n    -- this `have` triggers the unusedHavesSuffices linter:\n    (try have := h'.symm) <;> simp [*]"},{"tailPos":24738,"headPos":24682,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support p ⊆ support (append p q)"],"goalsAfter":[],"content":"simp only [Walk.support_append, List.subset_append_left]"},{"tailPos":24679,"headPos":24677,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support p ⊆ support (append p q)"],"goalsAfter":[],"content":"by"},{"tailPos":24738,"headPos":24677,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support p ⊆ support (append p q)"],"goalsAfter":[],"content":"by\n  simp only [Walk.support_append, List.subset_append_left]"},{"tailPos":25015,"headPos":25008,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support q ⊆ support (append p q)"],"goalsAfter":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : V\n⊢ h ∈ support q → h ∈ support (append p q)"],"content":"intro h"},{"tailPos":25114,"headPos":25018,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : V\n⊢ h ∈ support q → h ∈ support (append p q)"],"goalsAfter":[],"content":"simp (config := { contextual := true }) only [mem_support_append_iff, or_true_iff, imp_true_iff]"},{"tailPos":25114,"headPos":25008,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support q ⊆ support (append p q)"],"goalsAfter":[],"content":"intro h\n  simp (config := { contextual := true }) only [mem_support_append_iff, or_true_iff, imp_true_iff]"},{"tailPos":25005,"headPos":25003,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support q ⊆ support (append p q)"],"goalsAfter":[],"content":"by"},{"tailPos":25114,"headPos":25003,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ support q ⊆ support (append p q)"],"goalsAfter":[],"content":"by\n  intro h\n  simp (config := { contextual := true }) only [mem_support_append_iff, or_true_iff, imp_true_iff]"},{"tailPos":25326,"headPos":25319,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ ↑(support p) = {u} + ↑(List.tail (support p))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ ↑(support nil) = {u} + ↑(List.tail (support nil))","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ ↑(support (cons h✝ p✝)) = {u} + ↑(List.tail (support (cons h✝ p✝)))"],"content":"cases p"},{"tailPos":25330,"headPos":25327,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ ↑(support nil) = {u} + ↑(List.tail (support nil))","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ ↑(support (cons h✝ p✝)) = {u} + ↑(List.tail (support (cons h✝ p✝)))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ ↑(support nil) = {u} + ↑(List.tail (support nil))","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ ↑(support (cons h✝ p✝)) = {u} + ↑(List.tail (support (cons h✝ p✝)))"],"content":"<;>"},{"tailPos":25334,"headPos":25331,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ ↑(support nil) = {u} + ↑(List.tail (support nil))"],"goalsAfter":[],"content":"rfl"},{"tailPos":25334,"headPos":25331,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ v\n⊢ ↑(support (cons h✝ p✝)) = {u} + ↑(List.tail (support (cons h✝ p✝)))"],"goalsAfter":[],"content":"rfl"},{"tailPos":25334,"headPos":25319,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ ↑(support p) = {u} + ↑(List.tail (support p))"],"goalsAfter":[],"content":"cases p <;> rfl"},{"tailPos":25318,"headPos":25316,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ ↑(support p) = {u} + ↑(List.tail (support p))"],"goalsAfter":[],"content":"by"},{"tailPos":25334,"headPos":25316,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ ↑(support p) = {u} + ↑(List.tail (support p))"],"goalsAfter":[],"content":"by cases p <;> rfl"},{"tailPos":25587,"headPos":25572,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p ++ List.tail (support p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"content":"support_append,"},{"tailPos":25609,"headPos":25588,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p ++ List.tail (support p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"content":"← Multiset.coe_add,"},{"tailPos":25621,"headPos":25610,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"content":"coe_support"},{"tailPos":25622,"headPos":25621,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":[],"content":"]"},{"tailPos":25622,"headPos":25568,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":[],"content":"rw [support_append, ← Multiset.coe_add, coe_support]"},{"tailPos":25565,"headPos":25563,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":[],"content":"by"},{"tailPos":25622,"headPos":25563,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = {u} + ↑(List.tail (support p)) + ↑(List.tail (support p'))"],"goalsAfter":[],"content":"by\n  rw [support_append, ← Multiset.coe_add, coe_support]"},{"tailPos":25896,"headPos":25881,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p ++ List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"content":"support_append,"},{"tailPos":25917,"headPos":25897,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p ++ List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"content":"← Multiset.coe_add"},{"tailPos":25918,"headPos":25917,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"content":"]"},{"tailPos":25918,"headPos":25877,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"content":"rw [support_append, ← Multiset.coe_add]"},{"tailPos":25944,"headPos":25921,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support p) + ↑(List.tail (support p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + ({v} + ↑(List.tail (support p'))) - {v}"],"content":"simp only [coe_support]"},{"tailPos":25978,"headPos":25951,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + ({v} + ↑(List.tail (support p'))) - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + (↑(List.tail (support p')) + {v}) - {v}"],"content":"add_comm ({v} : Multiset V)"},{"tailPos":25979,"headPos":25978,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + (↑(List.tail (support p')) + {v}) - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + (↑(List.tail (support p')) + {v}) - {v}"],"content":"]"},{"tailPos":25979,"headPos":25947,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + ({v} + ↑(List.tail (support p'))) - {v}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + (↑(List.tail (support p')) + {v}) - {v}"],"content":"rw [add_comm ({v} : Multiset V)]"},{"tailPos":26030,"headPos":25982,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ {u} + ↑(List.tail (support p)) + ↑(List.tail (support p')) =\n    {u} + ↑(List.tail (support p)) + (↑(List.tail (support p')) + {v}) - {v}"],"goalsAfter":[],"content":"simp only [← add_assoc, add_tsub_cancel_right]"},{"tailPos":26030,"headPos":25877,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":[],"content":"rw [support_append, ← Multiset.coe_add]\n  simp only [coe_support]\n  rw [add_comm ({v} : Multiset V)]\n  simp only [← add_assoc, add_tsub_cancel_right]"},{"tailPos":25874,"headPos":25872,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":[],"content":"by"},{"tailPos":26030,"headPos":25872,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ ↑(support (append p p')) = ↑(support p) + ↑(support p') - {v}"],"goalsAfter":[],"content":"by\n  rw [support_append, ← Multiset.coe_add]\n  simp only [coe_support]\n  rw [add_comm ({v} : Multiset V)]\n  simp only [← add_assoc, add_tsub_cancel_right]"},{"tailPos":26834,"headPos":26814,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ : V\nd : Dart G\nh : d.snd = u✝\n⊢ List.Chain (DartAdj G) d (darts nil)"],"goalsAfter":[],"content":"exact List.Chain.nil"},{"tailPos":26834,"headPos":26805,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ : V\nd : Dart G\nh : d.snd = u✝\n⊢ List.Chain (DartAdj G) d (darts nil)"],"goalsAfter":[],"content":"| nil => exact List.Chain.nil"},{"tailPos":26957,"headPos":26950,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ DartAdj G d { toProd := (u✝, v✝), is_adj := h' }"],"goalsAfter":[],"content":"exact h"},{"tailPos":26949,"headPos":26947,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ DartAdj G d { toProd := (u✝, v✝), is_adj := h' }"],"goalsAfter":[],"content":"by"},{"tailPos":26957,"headPos":26947,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ DartAdj G d { toProd := (u✝, v✝), is_adj := h' }"],"goalsAfter":[],"content":"by exact h"},{"tailPos":26970,"headPos":26967,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ { toProd := (u✝, v✝), is_adj := h' }.toProd.snd = v✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":26966,"headPos":26964,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ { toProd := (u✝, v✝), is_adj := h' }.toProd.snd = v✝"],"goalsAfter":[],"content":"by"},{"tailPos":26970,"headPos":26964,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ { toProd := (u✝, v✝), is_adj := h' }.toProd.snd = v✝"],"goalsAfter":[],"content":"by rfl"},{"tailPos":26972,"headPos":26924,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ List.Chain (DartAdj G) d (darts (cons h' p))"],"goalsAfter":[],"content":"exact List.Chain.cons (by exact h) (ih (by rfl))"},{"tailPos":26972,"headPos":26906,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np : Walk G v✝ w✝\nih : ∀ {d : Dart G}, d.snd = v✝ → List.Chain (DartAdj G) d (darts p)\nd : Dart G\nh : d.snd = u✝\n⊢ List.Chain (DartAdj G) d (darts (cons h' p))"],"goalsAfter":[],"content":"| cons h' p ih => exact List.Chain.cons (by exact h) (ih (by rfl))"},{"tailPos":26972,"headPos":26771,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nd : Dart G\nv w : V\nh : d.snd = v\np : Walk G v w\n⊢ List.Chain (DartAdj G) d (darts p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nd : Dart G\nv w : V\nh : d.snd = v\np : Walk G v w\n⊢ List.Chain (DartAdj G) d (darts p)"],"content":"induction p generalizing d with\n  | nil => exact List.Chain.nil\n  -- porting note: needed to defer `h` and `rfl` to help elaboration\n  | cons h' p ih => exact List.Chain.cons (by exact h) (ih (by rfl))"},{"tailPos":26768,"headPos":26766,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nd : Dart G\nv w : V\nh : d.snd = v\np : Walk G v w\n⊢ List.Chain (DartAdj G) d (darts p)"],"goalsAfter":[],"content":"by"},{"tailPos":26972,"headPos":26766,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nd : Dart G\nv w : V\nh : d.snd = v\np : Walk G v w\n⊢ List.Chain (DartAdj G) d (darts p)"],"goalsAfter":[],"content":"by\n  induction p generalizing d with\n  | nil => exact List.Chain.nil\n  -- porting note: needed to defer `h` and `rfl` to help elaboration\n  | cons h' p ih => exact List.Chain.cons (by exact h) (ih (by rfl))"},{"tailPos":27273,"headPos":27270,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝¹ v v✝ : V\nh : Adj G u v✝\np : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.snd = v✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":27269,"headPos":27267,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝¹ v v✝ : V\nh : Adj G u v✝\np : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.snd = v✝"],"goalsAfter":[],"content":"by"},{"tailPos":27273,"headPos":27267,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝¹ v v✝ : V\nh : Adj G u v✝\np : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.snd = v✝"],"goalsAfter":[],"content":"by rfl"},{"tailPos":27668,"headPos":27661,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\nh : e ∈ edges (cons h' p')\n⊢ e ∈ edgeSet G"],"goalsAfter":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\n⊢ Dart.edge { toProd := (u, v✝), is_adj := h' } ∈ edgeSet G","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\na✝ : List.Mem e (List.map Dart.edge (darts p'))\n⊢ e ∈ edgeSet G"],"content":"cases h"},{"tailPos":27675,"headPos":27673,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\n⊢ Dart.edge { toProd := (u, v✝), is_adj := h' } ∈ edgeSet G","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\na✝ : List.Mem e (List.map Dart.edge (darts p'))\n⊢ e ∈ edgeSet G"],"goalsAfter":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\n⊢ Dart.edge { toProd := (u, v✝), is_adj := h' } ∈ edgeSet G"],"content":"·"},{"tailPos":27684,"headPos":27676,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\n⊢ Dart.edge { toProd := (u, v✝), is_adj := h' } ∈ edgeSet G"],"goalsAfter":[],"content":"exact h'"},{"tailPos":27684,"headPos":27673,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\n⊢ Dart.edge { toProd := (u, v✝), is_adj := h' } ∈ edgeSet G","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\na✝ : List.Mem e (List.map Dart.edge (darts p'))\n⊢ e ∈ edgeSet G"],"goalsAfter":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\na✝ : List.Mem e (List.map Dart.edge (darts p'))\n⊢ e ∈ edgeSet G"],"content":"· exact h'"},{"tailPos":27732,"headPos":27700,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh'✝ : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\nh' : List.Mem e (List.map Dart.edge (darts p'))\n⊢ e ∈ edgeSet G"],"goalsAfter":[],"content":"exact edges_subset_edgeSet p' h'"},{"tailPos":27732,"headPos":27689,"goalsBefore":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\na✝ : List.Mem e (List.map Dart.edge (darts p'))\n⊢ e ∈ edgeSet G"],"goalsAfter":[],"content":"next h' => exact edges_subset_edgeSet p' h'"},{"tailPos":27732,"headPos":27661,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\nh : e ∈ edges (cons h' p')\n⊢ e ∈ edgeSet G"],"goalsAfter":[],"content":"cases h\n    · exact h'\n    next h' => exact edges_subset_edgeSet p' h'"},{"tailPos":27656,"headPos":27654,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\nh : e ∈ edges (cons h' p')\n⊢ e ∈ edgeSet G"],"goalsAfter":[],"content":"by"},{"tailPos":27732,"headPos":27654,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh' : Adj G u v✝\np' : Walk G v✝ v\ne : Sym2 V\nh : e ∈ edges (cons h' p')\n⊢ e ∈ edgeSet G"],"goalsAfter":[],"content":"by\n    cases h\n    · exact h'\n    next h' => exact edges_subset_edgeSet p' h'"},{"tailPos":28508,"headPos":28497,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ darts (concat p h) = List.concat (darts p) { toProd := (v, w), is_adj := h }"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ darts (concat nil h) = List.concat (darts nil) { toProd := (u✝, w), is_adj := h }","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), darts (concat p✝ h) = List.concat (darts p✝) { toProd := (w✝, w), is_adj := h }\nh : Adj G w✝ w\n⊢ darts (concat (cons h✝ p✝) h) = List.concat (darts (cons h✝ p✝)) { toProd := (w✝, w), is_adj := h }"],"content":"induction p"},{"tailPos":28512,"headPos":28509,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ darts (concat nil h) = List.concat (darts nil) { toProd := (u✝, w), is_adj := h }","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), darts (concat p✝ h) = List.concat (darts p✝) { toProd := (w✝, w), is_adj := h }\nh : Adj G w✝ w\n⊢ darts (concat (cons h✝ p✝) h) = List.concat (darts (cons h✝ p✝)) { toProd := (w✝, w), is_adj := h }"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ darts (concat nil h) = List.concat (darts nil) { toProd := (u✝, w), is_adj := h }","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), darts (concat p✝ h) = List.concat (darts p✝) { toProd := (w✝, w), is_adj := h }\nh : Adj G w✝ w\n⊢ darts (concat (cons h✝ p✝) h) = List.concat (darts (cons h✝ p✝)) { toProd := (w✝, w), is_adj := h }"],"content":"<;>"},{"tailPos":28533,"headPos":28513,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nh : Adj G u✝ w\n⊢ darts (concat nil h) = List.concat (darts nil) { toProd := (u✝, w), is_adj := h }"],"goalsAfter":[],"content":"simp [*, concat_nil]"},{"tailPos":28533,"headPos":28513,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : Adj G w✝ w), darts (concat p✝ h) = List.concat (darts p✝) { toProd := (w✝, w), is_adj := h }\nh : Adj G w✝ w\n⊢ darts (concat (cons h✝ p✝) h) = List.concat (darts (cons h✝ p✝)) { toProd := (w✝, w), is_adj := h }"],"goalsAfter":[],"content":"simp [*, concat_nil]"},{"tailPos":28533,"headPos":28497,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ darts (concat p h) = List.concat (darts p) { toProd := (v, w), is_adj := h }"],"goalsAfter":[],"content":"induction p <;> simp [*, concat_nil]"},{"tailPos":28494,"headPos":28492,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ darts (concat p h) = List.concat (darts p) { toProd := (v, w), is_adj := h }"],"goalsAfter":[],"content":"by"},{"tailPos":28533,"headPos":28492,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ darts (concat p h) = List.concat (darts p) { toProd := (v, w), is_adj := h }"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*, concat_nil]"},{"tailPos":28742,"headPos":28732,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ darts (Walk.copy p hu hv) = darts p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ darts (Walk.copy p (_ : u' = u') (_ : v' = v')) = darts p"],"content":"subst_vars"},{"tailPos":28748,"headPos":28745,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ darts (Walk.copy p (_ : u' = u') (_ : v' = v')) = darts p"],"goalsAfter":[],"content":"rfl"},{"tailPos":28748,"headPos":28732,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ darts (Walk.copy p hu hv) = darts p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":28729,"headPos":28727,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ darts (Walk.copy p hu hv) = darts p"],"goalsAfter":[],"content":"by"},{"tailPos":28748,"headPos":28727,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ darts (Walk.copy p hu hv) = darts p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":28957,"headPos":28946,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ darts (append p p') = darts p ++ darts p'"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ darts (append nil p') = darts nil ++ darts p'","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), darts (append p✝ p') = darts p✝ ++ darts p'\np' : Walk G w✝ w\n⊢ darts (append (cons h✝ p✝) p') = darts (cons h✝ p✝) ++ darts p'"],"content":"induction p"},{"tailPos":28961,"headPos":28958,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ darts (append nil p') = darts nil ++ darts p'","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), darts (append p✝ p') = darts p✝ ++ darts p'\np' : Walk G w✝ w\n⊢ darts (append (cons h✝ p✝) p') = darts (cons h✝ p✝) ++ darts p'"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ darts (append nil p') = darts nil ++ darts p'","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), darts (append p✝ p') = darts p✝ ++ darts p'\np' : Walk G w✝ w\n⊢ darts (append (cons h✝ p✝) p') = darts (cons h✝ p✝) ++ darts p'"],"content":"<;>"},{"tailPos":28970,"headPos":28962,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\np' : Walk G u✝ w\n⊢ darts (append nil p') = darts nil ++ darts p'"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":28970,"headPos":28962,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (p' : Walk G w✝ w), darts (append p✝ p') = darts p✝ ++ darts p'\np' : Walk G w✝ w\n⊢ darts (append (cons h✝ p✝) p') = darts (cons h✝ p✝) ++ darts p'"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":28970,"headPos":28946,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ darts (append p p') = darts p ++ darts p'"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":28943,"headPos":28941,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ darts (append p p') = darts p ++ darts p'"],"goalsAfter":[],"content":"by"},{"tailPos":28970,"headPos":28941,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ darts (append p p') = darts p ++ darts p'"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":29172,"headPos":29161,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ darts (reverse p) = List.reverse (List.map Dart.symm (darts p))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ darts (reverse nil) = List.reverse (List.map Dart.symm (darts nil))","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (reverse p✝) = List.reverse (List.map Dart.symm (darts p✝))\n⊢ darts (reverse (cons h✝ p✝)) = List.reverse (List.map Dart.symm (darts (cons h✝ p✝)))"],"content":"induction p"},{"tailPos":29176,"headPos":29173,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ darts (reverse nil) = List.reverse (List.map Dart.symm (darts nil))","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (reverse p✝) = List.reverse (List.map Dart.symm (darts p✝))\n⊢ darts (reverse (cons h✝ p✝)) = List.reverse (List.map Dart.symm (darts (cons h✝ p✝)))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ darts (reverse nil) = List.reverse (List.map Dart.symm (darts nil))","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (reverse p✝) = List.reverse (List.map Dart.symm (darts p✝))\n⊢ darts (reverse (cons h✝ p✝)) = List.reverse (List.map Dart.symm (darts (cons h✝ p✝)))"],"content":"<;>"},{"tailPos":29199,"headPos":29177,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ darts (reverse nil) = List.reverse (List.map Dart.symm (darts nil))"],"goalsAfter":[],"content":"simp [*, Sym2.eq_swap]"},{"tailPos":29199,"headPos":29177,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (reverse p✝) = List.reverse (List.map Dart.symm (darts p✝))\n⊢ darts (reverse (cons h✝ p✝)) = List.reverse (List.map Dart.symm (darts (cons h✝ p✝)))"],"goalsAfter":[],"content":"simp [*, Sym2.eq_swap]"},{"tailPos":29199,"headPos":29161,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ darts (reverse p) = List.reverse (List.map Dart.symm (darts p))"],"goalsAfter":[],"content":"induction p <;> simp [*, Sym2.eq_swap]"},{"tailPos":29158,"headPos":29156,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ darts (reverse p) = List.reverse (List.map Dart.symm (darts p))"],"goalsAfter":[],"content":"by"},{"tailPos":29199,"headPos":29156,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ darts (reverse p) = List.reverse (List.map Dart.symm (darts p))"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*, Sym2.eq_swap]"},{"tailPos":29398,"headPos":29394,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nd : Dart G\np : Walk G u v\n⊢ d ∈ darts (reverse p) ↔ Dart.symm d ∈ darts p"],"goalsAfter":[],"content":"simp only [darts_reverse, List.mem_reverse, List.mem_map, Dart.symm_involutive,\n  Involutive.exists_mem_and_apply_eq_iff]"},{"tailPos":29393,"headPos":29391,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nd : Dart G\np : Walk G u v\n⊢ d ∈ darts (reverse p) ↔ Dart.symm d ∈ darts p"],"goalsAfter":[],"content":"by"},{"tailPos":29398,"headPos":29391,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nd : Dart G\np : Walk G u v\n⊢ d ∈ darts (reverse p) ↔ Dart.symm d ∈ darts p"],"goalsAfter":[],"content":"by simp"},{"tailPos":29593,"headPos":29582,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u :: List.map (fun x => x.snd) (darts p) = support p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ :: List.map (fun x => x.snd) (darts nil) = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : v✝ :: List.map (fun x => x.snd) (darts p✝) = support p✝\n⊢ u✝ :: List.map (fun x => x.snd) (darts (cons h✝ p✝)) = support (cons h✝ p✝)"],"content":"induction p"},{"tailPos":29597,"headPos":29594,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ :: List.map (fun x => x.snd) (darts nil) = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : v✝ :: List.map (fun x => x.snd) (darts p✝) = support p✝\n⊢ u✝ :: List.map (fun x => x.snd) (darts (cons h✝ p✝)) = support (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ :: List.map (fun x => x.snd) (darts nil) = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : v✝ :: List.map (fun x => x.snd) (darts p✝) = support p✝\n⊢ u✝ :: List.map (fun x => x.snd) (darts (cons h✝ p✝)) = support (cons h✝ p✝)"],"content":"<;>"},{"tailPos":29607,"headPos":29598,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ u✝ :: List.map (fun x => x.snd) (darts nil) = support nil"],"goalsAfter":[],"content":"simp! [*]"},{"tailPos":29607,"headPos":29598,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : v✝ :: List.map (fun x => x.snd) (darts p✝) = support p✝\n⊢ u✝ :: List.map (fun x => x.snd) (darts (cons h✝ p✝)) = support (cons h✝ p✝)"],"goalsAfter":[],"content":"simp! [*]"},{"tailPos":29607,"headPos":29582,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u :: List.map (fun x => x.snd) (darts p) = support p"],"goalsAfter":[],"content":"induction p <;> simp! [*]"},{"tailPos":29579,"headPos":29577,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u :: List.map (fun x => x.snd) (darts p) = support p"],"goalsAfter":[],"content":"by"},{"tailPos":29607,"headPos":29577,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ u :: List.map (fun x => x.snd) (darts p) = support p"],"goalsAfter":[],"content":"by\n  induction p <;> simp! [*]"},{"tailPos":29840,"headPos":29786,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.snd) (darts p) = List.tail (support p)"],"goalsAfter":[],"content":"simpa only [List.tail_cons] using congr_arg List.tail (cons_map_snd_darts p)"},{"tailPos":29783,"headPos":29781,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.snd) (darts p) = List.tail (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":29840,"headPos":29781,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.snd) (darts p) = List.tail (support p)"],"goalsAfter":[],"content":"by\n  simpa using congr_arg List.tail (cons_map_snd_darts p)"},{"tailPos":30033,"headPos":30022,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) ++ [v] = support p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.map (fun x => x.fst) (darts nil) ++ [u✝] = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.map (fun x => x.fst) (darts p✝) ++ [w✝] = support p✝\n⊢ List.map (fun x => x.fst) (darts (cons h✝ p✝)) ++ [w✝] = support (cons h✝ p✝)"],"content":"induction p"},{"tailPos":30037,"headPos":30034,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.map (fun x => x.fst) (darts nil) ++ [u✝] = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.map (fun x => x.fst) (darts p✝) ++ [w✝] = support p✝\n⊢ List.map (fun x => x.fst) (darts (cons h✝ p✝)) ++ [w✝] = support (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.map (fun x => x.fst) (darts nil) ++ [u✝] = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.map (fun x => x.fst) (darts p✝) ++ [w✝] = support p✝\n⊢ List.map (fun x => x.fst) (darts (cons h✝ p✝)) ++ [w✝] = support (cons h✝ p✝)"],"content":"<;>"},{"tailPos":30047,"headPos":30038,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.map (fun x => x.fst) (darts nil) ++ [u✝] = support nil"],"goalsAfter":[],"content":"simp! [*]"},{"tailPos":30047,"headPos":30038,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.map (fun x => x.fst) (darts p✝) ++ [w✝] = support p✝\n⊢ List.map (fun x => x.fst) (darts (cons h✝ p✝)) ++ [w✝] = support (cons h✝ p✝)"],"goalsAfter":[],"content":"simp! [*]"},{"tailPos":30047,"headPos":30022,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) ++ [v] = support p"],"goalsAfter":[],"content":"induction p <;> simp! [*]"},{"tailPos":30019,"headPos":30017,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) ++ [v] = support p"],"goalsAfter":[],"content":"by"},{"tailPos":30047,"headPos":30017,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) ++ [v] = support p"],"goalsAfter":[],"content":"by\n  induction p <;> simp! [*]"},{"tailPos":30295,"headPos":30234,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) = List.dropLast (support p)"],"goalsAfter":[],"content":"simpa! only [List.dropLast_concat] using congr_arg List.dropLast (map_fst_darts_append p)"},{"tailPos":30231,"headPos":30229,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) = List.dropLast (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":30295,"headPos":30229,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.map (fun x => x.fst) (darts p) = List.dropLast (support p)"],"goalsAfter":[],"content":"by\n  simpa! using congr_arg List.dropLast (map_fst_darts_append p)"},{"tailPos":30843,"headPos":30831,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ edges (concat p h) = List.concat (edges p) (Quotient.mk (Sym2.Rel.setoid V) (v, w))"],"goalsAfter":[],"content":"simp [edges]"},{"tailPos":30830,"headPos":30828,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ edges (concat p h) = List.concat (edges p) (Quotient.mk (Sym2.Rel.setoid V) (v, w))"],"goalsAfter":[],"content":"by"},{"tailPos":30843,"headPos":30828,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nh : Adj G v w\n⊢ edges (concat p h) = List.concat (edges p) (Quotient.mk (Sym2.Rel.setoid V) (v, w))"],"goalsAfter":[],"content":"by simp [edges]"},{"tailPos":31052,"headPos":31042,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ edges (Walk.copy p hu hv) = edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) = edges p"],"content":"subst_vars"},{"tailPos":31058,"headPos":31055,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) = edges p"],"goalsAfter":[],"content":"rfl"},{"tailPos":31058,"headPos":31042,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ edges (Walk.copy p hu hv) = edges p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":31039,"headPos":31037,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ edges (Walk.copy p hu hv) = edges p"],"goalsAfter":[],"content":"by"},{"tailPos":31058,"headPos":31037,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ edges (Walk.copy p hu hv) = edges p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":31266,"headPos":31254,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ edges (append p p') = edges p ++ edges p'"],"goalsAfter":[],"content":"simp [edges]"},{"tailPos":31253,"headPos":31251,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ edges (append p p') = edges p ++ edges p'"],"goalsAfter":[],"content":"by"},{"tailPos":31266,"headPos":31251,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\np' : Walk G v w\n⊢ edges (append p p') = edges p ++ edges p'"],"goalsAfter":[],"content":"by simp [edges]"},{"tailPos":31467,"headPos":31437,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ edges (reverse p) = List.reverse (edges p)"],"goalsAfter":[],"content":"simp [edges, List.map_reverse]"},{"tailPos":31434,"headPos":31432,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ edges (reverse p) = List.reverse (edges p)"],"goalsAfter":[],"content":"by"},{"tailPos":31467,"headPos":31432,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ edges (reverse p) = List.reverse (edges p)"],"goalsAfter":[],"content":"by\n  simp [edges, List.map_reverse]"},{"tailPos":31650,"headPos":31639,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (support p) = length p + 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (support nil) = length nil + 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (support p✝) = length p✝ + 1\n⊢ List.length (support (cons h✝ p✝)) = length (cons h✝ p✝) + 1"],"content":"induction p"},{"tailPos":31654,"headPos":31651,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (support nil) = length nil + 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (support p✝) = length p✝ + 1\n⊢ List.length (support (cons h✝ p✝)) = length (cons h✝ p✝) + 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (support nil) = length nil + 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (support p✝) = length p✝ + 1\n⊢ List.length (support (cons h✝ p✝)) = length (cons h✝ p✝) + 1"],"content":"<;>"},{"tailPos":31663,"headPos":31655,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (support nil) = length nil + 1"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":31663,"headPos":31655,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (support p✝) = length p✝ + 1\n⊢ List.length (support (cons h✝ p✝)) = length (cons h✝ p✝) + 1"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":31663,"headPos":31639,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (support p) = length p + 1"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":31636,"headPos":31634,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (support p) = length p + 1"],"goalsAfter":[],"content":"by"},{"tailPos":31663,"headPos":31634,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (support p) = length p + 1"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":31840,"headPos":31829,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (darts p) = length p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (darts nil) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (darts p✝) = length p✝\n⊢ List.length (darts (cons h✝ p✝)) = length (cons h✝ p✝)"],"content":"induction p"},{"tailPos":31844,"headPos":31841,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (darts nil) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (darts p✝) = length p✝\n⊢ List.length (darts (cons h✝ p✝)) = length (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (darts nil) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (darts p✝) = length p✝\n⊢ List.length (darts (cons h✝ p✝)) = length (cons h✝ p✝)"],"content":"<;>"},{"tailPos":31853,"headPos":31845,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ List.length (darts nil) = length nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":31853,"headPos":31845,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : List.length (darts p✝) = length p✝\n⊢ List.length (darts (cons h✝ p✝)) = length (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":31853,"headPos":31829,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (darts p) = length p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":31826,"headPos":31824,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (darts p) = length p"],"goalsAfter":[],"content":"by"},{"tailPos":31853,"headPos":31824,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (darts p) = length p"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":32025,"headPos":32013,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (edges p) = length p"],"goalsAfter":[],"content":"simp [edges]"},{"tailPos":32012,"headPos":32010,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (edges p) = length p"],"goalsAfter":[],"content":"by"},{"tailPos":32025,"headPos":32010,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ List.length (edges p) = length p"],"goalsAfter":[],"content":"by simp [edges]"},{"tailPos":32318,"headPos":32257,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts (cons h p')\n⊢ d.fst ∈ support (cons h p')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d = { toProd := (u, v✝), is_adj := h } ∨ d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"content":"simp only [support_cons, darts_cons, List.mem_cons] at hd ⊢"},{"tailPos":32348,"headPos":32323,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d = { toProd := (u, v✝), is_adj := h } ∨ d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"goalsAfter":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.fst = u ∨ { toProd := (u, v✝), is_adj := h }.toProd.fst ∈ support p'","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"content":"rcases hd with (rfl | hd)"},{"tailPos":32355,"headPos":32353,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.fst = u ∨ { toProd := (u, v✝), is_adj := h }.toProd.fst ∈ support p'","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"goalsAfter":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.fst = u ∨ { toProd := (u, v✝), is_adj := h }.toProd.fst ∈ support p'"],"content":"·"},{"tailPos":32372,"headPos":32356,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.fst = u ∨ { toProd := (u, v✝), is_adj := h }.toProd.fst ∈ support p'"],"goalsAfter":[],"content":"exact Or.inl rfl"},{"tailPos":32372,"headPos":32353,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\n⊢ { toProd := (u, v✝), is_adj := h }.toProd.fst = u ∨ { toProd := (u, v✝), is_adj := h }.toProd.fst ∈ support p'","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"goalsAfter":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"content":"· exact Or.inl rfl"},{"tailPos":32379,"headPos":32377,"goalsBefore":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"goalsAfter":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"content":"·"},{"tailPos":32433,"headPos":32380,"goalsBefore":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"goalsAfter":[],"content":"exact Or.inr (dart_fst_mem_support_of_mem_darts _ hd)"},{"tailPos":32433,"headPos":32377,"goalsBefore":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts p'\n⊢ d.fst = u ∨ d.fst ∈ support p'"],"goalsAfter":[],"content":"· exact Or.inr (dart_fst_mem_support_of_mem_darts _ hd)"},{"tailPos":32433,"headPos":32257,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts (cons h p')\n⊢ d.fst ∈ support (cons h p')"],"goalsAfter":[],"content":"simp only [support_cons, darts_cons, List.mem_cons] at hd ⊢\n    rcases hd with (rfl | hd)\n    · exact Or.inl rfl\n    · exact Or.inr (dart_fst_mem_support_of_mem_darts _ hd)"},{"tailPos":32252,"headPos":32250,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts (cons h p')\n⊢ d.fst ∈ support (cons h p')"],"goalsAfter":[],"content":"by"},{"tailPos":32433,"headPos":32250,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v v✝ : V\nh : Adj G u v✝\np' : Walk G v✝ v\nd : Dart G\nhd : d ∈ darts (cons h p')\n⊢ d.fst ∈ support (cons h p')"],"goalsAfter":[],"content":"by\n    simp only [support_cons, darts_cons, List.mem_cons] at hd ⊢\n    rcases hd with (rfl | hd)\n    · exact Or.inl rfl\n    · exact Or.inr (dart_fst_mem_support_of_mem_darts _ hd)"},{"tailPos":32749,"headPos":32741,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nd : Dart G\nh : d ∈ darts p\n⊢ Dart.symm d ∈ darts (reverse p)"],"goalsAfter":[],"content":"simp [h]"},{"tailPos":32740,"headPos":32738,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nd : Dart G\nh : d ∈ darts p\n⊢ Dart.symm d ∈ darts (reverse p)"],"goalsAfter":[],"content":"by"},{"tailPos":32749,"headPos":32738,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nd : Dart G\nh : d ∈ darts p\n⊢ Dart.symm d ∈ darts (reverse p)"],"goalsAfter":[],"content":"by simp [h]"},{"tailPos":32779,"headPos":32681,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nd : Dart G\nh : d ∈ darts p\n⊢ d.snd ∈ support p"],"goalsAfter":[],"content":"simpa only [Dart.symm_toProd, Prod.fst_swap, support_reverse, List.mem_reverse] using\n  p.reverse.dart_fst_mem_support_of_mem_darts (by simp [h] : d.symm ∈ p.reverse.darts)"},{"tailPos":32678,"headPos":32676,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nd : Dart G\nh : d ∈ darts p\n⊢ d.snd ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":32779,"headPos":32676,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nd : Dart G\nh : d ∈ darts p\n⊢ d.snd ∈ support p"],"goalsAfter":[],"content":"by\n  simpa using p.reverse.dart_fst_mem_support_of_mem_darts (by simp [h] : d.symm ∈ p.reverse.darts)"},{"tailPos":33065,"headPos":33021,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ t ∈ support p"],"goalsAfter":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (t, u)\n⊢ t ∈ support p"],"content":"obtain ⟨d, hd, he⟩ := List.mem_map.mp he"},{"tailPos":33093,"headPos":33072,"goalsBefore":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (t, u)\n⊢ t ∈ support p"],"goalsAfter":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : d.fst = t ∧ d.snd = u ∨ d.fst = u ∧ d.snd = t\n⊢ t ∈ support p"],"content":"dart_edge_eq_mk'_iff'"},{"tailPos":33094,"headPos":33093,"goalsBefore":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : d.fst = t ∧ d.snd = u ∨ d.fst = u ∧ d.snd = t\n⊢ t ∈ support p"],"goalsAfter":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : d.fst = t ∧ d.snd = u ∨ d.fst = u ∧ d.snd = t\n⊢ t ∈ support p"],"content":"]"},{"tailPos":33100,"headPos":33068,"goalsBefore":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : Dart.edge d = Quotient.mk (Sym2.Rel.setoid V) (t, u)\n⊢ t ∈ support p"],"goalsAfter":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : d.fst = t ∧ d.snd = u ∨ d.fst = u ∧ d.snd = t\n⊢ t ∈ support p"],"content":"rw [dart_edge_eq_mk'_iff'] at he"},{"tailPos":33151,"headPos":33103,"goalsBefore":["case intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe✝ : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\nd : Dart G\nhd : d ∈ darts p\nhe : d.fst = t ∧ d.snd = u ∨ d.fst = u ∧ d.snd = t\n⊢ t ∈ support p"],"goalsAfter":["case intro.intro.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.fst, d.snd) ∈ edges p\n⊢ d.fst ∈ support p","case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"content":"rcases he with (⟨rfl, rfl⟩ | ⟨rfl, rfl⟩)"},{"tailPos":33156,"headPos":33154,"goalsBefore":["case intro.intro.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.fst, d.snd) ∈ edges p\n⊢ d.fst ∈ support p","case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"goalsAfter":["case intro.intro.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.fst, d.snd) ∈ edges p\n⊢ d.fst ∈ support p"],"content":"·"},{"tailPos":33201,"headPos":33157,"goalsBefore":["case intro.intro.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.fst, d.snd) ∈ edges p\n⊢ d.fst ∈ support p"],"goalsAfter":[],"content":"exact dart_fst_mem_support_of_mem_darts _ hd"},{"tailPos":33201,"headPos":33154,"goalsBefore":["case intro.intro.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.fst, d.snd) ∈ edges p\n⊢ d.fst ∈ support p","case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"goalsAfter":["case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"content":"· exact dart_fst_mem_support_of_mem_darts _ hd"},{"tailPos":33206,"headPos":33204,"goalsBefore":["case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"goalsAfter":["case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"content":"·"},{"tailPos":33251,"headPos":33207,"goalsBefore":["case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"goalsAfter":[],"content":"exact dart_snd_mem_support_of_mem_darts _ hd"},{"tailPos":33251,"headPos":33204,"goalsBefore":["case intro.intro.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nd : Dart G\nhd : d ∈ darts p\nhe : Quotient.mk (Sym2.Rel.setoid V) (d.snd, d.fst) ∈ edges p\n⊢ d.snd ∈ support p"],"goalsAfter":[],"content":"· exact dart_snd_mem_support_of_mem_darts _ hd"},{"tailPos":33251,"headPos":33021,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ t ∈ support p"],"goalsAfter":[],"content":"obtain ⟨d, hd, he⟩ := List.mem_map.mp he\n  rw [dart_edge_eq_mk'_iff'] at he\n  rcases he with (⟨rfl, rfl⟩ | ⟨rfl, rfl⟩)\n  · exact dart_fst_mem_support_of_mem_darts _ hd\n  · exact dart_snd_mem_support_of_mem_darts _ hd"},{"tailPos":33018,"headPos":33016,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ t ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":33251,"headPos":33016,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ t ∈ support p"],"goalsAfter":[],"content":"by\n  obtain ⟨d, hd, he⟩ := List.mem_map.mp he\n  rw [dart_edge_eq_mk'_iff'] at he\n  rcases he with (⟨rfl, rfl⟩ | ⟨rfl, rfl⟩)\n  · exact dart_fst_mem_support_of_mem_darts _ hd\n  · exact dart_snd_mem_support_of_mem_darts _ hd"},{"tailPos":33499,"headPos":33487,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (u, t) ∈ edges p\n⊢ u ∈ support p"],"content":"Sym2.eq_swap"},{"tailPos":33500,"headPos":33499,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (u, t) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (u, t) ∈ edges p\n⊢ u ∈ support p"],"content":"]"},{"tailPos":33506,"headPos":33483,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (u, t) ∈ edges p\n⊢ u ∈ support p"],"content":"rw [Sym2.eq_swap] at he"},{"tailPos":33548,"headPos":33509,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (u, t) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":[],"content":"exact p.fst_mem_support_of_mem_edges he"},{"tailPos":33548,"headPos":33483,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":[],"content":"rw [Sym2.eq_swap] at he\n  exact p.fst_mem_support_of_mem_edges he"},{"tailPos":33480,"headPos":33478,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":33548,"headPos":33478,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nt u v w : V\np : Walk G v w\nhe : Quotient.mk (Sym2.Rel.setoid V) (t, u) ∈ edges p\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by\n  rw [Sym2.eq_swap] at he\n  exact p.fst_mem_support_of_mem_edges he"},{"tailPos":33796,"headPos":33792,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\nh : List.Nodup (support nil)\n⊢ List.Nodup (darts nil)"],"goalsAfter":[],"content":"simp only [darts_nil, List.nodup_nil]"},{"tailPos":33796,"headPos":33783,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\nh : List.Nodup (support nil)\n⊢ List.Nodup (darts nil)"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":33883,"headPos":33821,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (darts p')\nh : List.Nodup (support (cons h✝ p'))\n⊢ List.Nodup (darts (cons h✝ p'))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (darts p')\nh : ¬u✝ ∈ support p' ∧ List.Nodup (support p')\n⊢ ¬{ toProd := (u✝, v✝), is_adj := h✝ } ∈ darts p' ∧ List.Nodup (darts p')"],"content":"simp only [darts_cons, support_cons, List.nodup_cons] at h ⊢"},{"tailPos":33963,"headPos":33888,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (darts p')\nh : ¬u✝ ∈ support p' ∧ List.Nodup (support p')\n⊢ ¬{ toProd := (u✝, v✝), is_adj := h✝ } ∈ darts p' ∧ List.Nodup (darts p')"],"goalsAfter":[],"content":"exact ⟨fun h' => h.1 (dart_fst_mem_support_of_mem_darts p' h'), ih h.2⟩"},{"tailPos":33963,"headPos":33821,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (darts p')\nh : List.Nodup (support (cons h✝ p'))\n⊢ List.Nodup (darts (cons h✝ p'))"],"goalsAfter":[],"content":"simp only [darts_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (dart_fst_mem_support_of_mem_darts p' h'), ih h.2⟩"},{"tailPos":33963,"headPos":33799,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (darts p')\nh : List.Nodup (support (cons h✝ p'))\n⊢ List.Nodup (darts (cons h✝ p'))"],"goalsAfter":[],"content":"| cons _ p' ih =>\n    simp only [darts_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (dart_fst_mem_support_of_mem_darts p' h'), ih h.2⟩"},{"tailPos":33963,"headPos":33764,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (darts p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (darts p)"],"content":"induction p with\n  | nil => simp\n  | cons _ p' ih =>\n    simp only [darts_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (dart_fst_mem_support_of_mem_darts p' h'), ih h.2⟩"},{"tailPos":33761,"headPos":33759,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (darts p)"],"goalsAfter":[],"content":"by"},{"tailPos":33963,"headPos":33759,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (darts p)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ p' ih =>\n    simp only [darts_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (dart_fst_mem_support_of_mem_darts p' h'), ih h.2⟩"},{"tailPos":34211,"headPos":34207,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\nh : List.Nodup (support nil)\n⊢ List.Nodup (edges nil)"],"goalsAfter":[],"content":"simp only [edges_nil, List.nodup_nil]"},{"tailPos":34211,"headPos":34198,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\nh : List.Nodup (support nil)\n⊢ List.Nodup (edges nil)"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":34298,"headPos":34236,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (edges p')\nh : List.Nodup (support (cons h✝ p'))\n⊢ List.Nodup (edges (cons h✝ p'))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (edges p')\nh : ¬u✝ ∈ support p' ∧ List.Nodup (support p')\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p' ∧ List.Nodup (edges p')"],"content":"simp only [edges_cons, support_cons, List.nodup_cons] at h ⊢"},{"tailPos":34373,"headPos":34303,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (edges p')\nh : ¬u✝ ∈ support p' ∧ List.Nodup (support p')\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p' ∧ List.Nodup (edges p')"],"goalsAfter":[],"content":"exact ⟨fun h' => h.1 (fst_mem_support_of_mem_edges p' h'), ih h.2⟩"},{"tailPos":34373,"headPos":34236,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (edges p')\nh : List.Nodup (support (cons h✝ p'))\n⊢ List.Nodup (edges (cons h✝ p'))"],"goalsAfter":[],"content":"simp only [edges_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (fst_mem_support_of_mem_edges p' h'), ih h.2⟩"},{"tailPos":34373,"headPos":34214,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : List.Nodup (support p') → List.Nodup (edges p')\nh : List.Nodup (support (cons h✝ p'))\n⊢ List.Nodup (edges (cons h✝ p'))"],"goalsAfter":[],"content":"| cons _ p' ih =>\n    simp only [edges_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (fst_mem_support_of_mem_edges p' h'), ih h.2⟩"},{"tailPos":34373,"headPos":34179,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (edges p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (edges p)"],"content":"induction p with\n  | nil => simp\n  | cons _ p' ih =>\n    simp only [edges_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (fst_mem_support_of_mem_edges p' h'), ih h.2⟩"},{"tailPos":34176,"headPos":34174,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (edges p)"],"goalsAfter":[],"content":"by"},{"tailPos":34373,"headPos":34174,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : List.Nodup (support p)\n⊢ List.Nodup (edges p)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ p' ih =>\n    simp only [edges_cons, support_cons, List.nodup_cons] at h ⊢\n    exact ⟨fun h' => h.1 (fst_mem_support_of_mem_edges p' h'), ih h.2⟩"},{"tailPos":36570,"headPos":36560,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsTrail (Walk.copy p hu hv) ↔ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ IsTrail (Walk.copy p (_ : u' = u') (_ : v' = v')) ↔ IsTrail p"],"content":"subst_vars"},{"tailPos":36576,"headPos":36573,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ IsTrail (Walk.copy p (_ : u' = u') (_ : v' = v')) ↔ IsTrail p"],"goalsAfter":[],"content":"rfl"},{"tailPos":36576,"headPos":36560,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsTrail (Walk.copy p hu hv) ↔ IsTrail p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":36557,"headPos":36555,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsTrail (Walk.copy p hu hv) ↔ IsTrail p"],"goalsAfter":[],"content":"by"},{"tailPos":36576,"headPos":36555,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsTrail (Walk.copy p hu hv) ↔ IsTrail p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":37174,"headPos":37164,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsPath (Walk.copy p hu hv) ↔ IsPath p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ IsPath (Walk.copy p (_ : u' = u') (_ : v' = v')) ↔ IsPath p"],"content":"subst_vars"},{"tailPos":37180,"headPos":37177,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\np : Walk G u' v'\n⊢ IsPath (Walk.copy p (_ : u' = u') (_ : v' = v')) ↔ IsPath p"],"goalsAfter":[],"content":"rfl"},{"tailPos":37180,"headPos":37164,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsPath (Walk.copy p hu hv) ↔ IsPath p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":37161,"headPos":37159,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsPath (Walk.copy p hu hv) ↔ IsPath p"],"goalsAfter":[],"content":"by"},{"tailPos":37180,"headPos":37159,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ IsPath (Walk.copy p hu hv) ↔ IsPath p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":37609,"headPos":37599,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCircuit (Walk.copy p hu hu) ↔ IsCircuit p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' : V\np : Walk G u' u'\n⊢ IsCircuit (Walk.copy p (_ : u' = u') (_ : u' = u')) ↔ IsCircuit p"],"content":"subst_vars"},{"tailPos":37615,"headPos":37612,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' : V\np : Walk G u' u'\n⊢ IsCircuit (Walk.copy p (_ : u' = u') (_ : u' = u')) ↔ IsCircuit p"],"goalsAfter":[],"content":"rfl"},{"tailPos":37615,"headPos":37599,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCircuit (Walk.copy p hu hu) ↔ IsCircuit p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":37596,"headPos":37594,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCircuit (Walk.copy p hu hu) ↔ IsCircuit p"],"goalsAfter":[],"content":"by"},{"tailPos":37615,"headPos":37594,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCircuit (Walk.copy p hu hu) ↔ IsCircuit p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":38089,"headPos":38079,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCycle (Walk.copy p hu hu) ↔ IsCycle p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' : V\np : Walk G u' u'\n⊢ IsCycle (Walk.copy p (_ : u' = u') (_ : u' = u')) ↔ IsCycle p"],"content":"subst_vars"},{"tailPos":38095,"headPos":38092,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' : V\np : Walk G u' u'\n⊢ IsCycle (Walk.copy p (_ : u' = u') (_ : u' = u')) ↔ IsCycle p"],"goalsAfter":[],"content":"rfl"},{"tailPos":38095,"headPos":38079,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCycle (Walk.copy p hu hu) ↔ IsCycle p"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":38076,"headPos":38074,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCycle (Walk.copy p hu hu) ↔ IsCycle p"],"goalsAfter":[],"content":"by"},{"tailPos":38095,"headPos":38074,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu u' : V\np : Walk G u u\nhu : u = u'\n⊢ IsCycle (Walk.copy p hu hu) ↔ IsCycle p"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":38254,"headPos":38242,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (edges Walk.nil)"],"goalsAfter":[],"content":"simp [edges]"},{"tailPos":38241,"headPos":38239,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (edges Walk.nil)"],"goalsAfter":[],"content":"by"},{"tailPos":38254,"headPos":38239,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (edges Walk.nil)"],"goalsAfter":[],"content":"by simp [edges]"},{"tailPos":38458,"headPos":38440,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsTrail (cons h p) → IsTrail p"],"goalsAfter":[],"content":"simp [isTrail_def]"},{"tailPos":38439,"headPos":38437,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsTrail (cons h p) → IsTrail p"],"goalsAfter":[],"content":"by"},{"tailPos":38458,"headPos":38437,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsTrail (cons h p) → IsTrail p"],"goalsAfter":[],"content":"by simp [isTrail_def]"},{"tailPos":38715,"headPos":38687,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsTrail (cons h p) ↔ IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"simp [isTrail_def, and_comm]"},{"tailPos":38686,"headPos":38684,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsTrail (cons h p) ↔ IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"by"},{"tailPos":38715,"headPos":38684,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsTrail (cons h p) ↔ IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"by simp [isTrail_def, and_comm]"},{"tailPos":38916,"headPos":38889,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail p\n⊢ IsTrail (Walk.reverse p)"],"goalsAfter":[],"content":"simpa only [isTrail_def, edges_reverse, List.nodup_reverse] using h"},{"tailPos":38886,"headPos":38884,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail p\n⊢ IsTrail (Walk.reverse p)"],"goalsAfter":[],"content":"by"},{"tailPos":38916,"headPos":38884,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail p\n⊢ IsTrail (Walk.reverse p)"],"goalsAfter":[],"content":"by\n  simpa [isTrail_def] using h"},{"tailPos":39109,"headPos":39098,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) ↔ IsTrail p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"content":"constructor"},{"tailPos":39113,"headPos":39110,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"content":"<;>"},{"tailPos":39120,"headPos":39118,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p"],"content":"·"},{"tailPos":39128,"headPos":39121,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ IsTrail p"],"content":"intro h"},{"tailPos":39154,"headPos":39135,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ IsTrail p"],"goalsAfter":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ p = reverse (reverse p)"],"content":"convert h.reverse _"},{"tailPos":39184,"headPos":39169,"goalsBefore":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ p = reverse (reverse p)"],"goalsAfter":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ p = p"],"content":"reverse_reverse"},{"tailPos":39185,"headPos":39184,"goalsBefore":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ p = p"],"goalsAfter":[],"content":"]"},{"tailPos":39185,"headPos":39165,"goalsBefore":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ p = reverse (reverse p)"],"goalsAfter":[],"content":"rw [reverse_reverse]"},{"tailPos":39185,"headPos":39161,"goalsBefore":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail (reverse p)\n⊢ p = reverse (reverse p)"],"goalsAfter":[],"content":"try rw [reverse_reverse]"},{"tailPos":39185,"headPos":39121,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p"],"goalsAfter":[],"content":"intro h\n      convert h.reverse _\n      try rw [reverse_reverse]"},{"tailPos":39185,"headPos":39118,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) → IsTrail p"],"goalsAfter":[],"content":"· intro h\n      convert h.reverse _\n      try rw [reverse_reverse]"},{"tailPos":39120,"headPos":39118,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"content":"·"},{"tailPos":39128,"headPos":39121,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail p\n⊢ IsTrail (reverse p)"],"content":"intro h"},{"tailPos":39154,"headPos":39135,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsTrail p\n⊢ IsTrail (reverse p)"],"goalsAfter":[],"content":"convert h.reverse _"},{"tailPos":39184,"headPos":39169,"goalsBefore":[],"goalsAfter":[],"content":"reverse_reverse"},{"tailPos":39185,"headPos":39165,"goalsBefore":[],"goalsAfter":[],"content":"rw [reverse_reverse]"},{"tailPos":39185,"headPos":39161,"goalsBefore":[],"goalsAfter":[],"content":"try rw [reverse_reverse]"},{"tailPos":39185,"headPos":39121,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"goalsAfter":[],"content":"intro h\n      convert h.reverse _\n      try rw [reverse_reverse]"},{"tailPos":39185,"headPos":39118,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail p → IsTrail (reverse p)"],"goalsAfter":[],"content":"· intro h\n      convert h.reverse _\n      try rw [reverse_reverse]"},{"tailPos":39185,"headPos":39098,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) ↔ IsTrail p"],"goalsAfter":[],"content":"constructor <;>\n    · intro h\n      convert h.reverse _\n      try rw [reverse_reverse]"},{"tailPos":39095,"headPos":39093,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) ↔ IsTrail p"],"goalsAfter":[],"content":"by"},{"tailPos":39185,"headPos":39093,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsTrail (reverse p) ↔ IsTrail p"],"goalsAfter":[],"content":"by\n  constructor <;>\n    · intro h\n      convert h.reverse _\n      try rw [reverse_reverse]"},{"tailPos":39414,"headPos":39402,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges (append p q))\n⊢ IsTrail p"],"content":"isTrail_def,"},{"tailPos":39428,"headPos":39415,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges (append p q))\n⊢ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p ++ edges q)\n⊢ IsTrail p"],"content":"edges_append,"},{"tailPos":39446,"headPos":39429,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p ++ edges q)\n⊢ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail p"],"content":"List.nodup_append"},{"tailPos":39447,"headPos":39446,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail p"],"content":"]"},{"tailPos":39452,"headPos":39398,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail p"],"content":"rw [isTrail_def, edges_append, List.nodup_append] at h"},{"tailPos":39470,"headPos":39455,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail p"],"goalsAfter":[],"content":"exact ⟨h.1⟩"},{"tailPos":39470,"headPos":39398,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail p"],"goalsAfter":[],"content":"rw [isTrail_def, edges_append, List.nodup_append] at h\n  exact ⟨h.1⟩"},{"tailPos":39395,"headPos":39393,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail p"],"goalsAfter":[],"content":"by"},{"tailPos":39470,"headPos":39393,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail p"],"goalsAfter":[],"content":"by\n  rw [isTrail_def, edges_append, List.nodup_append] at h\n  exact ⟨h.1⟩"},{"tailPos":39706,"headPos":39694,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges (append p q))\n⊢ IsTrail q"],"content":"isTrail_def,"},{"tailPos":39720,"headPos":39707,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges (append p q))\n⊢ IsTrail q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p ++ edges q)\n⊢ IsTrail q"],"content":"edges_append,"},{"tailPos":39738,"headPos":39721,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p ++ edges q)\n⊢ IsTrail q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail q"],"content":"List.nodup_append"},{"tailPos":39739,"headPos":39738,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail q"],"content":"]"},{"tailPos":39744,"headPos":39690,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail q"],"content":"rw [isTrail_def, edges_append, List.nodup_append] at h"},{"tailPos":39764,"headPos":39747,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : List.Nodup (edges p) ∧ List.Nodup (edges q) ∧ List.Disjoint (edges p) (edges q)\n⊢ IsTrail q"],"goalsAfter":[],"content":"exact ⟨h.2.1⟩"},{"tailPos":39764,"headPos":39690,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail q"],"goalsAfter":[],"content":"rw [isTrail_def, edges_append, List.nodup_append] at h\n  exact ⟨h.2.1⟩"},{"tailPos":39687,"headPos":39685,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail q"],"goalsAfter":[],"content":"by"},{"tailPos":39764,"headPos":39685,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsTrail (append p q)\n⊢ IsTrail q"],"goalsAfter":[],"content":"by\n  rw [isTrail_def, edges_append, List.nodup_append] at h\n  exact ⟨h.2.1⟩"},{"tailPos":40513,"headPos":40502,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath Walk.nil"],"goalsAfter":["case toIsTrail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsTrail Walk.nil","case support_nodup\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (support Walk.nil)"],"content":"constructor"},{"tailPos":40517,"headPos":40514,"goalsBefore":["case toIsTrail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsTrail Walk.nil","case support_nodup\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (support Walk.nil)"],"goalsAfter":["case toIsTrail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsTrail Walk.nil","case support_nodup\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (support Walk.nil)"],"content":"<;>"},{"tailPos":40522,"headPos":40518,"goalsBefore":["case toIsTrail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsTrail Walk.nil"],"goalsAfter":[],"content":"simp only [IsTrail.nil]"},{"tailPos":40522,"headPos":40518,"goalsBefore":["case support_nodup\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ List.Nodup (support Walk.nil)"],"goalsAfter":[],"content":"simp only [IsTrail.nil]"},{"tailPos":40522,"headPos":40502,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath Walk.nil"],"goalsAfter":[],"content":"constructor <;> simp"},{"tailPos":40501,"headPos":40499,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath Walk.nil"],"goalsAfter":[],"content":"by"},{"tailPos":40522,"headPos":40499,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath Walk.nil"],"goalsAfter":[],"content":"by constructor <;> simp"},{"tailPos":40717,"headPos":40700,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p"],"goalsAfter":[],"content":"simp [isPath_def]"},{"tailPos":40699,"headPos":40697,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p"],"goalsAfter":[],"content":"by"},{"tailPos":40717,"headPos":40697,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p"],"goalsAfter":[],"content":"by simp [isPath_def]"},{"tailPos":40945,"headPos":40934,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) ↔ IsPath p ∧ ¬u ∈ support p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p ∧ ¬u ∈ support p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath p ∧ ¬u ∈ support p → IsPath (cons h p)"],"content":"constructor"},{"tailPos":40949,"headPos":40946,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p ∧ ¬u ∈ support p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath p ∧ ¬u ∈ support p → IsPath (cons h p)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p ∧ ¬u ∈ support p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath p ∧ ¬u ∈ support p → IsPath (cons h p)"],"content":"<;>"},{"tailPos":41002,"headPos":40950,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) → IsPath p ∧ ¬u ∈ support p"],"goalsAfter":[],"content":"simp (config := { contextual := true }) [isPath_def]"},{"tailPos":41002,"headPos":40950,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath p ∧ ¬u ∈ support p → IsPath (cons h p)"],"goalsAfter":[],"content":"simp (config := { contextual := true }) [isPath_def]"},{"tailPos":41002,"headPos":40934,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) ↔ IsPath p ∧ ¬u ∈ support p"],"goalsAfter":[],"content":"constructor <;> simp (config := { contextual := true }) [isPath_def]"},{"tailPos":40931,"headPos":40929,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) ↔ IsPath p ∧ ¬u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":41002,"headPos":40929,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\np : Walk G v w\n⊢ IsPath (cons h p) ↔ IsPath p ∧ ¬u ∈ support p"],"goalsAfter":[],"content":"by\n  constructor <;> simp (config := { contextual := true }) [isPath_def]"},{"tailPos":41176,"headPos":41169,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ IsPath p ↔ p = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath nil ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ IsPath (cons h✝ p✝) ↔ cons h✝ p✝ = nil"],"content":"cases p"},{"tailPos":41180,"headPos":41177,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath nil ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ IsPath (cons h✝ p✝) ↔ cons h✝ p✝ = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath nil ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ IsPath (cons h✝ p✝) ↔ cons h✝ p✝ = nil"],"content":"<;>"},{"tailPos":41198,"headPos":41181,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ IsPath nil ↔ nil = nil"],"goalsAfter":[],"content":"simp [IsPath.nil]"},{"tailPos":41198,"headPos":41181,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ IsPath (cons h✝ p✝) ↔ cons h✝ p✝ = nil"],"goalsAfter":[],"content":"simp [IsPath.nil]"},{"tailPos":41198,"headPos":41169,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ IsPath p ↔ p = nil"],"goalsAfter":[],"content":"cases p <;> simp [IsPath.nil]"},{"tailPos":41166,"headPos":41164,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ IsPath p ↔ p = nil"],"goalsAfter":[],"content":"by"},{"tailPos":41198,"headPos":41164,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ IsPath p ↔ p = nil"],"goalsAfter":[],"content":"by\n  cases p <;> simp [IsPath.nil]"},{"tailPos":41397,"headPos":41371,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (Walk.reverse p)"],"goalsAfter":[],"content":"simpa only [isPath_def, support_reverse, List.nodup_reverse] using h"},{"tailPos":41368,"headPos":41366,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (Walk.reverse p)"],"goalsAfter":[],"content":"by"},{"tailPos":41397,"headPos":41366,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (Walk.reverse p)"],"goalsAfter":[],"content":"by\n  simpa [isPath_def] using h"},{"tailPos":41585,"headPos":41574,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) ↔ IsPath p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) → IsPath p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath p → IsPath (reverse p)"],"content":"constructor"},{"tailPos":41589,"headPos":41586,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) → IsPath p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath p → IsPath (reverse p)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) → IsPath p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath p → IsPath (reverse p)"],"content":"<;>"},{"tailPos":41597,"headPos":41590,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) → IsPath p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ IsPath p"],"content":"intro h"},{"tailPos":41597,"headPos":41590,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath p → IsPath (reverse p)"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (reverse p)"],"content":"intro h"},{"tailPos":41597,"headPos":41574,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) ↔ IsPath p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ IsPath p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (reverse p)"],"content":"constructor <;> intro h"},{"tailPos":41601,"headPos":41598,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ IsPath p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (reverse p)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ IsPath p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (reverse p)"],"content":"<;>"},{"tailPos":41619,"headPos":41602,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ IsPath p"],"goalsAfter":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ p = reverse (reverse p)"],"content":"convert h.reverse"},{"tailPos":41619,"headPos":41602,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath p\n⊢ IsPath (reverse p)"],"goalsAfter":[],"content":"convert h.reverse"},{"tailPos":41619,"headPos":41574,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) ↔ IsPath p"],"goalsAfter":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ p = reverse (reverse p)"],"content":"constructor <;> intro h <;> convert h.reverse"},{"tailPos":41620,"headPos":41619,"goalsBefore":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ p = reverse (reverse p)"],"goalsAfter":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ p = reverse (reverse p)"],"content":";"},{"tailPos":41625,"headPos":41621,"goalsBefore":["case h.e'_5\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nh : IsPath (reverse p)\n⊢ p = reverse (reverse p)"],"goalsAfter":[],"content":"simp only [reverse_reverse]"},{"tailPos":41625,"headPos":41574,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) ↔ IsPath p"],"goalsAfter":[],"content":"constructor <;> intro h <;> convert h.reverse; simp"},{"tailPos":41571,"headPos":41569,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) ↔ IsPath p"],"goalsAfter":[],"content":"by"},{"tailPos":41625,"headPos":41569,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ IsPath (reverse p) ↔ IsPath p"],"goalsAfter":[],"content":"by\n  constructor <;> intro h <;> convert h.reverse; simp"},{"tailPos":41869,"headPos":41831,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ IsPath (append p q) → IsPath p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ List.Nodup (support p ++ List.tail (support q)) → List.Nodup (support p)"],"content":"simp only [isPath_def, support_append]"},{"tailPos":41903,"headPos":41872,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ List.Nodup (support p ++ List.tail (support q)) → List.Nodup (support p)"],"goalsAfter":[],"content":"exact List.Nodup.of_append_left"},{"tailPos":41903,"headPos":41831,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ IsPath (append p q) → IsPath p"],"goalsAfter":[],"content":"simp only [isPath_def, support_append]\n  exact List.Nodup.of_append_left"},{"tailPos":41828,"headPos":41826,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ IsPath (append p q) → IsPath p"],"goalsAfter":[],"content":"by"},{"tailPos":41903,"headPos":41826,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ IsPath (append p q) → IsPath p"],"goalsAfter":[],"content":"by\n  simp only [isPath_def, support_append]\n  exact List.Nodup.of_append_left"},{"tailPos":42144,"headPos":42122,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append p q)\n⊢ IsPath q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (Walk.reverse (append p q))\n⊢ IsPath (Walk.reverse q)"],"content":"← isPath_reverse_iff"},{"tailPos":42145,"headPos":42144,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (Walk.reverse (append p q))\n⊢ IsPath (Walk.reverse q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (Walk.reverse (append p q))\n⊢ IsPath (Walk.reverse q)"],"content":"]"},{"tailPos":42154,"headPos":42118,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append p q)\n⊢ IsPath q"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (Walk.reverse (append p q))\n⊢ IsPath (Walk.reverse q)"],"content":"rw [← isPath_reverse_iff] at h ⊢"},{"tailPos":42175,"headPos":42161,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (Walk.reverse (append p q))\n⊢ IsPath (Walk.reverse q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append (Walk.reverse q) (Walk.reverse p))\n⊢ IsPath (Walk.reverse q)"],"content":"reverse_append"},{"tailPos":42176,"headPos":42175,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append (Walk.reverse q) (Walk.reverse p))\n⊢ IsPath (Walk.reverse q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append (Walk.reverse q) (Walk.reverse p))\n⊢ IsPath (Walk.reverse q)"],"content":"]"},{"tailPos":42181,"headPos":42157,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (Walk.reverse (append p q))\n⊢ IsPath (Walk.reverse q)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append (Walk.reverse q) (Walk.reverse p))\n⊢ IsPath (Walk.reverse q)"],"content":"rw [reverse_append] at h"},{"tailPos":42206,"headPos":42184,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append (Walk.reverse q) (Walk.reverse p))\n⊢ IsPath (Walk.reverse q)"],"goalsAfter":[],"content":"apply h.of_append_left"},{"tailPos":42206,"headPos":42118,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append p q)\n⊢ IsPath q"],"goalsAfter":[],"content":"rw [← isPath_reverse_iff] at h ⊢\n  rw [reverse_append] at h\n  apply h.of_append_left"},{"tailPos":42115,"headPos":42113,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append p q)\n⊢ IsPath q"],"goalsAfter":[],"content":"by"},{"tailPos":42206,"headPos":42113,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\nh : IsPath (append p q)\n⊢ IsPath q"],"goalsAfter":[],"content":"by\n  rw [← isPath_reverse_iff] at h ⊢\n  rw [reverse_append] at h\n  apply h.of_append_left"},{"tailPos":42754,"headPos":42628,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\n⊢ IsCycle (cons h p) ↔ IsPath p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\n⊢ (¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p ∧ List.Nodup (edges p)) ∧ cons h p ≠ nil ∧ List.Nodup (support p) ↔\n    List.Nodup (support p) ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"content":"simp only [Walk.isCycle_def, Walk.isPath_def, Walk.isTrail_def, edges_cons, List.nodup_cons,\n    support_cons, List.tail_cons]"},{"tailPos":42829,"headPos":42757,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\n⊢ (¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p ∧ List.Nodup (edges p)) ∧ cons h p ≠ nil ∧ List.Nodup (support p) ↔\n    List.Nodup (support p) ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\nthis : List.Nodup (support p) → List.Nodup (edges p)\n⊢ (¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p ∧ List.Nodup (edges p)) ∧ cons h p ≠ nil ∧ List.Nodup (support p) ↔\n    List.Nodup (support p) ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"content":"have : p.support.Nodup → p.edges.Nodup := edges_nodup_of_support_nodup"},{"tailPos":42837,"headPos":42832,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\nthis : List.Nodup (support p) → List.Nodup (edges p)\n⊢ (¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p ∧ List.Nodup (edges p)) ∧ cons h p ≠ nil ∧ List.Nodup (support p) ↔\n    List.Nodup (support p) ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"tauto"},{"tailPos":42837,"headPos":42628,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\n⊢ IsCycle (cons h p) ↔ IsPath p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"simp only [Walk.isCycle_def, Walk.isPath_def, Walk.isTrail_def, edges_cons, List.nodup_cons,\n    support_cons, List.tail_cons]\n  have : p.support.Nodup → p.edges.Nodup := edges_nodup_of_support_nodup\n  tauto"},{"tailPos":42625,"headPos":42623,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\n⊢ IsCycle (cons h p) ↔ IsPath p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"by"},{"tailPos":42837,"headPos":42623,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G v u\nh : Adj G u v\n⊢ IsCycle (cons h p) ↔ IsPath p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p"],"goalsAfter":[],"content":"by\n  simp only [Walk.isCycle_def, Walk.isPath_def, Walk.isTrail_def, edges_cons, List.nodup_cons,\n    support_cons, List.tail_cons]\n  have : p.support.Nodup → p.edges.Nodup := edges_nodup_of_support_nodup\n  tauto"},{"tailPos":43036,"headPos":43026,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (IsPath p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (List.Nodup (support p))"],"content":"isPath_def"},{"tailPos":43037,"headPos":43036,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (List.Nodup (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (List.Nodup (support p))"],"content":"]"},{"tailPos":43037,"headPos":43022,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (IsPath p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (List.Nodup (support p))"],"content":"rw [isPath_def]"},{"tailPos":43054,"headPos":43040,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (List.Nodup (support p))"],"goalsAfter":[],"content":"infer_instance"},{"tailPos":43054,"headPos":43022,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (IsPath p)"],"goalsAfter":[],"content":"rw [isPath_def]\n  infer_instance"},{"tailPos":43019,"headPos":43017,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (IsPath p)"],"goalsAfter":[],"content":"by"},{"tailPos":43054,"headPos":43017,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ Decidable (IsPath p)"],"goalsAfter":[],"content":"by\n  rw [isPath_def]\n  infer_instance"},{"tailPos":43202,"headPos":43180,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p < Fintype.card V"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p + 1 ≤ Fintype.card V"],"content":"Nat.lt_iff_add_one_le,"},{"tailPos":43221,"headPos":43203,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p + 1 ≤ Fintype.card V"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ List.length (support p) ≤ Fintype.card V"],"content":"← length_support"},{"tailPos":43222,"headPos":43221,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ List.length (support p) ≤ Fintype.card V"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ List.length (support p) ≤ Fintype.card V"],"content":"]"},{"tailPos":43222,"headPos":43176,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p < Fintype.card V"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ List.length (support p) ≤ Fintype.card V"],"content":"rw [Nat.lt_iff_add_one_le, ← length_support]"},{"tailPos":43262,"headPos":43225,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ List.length (support p) ≤ Fintype.card V"],"goalsAfter":[],"content":"exact hp.support_nodup.length_le_card"},{"tailPos":43262,"headPos":43176,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p < Fintype.card V"],"goalsAfter":[],"content":"rw [Nat.lt_iff_add_one_le, ← length_support]\n  exact hp.support_nodup.length_le_card"},{"tailPos":43173,"headPos":43171,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p < Fintype.card V"],"goalsAfter":[],"content":"by"},{"tailPos":43262,"headPos":43171,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : Fintype V\nu v : V\np : Walk G u v\nhp : IsPath p\n⊢ length p < Fintype.card V"],"goalsAfter":[],"content":"by\n  rw [Nat.lt_iff_add_one_le, ← length_support]\n  exact hp.support_nodup.length_le_card"},{"tailPos":43655,"headPos":43631,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v u"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v v"],"content":"mem_support_nil_iff.mp h"},{"tailPos":43656,"headPos":43655,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v v"],"goalsAfter":[],"content":"]"},{"tailPos":43656,"headPos":43627,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v u"],"goalsAfter":[],"content":"rw [mem_support_nil_iff.mp h]"},{"tailPos":43626,"headPos":43624,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v u"],"goalsAfter":[],"content":"by"},{"tailPos":43656,"headPos":43624,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v u"],"goalsAfter":[],"content":"by rw [mem_support_nil_iff.mp h]"},{"tailPos":43718,"headPos":43711,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G v u"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nh : v ∈ support (cons r p)\n⊢ Walk G v v"],"content":"subst u"},{"tailPos":43719,"headPos":43718,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nh : v ∈ support (cons r p)\n⊢ Walk G v v"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nh : v ∈ support (cons r p)\n⊢ Walk G v v"],"content":";"},{"tailPos":43734,"headPos":43720,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nh : v ∈ support (cons r p)\n⊢ Walk G v v"],"goalsAfter":[],"content":"exact Walk.nil"},{"tailPos":43734,"headPos":43711,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G v u"],"goalsAfter":[],"content":"subst u; exact Walk.nil"},{"tailPos":43710,"headPos":43708,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G v u"],"goalsAfter":[],"content":"by"},{"tailPos":43734,"headPos":43708,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G v u"],"goalsAfter":[],"content":"by subst u; exact Walk.nil"},{"tailPos":43785,"headPos":43778,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":"cases h"},{"tailPos":43786,"headPos":43785,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":";"},{"tailPos":43806,"headPos":43787,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":"exact (hx rfl).elim"},{"tailPos":43807,"headPos":43806,"goalsBefore":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":";"},{"tailPos":43818,"headPos":43808,"goalsBefore":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"assumption"},{"tailPos":43818,"headPos":43778,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":[],"content":"cases h; exact (hx rfl).elim; assumption"},{"tailPos":43777,"headPos":43775,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":43818,"headPos":43775,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by cases h; exact (hx rfl).elim; assumption"},{"tailPos":44220,"headPos":44196,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G u v"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v v"],"content":"mem_support_nil_iff.mp h"},{"tailPos":44221,"headPos":44220,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G v v"],"goalsAfter":[],"content":"]"},{"tailPos":44221,"headPos":44192,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G u v"],"goalsAfter":[],"content":"rw [mem_support_nil_iff.mp h]"},{"tailPos":44191,"headPos":44189,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G u v"],"goalsAfter":[],"content":"by"},{"tailPos":44221,"headPos":44189,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u : V\nh : u ∈ support nil\n⊢ Walk G u v"],"goalsAfter":[],"content":"by rw [mem_support_nil_iff.mp h]"},{"tailPos":44283,"headPos":44276,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G u w"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nh : v ∈ support (cons r p)\n⊢ Walk G v w"],"content":"subst u"},{"tailPos":44304,"headPos":44290,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nh : v ∈ support (cons r p)\n⊢ Walk G v w"],"goalsAfter":[],"content":"exact cons r p"},{"tailPos":44304,"headPos":44276,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G u w"],"goalsAfter":[],"content":"subst u\n      exact cons r p"},{"tailPos":44269,"headPos":44267,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G u w"],"goalsAfter":[],"content":"by"},{"tailPos":44304,"headPos":44267,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : v = u\n⊢ Walk G u w"],"goalsAfter":[],"content":"by\n      subst u\n      exact cons r p"},{"tailPos":44341,"headPos":44334,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":"cases h"},{"tailPos":44342,"headPos":44341,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":";"},{"tailPos":44362,"headPos":44343,"goalsBefore":["case head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nhx : ¬v = v\n⊢ v ∈ support p","case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":"exact (hx rfl).elim"},{"tailPos":44363,"headPos":44362,"goalsBefore":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"content":";"},{"tailPos":44374,"headPos":44364,"goalsBefore":["case tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nhx : ¬v = u\na✝ : List.Mem u (support p)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"assumption"},{"tailPos":44374,"headPos":44334,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":[],"content":"cases h; exact (hx rfl).elim; assumption"},{"tailPos":44333,"headPos":44331,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":44374,"headPos":44331,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w✝ w v✝ : V\nr : Adj G v v✝\np : Walk G v✝ w\nu : V\nh : u ∈ support (cons r p)\nhx : ¬v = u\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by cases h; exact (hx rfl).elim; assumption"},{"tailPos":44762,"headPos":44751,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ append (takeUntil p u h) (dropUntil p u h) = p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"content":"induction p"},{"tailPos":44767,"headPos":44765,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil"],"content":"·"},{"tailPos":44791,"headPos":44772,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ append (takeUntil nil u h✝) (dropUntil nil u h✝) = nil"],"content":"mem_support_nil_iff"},{"tailPos":44792,"headPos":44791,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ append (takeUntil nil u h✝) (dropUntil nil u h✝) = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ append (takeUntil nil u h✝) (dropUntil nil u h✝) = nil"],"content":"]"},{"tailPos":44797,"headPos":44768,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ append (takeUntil nil u h✝) (dropUntil nil u h✝) = nil"],"content":"rw [mem_support_nil_iff] at h"},{"tailPos":44809,"headPos":44802,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ append (takeUntil nil u h✝) (dropUntil nil u h✝) = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ : V\nh : u✝ ∈ support nil\n⊢ append (takeUntil nil u✝ h) (dropUntil nil u✝ h) = nil"],"content":"subst u"},{"tailPos":44817,"headPos":44814,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ : V\nh : u✝ ∈ support nil\n⊢ append (takeUntil nil u✝ h) (dropUntil nil u✝ h) = nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":44817,"headPos":44768,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil"],"goalsAfter":[],"content":"rw [mem_support_nil_iff] at h\n    subst u\n    rfl"},{"tailPos":44817,"headPos":44765,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ append (takeUntil nil u h) (dropUntil nil u h) = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"content":"· rw [mem_support_nil_iff] at h\n    subst u\n    rfl"},{"tailPos":44822,"headPos":44820,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"content":"·"},{"tailPos":44830,"headPos":44823,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"goalsAfter":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh✝ : Adj G u v✝\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝))) =\n    cons h✝ p✝","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"content":"cases h"},{"tailPos":44837,"headPos":44835,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh✝ : Adj G u v✝\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝))) =\n    cons h✝ p✝","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh✝ : Adj G u v✝\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝))) =\n    cons h✝ p✝"],"content":"·"},{"tailPos":44843,"headPos":44838,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh✝ : Adj G u v✝\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [takeUntil,\n  dite_true, dropUntil, nil_append]"},{"tailPos":44843,"headPos":44835,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh✝ : Adj G u v✝\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝))) =\n    cons h✝ p✝","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"content":"· simp!"},{"tailPos":44850,"headPos":44848,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"content":"·"},{"tailPos":44861,"headPos":44851,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else dropUntil p✝ u (_ : u ∈ support p✝)) =\n    cons h✝ p✝"],"content":"simp! only"},{"tailPos":44885,"headPos":44868,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else dropUntil p✝ u (_ : u ∈ support p✝)) =\n    cons h✝ p✝"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"content":"split_ifs with h'"},{"tailPos":44889,"headPos":44886,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"content":"<;>"},{"tailPos":44900,"headPos":44890,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n        (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), append (takeUntil p✝ u✝ h) (dropUntil p✝ u✝ h) = p✝\na✝ : List.Mem u✝ (support p✝)\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝))) =\n    cons h✝ p✝"],"content":"subst_vars"},{"tailPos":44900,"headPos":44890,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"content":"subst_vars"},{"tailPos":44900,"headPos":44868,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else dropUntil p✝ u (_ : u ∈ support p✝)) =\n    cons h✝ p✝"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), append (takeUntil p✝ u✝ h) (dropUntil p✝ u✝ h) = p✝\na✝ : List.Mem u✝ (support p✝)\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝))) =\n    cons h✝ p✝","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"content":"split_ifs with h' <;> subst_vars"},{"tailPos":44904,"headPos":44901,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), append (takeUntil p✝ u✝ h) (dropUntil p✝ u✝ h) = p✝\na✝ : List.Mem u✝ (support p✝)\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝))) =\n    cons h✝ p✝","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), append (takeUntil p✝ u✝ h) (dropUntil p✝ u✝ h) = p✝\na✝ : List.Mem u✝ (support p✝)\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝))) =\n    cons h✝ p✝","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"content":"<;>"},{"tailPos":44913,"headPos":44905,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), append (takeUntil p✝ u✝ h) (dropUntil p✝ u✝ h) = p✝\na✝ : List.Mem u✝ (support p✝)\n⊢ append\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝)))\n      (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u✝)\n        (_ : List.Mem u✝ (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":44913,"headPos":44905,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ append (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝))) (dropUntil p✝ u (_ : u ∈ support p✝)) = cons h✝ p✝"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":44913,"headPos":44868,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))\n      (if h : u✝ = u then\n        Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G x w✝) (fun h => cons h✝ p✝) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝))\n      else dropUntil p✝ u (_ : u ∈ support p✝)) =\n    cons h✝ p✝"],"goalsAfter":[],"content":"split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":44913,"headPos":44851,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":[],"content":"simp! only\n      split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":44913,"headPos":44848,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\na✝ : List.Mem u (support p✝)\n⊢ append (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))\n      (dropUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝))) =\n    cons h✝ p✝"],"goalsAfter":[],"content":"· simp! only\n      split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":44913,"headPos":44823,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"goalsAfter":[],"content":"cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":44913,"headPos":44820,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), append (takeUntil p✝ u h) (dropUntil p✝ u h) = p✝\nh : u ∈ support (cons h✝ p✝)\n⊢ append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h) = cons h✝ p✝"],"goalsAfter":[],"content":"· cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":44913,"headPos":44751,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ append (takeUntil p u h) (dropUntil p u h) = p"],"goalsAfter":[],"content":"induction p\n  · rw [mem_support_nil_iff] at h\n    subst u\n    rfl\n  · cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":44748,"headPos":44746,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ append (takeUntil p u h) (dropUntil p u h) = p"],"goalsAfter":[],"content":"by"},{"tailPos":44913,"headPos":44746,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ append (takeUntil p u h) (dropUntil p u h) = p"],"goalsAfter":[],"content":"by\n  induction p\n  · rw [mem_support_nil_iff] at h\n    subst u\n    rfl\n  · cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> subst_vars <;> simp [*]"},{"tailPos":45187,"headPos":45176,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ ∃ q r, p = append q r"],"goalsAfter":["case mp\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p → ∃ q r, p = append q r","case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"content":"constructor"},{"tailPos":45192,"headPos":45190,"goalsBefore":["case mp\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p → ∃ q r, p = append q r","case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"goalsAfter":["case mp\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p → ∃ q r, p = append q r"],"content":"·"},{"tailPos":45240,"headPos":45193,"goalsBefore":["case mp\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p → ∃ q r, p = append q r"],"goalsAfter":[],"content":"exact fun h => ⟨_, _, (p.take_spec h).symm⟩"},{"tailPos":45240,"headPos":45190,"goalsBefore":["case mp\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p → ∃ q r, p = append q r","case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"goalsAfter":["case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"content":"· exact fun h => ⟨_, _, (p.take_spec h).symm⟩"},{"tailPos":45245,"headPos":45243,"goalsBefore":["case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"goalsAfter":["case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"content":"·"},{"tailPos":45268,"headPos":45246,"goalsBefore":["case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"goalsAfter":["case mpr.intro.intro\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\nq : Walk G u w\nr : Walk G w v\n⊢ w ∈ support (append q r)"],"content":"rintro ⟨q, r, rfl⟩"},{"tailPos":45356,"headPos":45273,"goalsBefore":["case mpr.intro.intro\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\nq : Walk G u w\nr : Walk G w v\n⊢ w ∈ support (append q r)"],"goalsAfter":[],"content":"simp only [mem_support_append_iff, end_mem_support, start_mem_support, or_self_iff]"},{"tailPos":45356,"headPos":45246,"goalsBefore":["case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"goalsAfter":[],"content":"rintro ⟨q, r, rfl⟩\n    simp only [mem_support_append_iff, end_mem_support, start_mem_support, or_self_iff]"},{"tailPos":45356,"headPos":45243,"goalsBefore":["case mpr\nV✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ (∃ q r, p = append q r) → w ∈ support p"],"goalsAfter":[],"content":"· rintro ⟨q, r, rfl⟩\n    simp only [mem_support_append_iff, end_mem_support, start_mem_support, or_self_iff]"},{"tailPos":45356,"headPos":45176,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ ∃ q r, p = append q r"],"goalsAfter":[],"content":"constructor\n  · exact fun h => ⟨_, _, (p.take_spec h).symm⟩\n  · rintro ⟨q, r, rfl⟩\n    simp only [mem_support_append_iff, end_mem_support, start_mem_support, or_self_iff]"},{"tailPos":45356,"headPos":45164,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ ∃ q r, p = append q r"],"goalsAfter":[],"content":"classical\n  constructor\n  · exact fun h => ⟨_, _, (p.take_spec h).symm⟩\n  · rintro ⟨q, r, rfl⟩\n    simp only [mem_support_append_iff, end_mem_support, start_mem_support, or_self_iff]"},{"tailPos":45161,"headPos":45159,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ ∃ q r, p = append q r"],"goalsAfter":[],"content":"by"},{"tailPos":45356,"headPos":45159,"goalsBefore":["V✝ : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V✝\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V✝\nV : Type u\nG : SimpleGraph V\nu v w : V\np : Walk G u v\n⊢ w ∈ support p ↔ ∃ q r, p = append q r"],"goalsAfter":[],"content":"by\n  classical\n  constructor\n  · exact fun h => ⟨_, _, (p.take_spec h).symm⟩\n  · rintro ⟨q, r, rfl⟩\n    simp only [mem_support_append_iff, end_mem_support, start_mem_support, or_self_iff]"},{"tailPos":45621,"headPos":45610,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ List.count u (support (takeUntil p u h)) = 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"content":"induction p"},{"tailPos":45626,"headPos":45624,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1"],"content":"·"},{"tailPos":45650,"headPos":45631,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ List.count u (support (takeUntil nil u h✝)) = 1"],"content":"mem_support_nil_iff"},{"tailPos":45651,"headPos":45650,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ List.count u (support (takeUntil nil u h✝)) = 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ List.count u (support (takeUntil nil u h✝)) = 1"],"content":"]"},{"tailPos":45656,"headPos":45627,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ List.count u (support (takeUntil nil u h✝)) = 1"],"content":"rw [mem_support_nil_iff] at h"},{"tailPos":45668,"headPos":45661,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh✝ : u ∈ support nil\nh : u = u✝\n⊢ List.count u (support (takeUntil nil u h✝)) = 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ : V\nh : u✝ ∈ support nil\n⊢ List.count u✝ (support (takeUntil nil u✝ h)) = 1"],"content":"subst u"},{"tailPos":45678,"headPos":45673,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ : V\nh : u✝ ∈ support nil\n⊢ List.count u✝ (support (takeUntil nil u✝ h)) = 1"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [support,\n  List.nodup_cons, List.find?, List.not_mem_nil, not_false_eq_true, List.nodup_nil, and_self, List.mem_singleton,\n  List.count_eq_one_of_mem]"},{"tailPos":45678,"headPos":45627,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1"],"goalsAfter":[],"content":"rw [mem_support_nil_iff] at h\n    subst u\n    simp!"},{"tailPos":45678,"headPos":45624,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ : V\nh : u ∈ support nil\n⊢ List.count u (support (takeUntil nil u h)) = 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"content":"· rw [mem_support_nil_iff] at h\n    subst u\n    simp!"},{"tailPos":45683,"headPos":45681,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"content":"·"},{"tailPos":45691,"headPos":45684,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"goalsAfter":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh✝ : Adj G u v✝\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))) = 1","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"content":"cases h"},{"tailPos":45698,"headPos":45696,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh✝ : Adj G u v✝\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))) = 1","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"goalsAfter":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh✝ : Adj G u v✝\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))) = 1"],"content":"·"},{"tailPos":45704,"headPos":45699,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh✝ : Adj G u v✝\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))) = 1"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [takeUntil,\n  dite_true, support_nil, List.nodup_cons, List.find?, List.not_mem_nil, not_false_eq_true, List.nodup_nil, and_self,\n  List.mem_singleton, List.count_eq_one_of_mem]"},{"tailPos":45704,"headPos":45696,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v✝ w✝ : V\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh✝ : Adj G u v✝\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u :: support p✝)))) = 1","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"content":"· simp!"},{"tailPos":45711,"headPos":45709,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"content":"·"},{"tailPos":45722,"headPos":45712,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u\n      (support\n        (if h : u✝ = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n            (_ : List.Mem u (u✝ :: support p✝))\n        else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) =\n    1"],"content":"simp! only"},{"tailPos":45746,"headPos":45729,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u\n      (support\n        (if h : u✝ = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n            (_ : List.Mem u (u✝ :: support p✝))\n        else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"split_ifs with h'"},{"tailPos":45750,"headPos":45747,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"<;>"},{"tailPos":45762,"headPos":45755,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"content":"eq_comm"},{"tailPos":45763,"headPos":45762,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"content":"]"},{"tailPos":45769,"headPos":45751,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : u✝ = u\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"content":"rw [eq_comm] at h'"},{"tailPos":45762,"headPos":45755,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"eq_comm"},{"tailPos":45763,"headPos":45762,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"]"},{"tailPos":45769,"headPos":45751,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh' : ¬u✝ = u\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"rw [eq_comm] at h'"},{"tailPos":45769,"headPos":45729,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u\n      (support\n        (if h : u✝ = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n            (_ : List.Mem u (u✝ :: support p✝))\n        else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"split_ifs with h' <;> rw [eq_comm] at h'"},{"tailPos":45773,"headPos":45770,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"<;>"},{"tailPos":45784,"headPos":45774,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : u✝ = u\nh' : u = u✝\n⊢ List.count u\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n          (_ : List.Mem u (u✝ :: support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), List.count u✝ (support (takeUntil p✝ u✝ h)) = 1\na✝ : List.Mem u✝ (support p✝)\nh' : u✝ = u✝\n⊢ List.count u✝\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n          (_ : List.Mem u✝ (u✝ :: support p✝)))) =\n    1"],"content":"subst_vars"},{"tailPos":45784,"headPos":45774,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"subst_vars"},{"tailPos":45784,"headPos":45729,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u\n      (support\n        (if h : u✝ = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n            (_ : List.Mem u (u✝ :: support p✝))\n        else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) =\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), List.count u✝ (support (takeUntil p✝ u✝ h)) = 1\na✝ : List.Mem u✝ (support p✝)\nh' : u✝ = u✝\n⊢ List.count u✝\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n          (_ : List.Mem u✝ (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars"},{"tailPos":45788,"headPos":45785,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), List.count u✝ (support (takeUntil p✝ u✝ h)) = 1\na✝ : List.Mem u✝ (support p✝)\nh' : u✝ = u✝\n⊢ List.count u✝\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n          (_ : List.Mem u✝ (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), List.count u✝ (support (takeUntil p✝ u✝ h)) = 1\na✝ : List.Mem u✝ (support p✝)\nh' : u✝ = u✝\n⊢ List.count u✝\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n          (_ : List.Mem u✝ (u✝ :: support p✝)))) =\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"content":"<;>"},{"tailPos":45815,"headPos":45789,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u✝ ∈ support p✝), List.count u✝ (support (takeUntil p✝ u✝ h)) = 1\na✝ : List.Mem u✝ (support p✝)\nh' : u✝ = u✝\n⊢ List.count u✝\n      (support\n        (Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u✝)\n          (_ : List.Mem u✝ (u✝ :: support p✝)))) =\n    1"],"goalsAfter":[],"content":"simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45789,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\nh'✝ : ¬u✝ = u\nh' : ¬u = u✝\n⊢ List.count u (support (cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) = 1"],"goalsAfter":[],"content":"simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45729,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u\n      (support\n        (if h : u✝ = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u✝ :: support p✝ → Walk G u✝ x) (fun h => nil) (_ : u✝ = u)\n            (_ : List.Mem u (u✝ :: support p✝))\n        else cons h✝ (takeUntil p✝ u (_ : u ∈ support p✝)))) =\n    1"],"goalsAfter":[],"content":"split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45712,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"goalsAfter":[],"content":"simp! only\n      split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45709,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\na✝ : List.Mem u (support p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u (_ : List.Mem u (u✝ :: support p✝)))) = 1"],"goalsAfter":[],"content":"· simp! only\n      split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45684,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"goalsAfter":[],"content":"cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45681,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (h : u ∈ support p✝), List.count u (support (takeUntil p✝ u h)) = 1\nh : u ∈ support (cons h✝ p✝)\n⊢ List.count u (support (takeUntil (cons h✝ p✝) u h)) = 1"],"goalsAfter":[],"content":"· cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":45815,"headPos":45610,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ List.count u (support (takeUntil p u h)) = 1"],"goalsAfter":[],"content":"induction p\n  · rw [mem_support_nil_iff] at h\n    subst u\n    simp!\n  · cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":45607,"headPos":45605,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ List.count u (support (takeUntil p u h)) = 1"],"goalsAfter":[],"content":"by"},{"tailPos":45815,"headPos":45605,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ List.count u (support (takeUntil p u h)) = 1"],"goalsAfter":[],"content":"by\n  induction p\n  · rw [mem_support_nil_iff] at h\n    subst u\n    simp!\n  · cases h\n    · simp!\n    · simp! only\n      split_ifs with h' <;> rw [eq_comm] at h' <;> subst_vars <;> simp! [*, List.count_cons]"},{"tailPos":46119,"headPos":46081,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p u h)) ≤ 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"content":"induction' p with u' u' v' w' ha p' ih"},{"tailPos":46124,"headPos":46122,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1"],"content":"·"},{"tailPos":46148,"headPos":46129,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝¹ : u ∈ support p\nx u' : V\nh✝ : u ∈ support nil\nh : u = u'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h✝)) ≤ 1"],"content":"mem_support_nil_iff"},{"tailPos":46149,"headPos":46148,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝¹ : u ∈ support p\nx u' : V\nh✝ : u ∈ support nil\nh : u = u'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h✝)) ≤ 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝¹ : u ∈ support p\nx u' : V\nh✝ : u ∈ support nil\nh : u = u'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h✝)) ≤ 1"],"content":"]"},{"tailPos":46154,"headPos":46125,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝¹ : u ∈ support p\nx u' : V\nh✝ : u ∈ support nil\nh : u = u'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h✝)) ≤ 1"],"content":"rw [mem_support_nil_iff] at h"},{"tailPos":46166,"headPos":46159,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝¹ : u ∈ support p\nx u' : V\nh✝ : u ∈ support nil\nh : u = u'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h✝)) ≤ 1"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w : V\np : Walk G v w\nx u' : V\nh✝ : u' ∈ support p\nh : u' ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u', x)) (edges (takeUntil nil u' h)) ≤ 1"],"content":"subst u"},{"tailPos":46176,"headPos":46171,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w : V\np : Walk G v w\nx u' : V\nh✝ : u' ∈ support p\nh : u' ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u', x)) (edges (takeUntil nil u' h)) ≤ 1"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [takeUntil,\n  eq_mpr_eq_cast, cast_eq, edges_nil, List.nodup_nil, List.find?, List.not_mem_nil, List.count_nil, zero_le]"},{"tailPos":46176,"headPos":46125,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1"],"goalsAfter":[],"content":"rw [mem_support_nil_iff] at h\n    subst u\n    simp!"},{"tailPos":46176,"headPos":46122,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' : V\nh : u ∈ support nil\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"content":"· rw [mem_support_nil_iff] at h\n    subst u\n    simp!"},{"tailPos":46181,"headPos":46179,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"content":"·"},{"tailPos":46189,"headPos":46182,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"goalsAfter":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx v' w' : V\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nha : Adj G u v'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u :: support p')))) ≤\n    1","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"content":"cases h"},{"tailPos":46196,"headPos":46194,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx v' w' : V\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nha : Adj G u v'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u :: support p')))) ≤\n    1","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx v' w' : V\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nha : Adj G u v'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u :: support p')))) ≤\n    1"],"content":"·"},{"tailPos":46202,"headPos":46197,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx v' w' : V\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nha : Adj G u v'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u :: support p')))) ≤\n    1"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [takeUntil,\n  dite_true, edges_nil, List.nodup_nil, List.find?, List.not_mem_nil, List.count_nil, zero_le]"},{"tailPos":46202,"headPos":46194,"goalsBefore":["case cons.head\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx v' w' : V\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nha : Adj G u v'\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u :: support p')))) ≤\n    1","case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"content":"· simp!"},{"tailPos":46209,"headPos":46207,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"content":"·"},{"tailPos":46220,"headPos":46210,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (if h : u' = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n            (_ : List.Mem u (u' :: support p'))\n        else cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"content":"simp! only"},{"tailPos":46244,"headPos":46227,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (if h : u' = u then\n          Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n            (_ : List.Mem u (u' :: support p'))\n        else cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n          (_ : List.Mem u (u' :: support p')))) ≤\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"split_ifs with h'"},{"tailPos":46253,"headPos":46251,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n          (_ : List.Mem u (u' :: support p')))) ≤\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n          (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"content":"·"},{"tailPos":46262,"headPos":46254,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n          (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w : V\np : Walk G v w\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nh : u' ∈ support p\nih : ∀ (h : u' ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u', x)) (edges (takeUntil p' u' h)) ≤ 1\na✝ : List.Mem u' (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u', x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u')\n          (_ : List.Mem u' (u' :: support p')))) ≤\n    1"],"content":"subst h'"},{"tailPos":46275,"headPos":46271,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nv w : V\np : Walk G v w\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nh : u' ∈ support p\nih : ∀ (h : u' ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u', x)) (edges (takeUntil p' u' h)) ≤ 1\na✝ : List.Mem u' (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u', x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u')\n          (_ : List.Mem u' (u' :: support p')))) ≤\n    1"],"goalsAfter":[],"content":"simp only [edges_nil, List.nodup_nil, List.find?, List.not_mem_nil, List.count_nil, zero_le]"},{"tailPos":46275,"headPos":46254,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n          (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":[],"content":"subst h'\n        simp"},{"tailPos":46275,"headPos":46251,"goalsBefore":["case cons.tail.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges\n        (Eq.rec (motive := fun x x_1 => x ∈ u' :: support p' → Walk G u' x) (fun h => nil) (_ : u' = u)\n          (_ : List.Mem u (u' :: support p')))) ≤\n    1","case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"· subst h'\n        simp"},{"tailPos":46284,"headPos":46282,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"·"},{"tailPos":46300,"headPos":46289,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (Quotient.mk (Sym2.Rel.setoid V) (u', v') :: edges (takeUntil p' u (_ : u ∈ support p'))) ≤\n    1"],"content":"edges_cons,"},{"tailPos":46316,"headPos":46301,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (Quotient.mk (Sym2.Rel.setoid V) (u', v') :: edges (takeUntil p' u (_ : u ∈ support p'))) ≤\n    1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ (if Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v') then\n      Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))))\n    else List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"content":"List.count_cons"},{"tailPos":46317,"headPos":46316,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ (if Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v') then\n      Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))))\n    else List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ (if Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v') then\n      Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))))\n    else List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"content":"]"},{"tailPos":46317,"headPos":46285,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ (if Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v') then\n      Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))))\n    else List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"content":"rw [edges_cons, List.count_cons]"},{"tailPos":46344,"headPos":46326,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ (if Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v') then\n      Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))))\n    else List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤\n    1"],"goalsAfter":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1","case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"content":"split_ifs with h''"},{"tailPos":46355,"headPos":46353,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1","case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"·"},{"tailPos":46371,"headPos":46360,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : u = u' ∧ x = v' ∨ u = v' ∧ x = u'\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"Sym2.eq_iff"},{"tailPos":46372,"headPos":46371,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : u = u' ∧ x = v' ∨ u = v' ∧ x = u'\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : u = u' ∧ x = v' ∨ u = v' ∧ x = u'\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"]"},{"tailPos":46379,"headPos":46356,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : u = u' ∧ x = v' ∨ u = v' ∧ x = u'\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"rw [Sym2.eq_iff] at h''"},{"tailPos":46435,"headPos":46390,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : u = u' ∧ x = v' ∨ u = v' ∧ x = u'\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬u = u\np' : Walk G x w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nha : Adj G u x\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1","case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''"},{"tailPos":46448,"headPos":46446,"goalsBefore":["case cons.tail.inr.inl.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬u = u\np' : Walk G x w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nha : Adj G u x\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1","case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬u = u\np' : Walk G x w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nha : Adj G u x\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"·"},{"tailPos":46468,"headPos":46449,"goalsBefore":["case cons.tail.inr.inl.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬u = u\np' : Walk G x w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nha : Adj G u x\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":[],"content":"exact (h' rfl).elim"},{"tailPos":46468,"headPos":46446,"goalsBefore":["case cons.tail.inr.inl.inl.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬u = u\np' : Walk G x w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nha : Adj G u x\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1","case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"· exact (h' rfl).elim"},{"tailPos":46481,"headPos":46479,"goalsBefore":["case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"content":"·"},{"tailPos":46490,"headPos":46482,"goalsBefore":["case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inl.inr.intro.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nh' : ¬x = u\nha : Adj G x u\nih : ∀ (h : u ∈ support nil), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1\na✝ : List.Mem u (support nil)\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u (_ : u ∈ support nil)))) ≤ 1","case cons.tail.inr.inl.inr.intro.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬x = u\nha : Adj G x u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ w'\nih :\n  ∀ (h : u ∈ support (cons h✝ p✝)),\n    List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons h✝ p✝) u h)) ≤ 1\na✝ : List.Mem u (support (cons h✝ p✝))\n⊢ Nat.succ\n      (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n        (edges (takeUntil (cons h✝ p✝) u (_ : u ∈ support (cons h✝ p✝))))) ≤\n    1"],"content":"cases p'"},{"tailPos":46494,"headPos":46491,"goalsBefore":["case cons.tail.inr.inl.inr.intro.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nh' : ¬x = u\nha : Adj G x u\nih : ∀ (h : u ∈ support nil), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1\na✝ : List.Mem u (support nil)\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u (_ : u ∈ support nil)))) ≤ 1","case cons.tail.inr.inl.inr.intro.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬x = u\nha : Adj G x u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ w'\nih :\n  ∀ (h : u ∈ support (cons h✝ p✝)),\n    List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons h✝ p✝) u h)) ≤ 1\na✝ : List.Mem u (support (cons h✝ p✝))\n⊢ Nat.succ\n      (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n        (edges (takeUntil (cons h✝ p✝) u (_ : u ∈ support (cons h✝ p✝))))) ≤\n    1"],"goalsAfter":["case cons.tail.inr.inl.inr.intro.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nh' : ¬x = u\nha : Adj G x u\nih : ∀ (h : u ∈ support nil), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1\na✝ : List.Mem u (support nil)\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u (_ : u ∈ support nil)))) ≤ 1","case cons.tail.inr.inl.inr.intro.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬x = u\nha : Adj G x u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ w'\nih :\n  ∀ (h : u ∈ support (cons h✝ p✝)),\n    List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons h✝ p✝) u h)) ≤ 1\na✝ : List.Mem u (support (cons h✝ p✝))\n⊢ Nat.succ\n      (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n        (edges (takeUntil (cons h✝ p✝) u (_ : u ∈ support (cons h✝ p✝))))) ≤\n    1"],"content":"<;>"},{"tailPos":46500,"headPos":46495,"goalsBefore":["case cons.tail.inr.inl.inr.intro.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nh' : ¬x = u\nha : Adj G x u\nih : ∀ (h : u ∈ support nil), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u h)) ≤ 1\na✝ : List.Mem u (support nil)\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil nil u (_ : u ∈ support nil)))) ≤ 1"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [takeUntil,\n  eq_mpr_eq_cast, cast_eq, edges_nil, List.nodup_nil, List.find?, List.not_mem_nil, List.count_nil, le_refl]"},{"tailPos":46500,"headPos":46495,"goalsBefore":["case cons.tail.inr.inl.inr.intro.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\nh' : ¬x = u\nha : Adj G x u\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ w'\nih :\n  ∀ (h : u ∈ support (cons h✝ p✝)),\n    List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons h✝ p✝) u h)) ≤ 1\na✝ : List.Mem u (support (cons h✝ p✝))\n⊢ Nat.succ\n      (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n        (edges (takeUntil (cons h✝ p✝) u (_ : u ∈ support (cons h✝ p✝))))) ≤\n    1"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [takeUntil,\n  eq_mpr_eq_cast, cast_eq, edges_nil, List.nodup_nil, List.find?, List.not_mem_nil, List.count_nil, le_refl]"},{"tailPos":46500,"headPos":46482,"goalsBefore":["case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":[],"content":"cases p' <;> simp!"},{"tailPos":46500,"headPos":46479,"goalsBefore":["case cons.tail.inr.inl.inr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx w' : V\np' : Walk G u w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬x = u\nha : Adj G x u\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":[],"content":"· cases p' <;> simp!"},{"tailPos":46500,"headPos":46356,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":[],"content":"rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!"},{"tailPos":46500,"headPos":46353,"goalsBefore":["case cons.tail.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ Nat.succ (List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p')))) ≤ 1","case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"content":"· rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!"},{"tailPos":46511,"headPos":46509,"goalsBefore":["case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"goalsAfter":["case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"content":"·"},{"tailPos":46520,"headPos":46512,"goalsBefore":["case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"goalsAfter":[],"content":"apply ih"},{"tailPos":46520,"headPos":46509,"goalsBefore":["case cons.tail.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\nh'' : ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) = Quotient.mk (Sym2.Rel.setoid V) (u', v')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u (_ : u ∈ support p'))) ≤ 1"],"goalsAfter":[],"content":"· apply ih"},{"tailPos":46520,"headPos":46285,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":[],"content":"rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46520,"headPos":46282,"goalsBefore":["case cons.tail.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\nh' : ¬u' = u\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (cons ha (takeUntil p' u (_ : u ∈ support p')))) ≤ 1"],"goalsAfter":[],"content":"· rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46520,"headPos":46210,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":[],"content":"simp! only\n      split_ifs with h'\n      · subst h'\n        simp\n      · rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46520,"headPos":46207,"goalsBefore":["case cons.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\na✝ : List.Mem u (support p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x))\n      (edges (takeUntil (cons ha p') u (_ : List.Mem u (u' :: support p')))) ≤\n    1"],"goalsAfter":[],"content":"· simp! only\n      split_ifs with h'\n      · subst h'\n        simp\n      · rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46520,"headPos":46182,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"goalsAfter":[],"content":"cases h\n    · simp!\n    · simp! only\n      split_ifs with h'\n      · subst h'\n        simp\n      · rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46520,"headPos":46179,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh✝ : u ∈ support p\nx u' v' w' : V\nha : Adj G u' v'\np' : Walk G v' w'\nih : ∀ (h : u ∈ support p'), List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p' u h)) ≤ 1\nh : u ∈ support (cons ha p')\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil (cons ha p') u h)) ≤ 1"],"goalsAfter":[],"content":"· cases h\n    · simp!\n    · simp! only\n      split_ifs with h'\n      · subst h'\n        simp\n      · rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46520,"headPos":46081,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p u h)) ≤ 1"],"goalsAfter":[],"content":"induction' p with u' u' v' w' ha p' ih\n  · rw [mem_support_nil_iff] at h\n    subst u\n    simp!\n  · cases h\n    · simp!\n    · simp! only\n      split_ifs with h'\n      · subst h'\n        simp\n      · rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46078,"headPos":46076,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p u h)) ≤ 1"],"goalsAfter":[],"content":"by"},{"tailPos":46520,"headPos":46076,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\n⊢ List.count (Quotient.mk (Sym2.Rel.setoid V) (u, x)) (edges (takeUntil p u h)) ≤ 1"],"goalsAfter":[],"content":"by\n  induction' p with u' u' v' w' ha p' ih\n  · rw [mem_support_nil_iff] at h\n    subst u\n    simp!\n  · cases h\n    · simp!\n    · simp! only\n      split_ifs with h'\n      · subst h'\n        simp\n      · rw [edges_cons, List.count_cons]\n        split_ifs with h''\n        · rw [Sym2.eq_iff] at h''\n          obtain ⟨rfl, rfl⟩ | ⟨rfl, rfl⟩ := h''\n          · exact (h' rfl).elim\n          · cases p' <;> simp!\n        · apply ih"},{"tailPos":46818,"headPos":46808,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"content":"subst_vars"},{"tailPos":46819,"headPos":46818,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"content":";"},{"tailPos":46827,"headPos":46820,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"goalsAfter":[],"content":"exact h"},{"tailPos":46827,"headPos":46808,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"subst_vars; exact h"},{"tailPos":46807,"headPos":46805,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":46827,"headPos":46805,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by subst_vars; exact h"},{"tailPos":46860,"headPos":46850,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ takeUntil (Walk.copy p hv hw) u h = Walk.copy (takeUntil p u (_ : u ∈ support p)) hv (_ : u = u)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ takeUntil (Walk.copy p (_ : v' = v') (_ : w' = w')) u h =\n    Walk.copy (takeUntil p u (_ : u ∈ support p)) (_ : v' = v') (_ : u = u)"],"content":"subst_vars"},{"tailPos":46866,"headPos":46863,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ takeUntil (Walk.copy p (_ : v' = v') (_ : w' = w')) u h =\n    Walk.copy (takeUntil p u (_ : u ∈ support p)) (_ : v' = v') (_ : u = u)"],"goalsAfter":[],"content":"rfl"},{"tailPos":46866,"headPos":46850,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ takeUntil (Walk.copy p hv hw) u h = Walk.copy (takeUntil p u (_ : u ∈ support p)) hv (_ : u = u)"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":46847,"headPos":46845,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ takeUntil (Walk.copy p hv hw) u h = Walk.copy (takeUntil p u (_ : u ∈ support p)) hv (_ : u = u)"],"goalsAfter":[],"content":"by"},{"tailPos":46866,"headPos":46845,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ takeUntil (Walk.copy p hv hw) u h = Walk.copy (takeUntil p u (_ : u ∈ support p)) hv (_ : u = u)"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":47136,"headPos":47126,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"content":"subst_vars"},{"tailPos":47137,"headPos":47136,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"content":";"},{"tailPos":47145,"headPos":47138,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ u ∈ support p"],"goalsAfter":[],"content":"exact h"},{"tailPos":47145,"headPos":47126,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"subst_vars; exact h"},{"tailPos":47125,"headPos":47123,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":47145,"headPos":47123,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ u ∈ support p"],"goalsAfter":[],"content":"by subst_vars; exact h"},{"tailPos":47178,"headPos":47168,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ dropUntil (Walk.copy p hv hw) u h = Walk.copy (dropUntil p u (_ : u ∈ support p)) (_ : u = u) hw"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ dropUntil (Walk.copy p (_ : v' = v') (_ : w' = w')) u h =\n    Walk.copy (dropUntil p u (_ : u ∈ support p)) (_ : u = u) (_ : w' = w')"],"content":"subst_vars"},{"tailPos":47184,"headPos":47181,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v' w' : V\np : Walk G v' w'\nh : u ∈ support (Walk.copy p (_ : v' = v') (_ : w' = w'))\n⊢ dropUntil (Walk.copy p (_ : v' = v') (_ : w' = w')) u h =\n    Walk.copy (dropUntil p u (_ : u ∈ support p)) (_ : u = u) (_ : w' = w')"],"goalsAfter":[],"content":"rfl"},{"tailPos":47184,"headPos":47168,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ dropUntil (Walk.copy p hv hw) u h = Walk.copy (dropUntil p u (_ : u ∈ support p)) (_ : u = u) hw"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":47165,"headPos":47163,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ dropUntil (Walk.copy p hv hw) u h = Walk.copy (dropUntil p u (_ : u ∈ support p)) (_ : u = u) hw"],"goalsAfter":[],"content":"by"},{"tailPos":47184,"headPos":47163,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w v' w' : V\np : Walk G v w\nhv : v = v'\nhw : w = w'\nh : u ∈ support (Walk.copy p hv hw)\n⊢ dropUntil (Walk.copy p hv hw) u h = Walk.copy (dropUntil p u (_ : u ∈ support p)) (_ : u = u) hw"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":47431,"headPos":47413,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (append (takeUntil p u h) (dropUntil p u h))"],"content":"← take_spec p h,"},{"tailPos":47454,"headPos":47432,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (append (takeUntil p u h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"content":"mem_support_append_iff"},{"tailPos":47455,"headPos":47454,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"content":"]"},{"tailPos":47455,"headPos":47409,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"content":"rw [← take_spec p h, mem_support_append_iff]"},{"tailPos":47473,"headPos":47458,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"goalsAfter":[],"content":"exact Or.inl hx"},{"tailPos":47473,"headPos":47409,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":[],"content":"rw [← take_spec p h, mem_support_append_iff]\n  exact Or.inl hx"},{"tailPos":47406,"headPos":47404,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":47473,"headPos":47404,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (takeUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":[],"content":"by\n  rw [← take_spec p h, mem_support_append_iff]\n  exact Or.inl hx"},{"tailPos":47740,"headPos":47722,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (append (takeUntil p u h) (dropUntil p u h))"],"content":"← take_spec p h,"},{"tailPos":47763,"headPos":47741,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (append (takeUntil p u h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"content":"mem_support_append_iff"},{"tailPos":47764,"headPos":47763,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"content":"]"},{"tailPos":47764,"headPos":47718,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"content":"rw [← take_spec p h, mem_support_append_iff]"},{"tailPos":47782,"headPos":47767,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support (takeUntil p u h) ∨ x ∈ support (dropUntil p u h)"],"goalsAfter":[],"content":"exact Or.inr hx"},{"tailPos":47782,"headPos":47718,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":[],"content":"rw [← take_spec p h, mem_support_append_iff]\n  exact Or.inr hx"},{"tailPos":47715,"headPos":47713,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":47782,"headPos":47713,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : V\nhx : x ∈ support (dropUntil p u h)\n⊢ x ∈ support p"],"goalsAfter":[],"content":"by\n  rw [← take_spec p h, mem_support_append_iff]\n  exact Or.inr hx"},{"tailPos":48043,"headPos":48025,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (append (takeUntil p u h) (dropUntil p u h))"],"content":"← take_spec p h,"},{"tailPos":48057,"headPos":48044,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (append (takeUntil p u h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ++ darts (dropUntil p u h)"],"content":"darts_append,"},{"tailPos":48073,"headPos":48058,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ++ darts (dropUntil p u h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"content":"List.mem_append"},{"tailPos":48074,"headPos":48073,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"content":"]"},{"tailPos":48074,"headPos":48021,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"content":"rw [← take_spec p h, darts_append, List.mem_append]"},{"tailPos":48092,"headPos":48077,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"goalsAfter":[],"content":"exact Or.inl hx"},{"tailPos":48092,"headPos":48021,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":[],"content":"rw [← take_spec p h, darts_append, List.mem_append]\n  exact Or.inl hx"},{"tailPos":48018,"headPos":48016,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":[],"content":"by"},{"tailPos":48092,"headPos":48016,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (takeUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":[],"content":"by\n  rw [← take_spec p h, darts_append, List.mem_append]\n  exact Or.inl hx"},{"tailPos":48349,"headPos":48331,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (append (takeUntil p u h) (dropUntil p u h))"],"content":"← take_spec p h,"},{"tailPos":48363,"headPos":48350,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (append (takeUntil p u h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ++ darts (dropUntil p u h)"],"content":"darts_append,"},{"tailPos":48379,"headPos":48364,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ++ darts (dropUntil p u h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"content":"List.mem_append"},{"tailPos":48380,"headPos":48379,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"content":"]"},{"tailPos":48380,"headPos":48327,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"content":"rw [← take_spec p h, darts_append, List.mem_append]"},{"tailPos":48398,"headPos":48383,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts (takeUntil p u h) ∨ x ∈ darts (dropUntil p u h)"],"goalsAfter":[],"content":"exact Or.inr hx"},{"tailPos":48398,"headPos":48327,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":[],"content":"rw [← take_spec p h, darts_append, List.mem_append]\n  exact Or.inr hx"},{"tailPos":48324,"headPos":48322,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":[],"content":"by"},{"tailPos":48398,"headPos":48322,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nx : Dart G\nhx : x ∈ darts (dropUntil p u h)\n⊢ x ∈ darts p"],"goalsAfter":[],"content":"by\n  rw [← take_spec p h, darts_append, List.mem_append]\n  exact Or.inr hx"},{"tailPos":49197,"headPos":49152,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (append (takeUntil p u h) (dropUntil p u h)) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"content":"have := congr_arg Walk.length (p.take_spec h)"},{"tailPos":49217,"headPos":49204,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (append (takeUntil p u h) (dropUntil p u h)) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"content":"length_append"},{"tailPos":49218,"headPos":49217,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"content":"]"},{"tailPos":49226,"headPos":49200,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (append (takeUntil p u h) (dropUntil p u h)) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"content":"rw [length_append] at this"},{"tailPos":49252,"headPos":49229,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":[],"content":"exact Nat.le.intro this"},{"tailPos":49252,"headPos":49152,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":[],"content":"have := congr_arg Walk.length (p.take_spec h)\n  rw [length_append] at this\n  exact Nat.le.intro this"},{"tailPos":49149,"headPos":49147,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":[],"content":"by"},{"tailPos":49252,"headPos":49147,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (takeUntil p u h) ≤ length p"],"goalsAfter":[],"content":"by\n  have := congr_arg Walk.length (p.take_spec h)\n  rw [length_append] at this\n  exact Nat.le.intro this"},{"tailPos":49513,"headPos":49468,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (append (takeUntil p u h) (dropUntil p u h)) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"content":"have := congr_arg Walk.length (p.take_spec h)"},{"tailPos":49534,"headPos":49520,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (append (takeUntil p u h) (dropUntil p u h)) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"content":"length_append,"},{"tailPos":49543,"headPos":49535,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (takeUntil p u h) + length (dropUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (dropUntil p u h) + length (takeUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"content":"add_comm"},{"tailPos":49544,"headPos":49543,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (dropUntil p u h) + length (takeUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (dropUntil p u h) + length (takeUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"content":"]"},{"tailPos":49552,"headPos":49516,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (append (takeUntil p u h) (dropUntil p u h)) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (dropUntil p u h) + length (takeUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"content":"rw [length_append, add_comm] at this"},{"tailPos":49578,"headPos":49555,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\nthis : length (dropUntil p u h) + length (takeUntil p u h) = length p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":[],"content":"exact Nat.le.intro this"},{"tailPos":49578,"headPos":49468,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":[],"content":"have := congr_arg Walk.length (p.take_spec h)\n  rw [length_append, add_comm] at this\n  exact Nat.le.intro this"},{"tailPos":49465,"headPos":49463,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":[],"content":"by"},{"tailPos":49578,"headPos":49463,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nh : u ∈ support p\n⊢ length (dropUntil p u h) ≤ length p"],"goalsAfter":[],"content":"by\n  have := congr_arg Walk.length (p.take_spec h)\n  rw [length_append, add_comm] at this\n  exact Nat.le.intro this"},{"tailPos":49853,"headPos":49836,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsTrail p\nh : u ∈ support p\nhc : IsTrail (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc✝ h))"],"content":"← take_spec _ h"},{"tailPos":49854,"headPos":49853,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsTrail p\nh : u ∈ support p\nhc : IsTrail (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc✝ h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsTrail p\nh : u ∈ support p\nhc : IsTrail (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc✝ h))"],"content":"]"},{"tailPos":49860,"headPos":49831,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc h))"],"goalsAfter":[],"content":"rwa [← take_spec _ h] at hc"},{"tailPos":49830,"headPos":49828,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc h))"],"goalsAfter":[],"content":"by"},{"tailPos":49860,"headPos":49828,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (takeUntil p u h) (?m.255284 hc h))"],"goalsAfter":[],"content":"by rwa [← take_spec _ h] at hc"},{"tailPos":50134,"headPos":50117,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (?m.255550 hc h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsTrail p\nh : u ∈ support p\nhc : IsTrail (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsTrail (append (?m.255550 hc✝ h) (dropUntil p u h))"],"content":"← take_spec _ h"},{"tailPos":50135,"headPos":50134,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsTrail p\nh : u ∈ support p\nhc : IsTrail (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsTrail (append (?m.255550 hc✝ h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsTrail p\nh : u ∈ support p\nhc : IsTrail (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsTrail (append (?m.255550 hc✝ h) (dropUntil p u h))"],"content":"]"},{"tailPos":50141,"headPos":50112,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (?m.255550 hc h) (dropUntil p u h))"],"goalsAfter":[],"content":"rwa [← take_spec _ h] at hc"},{"tailPos":50111,"headPos":50109,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (?m.255550 hc h) (dropUntil p u h))"],"goalsAfter":[],"content":"by"},{"tailPos":50141,"headPos":50109,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsTrail p\nh : u ∈ support p\n⊢ IsTrail (append (?m.255550 hc h) (dropUntil p u h))"],"goalsAfter":[],"content":"by rwa [← take_spec _ h] at hc"},{"tailPos":50410,"headPos":50393,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsPath p\nh : u ∈ support p\nhc : IsPath (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc✝ h))"],"content":"← take_spec _ h"},{"tailPos":50411,"headPos":50410,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsPath p\nh : u ∈ support p\nhc : IsPath (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc✝ h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsPath p\nh : u ∈ support p\nhc : IsPath (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc✝ h))"],"content":"]"},{"tailPos":50417,"headPos":50388,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc h))"],"goalsAfter":[],"content":"rwa [← take_spec _ h] at hc"},{"tailPos":50387,"headPos":50385,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc h))"],"goalsAfter":[],"content":"by"},{"tailPos":50417,"headPos":50385,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (takeUntil p u h) (?m.255816 hc h))"],"goalsAfter":[],"content":"by rwa [← take_spec _ h] at hc"},{"tailPos":50753,"headPos":50736,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (?m.256082 hc h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsPath p\nh : u ∈ support p\nhc : IsPath (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsPath (append (?m.256082 hc✝ h) (dropUntil p u h))"],"content":"← take_spec _ h"},{"tailPos":50754,"headPos":50753,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsPath p\nh : u ∈ support p\nhc : IsPath (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsPath (append (?m.256082 hc✝ h) (dropUntil p u h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc✝ : IsPath p\nh : u ∈ support p\nhc : IsPath (append (takeUntil p u h) (dropUntil p u h))\n⊢ IsPath (append (?m.256082 hc✝ h) (dropUntil p u h))"],"content":"]"},{"tailPos":50760,"headPos":50731,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (?m.256082 hc h) (dropUntil p u h))"],"goalsAfter":[],"content":"rwa [← take_spec _ h] at hc"},{"tailPos":50730,"headPos":50728,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (?m.256082 hc h) (dropUntil p u h))"],"goalsAfter":[],"content":"by"},{"tailPos":50760,"headPos":50728,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\np : Walk G v w\nhc : IsPath p\nh : u ∈ support p\n⊢ IsPath (append (?m.256082 hc h) (dropUntil p u h))"],"goalsAfter":[],"content":"by rwa [← take_spec _ h] at hc"},{"tailPos":51268,"headPos":51229,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support (rotate c h)) ~r List.tail (support c)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (List.tail (support (dropUntil c u h)) ++ List.tail (support (takeUntil c u h))) ~r List.tail (support c)"],"content":"simp only [rotate, tail_support_append]"},{"tailPos":51319,"headPos":51271,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (List.tail (support (dropUntil c u h)) ++ List.tail (support (takeUntil c u h))) ~r List.tail (support c)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (List.tail (support (takeUntil c u h)) ++ List.tail (support (dropUntil c u h))) ~r List.tail (support c)"],"content":"apply List.IsRotated.trans List.isRotated_append"},{"tailPos":51350,"headPos":51326,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (List.tail (support (takeUntil c u h)) ++ List.tail (support (dropUntil c u h))) ~r List.tail (support c)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support (append (takeUntil c u h) (dropUntil c u h))) ~r List.tail (support c)"],"content":"← tail_support_append,"},{"tailPos":51360,"headPos":51351,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support (append (takeUntil c u h) (dropUntil c u h))) ~r List.tail (support c)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support c) ~r List.tail (support c)"],"content":"take_spec"},{"tailPos":51361,"headPos":51360,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support c) ~r List.tail (support c)"],"goalsAfter":[],"content":"]"},{"tailPos":51361,"headPos":51322,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (List.tail (support (takeUntil c u h)) ++ List.tail (support (dropUntil c u h))) ~r List.tail (support c)"],"goalsAfter":[],"content":"rw [← tail_support_append, take_spec]"},{"tailPos":51361,"headPos":51229,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support (rotate c h)) ~r List.tail (support c)"],"goalsAfter":[],"content":"simp only [rotate, tail_support_append]\n  apply List.IsRotated.trans List.isRotated_append\n  rw [← tail_support_append, take_spec]"},{"tailPos":51226,"headPos":51224,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support (rotate c h)) ~r List.tail (support c)"],"goalsAfter":[],"content":"by"},{"tailPos":51361,"headPos":51224,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ List.tail (support (rotate c h)) ~r List.tail (support c)"],"goalsAfter":[],"content":"by\n  simp only [rotate, tail_support_append]\n  apply List.IsRotated.trans List.isRotated_append\n  rw [← tail_support_append, take_spec]"},{"tailPos":51581,"headPos":51549,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts (rotate c h) ~r darts c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (darts (dropUntil c u h) ++ darts (takeUntil c u h)) ~r darts c"],"content":"simp only [rotate, darts_append]"},{"tailPos":51632,"headPos":51584,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (darts (dropUntil c u h) ++ darts (takeUntil c u h)) ~r darts c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (darts (takeUntil c u h) ++ darts (dropUntil c u h)) ~r darts c"],"content":"apply List.IsRotated.trans List.isRotated_append"},{"tailPos":51656,"headPos":51639,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (darts (takeUntil c u h) ++ darts (dropUntil c u h)) ~r darts c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts (append (takeUntil c u h) (dropUntil c u h)) ~r darts c"],"content":"← darts_append,"},{"tailPos":51666,"headPos":51657,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts (append (takeUntil c u h) (dropUntil c u h)) ~r darts c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts c ~r darts c"],"content":"take_spec"},{"tailPos":51667,"headPos":51666,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts c ~r darts c"],"goalsAfter":[],"content":"]"},{"tailPos":51667,"headPos":51635,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ (darts (takeUntil c u h) ++ darts (dropUntil c u h)) ~r darts c"],"goalsAfter":[],"content":"rw [← darts_append, take_spec]"},{"tailPos":51667,"headPos":51549,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts (rotate c h) ~r darts c"],"goalsAfter":[],"content":"simp only [rotate, darts_append]\n  apply List.IsRotated.trans List.isRotated_append\n  rw [← darts_append, take_spec]"},{"tailPos":51546,"headPos":51544,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts (rotate c h) ~r darts c"],"goalsAfter":[],"content":"by"},{"tailPos":51667,"headPos":51544,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nh : u ∈ support c\n⊢ darts (rotate c h) ~r darts c"],"goalsAfter":[],"content":"by\n  simp only [rotate, darts_append]\n  apply List.IsRotated.trans List.isRotated_append\n  rw [← darts_append, take_spec]"},{"tailPos":52092,"headPos":52080,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ IsTrail (rotate c h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges (rotate c h))"],"content":"isTrail_def,"},{"tailPos":52126,"headPos":52093,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges (rotate c h))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges c)"],"content":"(c.rotate_edges h).perm.nodup_iff"},{"tailPos":52127,"headPos":52126,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges c)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges c)"],"content":"]"},{"tailPos":52127,"headPos":52076,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ IsTrail (rotate c h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges c)"],"content":"rw [isTrail_def, (c.rotate_edges h).perm.nodup_iff]"},{"tailPos":52150,"headPos":52130,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ List.Nodup (edges c)"],"goalsAfter":[],"content":"exact hc.edges_nodup"},{"tailPos":52150,"headPos":52076,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ IsTrail (rotate c h)"],"goalsAfter":[],"content":"rw [isTrail_def, (c.rotate_edges h).perm.nodup_iff]\n  exact hc.edges_nodup"},{"tailPos":52073,"headPos":52071,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ IsTrail (rotate c h)"],"goalsAfter":[],"content":"by"},{"tailPos":52150,"headPos":52071,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsTrail c\nh : u ∈ support c\n⊢ IsTrail (rotate c h)"],"goalsAfter":[],"content":"by\n  rw [isTrail_def, (c.rotate_edges h).perm.nodup_iff]\n  exact hc.edges_nodup"},{"tailPos":52401,"headPos":52365,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCircuit c\nh : u ∈ support c\n⊢ IsCircuit (rotate c h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCircuit c\nh : u ∈ support c\n⊢ rotate c h ≠ nil"],"content":"refine ⟨hc.isTrail.rotate _, ?_⟩"},{"tailPos":52411,"headPos":52404,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCircuit c\nh : u ∈ support c\n⊢ rotate c h ≠ nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nhc : IsCircuit nil\nh : u ∈ support nil\n⊢ rotate nil h ≠ nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"content":"cases c"},{"tailPos":52416,"headPos":52414,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nhc : IsCircuit nil\nh : u ∈ support nil\n⊢ rotate nil h ≠ nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nhc : IsCircuit nil\nh : u ∈ support nil\n⊢ rotate nil h ≠ nil"],"content":"·"},{"tailPos":52443,"headPos":52417,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nhc : IsCircuit nil\nh : u ∈ support nil\n⊢ rotate nil h ≠ nil"],"goalsAfter":[],"content":"exact (hc.ne_nil rfl).elim"},{"tailPos":52443,"headPos":52414,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nhc : IsCircuit nil\nh : u ∈ support nil\n⊢ rotate nil h ≠ nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"content":"· exact (hc.ne_nil rfl).elim"},{"tailPos":52448,"headPos":52446,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"content":"·"},{"tailPos":52457,"headPos":52449,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\n⊢ False"],"content":"intro hn"},{"tailPos":52493,"headPos":52462,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (rotate (cons h✝ p✝) h) = length nil\n⊢ False"],"content":"have hn' := congr_arg length hn"},{"tailPos":52509,"headPos":52502,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (rotate (cons h✝ p✝) h) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (append (dropUntil (cons h✝ p✝) u h) (takeUntil (cons h✝ p✝) u h)) = length nil\n⊢ False"],"content":"rotate,"},{"tailPos":52524,"headPos":52510,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (append (dropUntil (cons h✝ p✝) u h) (takeUntil (cons h✝ p✝) u h)) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (dropUntil (cons h✝ p✝) u h) + length (takeUntil (cons h✝ p✝) u h) = length nil\n⊢ False"],"content":"length_append,"},{"tailPos":52534,"headPos":52525,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (dropUntil (cons h✝ p✝) u h) + length (takeUntil (cons h✝ p✝) u h) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (takeUntil (cons h✝ p✝) u h) + length (dropUntil (cons h✝ p✝) u h) = length nil\n⊢ False"],"content":"add_comm,"},{"tailPos":52553,"headPos":52535,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (takeUntil (cons h✝ p✝) u h) + length (dropUntil (cons h✝ p✝) u h) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h)) = length nil\n⊢ False"],"content":"← length_append,"},{"tailPos":52563,"headPos":52554,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (append (takeUntil (cons h✝ p✝) u h) (dropUntil (cons h✝ p✝) u h)) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (cons h✝ p✝) = length nil\n⊢ False"],"content":"take_spec"},{"tailPos":52564,"headPos":52563,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (cons h✝ p✝) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (cons h✝ p✝) = length nil\n⊢ False"],"content":"]"},{"tailPos":52571,"headPos":52498,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (rotate (cons h✝ p✝) h) = length nil\n⊢ False"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (cons h✝ p✝) = length nil\n⊢ False"],"content":"rw [rotate, length_append, add_comm, ← length_append, take_spec] at hn'"},{"tailPos":52587,"headPos":52576,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\nhn : rotate (cons h✝ p✝) h = nil\nhn' : length (cons h✝ p✝) = length nil\n⊢ False"],"goalsAfter":[],"content":"simp at hn'"},{"tailPos":52587,"headPos":52449,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"goalsAfter":[],"content":"intro hn\n    have hn' := congr_arg length hn\n    rw [rotate, length_append, add_comm, ← length_append, take_spec] at hn'\n    simp at hn'"},{"tailPos":52587,"headPos":52446,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nhc : IsCircuit (cons h✝ p✝)\nh : u ∈ support (cons h✝ p✝)\n⊢ rotate (cons h✝ p✝) h ≠ nil"],"goalsAfter":[],"content":"· intro hn\n    have hn' := congr_arg length hn\n    rw [rotate, length_append, add_comm, ← length_append, take_spec] at hn'\n    simp at hn'"},{"tailPos":52587,"headPos":52365,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCircuit c\nh : u ∈ support c\n⊢ IsCircuit (rotate c h)"],"goalsAfter":[],"content":"refine ⟨hc.isTrail.rotate _, ?_⟩\n  cases c\n  · exact (hc.ne_nil rfl).elim\n  · intro hn\n    have hn' := congr_arg length hn\n    rw [rotate, length_append, add_comm, ← length_append, take_spec] at hn'\n    simp at hn'"},{"tailPos":52362,"headPos":52360,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCircuit c\nh : u ∈ support c\n⊢ IsCircuit (rotate c h)"],"goalsAfter":[],"content":"by"},{"tailPos":52587,"headPos":52360,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCircuit c\nh : u ∈ support c\n⊢ IsCircuit (rotate c h)"],"goalsAfter":[],"content":"by\n  refine ⟨hc.isTrail.rotate _, ?_⟩\n  cases c\n  · exact (hc.ne_nil rfl).elim\n  · intro hn\n    have hn' := congr_arg length hn\n    rw [rotate, length_append, add_comm, ← length_append, take_spec] at hn'\n    simp at hn'"},{"tailPos":52838,"headPos":52800,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ IsCycle (rotate c h)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support (rotate c h)))"],"content":"refine ⟨hc.isCircuit.rotate _, ?_⟩"},{"tailPos":52890,"headPos":52845,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support (rotate c h)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support c))"],"content":"List.IsRotated.nodup_iff (support_rotate _ _)"},{"tailPos":52891,"headPos":52890,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support c))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support c))"],"content":"]"},{"tailPos":52891,"headPos":52841,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support (rotate c h)))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support c))"],"content":"rw [List.IsRotated.nodup_iff (support_rotate _ _)]"},{"tailPos":52916,"headPos":52894,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ List.Nodup (List.tail (support c))"],"goalsAfter":[],"content":"exact hc.support_nodup"},{"tailPos":52916,"headPos":52800,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ IsCycle (rotate c h)"],"goalsAfter":[],"content":"refine ⟨hc.isCircuit.rotate _, ?_⟩\n  rw [List.IsRotated.nodup_iff (support_rotate _ _)]\n  exact hc.support_nodup"},{"tailPos":52797,"headPos":52795,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ IsCycle (rotate c h)"],"goalsAfter":[],"content":"by"},{"tailPos":52916,"headPos":52795,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\nc : Walk G v v\nhc : IsCycle c\nh : u ∈ support c\n⊢ IsCycle (rotate c h)"],"goalsAfter":[],"content":"by\n  refine ⟨hc.isCircuit.rotate _, ?_⟩\n  rw [List.IsRotated.nodup_iff (support_rotate _ _)]\n  exact hc.support_nodup"},{"tailPos":53379,"headPos":53346,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nS : Set V\nuS : u ∈ S\nvS : ¬v ∈ S\n⊢ ∃ d, d ∈ darts p ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nu✝ : V\nuS : u✝ ∈ S\nvS : ¬u✝ ∈ S\n⊢ ∃ d, d ∈ darts nil ∧ d.fst ∈ S ∧ ¬d.snd ∈ S","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"induction' p with _ x y w a p' ih"},{"tailPos":53384,"headPos":53382,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nu✝ : V\nuS : u✝ ∈ S\nvS : ¬u✝ ∈ S\n⊢ ∃ d, d ∈ darts nil ∧ d.fst ∈ S ∧ ¬d.snd ∈ S","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nu✝ : V\nuS : u✝ ∈ S\nvS : ¬u✝ ∈ S\n⊢ ∃ d, d ∈ darts nil ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"·"},{"tailPos":53396,"headPos":53385,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nu✝ : V\nuS : u✝ ∈ S\nvS : ¬u✝ ∈ S\n⊢ ∃ d, d ∈ darts nil ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"cases vS uS"},{"tailPos":53396,"headPos":53382,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nu✝ : V\nuS : u✝ ∈ S\nvS : ¬u✝ ∈ S\n⊢ ∃ d, d ∈ darts nil ∧ d.fst ∈ S ∧ ¬d.snd ∈ S","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"· cases vS uS"},{"tailPos":53401,"headPos":53399,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"·"},{"tailPos":53422,"headPos":53402,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case pos\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S","case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"by_cases h : y ∈ S"},{"tailPos":53429,"headPos":53427,"goalsBefore":["case pos\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S","case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case pos\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"·"},{"tailPos":53464,"headPos":53430,"goalsBefore":["case pos\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case pos.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\nd : Dart G\nhd : d ∈ darts p'\nhcd : d.fst ∈ S ∧ ¬d.snd ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"obtain ⟨d, hd, hcd⟩ := ih h vS"},{"tailPos":53509,"headPos":53471,"goalsBefore":["case pos.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\nd : Dart G\nhd : d ∈ darts p'\nhcd : d.fst ∈ S ∧ ¬d.snd ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"exact ⟨d, List.Mem.tail _ hd, hcd⟩"},{"tailPos":53509,"headPos":53430,"goalsBefore":["case pos\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"obtain ⟨d, hd, hcd⟩ := ih h vS\n      exact ⟨d, List.Mem.tail _ hd, hcd⟩"},{"tailPos":53509,"headPos":53427,"goalsBefore":["case pos\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S","case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"· obtain ⟨d, hd, hcd⟩ := ih h vS\n      exact ⟨d, List.Mem.tail _ hd, hcd⟩"},{"tailPos":53516,"headPos":53514,"goalsBefore":["case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":["case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"content":"·"},{"tailPos":53568,"headPos":53517,"goalsBefore":["case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"exact ⟨⟨(x, y), a⟩, List.Mem.head _, uS, h⟩"},{"tailPos":53568,"headPos":53514,"goalsBefore":["case neg\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\nh : ¬y ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"· exact ⟨⟨(x, y), a⟩, List.Mem.head _, uS, h⟩"},{"tailPos":53568,"headPos":53402,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"by_cases h : y ∈ S\n    · obtain ⟨d, hd, hcd⟩ := ih h vS\n      exact ⟨d, List.Mem.tail _ hd, hcd⟩\n    · exact ⟨⟨(x, y), a⟩, List.Mem.head _, uS, h⟩"},{"tailPos":53568,"headPos":53399,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nS : Set V\nuS✝ : u ∈ S\nvS✝ : ¬v ∈ S\nx y w : V\na : Adj G x y\np' : Walk G y w\nih : y ∈ S → ¬w ∈ S → ∃ d, d ∈ darts p' ∧ d.fst ∈ S ∧ ¬d.snd ∈ S\nuS : x ∈ S\nvS : ¬w ∈ S\n⊢ ∃ d, d ∈ darts (cons a p') ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"· by_cases h : y ∈ S\n    · obtain ⟨d, hd, hcd⟩ := ih h vS\n      exact ⟨d, List.Mem.tail _ hd, hcd⟩\n    · exact ⟨⟨(x, y), a⟩, List.Mem.head _, uS, h⟩"},{"tailPos":53568,"headPos":53346,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nS : Set V\nuS : u ∈ S\nvS : ¬v ∈ S\n⊢ ∃ d, d ∈ darts p ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"induction' p with _ x y w a p' ih\n  · cases vS uS\n  · by_cases h : y ∈ S\n    · obtain ⟨d, hd, hcd⟩ := ih h vS\n      exact ⟨d, List.Mem.tail _ hd, hcd⟩\n    · exact ⟨⟨(x, y), a⟩, List.Mem.head _, uS, h⟩"},{"tailPos":53343,"headPos":53341,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nS : Set V\nuS : u ∈ S\nvS : ¬v ∈ S\n⊢ ∃ d, d ∈ darts p ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"by"},{"tailPos":53568,"headPos":53341,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nS : Set V\nuS : u ∈ S\nvS : ¬v ∈ S\n⊢ ∃ d, d ∈ darts p ∧ d.fst ∈ S ∧ ¬d.snd ∈ S"],"goalsAfter":[],"content":"by\n  induction' p with _ x y w a p' ih\n  · cases vS uS\n  · by_cases h : y ∈ S\n    · obtain ⟨d, hd, hcd⟩ := ih h vS\n      exact ⟨d, List.Mem.tail _ hd, hcd⟩\n    · exact ⟨⟨(x, y), a⟩, List.Mem.head _, uS, h⟩"},{"tailPos":54549,"headPos":54538,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G u v\n⊢ Walk.IsPath (Walk.cons h Walk.nil)"],"goalsAfter":[],"content":"simp [h.ne]"},{"tailPos":54537,"headPos":54535,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G u v\n⊢ Walk.IsPath (Walk.cons h Walk.nil)"],"goalsAfter":[],"content":"by"},{"tailPos":54549,"headPos":54535,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G u v\n⊢ Walk.IsPath (Walk.cons h Walk.nil)"],"goalsAfter":[],"content":"by simp [h.ne]"},{"tailPos":54752,"headPos":54736,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G u v\n⊢ Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ Walk.edges ↑(singleton h)"],"goalsAfter":[],"content":"simp [singleton]"},{"tailPos":54735,"headPos":54733,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G u v\n⊢ Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ Walk.edges ↑(singleton h)"],"goalsAfter":[],"content":"by"},{"tailPos":54752,"headPos":54733,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Adj G u v\n⊢ Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ Walk.edges ↑(singleton h)"],"goalsAfter":[],"content":"by simp [singleton]"},{"tailPos":55992,"headPos":55966,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\np : Path G v v\n⊢ p = Path.nil"],"goalsAfter":["case mk.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\nh : Walk.IsPath Walk.nil\n⊢ { val := Walk.nil, property := h } = Path.nil","case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"content":"obtain ⟨_ | _, h⟩ := p"},{"tailPos":55997,"headPos":55995,"goalsBefore":["case mk.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\nh : Walk.IsPath Walk.nil\n⊢ { val := Walk.nil, property := h } = Path.nil","case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"goalsAfter":["case mk.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\nh : Walk.IsPath Walk.nil\n⊢ { val := Walk.nil, property := h } = Path.nil"],"content":"·"},{"tailPos":56001,"headPos":55998,"goalsBefore":["case mk.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\nh : Walk.IsPath Walk.nil\n⊢ { val := Walk.nil, property := h } = Path.nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":56001,"headPos":55995,"goalsBefore":["case mk.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\nh : Walk.IsPath Walk.nil\n⊢ { val := Walk.nil, property := h } = Path.nil","case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"goalsAfter":["case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"content":"· rfl"},{"tailPos":56006,"headPos":56004,"goalsBefore":["case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"goalsAfter":["case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"content":"·"},{"tailPos":56016,"headPos":56007,"goalsBefore":["case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"goalsAfter":[],"content":"simp at h"},{"tailPos":56016,"headPos":56004,"goalsBefore":["case mk.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv v✝ : V\nh✝ : Adj G v v✝\np✝ : Walk G v✝ v\nh : Walk.IsPath (Walk.cons h✝ p✝)\n⊢ { val := Walk.cons h✝ p✝, property := h } = Path.nil"],"goalsAfter":[],"content":"· simp at h"},{"tailPos":56016,"headPos":55966,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\np : Path G v v\n⊢ p = Path.nil"],"goalsAfter":[],"content":"obtain ⟨_ | _, h⟩ := p\n  · rfl\n  · simp at h"},{"tailPos":55963,"headPos":55961,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\np : Path G v v\n⊢ p = Path.nil"],"goalsAfter":[],"content":"by"},{"tailPos":56016,"headPos":55961,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\np : Path G v v\n⊢ p = Path.nil"],"goalsAfter":[],"content":"by\n  obtain ⟨_ | _, h⟩ := p\n  · rfl\n  · simp at h"},{"tailPos":56201,"headPos":56185,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\ne : Sym2 V\np : Path G v v\n⊢ ¬e ∈ Walk.edges ↑p"],"goalsAfter":[],"content":"simp [p.loop_eq]"},{"tailPos":56184,"headPos":56182,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\ne : Sym2 V\np : Path G v v\n⊢ ¬e ∈ Walk.edges ↑p"],"goalsAfter":[],"content":"by"},{"tailPos":56201,"headPos":56182,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\ne : Sym2 V\np : Path G v v\n⊢ ¬e ∈ Walk.edges ↑p"],"goalsAfter":[],"content":"by simp [p.loop_eq]"},{"tailPos":56493,"headPos":56443,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Path G v u\nh : Adj G u v\nhe : ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ Walk.edges ↑p\n⊢ Walk.IsCycle (Walk.cons h ↑p)"],"goalsAfter":[],"content":"simp [Walk.isCycle_def, Walk.cons_isTrail_iff, he]"},{"tailPos":56440,"headPos":56438,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Path G v u\nh : Adj G u v\nhe : ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ Walk.edges ↑p\n⊢ Walk.IsCycle (Walk.cons h ↑p)"],"goalsAfter":[],"content":"by"},{"tailPos":56493,"headPos":56438,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Path G v u\nh : Adj G u v\nhe : ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ Walk.edges ↑p\n⊢ Walk.IsCycle (Walk.cons h ↑p)"],"goalsAfter":[],"content":"by\n  simp [Walk.isCycle_def, Walk.cons_isTrail_iff, he]"},{"tailPos":57258,"headPos":57248,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ bypass (Walk.copy p hu hv) = Walk.copy (bypass p) hu hv"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu' v' : V\np : Walk G u' v'\n⊢ bypass (Walk.copy p (_ : u' = u') (_ : v' = v')) = Walk.copy (bypass p) (_ : u' = u') (_ : v' = v')"],"content":"subst_vars"},{"tailPos":57264,"headPos":57261,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu' v' : V\np : Walk G u' v'\n⊢ bypass (Walk.copy p (_ : u' = u') (_ : v' = v')) = Walk.copy (bypass p) (_ : u' = u') (_ : v' = v')"],"goalsAfter":[],"content":"rfl"},{"tailPos":57264,"headPos":57248,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ bypass (Walk.copy p hu hv) = Walk.copy (bypass p) hu hv"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":57245,"headPos":57243,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ bypass (Walk.copy p hu hv) = Walk.copy (bypass p) hu hv"],"goalsAfter":[],"content":"by"},{"tailPos":57264,"headPos":57243,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ bypass (Walk.copy p hu hv) = Walk.copy (bypass p) hu hv"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":57440,"headPos":57435,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ IsPath (bypass nil)"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [bypass,\n  isPath_iff_eq_nil]"},{"tailPos":57440,"headPos":57426,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ IsPath (bypass nil)"],"goalsAfter":[],"content":"| nil => simp!"},{"tailPos":57483,"headPos":57465,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\n⊢ IsPath (bypass (cons h✝ p'))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\n⊢ IsPath (if hs : u✝ ∈ support (bypass p') then dropUntil (bypass p') u✝ hs else cons h✝ (bypass p'))"],"content":"simp only [bypass]"},{"tailPos":57505,"headPos":57488,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\n⊢ IsPath (if hs : u✝ ∈ support (bypass p') then dropUntil (bypass p') u✝ hs else cons h✝ (bypass p'))"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : u✝ ∈ support (bypass p')\n⊢ IsPath (dropUntil (bypass p') u✝ hs)","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"content":"split_ifs with hs"},{"tailPos":57512,"headPos":57510,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : u✝ ∈ support (bypass p')\n⊢ IsPath (dropUntil (bypass p') u✝ hs)","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : u✝ ∈ support (bypass p')\n⊢ IsPath (dropUntil (bypass p') u✝ hs)"],"content":"·"},{"tailPos":57534,"headPos":57513,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : u✝ ∈ support (bypass p')\n⊢ IsPath (dropUntil (bypass p') u✝ hs)"],"goalsAfter":[],"content":"exact ih.dropUntil hs"},{"tailPos":57534,"headPos":57510,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : u✝ ∈ support (bypass p')\n⊢ IsPath (dropUntil (bypass p') u✝ hs)","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"content":"· exact ih.dropUntil hs"},{"tailPos":57541,"headPos":57539,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"content":"·"},{"tailPos":57567,"headPos":57542,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"goalsAfter":[],"content":"simp [*, cons_isPath_iff]"},{"tailPos":57567,"headPos":57539,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\nhs : ¬u✝ ∈ support (bypass p')\n⊢ IsPath (cons h✝ (bypass p'))"],"goalsAfter":[],"content":"· simp [*, cons_isPath_iff]"},{"tailPos":57567,"headPos":57465,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\n⊢ IsPath (bypass (cons h✝ p'))"],"goalsAfter":[],"content":"simp only [bypass]\n    split_ifs with hs\n    · exact ih.dropUntil hs\n    · simp [*, cons_isPath_iff]"},{"tailPos":57567,"headPos":57443,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : IsPath (bypass p')\n⊢ IsPath (bypass (cons h✝ p'))"],"goalsAfter":[],"content":"| cons _ p' ih =>\n    simp only [bypass]\n    split_ifs with hs\n    · exact ih.dropUntil hs\n    · simp [*, cons_isPath_iff]"},{"tailPos":57567,"headPos":57407,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsPath (bypass p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsPath (bypass p)"],"content":"induction p with\n  | nil => simp!\n  | cons _ p' ih =>\n    simp only [bypass]\n    split_ifs with hs\n    · exact ih.dropUntil hs\n    · simp [*, cons_isPath_iff]"},{"tailPos":57404,"headPos":57402,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsPath (bypass p)"],"goalsAfter":[],"content":"by"},{"tailPos":57567,"headPos":57402,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsPath (bypass p)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp!\n  | cons _ p' ih =>\n    simp only [bypass]\n    split_ifs with hs\n    · exact ih.dropUntil hs\n    · simp [*, cons_isPath_iff]"},{"tailPos":57762,"headPos":57759,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ length (bypass nil) ≤ length nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":57762,"headPos":57750,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ length (bypass nil) ≤ length nil"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":57804,"headPos":57786,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\n⊢ length (bypass (cons h✝ p✝)) ≤ length (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\n⊢ length (if hs : u✝ ∈ support (bypass p✝) then dropUntil (bypass p✝) u✝ hs else cons h✝ (bypass p✝)) ≤\n    length (cons h✝ p✝)"],"content":"simp only [bypass]"},{"tailPos":57818,"headPos":57809,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\n⊢ length (if hs : u✝ ∈ support (bypass p✝) then dropUntil (bypass p✝) u✝ hs else cons h✝ (bypass p✝)) ≤\n    length (cons h✝ p✝)"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ length (cons h✝¹ p✝)","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"content":"split_ifs"},{"tailPos":57825,"headPos":57823,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ length (cons h✝¹ p✝)","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ length (cons h✝¹ p✝)"],"content":"·"},{"tailPos":57831,"headPos":57826,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ ?m.279260","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ ?m.279260 ≤ length (cons h✝¹ p✝)","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ ℕ"],"content":"trans"},{"tailPos":57863,"headPos":57838,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ ?m.279260","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ ?m.279260 ≤ length (cons h✝¹ p✝)","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ ℕ"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length (cons h✝¹ p✝)"],"content":"apply length_dropUntil_le"},{"tailPos":57885,"headPos":57874,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length p✝ + 1"],"content":"length_cons"},{"tailPos":57886,"headPos":57885,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length p✝ + 1"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length p✝ + 1"],"content":"]"},{"tailPos":57886,"headPos":57870,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length p✝ + 1"],"content":"rw [length_cons]"},{"tailPos":57914,"headPos":57893,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) ≤ length p✝ + 1"],"goalsAfter":[],"content":"exact le_add_right ih"},{"tailPos":57914,"headPos":57826,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ length (cons h✝¹ p✝)"],"goalsAfter":[],"content":"trans\n      apply length_dropUntil_le\n      rw [length_cons]\n      exact le_add_right ih"},{"tailPos":57914,"headPos":57823,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ length (dropUntil (bypass p✝) u✝ h✝) ≤ length (cons h✝¹ p✝)","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"content":"· trans\n      apply length_dropUntil_le\n      rw [length_cons]\n      exact le_add_right ih"},{"tailPos":57921,"headPos":57919,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"content":"·"},{"tailPos":57938,"headPos":57926,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length (cons h✝¹ p✝)"],"content":"length_cons,"},{"tailPos":57950,"headPos":57939,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length (cons h✝¹ p✝)"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length p✝ + 1"],"content":"length_cons"},{"tailPos":57951,"headPos":57950,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length p✝ + 1"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length p✝ + 1"],"content":"]"},{"tailPos":57951,"headPos":57922,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length p✝ + 1"],"content":"rw [length_cons, length_cons]"},{"tailPos":57985,"headPos":57958,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (bypass p✝) + 1 ≤ length p✝ + 1"],"goalsAfter":[],"content":"exact add_le_add_right ih 1"},{"tailPos":57985,"headPos":57922,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":[],"content":"rw [length_cons, length_cons]\n      exact add_le_add_right ih 1"},{"tailPos":57985,"headPos":57919,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ length (cons h✝¹ (bypass p✝)) ≤ length (cons h✝¹ p✝)"],"goalsAfter":[],"content":"· rw [length_cons, length_cons]\n      exact add_le_add_right ih 1"},{"tailPos":57985,"headPos":57786,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\n⊢ length (bypass (cons h✝ p✝)) ≤ length (cons h✝ p✝)"],"goalsAfter":[],"content":"simp only [bypass]\n    split_ifs\n    · trans\n      apply length_dropUntil_le\n      rw [length_cons]\n      exact le_add_right ih\n    · rw [length_cons, length_cons]\n      exact add_le_add_right ih 1"},{"tailPos":57985,"headPos":57765,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : length (bypass p✝) ≤ length p✝\n⊢ length (bypass (cons h✝ p✝)) ≤ length (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    simp only [bypass]\n    split_ifs\n    · trans\n      apply length_dropUntil_le\n      rw [length_cons]\n      exact le_add_right ih\n    · rw [length_cons, length_cons]\n      exact add_le_add_right ih 1"},{"tailPos":57985,"headPos":57731,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ length (bypass p) ≤ length p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ length (bypass p) ≤ length p"],"content":"induction p with\n  | nil => rfl\n  | cons _ _ ih =>\n    simp only [bypass]\n    split_ifs\n    · trans\n      apply length_dropUntil_le\n      rw [length_cons]\n      exact le_add_right ih\n    · rw [length_cons, length_cons]\n      exact add_le_add_right ih 1"},{"tailPos":57728,"headPos":57726,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ length (bypass p) ≤ length p"],"goalsAfter":[],"content":"by"},{"tailPos":57985,"headPos":57726,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ length (bypass p) ≤ length p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons _ _ ih =>\n    simp only [bypass]\n    split_ifs\n    · trans\n      apply length_dropUntil_le\n      rw [length_cons]\n      exact le_add_right ih\n    · rw [length_cons, length_cons]\n      exact add_le_add_right ih 1"},{"tailPos":58434,"headPos":58429,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ support (bypass nil) ⊆ support nil"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [support,\n  List.Subset.refl]"},{"tailPos":58434,"headPos":58420,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ support (bypass nil) ⊆ support nil"],"goalsAfter":[],"content":"| nil => simp!"},{"tailPos":58468,"headPos":58458,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\n⊢ support (bypass (cons h✝ p✝)) ⊆ support (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\n⊢ support (if hs : u✝ ∈ support (bypass p✝) then dropUntil (bypass p✝) u✝ hs else cons h✝ (bypass p✝)) ⊆\n    u✝ :: support p✝"],"content":"simp! only"},{"tailPos":58482,"headPos":58473,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\n⊢ support (if hs : u✝ ∈ support (bypass p✝) then dropUntil (bypass p✝) u✝ hs else cons h✝ (bypass p✝)) ⊆\n    u✝ :: support p✝"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (dropUntil (bypass p✝) u✝ h✝) ⊆ u✝ :: support p✝","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"content":"split_ifs"},{"tailPos":58489,"headPos":58487,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (dropUntil (bypass p✝) u✝ h✝) ⊆ u✝ :: support p✝","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (dropUntil (bypass p✝) u✝ h✝) ⊆ u✝ :: support p✝"],"content":"·"},{"tailPos":58544,"headPos":58490,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (dropUntil (bypass p✝) u✝ h✝) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (bypass p✝) ⊆ u✝ :: support p✝"],"content":"apply List.Subset.trans (support_dropUntil_subset _ _)"},{"tailPos":58583,"headPos":58551,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (bypass p✝) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inl.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (bypass p✝) ⊆ support p✝"],"content":"apply List.subset_cons_of_subset"},{"tailPos":58600,"headPos":58590,"goalsBefore":["case cons.inl.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (bypass p✝) ⊆ support p✝"],"goalsAfter":[],"content":"assumption"},{"tailPos":58600,"headPos":58490,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (dropUntil (bypass p✝) u✝ h✝) ⊆ u✝ :: support p✝"],"goalsAfter":[],"content":"apply List.Subset.trans (support_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset\n      assumption"},{"tailPos":58600,"headPos":58487,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ support (dropUntil (bypass p✝) u✝ h✝) ⊆ u✝ :: support p✝","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"content":"· apply List.Subset.trans (support_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset\n      assumption"},{"tailPos":58607,"headPos":58605,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"content":"·"},{"tailPos":58624,"headPos":58612,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ u✝ :: support (bypass p✝) ⊆ u✝ :: support p✝"],"content":"support_cons"},{"tailPos":58625,"headPos":58624,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ u✝ :: support (bypass p✝) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ u✝ :: support (bypass p✝) ⊆ u✝ :: support p✝"],"content":"]"},{"tailPos":58625,"headPos":58608,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ u✝ :: support (bypass p✝) ⊆ u✝ :: support p✝"],"content":"rw [support_cons]"},{"tailPos":58659,"headPos":58632,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ u✝ :: support (bypass p✝) ⊆ u✝ :: support p✝"],"goalsAfter":["case cons.inr.s\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (bypass p✝) ⊆ support p✝"],"content":"apply List.cons_subset_cons"},{"tailPos":58676,"headPos":58666,"goalsBefore":["case cons.inr.s\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (bypass p✝) ⊆ support p✝"],"goalsAfter":[],"content":"assumption"},{"tailPos":58676,"headPos":58608,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":[],"content":"rw [support_cons]\n      apply List.cons_subset_cons\n      assumption"},{"tailPos":58676,"headPos":58605,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ support (cons h✝¹ (bypass p✝)) ⊆ u✝ :: support p✝"],"goalsAfter":[],"content":"· rw [support_cons]\n      apply List.cons_subset_cons\n      assumption"},{"tailPos":58676,"headPos":58458,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\n⊢ support (bypass (cons h✝ p✝)) ⊆ support (cons h✝ p✝)"],"goalsAfter":[],"content":"simp! only\n    split_ifs\n    · apply List.Subset.trans (support_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset\n      assumption\n    · rw [support_cons]\n      apply List.cons_subset_cons\n      assumption"},{"tailPos":58676,"headPos":58437,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : support (bypass p✝) ⊆ support p✝\n⊢ support (bypass (cons h✝ p✝)) ⊆ support (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    simp! only\n    split_ifs\n    · apply List.Subset.trans (support_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset\n      assumption\n    · rw [support_cons]\n      apply List.cons_subset_cons\n      assumption"},{"tailPos":58676,"headPos":58401,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ support (bypass p) ⊆ support p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ support (bypass p) ⊆ support p"],"content":"induction p with\n  | nil => simp!\n  | cons _ _ ih =>\n    simp! only\n    split_ifs\n    · apply List.Subset.trans (support_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset\n      assumption\n    · rw [support_cons]\n      apply List.cons_subset_cons\n      assumption"},{"tailPos":58398,"headPos":58396,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ support (bypass p) ⊆ support p"],"goalsAfter":[],"content":"by"},{"tailPos":58676,"headPos":58396,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ support (bypass p) ⊆ support p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp!\n  | cons _ _ ih =>\n    simp! only\n    split_ifs\n    · apply List.Subset.trans (support_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset\n      assumption\n    · rw [support_cons]\n      apply List.cons_subset_cons\n      assumption"},{"tailPos":59115,"headPos":59110,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ darts (bypass nil) ⊆ darts nil"],"goalsAfter":[],"content":"simp (config := (fun (c✝ : Lean.Meta.Simp.Config✝) => { c✝ with autoUnfold✝ := true✝ }) { }) only [darts,\n  List.Subset.refl]"},{"tailPos":59115,"headPos":59101,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ : V\n⊢ darts (bypass nil) ⊆ darts nil"],"goalsAfter":[],"content":"| nil => simp!"},{"tailPos":59149,"headPos":59139,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\n⊢ darts (bypass (cons h✝ p✝)) ⊆ darts (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\n⊢ darts (if hs : u✝ ∈ support (bypass p✝) then dropUntil (bypass p✝) u✝ hs else cons h✝ (bypass p✝)) ⊆\n    { toProd := (u✝, v✝), is_adj := h✝ } :: darts p✝"],"content":"simp! only"},{"tailPos":59163,"headPos":59154,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\n⊢ darts (if hs : u✝ ∈ support (bypass p✝) then dropUntil (bypass p✝) u✝ hs else cons h✝ (bypass p✝)) ⊆\n    { toProd := (u✝, v✝), is_adj := h✝ } :: darts p✝"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (dropUntil (bypass p✝) u✝ h✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"split_ifs"},{"tailPos":59170,"headPos":59168,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (dropUntil (bypass p✝) u✝ h✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (dropUntil (bypass p✝) u✝ h✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"·"},{"tailPos":59223,"headPos":59171,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (dropUntil (bypass p✝) u✝ h✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"apply List.Subset.trans (darts_dropUntil_subset _ _)"},{"tailPos":59267,"headPos":59230,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":[],"content":"apply List.subset_cons_of_subset _ ih"},{"tailPos":59267,"headPos":59171,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (dropUntil (bypass p✝) u✝ h✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":[],"content":"apply List.Subset.trans (darts_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset _ ih"},{"tailPos":59267,"headPos":59168,"goalsBefore":["case cons.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : u✝ ∈ support (bypass p✝)\n⊢ darts (dropUntil (bypass p✝) u✝ h✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝","case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"· apply List.Subset.trans (darts_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset _ ih"},{"tailPos":59274,"headPos":59272,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"·"},{"tailPos":59289,"headPos":59279,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"darts_cons"},{"tailPos":59290,"headPos":59289,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"]"},{"tailPos":59290,"headPos":59275,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"content":"rw [darts_cons]"},{"tailPos":59329,"headPos":59297,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts (bypass p✝) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":[],"content":"exact List.cons_subset_cons _ ih"},{"tailPos":59329,"headPos":59275,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":[],"content":"rw [darts_cons]\n      exact List.cons_subset_cons _ ih"},{"tailPos":59329,"headPos":59272,"goalsBefore":["case cons.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\nh✝ : ¬u✝ ∈ support (bypass p✝)\n⊢ darts (cons h✝¹ (bypass p✝)) ⊆ { toProd := (u✝, v✝), is_adj := h✝¹ } :: darts p✝"],"goalsAfter":[],"content":"· rw [darts_cons]\n      exact List.cons_subset_cons _ ih"},{"tailPos":59329,"headPos":59139,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\n⊢ darts (bypass (cons h✝ p✝)) ⊆ darts (cons h✝ p✝)"],"goalsAfter":[],"content":"simp! only\n    split_ifs\n    · apply List.Subset.trans (darts_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset _ ih\n    · rw [darts_cons]\n      exact List.cons_subset_cons _ ih"},{"tailPos":59329,"headPos":59118,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : darts (bypass p✝) ⊆ darts p✝\n⊢ darts (bypass (cons h✝ p✝)) ⊆ darts (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    simp! only\n    split_ifs\n    · apply List.Subset.trans (darts_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset _ ih\n    · rw [darts_cons]\n      exact List.cons_subset_cons _ ih"},{"tailPos":59329,"headPos":59082,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ darts (bypass p) ⊆ darts p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ darts (bypass p) ⊆ darts p"],"content":"induction p with\n  | nil => simp!\n  | cons _ _ ih =>\n    simp! only\n    split_ifs\n    · apply List.Subset.trans (darts_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset _ ih\n    · rw [darts_cons]\n      exact List.cons_subset_cons _ ih"},{"tailPos":59079,"headPos":59077,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ darts (bypass p) ⊆ darts p"],"goalsAfter":[],"content":"by"},{"tailPos":59329,"headPos":59077,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ darts (bypass p) ⊆ darts p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp!\n  | cons _ _ ih =>\n    simp! only\n    split_ifs\n    · apply List.Subset.trans (darts_dropUntil_subset _ _)\n      apply List.subset_cons_of_subset _ ih\n    · rw [darts_cons]\n      exact List.cons_subset_cons _ ih"},{"tailPos":60875,"headPos":60865,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ Walk.map f (Walk.copy p hu hv) = Walk.copy (Walk.map f p) (_ : ↑f u = ↑f u') (_ : ↑f v = ↑f v')"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu' v' : V\np : Walk G u' v'\n⊢ Walk.map f (Walk.copy p (_ : u' = u') (_ : v' = v')) =\n    Walk.copy (Walk.map f p) (_ : ↑f u' = ↑f u') (_ : ↑f v' = ↑f v')"],"content":"subst_vars"},{"tailPos":60881,"headPos":60878,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu' v' : V\np : Walk G u' v'\n⊢ Walk.map f (Walk.copy p (_ : u' = u') (_ : v' = v')) =\n    Walk.copy (Walk.map f p) (_ : ↑f u' = ↑f u') (_ : ↑f v' = ↑f v')"],"goalsAfter":[],"content":"rfl"},{"tailPos":60881,"headPos":60865,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ Walk.map f (Walk.copy p hu hv) = Walk.copy (Walk.map f p) (_ : ↑f u = ↑f u') (_ : ↑f v = ↑f v')"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":60862,"headPos":60860,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ Walk.map f (Walk.copy p hu hv) = Walk.copy (Walk.map f p) (_ : ↑f u = ↑f u') (_ : ↑f v = ↑f v')"],"goalsAfter":[],"content":"by"},{"tailPos":60881,"headPos":60860,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhu : u = u'\nhv : v = v'\n⊢ Walk.map f (Walk.copy p hu hv) = Walk.copy (Walk.map f p) (_ : ↑f u = ↑f u') (_ : ↑f v = ↑f v')"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":61041,"headPos":61038,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' u✝ : V\np : Walk G u✝ u✝\n⊢ Walk.map Hom.id nil = nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":61041,"headPos":61029,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' u✝ : V\np : Walk G u✝ u✝\n⊢ Walk.map Hom.id nil = nil"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":61074,"headPos":61062,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : Walk G v✝ w✝ → Walk.map Hom.id p' = p'\np : Walk G u✝ w✝\n⊢ Walk.map Hom.id (cons h✝ p') = cons h✝ p'"],"goalsAfter":[],"content":"simp [ih p']"},{"tailPos":61074,"headPos":61044,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np' : Walk G v✝ w✝\nih : Walk G v✝ w✝ → Walk.map Hom.id p' = p'\np : Walk G u✝ w✝\n⊢ Walk.map Hom.id (cons h✝ p') = cons h✝ p'"],"goalsAfter":[],"content":"| cons _ p' ih => simp [ih p']"},{"tailPos":61074,"headPos":61010,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ p : Walk G u v\n⊢ Walk.map Hom.id p = p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ p : Walk G u v\n⊢ Walk.map Hom.id p = p"],"content":"induction p with\n  | nil => rfl\n  | cons _ p' ih => simp [ih p']"},{"tailPos":61007,"headPos":61005,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ p : Walk G u v\n⊢ Walk.map Hom.id p = p"],"goalsAfter":[],"content":"by"},{"tailPos":61074,"headPos":61005,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ p : Walk G u v\n⊢ Walk.map Hom.id p = p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons _ p' ih => simp [ih p']"},{"tailPos":61234,"headPos":61231,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ Walk.map f' (Walk.map f nil) = Walk.map (Hom.comp f' f) nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":61234,"headPos":61222,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ Walk.map f' (Walk.map f nil) = Walk.map (Hom.comp f' f) nil"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":61263,"headPos":61254,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Walk.map f' (Walk.map f p✝) = Walk.map (Hom.comp f' f) p✝\n⊢ Walk.map f' (Walk.map f (cons h✝ p✝)) = Walk.map (Hom.comp f' f) (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [ih]"},{"tailPos":61263,"headPos":61237,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Walk.map f' (Walk.map f p✝) = Walk.map (Hom.comp f' f) p✝\n⊢ Walk.map f' (Walk.map f (cons h✝ p✝)) = Walk.map (Hom.comp f' f) (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ ih => simp [ih]"},{"tailPos":61263,"headPos":61203,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f' (Walk.map f p) = Walk.map (Hom.comp f' f) p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f' (Walk.map f p) = Walk.map (Hom.comp f' f) p"],"content":"induction p with\n  | nil => rfl\n  | cons _ _ ih => simp [ih]"},{"tailPos":61200,"headPos":61198,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f' (Walk.map f p) = Walk.map (Hom.comp f' f) p"],"goalsAfter":[],"content":"by"},{"tailPos":61263,"headPos":61198,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f' (Walk.map f p) = Walk.map (Hom.comp f' f) p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons _ _ ih => simp [ih]"},{"tailPos":61632,"headPos":61622,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf'✝ : G' →g G''\nu v u' v' : V\np : Walk G u v\nf f' : G →g G'\nh : f = f'\n⊢ Walk.map f p = Walk.copy (Walk.map f' p) (_ : ↑f' u = ↑f u) (_ : ↑f' v = ↑f v)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf'✝ : G' →g G''\nu v u' v' : V\np : Walk G u v\nf' : G →g G'\n⊢ Walk.map f' p = Walk.copy (Walk.map f' p) (_ : ↑f' u = ↑f' u) (_ : ↑f' v = ↑f' v)"],"content":"subst_vars"},{"tailPos":61638,"headPos":61635,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf'✝ : G' →g G''\nu v u' v' : V\np : Walk G u v\nf' : G →g G'\n⊢ Walk.map f' p = Walk.copy (Walk.map f' p) (_ : ↑f' u = ↑f' u) (_ : ↑f' v = ↑f' v)"],"goalsAfter":[],"content":"rfl"},{"tailPos":61638,"headPos":61622,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf'✝ : G' →g G''\nu v u' v' : V\np : Walk G u v\nf f' : G →g G'\nh : f = f'\n⊢ Walk.map f p = Walk.copy (Walk.map f' p) (_ : ↑f' u = ↑f u) (_ : ↑f' v = ↑f v)"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":61619,"headPos":61617,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf'✝ : G' →g G''\nu v u' v' : V\np : Walk G u v\nf f' : G →g G'\nh : f = f'\n⊢ Walk.map f p = Walk.copy (Walk.map f' p) (_ : ↑f' u = ↑f u) (_ : ↑f' v = ↑f v)"],"goalsAfter":[],"content":"by"},{"tailPos":61638,"headPos":61617,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf'✝ : G' →g G''\nu v u' v' : V\np : Walk G u v\nf f' : G →g G'\nh : f = f'\n⊢ Walk.map f p = Walk.copy (Walk.map f' p) (_ : ↑f' u = ↑f u) (_ : ↑f' v = ↑f v)"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":61797,"headPos":61790,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\n⊢ Walk.map f p = nil ↔ p = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f nil = nil ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ Walk.map f (cons h✝ p✝) = nil ↔ cons h✝ p✝ = nil"],"content":"cases p"},{"tailPos":61801,"headPos":61798,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f nil = nil ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ Walk.map f (cons h✝ p✝) = nil ↔ cons h✝ p✝ = nil"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f nil = nil ↔ nil = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ Walk.map f (cons h✝ p✝) = nil ↔ cons h✝ p✝ = nil"],"content":"<;>"},{"tailPos":61806,"headPos":61802,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ Walk.map f nil = nil ↔ nil = nil"],"goalsAfter":[],"content":"simp only [map_nil]"},{"tailPos":61806,"headPos":61802,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nv✝ : V\nh✝ : Adj G u v✝\np✝ : Walk G v✝ u\n⊢ Walk.map f (cons h✝ p✝) = nil ↔ cons h✝ p✝ = nil"],"goalsAfter":[],"content":"simp only [map_nil]"},{"tailPos":61806,"headPos":61790,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\n⊢ Walk.map f p = nil ↔ p = nil"],"goalsAfter":[],"content":"cases p <;> simp"},{"tailPos":61789,"headPos":61787,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\n⊢ Walk.map f p = nil ↔ p = nil"],"goalsAfter":[],"content":"by"},{"tailPos":61806,"headPos":61787,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\n⊢ Walk.map f p = nil ↔ p = nil"],"goalsAfter":[],"content":"by cases p <;> simp"},{"tailPos":61954,"headPos":61943,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ length (Walk.map f p) = length p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ length (Walk.map f nil) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : length (Walk.map f p✝) = length p✝\n⊢ length (Walk.map f (cons h✝ p✝)) = length (cons h✝ p✝)"],"content":"induction p"},{"tailPos":61958,"headPos":61955,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ length (Walk.map f nil) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : length (Walk.map f p✝) = length p✝\n⊢ length (Walk.map f (cons h✝ p✝)) = length (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ length (Walk.map f nil) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : length (Walk.map f p✝) = length p✝\n⊢ length (Walk.map f (cons h✝ p✝)) = length (cons h✝ p✝)"],"content":"<;>"},{"tailPos":61967,"headPos":61959,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ length (Walk.map f nil) = length nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":61967,"headPos":61959,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : length (Walk.map f p✝) = length p✝\n⊢ length (Walk.map f (cons h✝ p✝)) = length (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":61967,"headPos":61943,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ length (Walk.map f p) = length p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":61942,"headPos":61940,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ length (Walk.map f p) = length p"],"goalsAfter":[],"content":"by"},{"tailPos":61967,"headPos":61940,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ length (Walk.map f p) = length p"],"goalsAfter":[],"content":"by induction p <;> simp [*]"},{"tailPos":62169,"headPos":62158,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.map f (append p q) = append (Walk.map f p) (Walk.map f q)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.map f (append nil q) = append (Walk.map f nil) (Walk.map f q)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.map f (append p✝ q) = append (Walk.map f p✝) (Walk.map f q)\nq : Walk G w✝ w\n⊢ Walk.map f (append (cons h✝ p✝) q) = append (Walk.map f (cons h✝ p✝)) (Walk.map f q)"],"content":"induction p"},{"tailPos":62173,"headPos":62170,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.map f (append nil q) = append (Walk.map f nil) (Walk.map f q)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.map f (append p✝ q) = append (Walk.map f p✝) (Walk.map f q)\nq : Walk G w✝ w\n⊢ Walk.map f (append (cons h✝ p✝) q) = append (Walk.map f (cons h✝ p✝)) (Walk.map f q)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.map f (append nil q) = append (Walk.map f nil) (Walk.map f q)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.map f (append p✝ q) = append (Walk.map f p✝) (Walk.map f q)\nq : Walk G w✝ w\n⊢ Walk.map f (append (cons h✝ p✝) q) = append (Walk.map f (cons h✝ p✝)) (Walk.map f q)"],"content":"<;>"},{"tailPos":62182,"headPos":62174,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.map f (append nil q) = append (Walk.map f nil) (Walk.map f q)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":62182,"headPos":62174,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.map f (append p✝ q) = append (Walk.map f p✝) (Walk.map f q)\nq : Walk G w✝ w\n⊢ Walk.map f (append (cons h✝ p✝) q) = append (Walk.map f (cons h✝ p✝)) (Walk.map f q)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":62182,"headPos":62158,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.map f (append p q) = append (Walk.map f p) (Walk.map f q)"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":62157,"headPos":62155,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.map f (append p q) = append (Walk.map f p) (Walk.map f q)"],"goalsAfter":[],"content":"by"},{"tailPos":62182,"headPos":62155,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.map f (append p q) = append (Walk.map f p) (Walk.map f q)"],"goalsAfter":[],"content":"by induction p <;> simp [*]"},{"tailPos":62331,"headPos":62320,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ reverse (Walk.map f p) = Walk.map f (reverse p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ reverse (Walk.map f nil) = Walk.map f (reverse nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : reverse (Walk.map f p✝) = Walk.map f (reverse p✝)\n⊢ reverse (Walk.map f (cons h✝ p✝)) = Walk.map f (reverse (cons h✝ p✝))"],"content":"induction p"},{"tailPos":62335,"headPos":62332,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ reverse (Walk.map f nil) = Walk.map f (reverse nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : reverse (Walk.map f p✝) = Walk.map f (reverse p✝)\n⊢ reverse (Walk.map f (cons h✝ p✝)) = Walk.map f (reverse (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ reverse (Walk.map f nil) = Walk.map f (reverse nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : reverse (Walk.map f p✝) = Walk.map f (reverse p✝)\n⊢ reverse (Walk.map f (cons h✝ p✝)) = Walk.map f (reverse (cons h✝ p✝))"],"content":"<;>"},{"tailPos":62356,"headPos":62336,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ reverse (Walk.map f nil) = Walk.map f (reverse nil)"],"goalsAfter":[],"content":"simp [map_append, *]"},{"tailPos":62356,"headPos":62336,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : reverse (Walk.map f p✝) = Walk.map f (reverse p✝)\n⊢ reverse (Walk.map f (cons h✝ p✝)) = Walk.map f (reverse (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [map_append, *]"},{"tailPos":62356,"headPos":62320,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ reverse (Walk.map f p) = Walk.map f (reverse p)"],"goalsAfter":[],"content":"induction p <;> simp [map_append, *]"},{"tailPos":62319,"headPos":62317,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ reverse (Walk.map f p) = Walk.map f (reverse p)"],"goalsAfter":[],"content":"by"},{"tailPos":62356,"headPos":62317,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ reverse (Walk.map f p) = Walk.map f (reverse p)"],"goalsAfter":[],"content":"by induction p <;> simp [map_append, *]"},{"tailPos":62507,"headPos":62496,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ support (Walk.map f p) = List.map (↑f) (support p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ support (Walk.map f nil) = List.map (↑f) (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (Walk.map f p✝) = List.map (↑f) (support p✝)\n⊢ support (Walk.map f (cons h✝ p✝)) = List.map (↑f) (support (cons h✝ p✝))"],"content":"induction p"},{"tailPos":62511,"headPos":62508,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ support (Walk.map f nil) = List.map (↑f) (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (Walk.map f p✝) = List.map (↑f) (support p✝)\n⊢ support (Walk.map f (cons h✝ p✝)) = List.map (↑f) (support (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ support (Walk.map f nil) = List.map (↑f) (support nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (Walk.map f p✝) = List.map (↑f) (support p✝)\n⊢ support (Walk.map f (cons h✝ p✝)) = List.map (↑f) (support (cons h✝ p✝))"],"content":"<;>"},{"tailPos":62520,"headPos":62512,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ support (Walk.map f nil) = List.map (↑f) (support nil)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":62520,"headPos":62512,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : support (Walk.map f p✝) = List.map (↑f) (support p✝)\n⊢ support (Walk.map f (cons h✝ p✝)) = List.map (↑f) (support (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":62520,"headPos":62496,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ support (Walk.map f p) = List.map (↑f) (support p)"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":62495,"headPos":62493,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ support (Walk.map f p) = List.map (↑f) (support p)"],"goalsAfter":[],"content":"by"},{"tailPos":62520,"headPos":62493,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ support (Walk.map f p) = List.map (↑f) (support p)"],"goalsAfter":[],"content":"by induction p <;> simp [*]"},{"tailPos":62673,"headPos":62662,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ darts (Walk.map f p) = List.map (Hom.mapDart f) (darts p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ darts (Walk.map f nil) = List.map (Hom.mapDart f) (darts nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (Walk.map f p✝) = List.map (Hom.mapDart f) (darts p✝)\n⊢ darts (Walk.map f (cons h✝ p✝)) = List.map (Hom.mapDart f) (darts (cons h✝ p✝))"],"content":"induction p"},{"tailPos":62677,"headPos":62674,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ darts (Walk.map f nil) = List.map (Hom.mapDart f) (darts nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (Walk.map f p✝) = List.map (Hom.mapDart f) (darts p✝)\n⊢ darts (Walk.map f (cons h✝ p✝)) = List.map (Hom.mapDart f) (darts (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ darts (Walk.map f nil) = List.map (Hom.mapDart f) (darts nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (Walk.map f p✝) = List.map (Hom.mapDart f) (darts p✝)\n⊢ darts (Walk.map f (cons h✝ p✝)) = List.map (Hom.mapDart f) (darts (cons h✝ p✝))"],"content":"<;>"},{"tailPos":62686,"headPos":62678,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ darts (Walk.map f nil) = List.map (Hom.mapDart f) (darts nil)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":62686,"headPos":62678,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : darts (Walk.map f p✝) = List.map (Hom.mapDart f) (darts p✝)\n⊢ darts (Walk.map f (cons h✝ p✝)) = List.map (Hom.mapDart f) (darts (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":62686,"headPos":62662,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ darts (Walk.map f p) = List.map (Hom.mapDart f) (darts p)"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":62661,"headPos":62659,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ darts (Walk.map f p) = List.map (Hom.mapDart f) (darts p)"],"goalsAfter":[],"content":"by"},{"tailPos":62686,"headPos":62659,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ darts (Walk.map f p) = List.map (Hom.mapDart f) (darts p)"],"goalsAfter":[],"content":"by induction p <;> simp [*]"},{"tailPos":62860,"headPos":62857,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ edges (Walk.map f nil) = List.map (Sym2.map ↑f) (edges nil)"],"goalsAfter":[],"content":"rfl"},{"tailPos":62860,"headPos":62848,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ : V\n⊢ edges (Walk.map f nil) = List.map (Sym2.map ↑f) (edges nil)"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":62991,"headPos":62884,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : edges (Walk.map f p✝) = List.map (Sym2.map ↑f) (edges p✝)\n⊢ edges (Walk.map f (cons h✝ p✝)) = List.map (Sym2.map ↑f) (edges (cons h✝ p✝))"],"goalsAfter":[],"content":"simp only [Walk.map_cons, edges_cons, List.map_cons, Sym2.map_pair_eq, List.cons.injEq,\n      true_and, ih]"},{"tailPos":62991,"headPos":62863,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : edges (Walk.map f p✝) = List.map (Sym2.map ↑f) (edges p✝)\n⊢ edges (Walk.map f (cons h✝ p✝)) = List.map (Sym2.map ↑f) (edges (cons h✝ p✝))"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    simp only [Walk.map_cons, edges_cons, List.map_cons, Sym2.map_pair_eq, List.cons.injEq,\n      true_and, ih]"},{"tailPos":62991,"headPos":62829,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ edges (Walk.map f p) = List.map (Sym2.map ↑f) (edges p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ edges (Walk.map f p) = List.map (Sym2.map ↑f) (edges p)"],"content":"induction p with\n  | nil => rfl\n  | cons _ _ ih =>\n    simp only [Walk.map_cons, edges_cons, List.map_cons, Sym2.map_pair_eq, List.cons.injEq,\n      true_and, ih]"},{"tailPos":62826,"headPos":62824,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ edges (Walk.map f p) = List.map (Sym2.map ↑f) (edges p)"],"goalsAfter":[],"content":"by"},{"tailPos":62991,"headPos":62824,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\n⊢ edges (Walk.map f p) = List.map (Sym2.map ↑f) (edges p)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => rfl\n  | cons _ _ ih =>\n    simp only [Walk.map_cons, edges_cons, List.map_cons, Sym2.map_pair_eq, List.cons.injEq,\n      true_and, ih]"},{"tailPos":63212,"headPos":63208,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ : V\nhp : IsPath nil\n⊢ IsPath (Walk.map f nil)"],"goalsAfter":[],"content":"simp only [map_nil, isPath_iff_eq_nil]"},{"tailPos":63212,"headPos":63199,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ : V\nhp : IsPath nil\n⊢ IsPath (Walk.map f nil)"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":63260,"headPos":63240,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"content":"Walk.cons_isPath_iff"},{"tailPos":63261,"headPos":63260,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"content":"]"},{"tailPos":63267,"headPos":63236,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"content":"rw [Walk.cons_isPath_iff] at hp"},{"tailPos":63286,"headPos":63272,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ ∀ (x : V), x ∈ support p✝ → ¬↑f x = ↑f u✝"],"content":"simp [ih hp.1]"},{"tailPos":63304,"headPos":63291,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ ∀ (x : V), x ∈ support p✝ → ¬↑f x = ↑f u✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\nx : V\nhx : x ∈ support p✝\nhf : ↑f x = ↑f u✝\n⊢ False"],"content":"intro x hx hf"},{"tailPos":63322,"headPos":63309,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\nx : V\nhx : x ∈ support p✝\nhf : ↑f x = ↑f u✝\n⊢ False"],"goalsAfter":["case cons.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\nhx : u✝ ∈ support p✝\nhf : ↑f u✝ = ↑f u✝\n⊢ False"],"content":"cases hinj hf"},{"tailPos":63340,"headPos":63327,"goalsBefore":["case cons.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\nhx : u✝ ∈ support p✝\nhf : ↑f u✝ = ↑f u✝\n⊢ False"],"goalsAfter":[],"content":"exact hp.2 hx"},{"tailPos":63340,"headPos":63236,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"goalsAfter":[],"content":"rw [Walk.cons_isPath_iff] at hp\n    simp [ih hp.1]\n    intro x hx hf\n    cases hinj hf\n    exact hp.2 hx"},{"tailPos":63340,"headPos":63215,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath p✝ → IsPath (Walk.map f p✝)\nhp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.map f (cons h✝ p✝))"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    rw [Walk.cons_isPath_iff] at hp\n    simp [ih hp.1]\n    intro x hx hf\n    cases hinj hf\n    exact hp.2 hx"},{"tailPos":63340,"headPos":63180,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nhp : IsPath p\n⊢ IsPath (Walk.map f p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nhp : IsPath p\n⊢ IsPath (Walk.map f p)"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    rw [Walk.cons_isPath_iff] at hp\n    simp [ih hp.1]\n    intro x hx hf\n    cases hinj hf\n    exact hp.2 hx"},{"tailPos":63177,"headPos":63175,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nhp : IsPath p\n⊢ IsPath (Walk.map f p)"],"goalsAfter":[],"content":"by"},{"tailPos":63340,"headPos":63175,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nhp : IsPath p\n⊢ IsPath (Walk.map f p)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    rw [Walk.cons_isPath_iff] at hp\n    simp [ih hp.1]\n    intro x hx hf\n    cases hinj hf\n    exact hp.2 hx"},{"tailPos":63556,"headPos":63552,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ : V\nhp : IsPath (Walk.map f Walk.nil)\n⊢ IsPath Walk.nil"],"goalsAfter":[],"content":"simp only [isPath_iff_eq_nil]"},{"tailPos":63556,"headPos":63543,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ : V\nhp : IsPath (Walk.map f Walk.nil)\n⊢ IsPath Walk.nil"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":63593,"headPos":63584,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f (cons h✝ p✝))\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (cons (_ : Adj G' (↑f u✝) (↑f v✝)) (Walk.map f p✝))\n⊢ IsPath (cons h✝ p✝)"],"content":"map_cons,"},{"tailPos":63615,"headPos":63594,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (cons (_ : Adj G' (↑f u✝) (↑f v✝)) (Walk.map f p✝))\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ support (Walk.map f p✝)\n⊢ IsPath (cons h✝ p✝)"],"content":"Walk.cons_isPath_iff,"},{"tailPos":63627,"headPos":63616,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ support (Walk.map f p✝)\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath (cons h✝ p✝)"],"content":"support_map"},{"tailPos":63628,"headPos":63627,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath (cons h✝ p✝)"],"content":"]"},{"tailPos":63634,"headPos":63580,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f (cons h✝ p✝))\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath (cons h✝ p✝)"],"content":"rw [map_cons, Walk.cons_isPath_iff, support_map] at hp"},{"tailPos":63663,"headPos":63643,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"content":"Walk.cons_isPath_iff"},{"tailPos":63664,"headPos":63663,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"content":"]"},{"tailPos":63664,"headPos":63639,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"content":"rw [Walk.cons_isPath_iff]"},{"tailPos":63691,"headPos":63669,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f p✝) ∧ ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"goalsAfter":["case cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp1 : IsPath (Walk.map f p✝)\nhp2 : ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"content":"cases' hp with hp1 hp2"},{"tailPos":63719,"headPos":63696,"goalsBefore":["case cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp1 : IsPath (Walk.map f p✝)\nhp2 : ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ IsPath p✝ ∧ ¬u✝ ∈ support p✝"],"goalsAfter":["case cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp1 : IsPath (Walk.map f p✝)\nhp2 : ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ ¬u✝ ∈ support p✝"],"content":"refine' ⟨ih hp1, _⟩"},{"tailPos":63739,"headPos":63724,"goalsBefore":["case cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp1 : IsPath (Walk.map f p✝)\nhp2 : ¬↑f u✝ ∈ List.map (↑f) (support p✝)\n⊢ ¬u✝ ∈ support p✝"],"goalsAfter":["case cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp1 : IsPath (Walk.map f p✝)\nhp2 : u✝ ∈ support p✝\n⊢ ↑f u✝ ∈ List.map (↑f) (support p✝)"],"content":"contrapose! hp2"},{"tailPos":63775,"headPos":63744,"goalsBefore":["case cons.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp1 : IsPath (Walk.map f p✝)\nhp2 : u✝ ∈ support p✝\n⊢ ↑f u✝ ∈ List.map (↑f) (support p✝)"],"goalsAfter":[],"content":"exact List.mem_map_of_mem f hp2"},{"tailPos":63775,"headPos":63580,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f (cons h✝ p✝))\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":[],"content":"rw [map_cons, Walk.cons_isPath_iff, support_map] at hp\n    rw [Walk.cons_isPath_iff]\n    cases' hp with hp1 hp2\n    refine' ⟨ih hp1, _⟩\n    contrapose! hp2\n    exact List.mem_map_of_mem f hp2"},{"tailPos":63775,"headPos":63559,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsPath (Walk.map f p✝) → IsPath p✝\nhp : IsPath (Walk.map f (cons h✝ p✝))\n⊢ IsPath (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    rw [map_cons, Walk.cons_isPath_iff, support_map] at hp\n    rw [Walk.cons_isPath_iff]\n    cases' hp with hp1 hp2\n    refine' ⟨ih hp1, _⟩\n    contrapose! hp2\n    exact List.mem_map_of_mem f hp2"},{"tailPos":63775,"headPos":63524,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nhp : IsPath (Walk.map f p)\n⊢ IsPath p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nhp : IsPath (Walk.map f p)\n⊢ IsPath p"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    rw [map_cons, Walk.cons_isPath_iff, support_map] at hp\n    rw [Walk.cons_isPath_iff]\n    cases' hp with hp1 hp2\n    refine' ⟨ih hp1, _⟩\n    contrapose! hp2\n    exact List.mem_map_of_mem f hp2"},{"tailPos":63521,"headPos":63519,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nhp : IsPath (Walk.map f p)\n⊢ IsPath p"],"goalsAfter":[],"content":"by"},{"tailPos":63775,"headPos":63519,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nf : G →g G'\nhp : IsPath (Walk.map f p)\n⊢ IsPath p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    rw [map_cons, Walk.cons_isPath_iff, support_map] at hp\n    rw [Walk.cons_isPath_iff]\n    cases' hp with hp1 hp2\n    refine' ⟨ih hp1, _⟩\n    contrapose! hp2\n    exact List.mem_map_of_mem f hp2"},{"tailPos":64246,"headPos":64242,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ : V\n⊢ IsTrail (Walk.map f nil) ↔ IsTrail nil"],"goalsAfter":[],"content":"simp only [map_nil, IsTrail.nil]"},{"tailPos":64246,"headPos":64233,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ : V\n⊢ IsTrail (Walk.map f nil) ↔ IsTrail nil"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":64283,"headPos":64274,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (Walk.map f (cons h✝ p✝)) ↔ IsTrail (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (cons (_ : Adj G' (↑f u✝) (↑f v✝)) (Walk.map f p✝)) ↔ IsTrail (cons h✝ p✝)"],"content":"map_cons,"},{"tailPos":64301,"headPos":64284,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (cons (_ : Adj G' (↑f u✝) (↑f v✝)) (Walk.map f p✝)) ↔ IsTrail (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (Walk.map f p✝) ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail (cons h✝ p✝)"],"content":"cons_isTrail_iff,"},{"tailPos":64305,"headPos":64302,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (Walk.map f p✝) ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔ IsTrail (cons h✝ p✝)"],"content":"ih,"},{"tailPos":64322,"headPos":64306,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔ IsTrail (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"content":"cons_isTrail_iff"},{"tailPos":64323,"headPos":64322,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"content":"]"},{"tailPos":64323,"headPos":64270,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (Walk.map f (cons h✝ p✝)) ↔ IsTrail (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"content":"rw [map_cons, cons_isTrail_iff, ih, cons_isTrail_iff]"},{"tailPos":64350,"headPos":64328,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    IsTrail p✝ ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"goalsAfter":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"content":"apply and_congr_right'"},{"tailPos":64380,"headPos":64359,"goalsBefore":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"goalsAfter":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ edges (Walk.map f p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"content":"← Sym2.map_pair_eq,"},{"tailPos":64391,"headPos":64381,"goalsBefore":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ edges (Walk.map f p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"goalsAfter":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ List.map (Sym2.map ↑f) (edges p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"content":"edges_map,"},{"tailPos":64447,"headPos":64392,"goalsBefore":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ List.map (Sym2.map ↑f) (edges p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"goalsAfter":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ List.map (Sym2.map ↑f) (edges p✝) ↔\n    ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ List.map (Sym2.map ↑f) (edges p✝)"],"content":"← List.mem_map_of_injective (Sym2.map.injective hinj)"},{"tailPos":64448,"headPos":64447,"goalsBefore":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ List.map (Sym2.map ↑f) (edges p✝) ↔\n    ¬Sym2.map (↑f) (Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝)) ∈ List.map (Sym2.map ↑f) (edges p✝)"],"goalsAfter":[],"content":"]"},{"tailPos":64448,"headPos":64355,"goalsBefore":["case cons.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V') (↑f u✝, ↑f v✝) ∈ edges (Walk.map f p✝) ↔\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u✝, v✝) ∈ edges p✝"],"goalsAfter":[],"content":"rw [← Sym2.map_pair_eq, edges_map, ← List.mem_map_of_injective (Sym2.map.injective hinj)]"},{"tailPos":64448,"headPos":64270,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (Walk.map f (cons h✝ p✝)) ↔ IsTrail (cons h✝ p✝)"],"goalsAfter":[],"content":"rw [map_cons, cons_isTrail_iff, ih, cons_isTrail_iff]\n    apply and_congr_right'\n    rw [← Sym2.map_pair_eq, edges_map, ← List.mem_map_of_injective (Sym2.map.injective hinj)]"},{"tailPos":64448,"headPos":64249,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : IsTrail (Walk.map f p✝) ↔ IsTrail p✝\n⊢ IsTrail (Walk.map f (cons h✝ p✝)) ↔ IsTrail (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    rw [map_cons, cons_isTrail_iff, ih, cons_isTrail_iff]\n    apply and_congr_right'\n    rw [← Sym2.map_pair_eq, edges_map, ← List.mem_map_of_injective (Sym2.map.injective hinj)]"},{"tailPos":64448,"headPos":64214,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ↔ IsTrail p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ↔ IsTrail p"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    rw [map_cons, cons_isTrail_iff, ih, cons_isTrail_iff]\n    apply and_congr_right'\n    rw [← Sym2.map_pair_eq, edges_map, ← List.mem_map_of_injective (Sym2.map.injective hinj)]"},{"tailPos":64211,"headPos":64209,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ↔ IsTrail p"],"goalsAfter":[],"content":"by"},{"tailPos":64448,"headPos":64209,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np : Walk G u v\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ↔ IsTrail p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    rw [map_cons, cons_isTrail_iff, ih, cons_isTrail_iff]\n    apply and_congr_right'\n    rw [← Sym2.map_pair_eq, edges_map, ← List.mem_map_of_injective (Sym2.map.injective hinj)]"},{"tailPos":64857,"headPos":64845,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsCycle (Walk.map f p) ↔ IsCycle p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ∧ Walk.map f p ≠ nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔ IsCycle p"],"content":"isCycle_def,"},{"tailPos":64870,"headPos":64858,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ∧ Walk.map f p ≠ nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔ IsCycle p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ∧ Walk.map f p ≠ nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"isCycle_def,"},{"tailPos":64905,"headPos":64871,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail (Walk.map f p) ∧ Walk.map f p ≠ nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ Walk.map f p ≠ nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"map_isTrail_iff_of_injective hinj,"},{"tailPos":64913,"headPos":64906,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ Walk.map f p ≠ nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬Walk.map f p = nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"Ne.def,"},{"tailPos":64929,"headPos":64914,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬Walk.map f p = nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"map_eq_nil_iff,"},{"tailPos":64946,"headPos":64934,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.tail (support (Walk.map f p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.tail (List.map (↑f) (support p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"support_map,"},{"tailPos":64965,"headPos":64947,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.tail (List.map (↑f) (support p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.map (↑f) (List.tail (support p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"← List.map_tail,"},{"tailPos":64989,"headPos":64966,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.map (↑f) (List.tail (support p))) ↔\n    IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.tail (support p)) ↔ IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"content":"List.nodup_map_iff hinj"},{"tailPos":64990,"headPos":64989,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsTrail p ∧ ¬p = nil ∧ List.Nodup (List.tail (support p)) ↔ IsTrail p ∧ p ≠ nil ∧ List.Nodup (List.tail (support p))"],"goalsAfter":[],"content":"]"},{"tailPos":64990,"headPos":64841,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsCycle (Walk.map f p) ↔ IsCycle p"],"goalsAfter":[],"content":"rw [isCycle_def, isCycle_def, map_isTrail_iff_of_injective hinj, Ne.def, map_eq_nil_iff,\n    support_map, ← List.map_tail, List.nodup_map_iff hinj]"},{"tailPos":64838,"headPos":64836,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsCycle (Walk.map f p) ↔ IsCycle p"],"goalsAfter":[],"content":"by"},{"tailPos":64990,"headPos":64836,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nf' : G' →g G''\nu v u' v' : V\np✝ : Walk G u v\np : Walk G u u\nhinj : Injective ↑f\n⊢ IsCycle (Walk.map f p) ↔ IsCycle p"],"goalsAfter":[],"content":"by\n  rw [isCycle_def, isCycle_def, map_isTrail_iff_of_injective hinj, Ne.def, map_eq_nil_iff,\n    support_map, ← List.map_tail, List.nodup_map_iff hinj]"},{"tailPos":65455,"headPos":65443,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Walk.map f)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np p' : Walk G u v\nh : Walk.map f p = Walk.map f p'\n⊢ p = p'"],"content":"intro p p' h"},{"tailPos":65498,"headPos":65490,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\np' : Walk G u✝ u✝\nh : Walk.map f nil = Walk.map f p'\n⊢ nil = p'"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\nh : Walk.map f nil = Walk.map f nil\n⊢ nil = nil","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"content":"cases p'"},{"tailPos":65505,"headPos":65503,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\nh : Walk.map f nil = Walk.map f nil\n⊢ nil = nil","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"goalsAfter":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\nh : Walk.map f nil = Walk.map f nil\n⊢ nil = nil"],"content":"·"},{"tailPos":65509,"headPos":65506,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\nh : Walk.map f nil = Walk.map f nil\n⊢ nil = nil"],"goalsAfter":[],"content":"rfl"},{"tailPos":65509,"headPos":65503,"goalsBefore":["case nil.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\nh : Walk.map f nil = Walk.map f nil\n⊢ nil = nil","case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"goalsAfter":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"content":"· rfl"},{"tailPos":65516,"headPos":65514,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"goalsAfter":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"content":"·"},{"tailPos":65526,"headPos":65517,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"goalsAfter":[],"content":"simp at h"},{"tailPos":65526,"headPos":65514,"goalsBefore":["case nil.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nh : Walk.map f nil = Walk.map f (cons h✝ p✝)\n⊢ nil = cons h✝ p✝"],"goalsAfter":[],"content":"· simp at h"},{"tailPos":65526,"headPos":65490,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\np' : Walk G u✝ u✝\nh : Walk.map f nil = Walk.map f p'\n⊢ nil = p'"],"goalsAfter":[],"content":"cases p'\n    · rfl\n    · simp at h"},{"tailPos":65526,"headPos":65477,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝ u' v' : V\np : Walk G u✝¹ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ : V\np' : Walk G u✝ u✝\nh : Walk.map f nil = Walk.map f p'\n⊢ nil = p'"],"goalsAfter":[],"content":"| nil =>\n    cases p'\n    · rfl\n    · simp at h"},{"tailPos":65586,"headPos":65577,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nih : ∀ ⦃p' : Walk G v✝ u✝⦄, Walk.map f p✝ = Walk.map f p' → p✝ = p'\nh : Walk.map f (cons h✝ p✝) = Walk.map f nil\n⊢ cons h✝ p✝ = nil"],"goalsAfter":[],"content":"simp at h"},{"tailPos":65586,"headPos":65568,"goalsBefore":["case cons.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ u✝\nih : ∀ ⦃p' : Walk G v✝ u✝⦄, Walk.map f p✝ = Walk.map f p' → p✝ = p'\nh : Walk.map f (cons h✝ p✝) = Walk.map f nil\n⊢ cons h✝ p✝ = nil"],"goalsAfter":[],"content":"| nil => simp at h"},{"tailPos":65648,"headPos":65611,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝² u' v' : V\np : Walk G u✝¹ v✝²\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ ⦃p' : Walk G v✝¹ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : Walk.map f (cons h✝¹ p✝¹) = Walk.map f (cons h✝ p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"goalsAfter":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝² u' v' : V\np : Walk G u✝¹ v✝²\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ ⦃p' : Walk G v✝¹ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝¹ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"content":"simp only [map_cons, cons.injEq] at h"},{"tailPos":65669,"headPos":65655,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝² u' v' : V\np : Walk G u✝¹ v✝²\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ ⦃p' : Walk G v✝¹ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝¹ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"goalsAfter":["case cons.cons.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"content":"cases hinj h.1"},{"tailPos":65724,"headPos":65676,"goalsBefore":["case cons.cons.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"goalsAfter":["case cons.cons.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ p✝¹ = p✝"],"content":"simp only [cons.injEq, heq_iff_eq, true_and_iff]"},{"tailPos":65739,"headPos":65731,"goalsBefore":["case cons.cons.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ p✝¹ = p✝"],"goalsAfter":["case cons.cons.refl.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ Walk.map f p✝¹ = Walk.map f p✝"],"content":"apply ih"},{"tailPos":65761,"headPos":65746,"goalsBefore":["case cons.cons.refl.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝¹ : Adj G u✝ v✝\np✝¹ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : ↑f v✝ = ↑f v✝ ∧ HEq (Walk.map f p✝¹) (Walk.map f p✝)\n⊢ Walk.map f p✝¹ = Walk.map f p✝"],"goalsAfter":[],"content":"simpa only [heq_eq_eq] using h.2"},{"tailPos":65761,"headPos":65611,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝² u' v' : V\np : Walk G u✝¹ v✝²\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ ⦃p' : Walk G v✝¹ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : Walk.map f (cons h✝¹ p✝¹) = Walk.map f (cons h✝ p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"goalsAfter":[],"content":"simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":65761,"headPos":65591,"goalsBefore":["case cons.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝² u' v' : V\np : Walk G u✝¹ v✝²\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝¹ w✝ : V\nh✝¹ : Adj G u✝ v✝¹\np✝¹ : Walk G v✝¹ w✝\nih : ∀ ⦃p' : Walk G v✝¹ w✝⦄, Walk.map f p✝¹ = Walk.map f p' → p✝¹ = p'\nv✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nh : Walk.map f (cons h✝¹ p✝¹) = Walk.map f (cons h✝ p✝)\n⊢ cons h✝¹ p✝¹ = cons h✝ p✝"],"goalsAfter":[],"content":"| cons _ _ =>\n      simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":65761,"headPos":65550,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝ = Walk.map f p' → p✝ = p'\np' : Walk G u✝ w✝\nh : Walk.map f (cons h✝ p✝) = Walk.map f p'\n⊢ cons h✝ p✝ = p'"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝ = Walk.map f p' → p✝ = p'\np' : Walk G u✝ w✝\nh : Walk.map f (cons h✝ p✝) = Walk.map f p'\n⊢ cons h✝ p✝ = p'"],"content":"cases p' with\n    | nil => simp at h\n    | cons _ _ =>\n      simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":65761,"headPos":65529,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝¹ v✝¹ u' v' : V\np : Walk G u✝¹ v✝¹\nf : G →g G'\nhinj : Injective ↑f\nu v u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ ⦃p' : Walk G v✝ w✝⦄, Walk.map f p✝ = Walk.map f p' → p✝ = p'\np' : Walk G u✝ w✝\nh : Walk.map f (cons h✝ p✝) = Walk.map f p'\n⊢ cons h✝ p✝ = p'"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    cases p' with\n    | nil => simp at h\n    | cons _ _ =>\n      simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":65761,"headPos":65458,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np p' : Walk G u v\nh : Walk.map f p = Walk.map f p'\n⊢ p = p'"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np✝ : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np p' : Walk G u v\nh : Walk.map f p = Walk.map f p'\n⊢ p = p'"],"content":"induction p with\n  | nil =>\n    cases p'\n    · rfl\n    · simp at h\n  | cons _ _ ih =>\n    cases p' with\n    | nil => simp at h\n    | cons _ _ =>\n      simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":65761,"headPos":65443,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Walk.map f)"],"goalsAfter":[],"content":"intro p p' h\n  induction p with\n  | nil =>\n    cases p'\n    · rfl\n    · simp at h\n  | cons _ _ ih =>\n    cases p' with\n    | nil => simp at h\n    | cons _ _ =>\n      simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":65440,"headPos":65438,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Walk.map f)"],"goalsAfter":[],"content":"by"},{"tailPos":65761,"headPos":65438,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf✝ : G →g G'\nf' : G' →g G''\nu✝ v✝ u' v' : V\np : Walk G u✝ v✝\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Walk.map f)"],"goalsAfter":[],"content":"by\n  intro p p' h\n  induction p with\n  | nil =>\n    cases p'\n    · rfl\n    · simp at h\n  | cons _ _ ih =>\n    cases p' with\n    | nil => simp at h\n    | cons _ _ =>\n      simp only [map_cons, cons.injEq] at h\n      cases hinj h.1\n      simp only [cons.injEq, heq_iff_eq, true_and_iff]\n      apply ih\n      simpa using h.2"},{"tailPos":68087,"headPos":68053,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Path.map f hinj)"],"goalsAfter":["case mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np : Walk G u v\nhp : Walk.IsPath p\np' : Walk G u v\nhp' : Walk.IsPath p'\nh : Path.map f hinj { val := p, property := hp } = Path.map f hinj { val := p', property := hp' }\n⊢ { val := p, property := hp } = { val := p', property := hp' }"],"content":"rintro ⟨p, hp⟩ ⟨p', hp'⟩ h"},{"tailPos":68149,"headPos":68090,"goalsBefore":["case mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np : Walk G u v\nhp : Walk.IsPath p\np' : Walk G u v\nhp' : Walk.IsPath p'\nh : Path.map f hinj { val := p, property := hp } = Path.map f hinj { val := p', property := hp' }\n⊢ { val := p, property := hp } = { val := p', property := hp' }"],"goalsAfter":["case mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np : Walk G u v\nhp : Walk.IsPath p\np' : Walk G u v\nhp' : Walk.IsPath p'\nh : Walk.map f p = Walk.map f p'\n⊢ { val := p, property := hp } = { val := p', property := hp' }"],"content":"simp only [Path.map, Subtype.coe_mk, Subtype.mk.injEq] at h"},{"tailPos":68201,"headPos":68152,"goalsBefore":["case mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\np : Walk G u v\nhp : Walk.IsPath p\np' : Walk G u v\nhp' : Walk.IsPath p'\nh : Walk.map f p = Walk.map f p'\n⊢ { val := p, property := hp } = { val := p', property := hp' }"],"goalsAfter":[],"content":"simp [Walk.map_injective_of_injective hinj u v h]"},{"tailPos":68201,"headPos":68053,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Path.map f hinj)"],"goalsAfter":[],"content":"rintro ⟨p, hp⟩ ⟨p', hp'⟩ h\n  simp only [Path.map, Subtype.coe_mk, Subtype.mk.injEq] at h\n  simp [Walk.map_injective_of_injective hinj u v h]"},{"tailPos":68050,"headPos":68048,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Path.map f hinj)"],"goalsAfter":[],"content":"by"},{"tailPos":68201,"headPos":68048,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nf : G →g G'\nhinj : Injective ↑f\nu v : V\n⊢ Injective (Path.map f hinj)"],"goalsAfter":[],"content":"by\n  rintro ⟨p, hp⟩ ⟨p', hp'⟩ h\n  simp only [Path.map, Subtype.coe_mk, Subtype.mk.injEq] at h\n  simp [Walk.map_injective_of_injective hinj u v h]"},{"tailPos":69193,"headPos":69189,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nH : SimpleGraph V\nu w v : V\na : Adj G u v\np : Walk G v w\nh : ∀ (e : Sym2 V), e ∈ edges (cons' u v w a p) → e ∈ edgeSet H\n⊢ Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges (cons' u v w a p)"],"goalsAfter":[],"content":"simp only [edges_cons, List.find?, List.mem_cons, true_or]"},{"tailPos":69188,"headPos":69186,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nH : SimpleGraph V\nu w v : V\na : Adj G u v\np : Walk G v w\nh : ∀ (e : Sym2 V), e ∈ edges (cons' u v w a p) → e ∈ edgeSet H\n⊢ Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges (cons' u v w a p)"],"goalsAfter":[],"content":"by"},{"tailPos":69193,"headPos":69186,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nH : SimpleGraph V\nu w v : V\na : Adj G u v\np : Walk G v w\nh : ∀ (e : Sym2 V), e ∈ edges (cons' u v w a p) → e ∈ edgeSet H\n⊢ Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges (cons' u v w a p)"],"goalsAfter":[],"content":"by simp"},{"tailPos":69239,"headPos":69230,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nH : SimpleGraph V\nu w v : V\na : Adj G u v\np : Walk G v w\nh : ∀ (e : Sym2 V), e ∈ edges (cons' u v w a p) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges p\n⊢ e ∈ edges (cons' u v w a p)"],"goalsAfter":[],"content":"simp [he]"},{"tailPos":69229,"headPos":69227,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nH : SimpleGraph V\nu w v : V\na : Adj G u v\np : Walk G v w\nh : ∀ (e : Sym2 V), e ∈ edges (cons' u v w a p) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges p\n⊢ e ∈ edges (cons' u v w a p)"],"goalsAfter":[],"content":"by"},{"tailPos":69239,"headPos":69227,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nH : SimpleGraph V\nu w v : V\na : Adj G u v\np : Walk G v w\nh : ∀ (e : Sym2 V), e ∈ edges (cons' u v w a p) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges p\n⊢ e ∈ edges (cons' u v w a p)"],"goalsAfter":[],"content":"by simp [he]"},{"tailPos":69423,"headPos":69412,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ Walk.transfer p G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p → e ∈ edgeSet G) = p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ : V\n⊢ Walk.transfer nil G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges nil → e ∈ edgeSet G) = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.transfer p✝ G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p✝ → e ∈ edgeSet G) = p✝\n⊢ Walk.transfer (cons h✝ p✝) G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges (cons h✝ p✝) → e ∈ edgeSet G) = cons h✝ p✝"],"content":"induction p"},{"tailPos":69427,"headPos":69424,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ : V\n⊢ Walk.transfer nil G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges nil → e ∈ edgeSet G) = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.transfer p✝ G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p✝ → e ∈ edgeSet G) = p✝\n⊢ Walk.transfer (cons h✝ p✝) G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges (cons h✝ p✝) → e ∈ edgeSet G) = cons h✝ p✝"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ : V\n⊢ Walk.transfer nil G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges nil → e ∈ edgeSet G) = nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.transfer p✝ G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p✝ → e ∈ edgeSet G) = p✝\n⊢ Walk.transfer (cons h✝ p✝) G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges (cons h✝ p✝) → e ∈ edgeSet G) = cons h✝ p✝"],"content":"<;>"},{"tailPos":69436,"headPos":69428,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ : V\n⊢ Walk.transfer nil G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges nil → e ∈ edgeSet G) = nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":69436,"headPos":69428,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.transfer p✝ G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p✝ → e ∈ edgeSet G) = p✝\n⊢ Walk.transfer (cons h✝ p✝) G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges (cons h✝ p✝) → e ∈ edgeSet G) = cons h✝ p✝"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":69436,"headPos":69412,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ Walk.transfer p G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p → e ∈ edgeSet G) = p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":69409,"headPos":69407,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ Walk.transfer p G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p → e ∈ edgeSet G) = p"],"goalsAfter":[],"content":"by"},{"tailPos":69436,"headPos":69407,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\n⊢ Walk.transfer p G (_ : ∀ ⦃e : Sym2 V⦄, e ∈ edges p → e ∈ edgeSet G) = p"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":69649,"headPos":69638,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nGH : G ≤ H\n⊢ Walk.transfer p H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ Walk.transfer nil H hp = Walk.map (Hom.mapSpanningSubgraphs GH) nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H),\n    Walk.transfer p✝ H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ Walk.transfer (cons h✝ p✝) H hp = Walk.map (Hom.mapSpanningSubgraphs GH) (cons h✝ p✝)"],"content":"induction p"},{"tailPos":69653,"headPos":69650,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ Walk.transfer nil H hp = Walk.map (Hom.mapSpanningSubgraphs GH) nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H),\n    Walk.transfer p✝ H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ Walk.transfer (cons h✝ p✝) H hp = Walk.map (Hom.mapSpanningSubgraphs GH) (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ Walk.transfer nil H hp = Walk.map (Hom.mapSpanningSubgraphs GH) nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H),\n    Walk.transfer p✝ H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ Walk.transfer (cons h✝ p✝) H hp = Walk.map (Hom.mapSpanningSubgraphs GH) (cons h✝ p✝)"],"content":"<;>"},{"tailPos":69662,"headPos":69654,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ Walk.transfer nil H hp = Walk.map (Hom.mapSpanningSubgraphs GH) nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":69662,"headPos":69654,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nGH : G ≤ H\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H),\n    Walk.transfer p✝ H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ Walk.transfer (cons h✝ p✝) H hp = Walk.map (Hom.mapSpanningSubgraphs GH) (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":69662,"headPos":69638,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nGH : G ≤ H\n⊢ Walk.transfer p H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":69635,"headPos":69633,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nGH : G ≤ H\n⊢ Walk.transfer p H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p"],"goalsAfter":[],"content":"by"},{"tailPos":69662,"headPos":69633,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nGH : G ≤ H\n⊢ Walk.transfer p H hp = Walk.map (Hom.mapSpanningSubgraphs GH) p"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":69841,"headPos":69830,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ edges (Walk.transfer p H hp) = edges p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ edges (Walk.transfer nil H hp) = edges nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), edges (Walk.transfer p✝ H hp) = edges p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ edges (Walk.transfer (cons h✝ p✝) H hp) = edges (cons h✝ p✝)"],"content":"induction p"},{"tailPos":69845,"headPos":69842,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ edges (Walk.transfer nil H hp) = edges nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), edges (Walk.transfer p✝ H hp) = edges p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ edges (Walk.transfer (cons h✝ p✝) H hp) = edges (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ edges (Walk.transfer nil H hp) = edges nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), edges (Walk.transfer p✝ H hp) = edges p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ edges (Walk.transfer (cons h✝ p✝) H hp) = edges (cons h✝ p✝)"],"content":"<;>"},{"tailPos":69854,"headPos":69846,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ edges (Walk.transfer nil H hp) = edges nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":69854,"headPos":69846,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), edges (Walk.transfer p✝ H hp) = edges p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ edges (Walk.transfer (cons h✝ p✝) H hp) = edges (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":69854,"headPos":69830,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ edges (Walk.transfer p H hp) = edges p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":69827,"headPos":69825,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ edges (Walk.transfer p H hp) = edges p"],"goalsAfter":[],"content":"by"},{"tailPos":69854,"headPos":69825,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ edges (Walk.transfer p H hp) = edges p"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":70026,"headPos":70015,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ support (Walk.transfer p H hp) = support p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ support (Walk.transfer nil H hp) = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), support (Walk.transfer p✝ H hp) = support p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ support (Walk.transfer (cons h✝ p✝) H hp) = support (cons h✝ p✝)"],"content":"induction p"},{"tailPos":70030,"headPos":70027,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ support (Walk.transfer nil H hp) = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), support (Walk.transfer p✝ H hp) = support p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ support (Walk.transfer (cons h✝ p✝) H hp) = support (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ support (Walk.transfer nil H hp) = support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), support (Walk.transfer p✝ H hp) = support p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ support (Walk.transfer (cons h✝ p✝) H hp) = support (cons h✝ p✝)"],"content":"<;>"},{"tailPos":70039,"headPos":70031,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ support (Walk.transfer nil H hp) = support nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":70039,"headPos":70031,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), support (Walk.transfer p✝ H hp) = support p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ support (Walk.transfer (cons h✝ p✝) H hp) = support (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":70039,"headPos":70015,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ support (Walk.transfer p H hp) = support p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":70012,"headPos":70010,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ support (Walk.transfer p H hp) = support p"],"goalsAfter":[],"content":"by"},{"tailPos":70039,"headPos":70010,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ support (Walk.transfer p H hp) = support p"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":70211,"headPos":70200,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ length (Walk.transfer p H hp) = length p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ length (Walk.transfer nil H hp) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), length (Walk.transfer p✝ H hp) = length p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ length (Walk.transfer (cons h✝ p✝) H hp) = length (cons h✝ p✝)"],"content":"induction p"},{"tailPos":70215,"headPos":70212,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ length (Walk.transfer nil H hp) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), length (Walk.transfer p✝ H hp) = length p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ length (Walk.transfer (cons h✝ p✝) H hp) = length (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ length (Walk.transfer nil H hp) = length nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), length (Walk.transfer p✝ H hp) = length p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ length (Walk.transfer (cons h✝ p✝) H hp) = length (cons h✝ p✝)"],"content":"<;>"},{"tailPos":70224,"headPos":70216,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ length (Walk.transfer nil H hp) = length nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":70224,"headPos":70216,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), length (Walk.transfer p✝ H hp) = length p✝\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ length (Walk.transfer (cons h✝ p✝) H hp) = length (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":70224,"headPos":70200,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ length (Walk.transfer p H hp) = length p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":70197,"headPos":70195,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ length (Walk.transfer p H hp) = length p"],"goalsAfter":[],"content":"by"},{"tailPos":70224,"headPos":70195,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ length (Walk.transfer p H hp) = length p"],"goalsAfter":[],"content":"by\n  induction p <;> simp [*]"},{"tailPos":70440,"headPos":70436,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges Walk.nil → e ∈ edgeSet H\npp : IsPath Walk.nil\n⊢ IsPath (Walk.transfer Walk.nil H hp)"],"goalsAfter":[],"content":"simp only [Walk.transfer, isPath_iff_eq_nil]"},{"tailPos":70440,"headPos":70427,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges Walk.nil → e ∈ edgeSet H\npp : IsPath Walk.nil\n⊢ IsPath (Walk.transfer Walk.nil H hp)"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":70537,"headPos":70464,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), IsPath p✝ → IsPath (Walk.transfer p✝ H hp)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\npp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.transfer (cons h✝ p✝) H hp)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), IsPath p✝ → IsPath (Walk.transfer p✝ H hp)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\npp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)) ∧ ¬u✝ ∈ support p✝"],"content":"simp only [Walk.transfer, cons_isPath_iff, support_transfer _ ] at pp ⊢"},{"tailPos":70569,"headPos":70542,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), IsPath p✝ → IsPath (Walk.transfer p✝ H hp)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\npp : IsPath p✝ ∧ ¬u✝ ∈ support p✝\n⊢ IsPath (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)) ∧ ¬u✝ ∈ support p✝"],"goalsAfter":[],"content":"exact ⟨ih _ pp.1, pp.2⟩"},{"tailPos":70569,"headPos":70464,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), IsPath p✝ → IsPath (Walk.transfer p✝ H hp)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\npp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.transfer (cons h✝ p✝) H hp)"],"goalsAfter":[],"content":"simp only [Walk.transfer, cons_isPath_iff, support_transfer _ ] at pp ⊢\n    exact ⟨ih _ pp.1, pp.2⟩"},{"tailPos":70569,"headPos":70443,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H), IsPath p✝ → IsPath (Walk.transfer p✝ H hp)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\npp : IsPath (cons h✝ p✝)\n⊢ IsPath (Walk.transfer (cons h✝ p✝) H hp)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    simp only [Walk.transfer, cons_isPath_iff, support_transfer _ ] at pp ⊢\n    exact ⟨ih _ pp.1, pp.2⟩"},{"tailPos":70569,"headPos":70408,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\npp : IsPath p\n⊢ IsPath (Walk.transfer p H hp)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\npp : IsPath p\n⊢ IsPath (Walk.transfer p H hp)"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    simp only [Walk.transfer, cons_isPath_iff, support_transfer _ ] at pp ⊢\n    exact ⟨ih _ pp.1, pp.2⟩"},{"tailPos":70405,"headPos":70403,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\npp : IsPath p\n⊢ IsPath (Walk.transfer p H hp)"],"goalsAfter":[],"content":"by"},{"tailPos":70569,"headPos":70403,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\npp : IsPath p\n⊢ IsPath (Walk.transfer p H hp)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    simp only [Walk.transfer, cons_isPath_iff, support_transfer _ ] at pp ⊢\n    exact ⟨ih _ pp.1, pp.2⟩"},{"tailPos":70794,"headPos":70784,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nqc : IsCycle nil\nhq : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer nil H hq)"],"goalsAfter":[],"content":"simp at qc"},{"tailPos":70794,"headPos":70775,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nqc : IsCycle nil\nhq : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer nil H hq)"],"goalsAfter":[],"content":"| nil => simp at qc"},{"tailPos":70901,"headPos":70815,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nqc : IsCycle (cons h✝ q)\nhq : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer (cons h✝ q) H hq)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nqc : IsCycle (cons h✝ q)\nhq✝ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\nhq : Adj H u v✝ ∧ ∀ (a : Sym2 V), a ∈ edges q → a ∈ edgeSet H\n⊢ IsCycle (Walk.transfer (cons h✝ q) H hq✝)"],"content":"simp only [edges_cons, List.find?, List.mem_cons, forall_eq_or_imp, mem_edgeSet] at hq"},{"tailPos":70982,"headPos":70906,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nqc : IsCycle (cons h✝ q)\nhq✝ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\nhq : Adj H u v✝ ∧ ∀ (a : Sym2 V), a ∈ edges q → a ∈ edgeSet H\n⊢ IsCycle (Walk.transfer (cons h✝ q) H hq✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nhq✝ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\nhq : Adj H u v✝ ∧ ∀ (a : Sym2 V), a ∈ edges q → a ∈ edgeSet H\nqc : IsPath q ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v✝) ∈ edges q\n⊢ IsPath (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H)) ∧\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u, v✝) ∈ edges q"],"content":"simp only [Walk.transfer, cons_isCycle_iff, edges_transfer q hq.2] at qc ⊢"},{"tailPos":71023,"headPos":70987,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nhq✝ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\nhq : Adj H u v✝ ∧ ∀ (a : Sym2 V), a ∈ edges q → a ∈ edgeSet H\nqc : IsPath q ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v✝) ∈ edges q\n⊢ IsPath (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H)) ∧\n    ¬Quotient.mk (Sym2.Rel.setoid V) (u, v✝) ∈ edges q"],"goalsAfter":[],"content":"exact ⟨qc.1.transfer hq.2, qc.2⟩"},{"tailPos":71023,"headPos":70815,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nqc : IsCycle (cons h✝ q)\nhq : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer (cons h✝ q) H hq)"],"goalsAfter":[],"content":"simp only [edges_cons, List.find?, List.mem_cons, forall_eq_or_imp, mem_edgeSet] at hq\n    simp only [Walk.transfer, cons_isCycle_iff, edges_transfer q hq.2] at qc ⊢\n    exact ⟨qc.1.transfer hq.2, qc.2⟩"},{"tailPos":71023,"headPos":70797,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nv✝ : V\nh✝ : Adj G u v✝\nq : Walk G v✝ u\nqc : IsCycle (cons h✝ q)\nhq : ∀ (e : Sym2 V), e ∈ edges (cons h✝ q) → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer (cons h✝ q) H hq)"],"goalsAfter":[],"content":"| cons _ q =>\n    simp only [edges_cons, List.find?, List.mem_cons, forall_eq_or_imp, mem_edgeSet] at hq\n    simp only [Walk.transfer, cons_isCycle_iff, edges_transfer q hq.2] at qc ⊢\n    exact ⟨qc.1.transfer hq.2, qc.2⟩"},{"tailPos":71023,"headPos":70760,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nq : Walk G u u\nqc : IsCycle q\nhq : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer q H hq)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nq : Walk G u u\nqc : IsCycle q\nhq : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer q H hq)"],"content":"cases q with\n  | nil => simp at qc\n  | cons _ q =>\n    simp only [edges_cons, List.find?, List.mem_cons, forall_eq_or_imp, mem_edgeSet] at hq\n    simp only [Walk.transfer, cons_isCycle_iff, edges_transfer q hq.2] at qc ⊢\n    exact ⟨qc.1.transfer hq.2, qc.2⟩"},{"tailPos":70757,"headPos":70755,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nq : Walk G u u\nqc : IsCycle q\nhq : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer q H hq)"],"goalsAfter":[],"content":"by"},{"tailPos":71023,"headPos":70755,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nq : Walk G u u\nqc : IsCycle q\nhq : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H\n⊢ IsCycle (Walk.transfer q H hq)"],"goalsAfter":[],"content":"by\n  cases q with\n  | nil => simp at qc\n  | cons _ q =>\n    simp only [edges_cons, List.find?, List.mem_cons, forall_eq_or_imp, mem_edgeSet] at hq\n    simp only [Walk.transfer, cons_isCycle_iff, edges_transfer q hq.2] at qc ⊢\n    exact ⟨qc.1.transfer hq.2, qc.2⟩"},{"tailPos":71534,"headPos":71530,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer nil H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer nil H hp) K hp' = Walk.transfer nil K (_ : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet K)"],"goalsAfter":[],"content":"simp only [Walk.transfer]"},{"tailPos":71534,"headPos":71521,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer nil H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer nil H hp) K hp' = Walk.transfer nil K (_ : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet K)"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":71616,"headPos":71558,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)\n    (hp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p✝ H hp) → e ∈ edgeSet K),\n    Walk.transfer (Walk.transfer p✝ H hp) K hp' = Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer (cons h✝ p✝) H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer (cons h✝ p✝) H hp) K hp' =\n    Walk.transfer (cons h✝ p✝) K (_ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet K)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)\n    (hp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p✝ H hp) → e ∈ edgeSet K),\n    Walk.transfer (Walk.transfer p✝ H hp) K hp' = Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer (cons h✝ p✝) H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)) K\n      (_ :\n        ∀ (e : Sym2 V),\n          e ∈ edges (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)) → e ∈ edgeSet K) =\n    Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)"],"content":"simp only [Walk.transfer, cons.injEq, heq_eq_eq, true_and]"},{"tailPos":71629,"headPos":71621,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)\n    (hp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p✝ H hp) → e ∈ edgeSet K),\n    Walk.transfer (Walk.transfer p✝ H hp) K hp' = Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer (cons h✝ p✝) H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)) K\n      (_ :\n        ∀ (e : Sym2 V),\n          e ∈ edges (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)) → e ∈ edgeSet K) =\n    Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)"],"goalsAfter":[],"content":"apply ih"},{"tailPos":71629,"headPos":71558,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)\n    (hp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p✝ H hp) → e ∈ edgeSet K),\n    Walk.transfer (Walk.transfer p✝ H hp) K hp' = Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer (cons h✝ p✝) H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer (cons h✝ p✝) H hp) K hp' =\n    Walk.transfer (cons h✝ p✝) K (_ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet K)"],"goalsAfter":[],"content":"simp only [Walk.transfer, cons.injEq, heq_eq_eq, true_and]\n    apply ih"},{"tailPos":71629,"headPos":71537,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH K : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H)\n    (hp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p✝ H hp) → e ∈ edgeSet K),\n    Walk.transfer (Walk.transfer p✝ H hp) K hp' = Walk.transfer p✝ K (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet K)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer (cons h✝ p✝) H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer (cons h✝ p✝) H hp) K hp' =\n    Walk.transfer (cons h✝ p✝) K (_ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet K)"],"goalsAfter":[],"content":"| cons _ _ ih =>\n    simp only [Walk.transfer, cons.injEq, heq_eq_eq, true_and]\n    apply ih"},{"tailPos":71629,"headPos":71502,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nK : SimpleGraph V\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer p H hp) K hp' = Walk.transfer p K (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet K)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nK : SimpleGraph V\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer p H hp) K hp' = Walk.transfer p K (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet K)"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    simp only [Walk.transfer, cons.injEq, heq_eq_eq, true_and]\n    apply ih"},{"tailPos":71499,"headPos":71497,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nK : SimpleGraph V\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer p H hp) K hp' = Walk.transfer p K (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet K)"],"goalsAfter":[],"content":"by"},{"tailPos":71629,"headPos":71497,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\nK : SimpleGraph V\nhp' : ∀ (e : Sym2 V), e ∈ edges (Walk.transfer p H hp) → e ∈ edgeSet K\n⊢ Walk.transfer (Walk.transfer p H hp) K hp' = Walk.transfer p K (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet K)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih =>\n    simp only [Walk.transfer, cons.injEq, heq_eq_eq, true_and]\n    apply ih"},{"tailPos":71851,"headPos":71842,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges p\n⊢ e ∈ edges (append p q)"],"goalsAfter":[],"content":"simp [he]"},{"tailPos":71841,"headPos":71839,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges p\n⊢ e ∈ edges (append p q)"],"goalsAfter":[],"content":"by"},{"tailPos":71851,"headPos":71839,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges p\n⊢ e ∈ edges (append p q)"],"goalsAfter":[],"content":"by simp [he]"},{"tailPos":71914,"headPos":71905,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges q\n⊢ e ∈ edges (append p q)"],"goalsAfter":[],"content":"simp [he]"},{"tailPos":71904,"headPos":71902,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges q\n⊢ e ∈ edges (append p q)"],"goalsAfter":[],"content":"by"},{"tailPos":71914,"headPos":71902,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\ne : Sym2 V\nhe : e ∈ edges q\n⊢ e ∈ edges (append p q)"],"goalsAfter":[],"content":"by simp [he]"},{"tailPos":71957,"headPos":71953,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nu✝ : V\nq : Walk G u✝ w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append nil q) → e ∈ edgeSet H\n⊢ Walk.transfer (append nil q) H hpq =\n    append (Walk.transfer nil H (_ : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":[],"content":"simp only [nil_append, Walk.transfer]"},{"tailPos":71957,"headPos":71944,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nu✝ : V\nq : Walk G u✝ w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append nil q) → e ∈ edgeSet H\n⊢ Walk.transfer (append nil q) H hpq =\n    append (Walk.transfer nil H (_ : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":72052,"headPos":71977,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (q : Walk G w✝ w) (hpq : ∀ (e : Sym2 V), e ∈ edges (append p✝ q) → e ∈ edgeSet H),\n    Walk.transfer (append p✝ q) H hpq =\n      append (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H))\n        (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))\nq : Walk G w✝ w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append (cons h✝ p✝) q) → e ∈ edgeSet H\n⊢ Walk.transfer (append (cons h✝ p✝) q) H hpq =\n    append (Walk.transfer (cons h✝ p✝) H (_ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":[],"content":"simp only [Walk.transfer, cons_append, cons.injEq, heq_eq_eq, true_and, ih]"},{"tailPos":72052,"headPos":71960,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (q : Walk G w✝ w) (hpq : ∀ (e : Sym2 V), e ∈ edges (append p✝ q) → e ∈ edgeSet H),\n    Walk.transfer (append p✝ q) H hpq =\n      append (Walk.transfer p✝ H (_ : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H))\n        (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))\nq : Walk G w✝ w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append (cons h✝ p✝) q) → e ∈ edgeSet H\n⊢ Walk.transfer (append (cons h✝ p✝) q) H hpq =\n    append (Walk.transfer (cons h✝ p✝) H (_ : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":[],"content":"| cons _ _ ih => simp only [Walk.transfer, cons_append, cons.injEq, heq_eq_eq, true_and, ih]"},{"tailPos":72052,"headPos":71925,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\n⊢ Walk.transfer (append p q) H hpq =\n    append (Walk.transfer p H (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\n⊢ Walk.transfer (append p q) H hpq =\n    append (Walk.transfer p H (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih => simp only [Walk.transfer, cons_append, cons.injEq, heq_eq_eq, true_and, ih]"},{"tailPos":71922,"headPos":71920,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\n⊢ Walk.transfer (append p q) H hpq =\n    append (Walk.transfer p H (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":[],"content":"by"},{"tailPos":72052,"headPos":71920,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nw : V\nH : SimpleGraph V\nq : Walk G v w\nhpq : ∀ (e : Sym2 V), e ∈ edges (append p q) → e ∈ edgeSet H\n⊢ Walk.transfer (append p q) H hpq =\n    append (Walk.transfer p H (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H))\n      (Walk.transfer q H (_ : ∀ (e : Sym2 V), e ∈ edges q → e ∈ edgeSet H))"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih => simp only [Walk.transfer, cons_append, cons.injEq, heq_eq_eq, true_and, ih]"},{"tailPos":72275,"headPos":72231,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H"],"content":"simp only [edges_reverse, List.mem_reverse']"},{"tailPos":72276,"headPos":72275,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H"],"content":";"},{"tailPos":72285,"headPos":72277,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H"],"goalsAfter":[],"content":"exact hp"},{"tailPos":72285,"headPos":72231,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H"],"goalsAfter":[],"content":"simp only [edges_reverse, List.mem_reverse']; exact hp"},{"tailPos":72230,"headPos":72228,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H"],"goalsAfter":[],"content":"by"},{"tailPos":72285,"headPos":72228,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H"],"goalsAfter":[],"content":"by simp only [edges_reverse, List.mem_reverse']; exact hp"},{"tailPos":72327,"headPos":72323,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ reverse (Walk.transfer nil H hp) =\n    Walk.transfer (reverse nil) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse nil) → e ∈ edgeSet H)"],"goalsAfter":[],"content":"simp only [Walk.transfer, reverse_nil]"},{"tailPos":72327,"headPos":72314,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ : V\nhp : ∀ (e : Sym2 V), e ∈ edges nil → e ∈ edgeSet H\n⊢ reverse (Walk.transfer nil H hp) =\n    Walk.transfer (reverse nil) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse nil) → e ∈ edgeSet H)"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":72420,"headPos":72347,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H),\n    reverse (Walk.transfer p✝ H hp) =\n      Walk.transfer (reverse p✝) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse p✝) → e ∈ edgeSet H)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ reverse (Walk.transfer (cons h✝ p✝) H hp) =\n    Walk.transfer (reverse (cons h✝ p✝)) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse (cons h✝ p✝)) → e ∈ edgeSet H)"],"goalsAfter":[],"content":"simp only [transfer_append, Walk.transfer, reverse_nil, reverse_cons, ih]"},{"tailPos":72420,"headPos":72330,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih :\n  ∀ (hp : ∀ (e : Sym2 V), e ∈ edges p✝ → e ∈ edgeSet H),\n    reverse (Walk.transfer p✝ H hp) =\n      Walk.transfer (reverse p✝) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse p✝) → e ∈ edgeSet H)\nhp : ∀ (e : Sym2 V), e ∈ edges (cons h✝ p✝) → e ∈ edgeSet H\n⊢ reverse (Walk.transfer (cons h✝ p✝) H hp) =\n    Walk.transfer (reverse (cons h✝ p✝)) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse (cons h✝ p✝)) → e ∈ edgeSet H)"],"goalsAfter":[],"content":"| cons _ _ ih => simp only [transfer_append, Walk.transfer, reverse_nil, reverse_cons, ih]"},{"tailPos":72420,"headPos":72295,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ reverse (Walk.transfer p H hp) =\n    Walk.transfer (reverse p) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ reverse (Walk.transfer p H hp) =\n    Walk.transfer (reverse p) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H)"],"content":"induction p with\n  | nil => simp\n  | cons _ _ ih => simp only [transfer_append, Walk.transfer, reverse_nil, reverse_cons, ih]"},{"tailPos":72292,"headPos":72290,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ reverse (Walk.transfer p H hp) =\n    Walk.transfer (reverse p) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H)"],"goalsAfter":[],"content":"by"},{"tailPos":72420,"headPos":72290,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\np : Walk G u v\nH : SimpleGraph V\nhp : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet H\n⊢ reverse (Walk.transfer p H hp) =\n    Walk.transfer (reverse p) H (_ : ∀ (e : Sym2 V), e ∈ edges (reverse p) → e ∈ edgeSet H)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ ih => simp only [transfer_append, Walk.transfer, reverse_nil, reverse_cons, ih]"},{"tailPos":72892,"headPos":72847,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ns : Set (Sym2 V)\nv w : V\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ns : Set (Sym2 V)\nv w : V\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet G ∧ ¬e ∈ s"],"content":"simp only [edgeSet_deleteEdges, Set.mem_diff]"},{"tailPos":72955,"headPos":72897,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ns : Set (Sym2 V)\nv w : V\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet G ∧ ¬e ∈ s"],"goalsAfter":[],"content":"exact fun e ep => ⟨edges_subset_edgeSet p ep, hp e ep⟩"},{"tailPos":72955,"headPos":72847,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ns : Set (Sym2 V)\nv w : V\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s)"],"goalsAfter":[],"content":"simp only [edgeSet_deleteEdges, Set.mem_diff]\n    exact fun e ep => ⟨edges_subset_edgeSet p ep, hp e ep⟩"},{"tailPos":72842,"headPos":72840,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ns : Set (Sym2 V)\nv w : V\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s)"],"goalsAfter":[],"content":"by"},{"tailPos":72955,"headPos":72840,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ns : Set (Sym2 V)\nv w : V\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s)"],"goalsAfter":[],"content":"by\n    simp only [edgeSet_deleteEdges, Set.mem_diff]\n    exact fun e ep => ⟨edges_subset_edgeSet p ep, hp e ep⟩"},{"tailPos":73942,"headPos":73931,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ edges p → ¬e' ∈ {e}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ {e} → ¬e' ∈ edges p"],"content":"contrapose!"},{"tailPos":73943,"headPos":73942,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ {e} → ¬e' ∈ edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ {e} → ¬e' ∈ edges p"],"content":";"},{"tailPos":73988,"headPos":73944,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ {e} → ¬e' ∈ edges p"],"goalsAfter":[],"content":"simp (config := { contextual := true }) [hp]"},{"tailPos":73988,"headPos":73931,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ edges p → ¬e' ∈ {e}"],"goalsAfter":[],"content":"contrapose!; simp (config := { contextual := true }) [hp]"},{"tailPos":73930,"headPos":73928,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ edges p → ¬e' ∈ {e}"],"goalsAfter":[],"content":"by"},{"tailPos":73988,"headPos":73928,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ne : Sym2 V\np : Walk G v w\nhp : ¬e ∈ edges p\ne' : Sym2 V\n⊢ e' ∈ edges p → ¬e' ∈ {e}"],"goalsAfter":[],"content":"by contrapose!; simp (config := { contextual := true }) [hp]"},{"tailPos":74267,"headPos":74241,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.map (Hom.mapSpanningSubgraphs (_ : deleteEdges G s ≤ G)) (toDeleteEdges s p hp) = p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.transfer (toDeleteEdges s p hp) G ?hp = p","case hp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges (toDeleteEdges s p hp) → e ∈ edgeSet G"],"content":"← transfer_eq_map_of_le,"},{"tailPos":74286,"headPos":74268,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.transfer (toDeleteEdges s p hp) G ?hp = p","case hp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges (toDeleteEdges s p hp) → e ∈ edgeSet G"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.transfer p G (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet G) = p","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"content":"transfer_transfer,"},{"tailPos":74300,"headPos":74287,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.transfer p G (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet G) = p","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ p = p","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"content":"transfer_self"},{"tailPos":74301,"headPos":74300,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ p = p","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"content":"]"},{"tailPos":74301,"headPos":74237,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.map (Hom.mapSpanningSubgraphs (_ : deleteEdges G s ≤ G)) (toDeleteEdges s p hp) = p"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"content":"rw [← transfer_eq_map_of_le, transfer_transfer, transfer_self]"},{"tailPos":74306,"headPos":74304,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"content":"·"},{"tailPos":74315,"headPos":74307,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n    e ∈ edgeSet G"],"content":"intros e"},{"tailPos":74338,"headPos":74324,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n    e ∈ edgeSet G"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges p → e ∈ edgeSet G"],"content":"edges_transfer"},{"tailPos":74339,"headPos":74338,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges p → e ∈ edgeSet G"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges p → e ∈ edgeSet G"],"content":"]"},{"tailPos":74339,"headPos":74320,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n    e ∈ edgeSet G"],"goalsAfter":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges p → e ∈ edgeSet G"],"content":"rw [edges_transfer]"},{"tailPos":74372,"headPos":74344,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\ne : Sym2 V\n⊢ e ∈ edges p → e ∈ edgeSet G"],"goalsAfter":[],"content":"apply edges_subset_edgeSet p"},{"tailPos":74372,"headPos":74307,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"goalsAfter":[],"content":"intros e\n    rw [edges_transfer]\n    apply edges_subset_edgeSet p"},{"tailPos":74372,"headPos":74304,"goalsBefore":["case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G","case hp'\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ ∀ (e : Sym2 V),\n    e ∈ edges (Walk.transfer p (deleteEdges G s) (_ : ∀ (e : Sym2 V), e ∈ edges p → e ∈ edgeSet (deleteEdges G s))) →\n      e ∈ edgeSet G"],"goalsAfter":[],"content":"· intros e\n    rw [edges_transfer]\n    apply edges_subset_edgeSet p"},{"tailPos":74372,"headPos":74237,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.map (Hom.mapSpanningSubgraphs (_ : deleteEdges G s ≤ G)) (toDeleteEdges s p hp) = p"],"goalsAfter":[],"content":"rw [← transfer_eq_map_of_le, transfer_transfer, transfer_self]\n  · intros e\n    rw [edges_transfer]\n    apply edges_subset_edgeSet p"},{"tailPos":74234,"headPos":74232,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.map (Hom.mapSpanningSubgraphs (_ : deleteEdges G s ≤ G)) (toDeleteEdges s p hp) = p"],"goalsAfter":[],"content":"by"},{"tailPos":74372,"headPos":74232,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\ns : Set (Sym2 V)\np : Walk G v w\nhp : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s\n⊢ Walk.map (Hom.mapSpanningSubgraphs (_ : deleteEdges G s ≤ G)) (toDeleteEdges s p hp) = p"],"goalsAfter":[],"content":"by\n  rw [← transfer_eq_map_of_le, transfer_transfer, transfer_self]\n  · intros e\n    rw [edges_transfer]\n    apply edges_subset_edgeSet p"},{"tailPos":75126,"headPos":75116,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\ns : Set (Sym2 V)\np : Walk G u' v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"content":"subst_vars"},{"tailPos":75127,"headPos":75126,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\ns : Set (Sym2 V)\np : Walk G u' v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\ns : Set (Sym2 V)\np : Walk G u' v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"content":";"},{"tailPos":75135,"headPos":75128,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\ns : Set (Sym2 V)\np : Walk G u' v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"goalsAfter":[],"content":"exact h"},{"tailPos":75135,"headPos":75116,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"goalsAfter":[],"content":"subst_vars; exact h"},{"tailPos":75115,"headPos":75113,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"goalsAfter":[],"content":"by"},{"tailPos":75135,"headPos":75113,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s"],"goalsAfter":[],"content":"by subst_vars; exact h"},{"tailPos":75167,"headPos":75157,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ toDeleteEdges s (Walk.copy p hu hv) h = Walk.copy (toDeleteEdges s p (_ : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s)) hu hv"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\ns : Set (Sym2 V)\np : Walk G u' v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) → ¬e ∈ s\n⊢ toDeleteEdges s (Walk.copy p (_ : u' = u') (_ : v' = v')) h =\n    Walk.copy (toDeleteEdges s p (_ : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s)) (_ : u' = u') (_ : v' = v')"],"content":"subst_vars"},{"tailPos":75173,"headPos":75170,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu' v' : V\ns : Set (Sym2 V)\np : Walk G u' v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p (_ : u' = u') (_ : v' = v')) → ¬e ∈ s\n⊢ toDeleteEdges s (Walk.copy p (_ : u' = u') (_ : v' = v')) h =\n    Walk.copy (toDeleteEdges s p (_ : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s)) (_ : u' = u') (_ : v' = v')"],"goalsAfter":[],"content":"rfl"},{"tailPos":75173,"headPos":75157,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ toDeleteEdges s (Walk.copy p hu hv) h = Walk.copy (toDeleteEdges s p (_ : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s)) hu hv"],"goalsAfter":[],"content":"subst_vars\n  rfl"},{"tailPos":75154,"headPos":75152,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ toDeleteEdges s (Walk.copy p hu hv) h = Walk.copy (toDeleteEdges s p (_ : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s)) hu hv"],"goalsAfter":[],"content":"by"},{"tailPos":75173,"headPos":75152,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u' v' : V\ns : Set (Sym2 V)\np : Walk G u v\nhu : u = u'\nhv : v = v'\nh : ∀ (e : Sym2 V), e ∈ edges (Walk.copy p hu hv) → ¬e ∈ s\n⊢ toDeleteEdges s (Walk.copy p hu hv) h = Walk.copy (toDeleteEdges s p (_ : ∀ (e : Sym2 V), e ∈ edges p → ¬e ∈ s)) hu hv"],"goalsAfter":[],"content":"by\n  subst_vars\n  rfl"},{"tailPos":76196,"headPos":76163,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\np : Prop\nu v : V\nh : Reachable G u v\nhp : Path G u v → p\n⊢ p"],"goalsAfter":[],"content":"exact h.elim fun q => hp q.toPath"},{"tailPos":76196,"headPos":76153,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\np : Prop\nu v : V\nh : Reachable G u v\nhp : Path G u v → p\n⊢ p"],"goalsAfter":[],"content":"classical exact h.elim fun q => hp q.toPath"},{"tailPos":76152,"headPos":76150,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\np : Prop\nu v : V\nh : Reachable G u v\nhp : Path G u v → p\n⊢ p"],"goalsAfter":[],"content":"by"},{"tailPos":76196,"headPos":76150,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\np : Prop\nu v : V\nh : Reachable G u v\nhp : Path G u v → p\n⊢ p"],"goalsAfter":[],"content":"by classical exact h.elim fun q => hp q.toPath"},{"tailPos":77641,"headPos":77630,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v ↔ Relation.ReflTransGen G.Adj u v"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v → Relation.ReflTransGen G.Adj u v","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"content":"constructor"},{"tailPos":77646,"headPos":77644,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v → Relation.ReflTransGen G.Adj u v","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v → Relation.ReflTransGen G.Adj u v"],"content":"·"},{"tailPos":77661,"headPos":77647,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v → Relation.ReflTransGen G.Adj u v"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Walk G u v\n⊢ Relation.ReflTransGen G.Adj u v"],"content":"rintro ⟨h⟩"},{"tailPos":77699,"headPos":77696,"goalsBefore":["case mp.intro.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ Relation.ReflTransGen G.Adj u✝ u✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":77699,"headPos":77687,"goalsBefore":["case mp.intro.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ : V\n⊢ Relation.ReflTransGen G.Adj u✝ u✝"],"goalsAfter":[],"content":"| nil => rfl"},{"tailPos":77770,"headPos":77722,"goalsBefore":["case mp.intro.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Relation.ReflTransGen G.Adj v✝ w✝\n⊢ Relation.ReflTransGen G.Adj u✝ w✝"],"goalsAfter":[],"content":"exact (Relation.ReflTransGen.single h').trans ih"},{"tailPos":77770,"headPos":77704,"goalsBefore":["case mp.intro.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v u✝ v✝ w✝ : V\nh' : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Relation.ReflTransGen G.Adj v✝ w✝\n⊢ Relation.ReflTransGen G.Adj u✝ w✝"],"goalsAfter":[],"content":"| cons h' _ ih => exact (Relation.ReflTransGen.single h').trans ih"},{"tailPos":77770,"headPos":77666,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Walk G u v\n⊢ Relation.ReflTransGen G.Adj u v"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Walk G u v\n⊢ Relation.ReflTransGen G.Adj u v"],"content":"induction h with\n    | nil => rfl\n    | cons h' _ ih => exact (Relation.ReflTransGen.single h').trans ih"},{"tailPos":77770,"headPos":77647,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v → Relation.ReflTransGen G.Adj u v"],"goalsAfter":[],"content":"rintro ⟨h⟩\n    induction h with\n    | nil => rfl\n    | cons h' _ ih => exact (Relation.ReflTransGen.single h').trans ih"},{"tailPos":77770,"headPos":77644,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v → Relation.ReflTransGen G.Adj u v","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"content":"· rintro ⟨h⟩\n    induction h with\n    | nil => rfl\n    | cons h' _ ih => exact (Relation.ReflTransGen.single h').trans ih"},{"tailPos":77775,"headPos":77773,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"content":"·"},{"tailPos":77783,"headPos":77776,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Relation.ReflTransGen G.Adj u v\n⊢ Reachable G u v"],"content":"intro h"},{"tailPos":77822,"headPos":77819,"goalsBefore":["case mpr.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u u"],"goalsAfter":[],"content":"rfl"},{"tailPos":77822,"headPos":77809,"goalsBefore":["case mpr.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u u"],"goalsAfter":[],"content":"| refl => rfl"},{"tailPos":77897,"headPos":77845,"goalsBefore":["case mpr.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v b✝ c✝ : V\na✝ : Relation.ReflTransGen G.Adj u b✝\nha : Adj G b✝ c✝\nhr : Reachable G u b✝\n⊢ Reachable G u c✝"],"goalsAfter":[],"content":"exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":77897,"headPos":77827,"goalsBefore":["case mpr.tail\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v b✝ c✝ : V\na✝ : Relation.ReflTransGen G.Adj u b✝\nha : Adj G b✝ c✝\nhr : Reachable G u b✝\n⊢ Reachable G u c✝"],"goalsAfter":[],"content":"| tail _ ha hr => exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":77897,"headPos":77788,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Relation.ReflTransGen G.Adj u v\n⊢ Reachable G u v"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : Relation.ReflTransGen G.Adj u v\n⊢ Reachable G u v"],"content":"induction h with\n    | refl => rfl\n    | tail _ ha hr => exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":77897,"headPos":77776,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"goalsAfter":[],"content":"intro h\n    induction h with\n    | refl => rfl\n    | tail _ ha hr => exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":77897,"headPos":77773,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Relation.ReflTransGen G.Adj u v → Reachable G u v"],"goalsAfter":[],"content":"· intro h\n    induction h with\n    | refl => rfl\n    | tail _ ha hr => exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":77897,"headPos":77630,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v ↔ Relation.ReflTransGen G.Adj u v"],"goalsAfter":[],"content":"constructor\n  · rintro ⟨h⟩\n    induction h with\n    | nil => rfl\n    | cons h' _ ih => exact (Relation.ReflTransGen.single h').trans ih\n  · intro h\n    induction h with\n    | refl => rfl\n    | tail _ ha hr => exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":77627,"headPos":77625,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v ↔ Relation.ReflTransGen G.Adj u v"],"goalsAfter":[],"content":"by"},{"tailPos":77897,"headPos":77625,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\n⊢ Reachable G u v ↔ Relation.ReflTransGen G.Adj u v"],"goalsAfter":[],"content":"by\n  constructor\n  · rintro ⟨h⟩\n    induction h with\n    | nil => rfl\n    | cons h' _ ih => exact (Relation.ReflTransGen.single h').trans ih\n  · intro h\n    induction h with\n    | refl => rfl\n    | tail _ ha hr => exact Reachable.trans hr ⟨Walk.cons ha Walk.nil⟩"},{"tailPos":78744,"headPos":78722,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable G (↑(symm φ) v) u ↔ Reachable G' v (↑φ u)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable ?m.486759 (↑?m.486760 (↑(symm φ) v)) (↑?m.486760 u) ↔ Reachable G' v (↑φ u)","V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Type ?u.486754","V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ SimpleGraph ?m.486757","V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ G ≃g ?m.486759"],"content":"← Iso.reachable_iff,"},{"tailPos":78768,"headPos":78745,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable ?m.486759 (↑?m.486760 (↑(symm φ) v)) (↑?m.486760 u) ↔ Reachable G' v (↑φ u)","V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Type ?u.486754","V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ SimpleGraph ?m.486757","V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ G ≃g ?m.486759"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable G' v (↑φ u) ↔ Reachable G' v (↑φ u)"],"content":"RelIso.apply_symm_apply"},{"tailPos":78769,"headPos":78768,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable G' v (↑φ u) ↔ Reachable G' v (↑φ u)"],"goalsAfter":[],"content":"]"},{"tailPos":78769,"headPos":78718,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable G (↑(symm φ) v) u ↔ Reachable G' v (↑φ u)"],"goalsAfter":[],"content":"rw [← Iso.reachable_iff, RelIso.apply_symm_apply]"},{"tailPos":78715,"headPos":78713,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable G (↑(symm φ) v) u ↔ Reachable G' v (↑φ u)"],"goalsAfter":[],"content":"by"},{"tailPos":78769,"headPos":78713,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG'✝ : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\nG' : SimpleGraph V'\nφ : G ≃g G'\nu : V\nv : V'\n⊢ Reachable G (↑(symm φ) v) u ↔ Reachable G' v (↑φ u)"],"goalsAfter":[],"content":"by\n  rw [← Iso.reachable_iff, RelIso.apply_symm_apply]"},{"tailPos":85857,"headPos":85842,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\n⊢ map Hom.id C = C"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\n⊢ ∀ (v : V), map Hom.id (connectedComponentMk G v) = connectedComponentMk G v"],"content":"refine' C.ind _"},{"tailPos":85878,"headPos":85860,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\n⊢ ∀ (v : V), map Hom.id (connectedComponentMk G v) = connectedComponentMk G v"],"goalsAfter":[],"content":"exact fun _ => rfl"},{"tailPos":85878,"headPos":85842,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\n⊢ map Hom.id C = C"],"goalsAfter":[],"content":"refine' C.ind _\n  exact fun _ => rfl"},{"tailPos":85839,"headPos":85837,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\n⊢ map Hom.id C = C"],"goalsAfter":[],"content":"by"},{"tailPos":85878,"headPos":85837,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\n⊢ map Hom.id C = C"],"goalsAfter":[],"content":"by\n  refine' C.ind _\n  exact fun _ => rfl"},{"tailPos":86121,"headPos":86106,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\nφ : G →g G'\nψ : G' →g G''\n⊢ map ψ (map φ C) = map (Hom.comp ψ φ) C"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\nφ : G →g G'\nψ : G' →g G''\n⊢ ∀ (v : V), map ψ (map φ (connectedComponentMk G v)) = map (Hom.comp ψ φ) (connectedComponentMk G v)"],"content":"refine' C.ind _"},{"tailPos":86142,"headPos":86124,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\nφ : G →g G'\nψ : G' →g G''\n⊢ ∀ (v : V), map ψ (map φ (connectedComponentMk G v)) = map (Hom.comp ψ φ) (connectedComponentMk G v)"],"goalsAfter":[],"content":"exact fun _ => rfl"},{"tailPos":86142,"headPos":86106,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\nφ : G →g G'\nψ : G' →g G''\n⊢ map ψ (map φ C) = map (Hom.comp ψ φ) C"],"goalsAfter":[],"content":"refine' C.ind _\n  exact fun _ => rfl"},{"tailPos":86103,"headPos":86101,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\nφ : G →g G'\nψ : G' →g G''\n⊢ map ψ (map φ C) = map (Hom.comp ψ φ) C"],"goalsAfter":[],"content":"by"},{"tailPos":86142,"headPos":86101,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nC : ConnectedComponent G\nφ : G →g G'\nψ : G' →g G''\n⊢ map ψ (map φ C) = map (Hom.comp ψ φ) C"],"goalsAfter":[],"content":"by\n  refine' C.ind _\n  exact fun _ => rfl"},{"tailPos":86488,"headPos":86464,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G' (↑φ v) = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C ↔\n    connectedComponentMk G v = C"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\nu : V\n⊢ connectedComponentMk G' (↑φ v) = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) (connectedComponentMk G u) ↔\n    connectedComponentMk G v = connectedComponentMk G u"],"content":"refine' C.ind fun u => _"},{"tailPos":86628,"headPos":86491,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\nu : V\n⊢ connectedComponentMk G' (↑φ v) = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) (connectedComponentMk G u) ↔\n    connectedComponentMk G v = connectedComponentMk G u"],"goalsAfter":[],"content":"simp only [Iso.reachable_iff, ConnectedComponent.map_mk, RelEmbedding.coe_toRelHom,\n    RelIso.coe_toRelEmbedding, ConnectedComponent.eq]"},{"tailPos":86628,"headPos":86464,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G' (↑φ v) = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C ↔\n    connectedComponentMk G v = C"],"goalsAfter":[],"content":"refine' C.ind fun u => _\n  simp only [Iso.reachable_iff, ConnectedComponent.map_mk, RelEmbedding.coe_toRelHom,\n    RelIso.coe_toRelEmbedding, ConnectedComponent.eq]"},{"tailPos":86461,"headPos":86459,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G' (↑φ v) = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C ↔\n    connectedComponentMk G v = C"],"goalsAfter":[],"content":"by"},{"tailPos":86628,"headPos":86459,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G' (↑φ v) = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C ↔\n    connectedComponentMk G v = C"],"goalsAfter":[],"content":"by\n  refine' C.ind fun u => _\n  simp only [Iso.reachable_iff, ConnectedComponent.map_mk, RelEmbedding.coe_toRelHom,\n    RelIso.coe_toRelEmbedding, ConnectedComponent.eq]"},{"tailPos":86965,"headPos":86941,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G (↑(Iso.symm φ) v') = C ↔\n    connectedComponentMk G' v' = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\nu : V\n⊢ connectedComponentMk G (↑(Iso.symm φ) v') = connectedComponentMk G u ↔\n    connectedComponentMk G' v' = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) (connectedComponentMk G u)"],"content":"refine' C.ind fun u => _"},{"tailPos":87112,"headPos":86968,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\nu : V\n⊢ connectedComponentMk G (↑(Iso.symm φ) v') = connectedComponentMk G u ↔\n    connectedComponentMk G' v' = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) (connectedComponentMk G u)"],"goalsAfter":[],"content":"simp only [Iso.symm_apply_reachable, ConnectedComponent.eq, ConnectedComponent.map_mk,\n    RelEmbedding.coe_toRelHom, RelIso.coe_toRelEmbedding]"},{"tailPos":87112,"headPos":86941,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G (↑(Iso.symm φ) v') = C ↔\n    connectedComponentMk G' v' = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C"],"goalsAfter":[],"content":"refine' C.ind fun u => _\n  simp only [Iso.symm_apply_reachable, ConnectedComponent.eq, ConnectedComponent.map_mk,\n    RelEmbedding.coe_toRelHom, RelIso.coe_toRelEmbedding]"},{"tailPos":86938,"headPos":86936,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G (↑(Iso.symm φ) v') = C ↔\n    connectedComponentMk G' v' = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C"],"goalsAfter":[],"content":"by"},{"tailPos":87112,"headPos":86936,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nv : V\nv' : V'\nC : ConnectedComponent G\n⊢ connectedComponentMk G (↑(Iso.symm φ) v') = C ↔\n    connectedComponentMk G' v' = map (RelEmbedding.toRelHom (RelIso.toRelEmbedding φ)) C"],"goalsAfter":[],"content":"by\n  refine' C.ind fun u => _\n  simp only [Iso.symm_apply_reachable, ConnectedComponent.eq, ConnectedComponent.map_mk,\n    RelEmbedding.coe_toRelHom, RelIso.coe_toRelEmbedding]"},{"tailPos":88019,"headPos":88008,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ connectedComponentEquiv refl = Equiv.refl (ConnectedComponent G)"],"goalsAfter":["case H.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nx✝ : ConnectedComponent G\nv : V\n⊢ ↑(connectedComponentEquiv refl) (Quot.mk (Reachable G) v) =\n    ↑(Equiv.refl (ConnectedComponent G)) (Quot.mk (Reachable G) v)"],"content":"ext ⟨v⟩"},{"tailPos":88025,"headPos":88022,"goalsBefore":["case H.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nx✝ : ConnectedComponent G\nv : V\n⊢ ↑(connectedComponentEquiv refl) (Quot.mk (Reachable G) v) =\n    ↑(Equiv.refl (ConnectedComponent G)) (Quot.mk (Reachable G) v)"],"goalsAfter":[],"content":"rfl"},{"tailPos":88025,"headPos":88008,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ connectedComponentEquiv refl = Equiv.refl (ConnectedComponent G)"],"goalsAfter":[],"content":"ext ⟨v⟩\n  rfl"},{"tailPos":88005,"headPos":88003,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ connectedComponentEquiv refl = Equiv.refl (ConnectedComponent G)"],"goalsAfter":[],"content":"by"},{"tailPos":88025,"headPos":88003,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ connectedComponentEquiv refl = Equiv.refl (ConnectedComponent G)"],"goalsAfter":[],"content":"by\n  ext ⟨v⟩\n  rfl"},{"tailPos":88280,"headPos":88269,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\n⊢ connectedComponentEquiv (symm φ) = (connectedComponentEquiv φ).symm"],"goalsAfter":["case H.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nx✝ : ConnectedComponent G'\na✝ : V'\n⊢ ↑(connectedComponentEquiv (symm φ)) (Quot.mk (Reachable G') a✝) =\n    ↑(connectedComponentEquiv φ).symm (Quot.mk (Reachable G') a✝)"],"content":"ext ⟨_⟩"},{"tailPos":88286,"headPos":88283,"goalsBefore":["case H.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nx✝ : ConnectedComponent G'\na✝ : V'\n⊢ ↑(connectedComponentEquiv (symm φ)) (Quot.mk (Reachable G') a✝) =\n    ↑(connectedComponentEquiv φ).symm (Quot.mk (Reachable G') a✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":88286,"headPos":88269,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\n⊢ connectedComponentEquiv (symm φ) = (connectedComponentEquiv φ).symm"],"goalsAfter":[],"content":"ext ⟨_⟩\n  rfl"},{"tailPos":88266,"headPos":88264,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\n⊢ connectedComponentEquiv (symm φ) = (connectedComponentEquiv φ).symm"],"goalsAfter":[],"content":"by"},{"tailPos":88286,"headPos":88264,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\n⊢ connectedComponentEquiv (symm φ) = (connectedComponentEquiv φ).symm"],"goalsAfter":[],"content":"by\n  ext ⟨_⟩\n  rfl"},{"tailPos":88602,"headPos":88591,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nφ' : G' ≃g G''\n⊢ connectedComponentEquiv (RelIso.trans φ φ') = (connectedComponentEquiv φ).trans (connectedComponentEquiv φ')"],"goalsAfter":["case H.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nφ' : G' ≃g G''\nx✝ : ConnectedComponent G\na✝ : V\n⊢ ↑(connectedComponentEquiv (RelIso.trans φ φ')) (Quot.mk (Reachable G) a✝) =\n    ↑((connectedComponentEquiv φ).trans (connectedComponentEquiv φ')) (Quot.mk (Reachable G) a✝)"],"content":"ext ⟨_⟩"},{"tailPos":88608,"headPos":88605,"goalsBefore":["case H.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nφ' : G' ≃g G''\nx✝ : ConnectedComponent G\na✝ : V\n⊢ ↑(connectedComponentEquiv (RelIso.trans φ φ')) (Quot.mk (Reachable G) a✝) =\n    ↑((connectedComponentEquiv φ).trans (connectedComponentEquiv φ')) (Quot.mk (Reachable G) a✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":88608,"headPos":88591,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nφ' : G' ≃g G''\n⊢ connectedComponentEquiv (RelIso.trans φ φ') = (connectedComponentEquiv φ).trans (connectedComponentEquiv φ')"],"goalsAfter":[],"content":"ext ⟨_⟩\n  rfl"},{"tailPos":88588,"headPos":88586,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nφ' : G' ≃g G''\n⊢ connectedComponentEquiv (RelIso.trans φ φ') = (connectedComponentEquiv φ).trans (connectedComponentEquiv φ')"],"goalsAfter":[],"content":"by"},{"tailPos":88608,"headPos":88586,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nφ : G ≃g G'\nφ' : G' ≃g G''\n⊢ connectedComponentEquiv (RelIso.trans φ φ') = (connectedComponentEquiv φ).trans (connectedComponentEquiv φ')"],"goalsAfter":[],"content":"by\n  ext ⟨_⟩\n  rfl"},{"tailPos":89132,"headPos":89097,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ Injective supp"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ ∀ (v w : V),\n    supp (connectedComponentMk G v) = supp (connectedComponentMk G w) →\n      connectedComponentMk G v = connectedComponentMk G w"],"content":"refine' ConnectedComponent.ind₂ _"},{"tailPos":89144,"headPos":89135,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ ∀ (v w : V),\n    supp (connectedComponentMk G v) = supp (connectedComponentMk G w) →\n      connectedComponentMk G v = connectedComponentMk G w"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ supp (connectedComponentMk G v) = supp (connectedComponentMk G w) →\n    connectedComponentMk G v = connectedComponentMk G w"],"content":"intro v w"},{"tailPos":89236,"headPos":89147,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ supp (connectedComponentMk G v) = supp (connectedComponentMk G w) →\n    connectedComponentMk G v = connectedComponentMk G w"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∀ (x : V), Reachable G x v ↔ Reachable G x w) → Reachable G v w"],"content":"simp only [ConnectedComponent.supp, Set.ext_iff, ConnectedComponent.eq, Set.mem_setOf_eq]"},{"tailPos":89246,"headPos":89239,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∀ (x : V), Reachable G x v ↔ Reachable G x w) → Reachable G v w"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G v w"],"content":"intro h"},{"tailPos":89268,"headPos":89253,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G v w"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G w v"],"content":"reachable_comm,"},{"tailPos":89270,"headPos":89269,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G w v"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G w w"],"content":"h"},{"tailPos":89271,"headPos":89270,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G w w"],"goalsAfter":[],"content":"]"},{"tailPos":89271,"headPos":89249,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : ∀ (x : V), Reachable G x v ↔ Reachable G x w\n⊢ Reachable G v w"],"goalsAfter":[],"content":"rw [reachable_comm, h]"},{"tailPos":89271,"headPos":89097,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ Injective supp"],"goalsAfter":[],"content":"refine' ConnectedComponent.ind₂ _\n  intro v w\n  simp only [ConnectedComponent.supp, Set.ext_iff, ConnectedComponent.eq, Set.mem_setOf_eq]\n  intro h\n  rw [reachable_comm, h]"},{"tailPos":89094,"headPos":89092,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ Injective supp"],"goalsAfter":[],"content":"by"},{"tailPos":89271,"headPos":89092,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\n⊢ Injective supp"],"goalsAfter":[],"content":"by\n  refine' ConnectedComponent.ind₂ _\n  intro v w\n  simp only [ConnectedComponent.supp, Set.ext_iff, ConnectedComponent.eq, Set.mem_setOf_eq]\n  intro h\n  rw [reachable_comm, h]"},{"tailPos":91187,"headPos":91176,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\n⊢ Subgraph.Connected (SimpleGraph.singletonSubgraph G v)"],"goalsAfter":["case preconnected\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\n⊢ Preconnected (Subgraph.coe (SimpleGraph.singletonSubgraph G v))"],"content":"constructor"},{"tailPos":91220,"headPos":91190,"goalsBefore":["case preconnected\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\n⊢ Preconnected (Subgraph.coe (SimpleGraph.singletonSubgraph G v))"],"goalsAfter":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a : V\nha : a ∈ (SimpleGraph.singletonSubgraph G v).verts\nb : V\nhb : b ∈ (SimpleGraph.singletonSubgraph G v).verts\n⊢ Reachable (Subgraph.coe (SimpleGraph.singletonSubgraph G v)) { val := a, property := ha } { val := b, property := hb }"],"content":"rintro ⟨a, ha⟩ ⟨b, hb⟩"},{"tailPos":91290,"headPos":91223,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a : V\nha : a ∈ (SimpleGraph.singletonSubgraph G v).verts\nb : V\nhb : b ∈ (SimpleGraph.singletonSubgraph G v).verts\n⊢ Reachable (Subgraph.coe (SimpleGraph.singletonSubgraph G v)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a : V\nha✝ : a ∈ (SimpleGraph.singletonSubgraph G v).verts\nb : V\nhb✝ : b ∈ (SimpleGraph.singletonSubgraph G v).verts\nha : a = v\nhb : b = v\n⊢ Reachable (Subgraph.coe (SimpleGraph.singletonSubgraph G v)) { val := a, property := ha✝ }\n    { val := b, property := hb✝ }"],"content":"simp only [singletonSubgraph_verts, Set.mem_singleton_iff] at ha hb"},{"tailPos":91303,"headPos":91293,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a : V\nha✝ : a ∈ (SimpleGraph.singletonSubgraph G v).verts\nb : V\nhb✝ : b ∈ (SimpleGraph.singletonSubgraph G v).verts\nha : a = v\nhb : b = v\n⊢ Reachable (Subgraph.coe (SimpleGraph.singletonSubgraph G v)) { val := a, property := ha✝ }\n    { val := b, property := hb✝ }"],"goalsAfter":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nb : V\nha hb : b = b\n⊢ Reachable (Subgraph.coe (SimpleGraph.singletonSubgraph G b)) { val := b, property := (_ : b = b) }\n    { val := b, property := (_ : b = b) }"],"content":"subst_vars"},{"tailPos":91309,"headPos":91306,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nb : V\nha hb : b = b\n⊢ Reachable (Subgraph.coe (SimpleGraph.singletonSubgraph G b)) { val := b, property := (_ : b = b) }\n    { val := b, property := (_ : b = b) }"],"goalsAfter":[],"content":"rfl"},{"tailPos":91309,"headPos":91176,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\n⊢ Subgraph.Connected (SimpleGraph.singletonSubgraph G v)"],"goalsAfter":[],"content":"constructor\n  rintro ⟨a, ha⟩ ⟨b, hb⟩\n  simp only [singletonSubgraph_verts, Set.mem_singleton_iff] at ha hb\n  subst_vars\n  rfl"},{"tailPos":91173,"headPos":91171,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\n⊢ Subgraph.Connected (SimpleGraph.singletonSubgraph G v)"],"goalsAfter":[],"content":"by"},{"tailPos":91309,"headPos":91171,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv : V\n⊢ Subgraph.Connected (SimpleGraph.singletonSubgraph G v)"],"goalsAfter":[],"content":"by\n  constructor\n  rintro ⟨a, ha⟩ ⟨b, hb⟩\n  simp only [singletonSubgraph_verts, Set.mem_singleton_iff] at ha hb\n  subst_vars\n  rfl"},{"tailPos":91521,"headPos":91510,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\n⊢ Subgraph.Connected (subgraphOfAdj G hvw)"],"goalsAfter":["case preconnected\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\n⊢ Preconnected (Subgraph.coe (subgraphOfAdj G hvw))"],"content":"constructor"},{"tailPos":91554,"headPos":91524,"goalsBefore":["case preconnected\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\n⊢ Preconnected (Subgraph.coe (subgraphOfAdj G hvw))"],"goalsAfter":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\na : V\nha : a ∈ (subgraphOfAdj G hvw).verts\nb : V\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":"rintro ⟨a, ha⟩ ⟨b, hb⟩"},{"tailPos":91640,"headPos":91557,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\na : V\nha : a ∈ (subgraphOfAdj G hvw).verts\nb : V\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\na : V\nha✝ : a ∈ (subgraphOfAdj G hvw).verts\nb : V\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nha : a = v ∨ a = w\nhb : b = v ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha✝ } { val := b, property := hb✝ }"],"content":"simp only [subgraphOfAdj_verts, Set.mem_insert_iff, Set.mem_singleton_iff] at ha hb"},{"tailPos":91665,"headPos":91643,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\na : V\nha✝ : a ∈ (subgraphOfAdj G hvw).verts\nb : V\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nha : a = v ∨ a = w\nhb : b = v ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha✝ } { val := b, property := hb✝ }"],"goalsAfter":["case preconnected.mk.mk.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw a b : V\nhvw : Adj G a w\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = a ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }","case preconnected.mk.mk.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a b : V\nhvw : Adj G v a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = v ∨ b = a\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }"],"content":"obtain rfl | rfl := ha"},{"tailPos":91669,"headPos":91666,"goalsBefore":["case preconnected.mk.mk.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw a b : V\nhvw : Adj G a w\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = a ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }","case preconnected.mk.mk.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a b : V\nhvw : Adj G v a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = v ∨ b = a\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }"],"goalsAfter":["case preconnected.mk.mk.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw a b : V\nhvw : Adj G a w\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = a ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }","case preconnected.mk.mk.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a b : V\nhvw : Adj G v a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = v ∨ b = a\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }"],"content":"<;>"},{"tailPos":91692,"headPos":91670,"goalsBefore":["case preconnected.mk.mk.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw a b : V\nhvw : Adj G a w\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = a ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }"],"goalsAfter":["case preconnected.mk.mk.inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw b : V\nhvw : Adj G b w\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":"obtain rfl | rfl := hb"},{"tailPos":91692,"headPos":91670,"goalsBefore":["case preconnected.mk.mk.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv a b : V\nhvw : Adj G v a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nhb : b = v ∨ b = a\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb✝ }"],"goalsAfter":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv b : V\nhvw : Adj G v b\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"content":"obtain rfl | rfl := hb"},{"tailPos":91692,"headPos":91643,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\na : V\nha✝ : a ∈ (subgraphOfAdj G hvw).verts\nb : V\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nha : a = v ∨ a = w\nhb : b = v ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha✝ } { val := b, property := hb✝ }"],"goalsAfter":["case preconnected.mk.mk.inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw b : V\nhvw : Adj G b w\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv b : V\nhvw : Adj G v b\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"content":"obtain rfl | rfl := ha <;> obtain rfl | rfl := hb"},{"tailPos":91696,"headPos":91693,"goalsBefore":["case preconnected.mk.mk.inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw b : V\nhvw : Adj G b w\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv b : V\nhvw : Adj G v b\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw b : V\nhvw : Adj G b w\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }","case preconnected.mk.mk.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv b : V\nhvw : Adj G v b\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"content":"<;>"},{"tailPos":91712,"headPos":91709,"goalsBefore":["case preconnected.mk.mk.inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw b : V\nhvw : Adj G b w\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"rfl"},{"tailPos":91742,"headPos":91701,"goalsBefore":["case preconnected.mk.mk.inl.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nw b : V\nhvw : Adj G b w\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91712,"headPos":91709,"goalsBefore":["case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":"rfl"},{"tailPos":91735,"headPos":91716,"goalsBefore":["case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inl.inr.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":"apply Adj.reachable"},{"tailPos":91736,"headPos":91735,"goalsBefore":["case preconnected.mk.mk.inl.inr.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inl.inr.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":";"},{"tailPos":91741,"headPos":91737,"goalsBefore":["case preconnected.mk.mk.inl.inr.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"simp only [subgraphOfAdj_verts, Subgraph.coe_Adj, subgraphOfAdj_Adj]"},{"tailPos":91741,"headPos":91716,"goalsBefore":["case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"apply Adj.reachable; simp"},{"tailPos":91742,"headPos":91715,"goalsBefore":["case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"(apply Adj.reachable; simp)"},{"tailPos":91742,"headPos":91701,"goalsBefore":["case preconnected.mk.mk.inl.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G a b\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91712,"headPos":91709,"goalsBefore":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":"rfl"},{"tailPos":91735,"headPos":91716,"goalsBefore":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inr.inl.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":"apply Adj.reachable"},{"tailPos":91736,"headPos":91735,"goalsBefore":["case preconnected.mk.mk.inr.inl.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":["case preconnected.mk.mk.inr.inl.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"content":";"},{"tailPos":91741,"headPos":91737,"goalsBefore":["case preconnected.mk.mk.inr.inl.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Adj (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"simp only [subgraphOfAdj_verts, Subgraph.coe_Adj, subgraphOfAdj_Adj]"},{"tailPos":91741,"headPos":91716,"goalsBefore":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"apply Adj.reachable; simp"},{"tailPos":91742,"headPos":91715,"goalsBefore":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"(apply Adj.reachable; simp)"},{"tailPos":91742,"headPos":91701,"goalsBefore":["case preconnected.mk.mk.inr.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\na b : V\nhvw : Adj G b a\nha : a ∈ (subgraphOfAdj G hvw).verts\nhb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91712,"headPos":91709,"goalsBefore":["case preconnected.mk.mk.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv b : V\nhvw : Adj G v b\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"rfl"},{"tailPos":91742,"headPos":91701,"goalsBefore":["case preconnected.mk.mk.inr.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv b : V\nhvw : Adj G v b\nha hb : b ∈ (subgraphOfAdj G hvw).verts\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := b, property := ha } { val := b, property := hb }"],"goalsAfter":[],"content":"first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91742,"headPos":91643,"goalsBefore":["case preconnected.mk.mk\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\na : V\nha✝ : a ∈ (subgraphOfAdj G hvw).verts\nb : V\nhb✝ : b ∈ (subgraphOfAdj G hvw).verts\nha : a = v ∨ a = w\nhb : b = v ∨ b = w\n⊢ Reachable (Subgraph.coe (subgraphOfAdj G hvw)) { val := a, property := ha✝ } { val := b, property := hb✝ }"],"goalsAfter":[],"content":"obtain rfl | rfl := ha <;> obtain rfl | rfl := hb <;>\n    first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91742,"headPos":91510,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\n⊢ Subgraph.Connected (subgraphOfAdj G hvw)"],"goalsAfter":[],"content":"constructor\n  rintro ⟨a, ha⟩ ⟨b, hb⟩\n  simp only [subgraphOfAdj_verts, Set.mem_insert_iff, Set.mem_singleton_iff] at ha hb\n  obtain rfl | rfl := ha <;> obtain rfl | rfl := hb <;>\n    first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91507,"headPos":91505,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\n⊢ Subgraph.Connected (subgraphOfAdj G hvw)"],"goalsAfter":[],"content":"by"},{"tailPos":91742,"headPos":91505,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nhvw : Adj G v w\n⊢ Subgraph.Connected (subgraphOfAdj G hvw)"],"goalsAfter":[],"content":"by\n  constructor\n  rintro ⟨a, ha⟩ ⟨b, hb⟩\n  simp only [subgraphOfAdj_verts, Set.mem_insert_iff, Set.mem_singleton_iff] at ha hb\n  obtain rfl | rfl := ha <;> obtain rfl | rfl := hb <;>\n    first | rfl | (apply Adj.reachable; simp)"},{"tailPos":91996,"headPos":91962,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Set.Nonempty Set.univ"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Nonempty (Walk G u v)"],"content":"← Set.nonempty_iff_univ_nonempty"},{"tailPos":91997,"headPos":91996,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Nonempty (Walk G u v)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Nonempty (Walk G u v)"],"content":"]"},{"tailPos":91997,"headPos":91958,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Set.Nonempty Set.univ"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Nonempty (Walk G u v)"],"content":"rw [← Set.nonempty_iff_univ_nonempty]"},{"tailPos":92015,"headPos":92000,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Nonempty (Walk G u v)"],"goalsAfter":[],"content":"exact hconn u v"},{"tailPos":92015,"headPos":91958,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Set.Nonempty Set.univ"],"goalsAfter":[],"content":"rw [← Set.nonempty_iff_univ_nonempty]\n  exact hconn u v"},{"tailPos":91955,"headPos":91953,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Set.Nonempty Set.univ"],"goalsAfter":[],"content":"by"},{"tailPos":92015,"headPos":91953,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nhconn : Preconnected G\nu v : V\n⊢ Set.Nonempty Set.univ"],"goalsAfter":[],"content":"by\n  rw [← Set.nonempty_iff_univ_nonempty]\n  exact hconn u v"},{"tailPos":92871,"headPos":92867,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\n⊢ Walk.toSubgraph (cons h nil) = subgraphOfAdj G h"],"goalsAfter":[],"content":"simp only [Walk.toSubgraph, ge_iff_le, singletonSubgraph_le_iff, subgraphOfAdj_verts, Set.mem_singleton_iff,\n  Set.mem_insert_iff, or_true, sup_of_le_left]"},{"tailPos":92866,"headPos":92864,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\n⊢ Walk.toSubgraph (cons h nil) = subgraphOfAdj G h"],"goalsAfter":[],"content":"by"},{"tailPos":92871,"headPos":92864,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nh : Adj G u v\n⊢ Walk.toSubgraph (cons h nil) = subgraphOfAdj G h"],"goalsAfter":[],"content":"by simp"},{"tailPos":93126,"headPos":93093,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ (Walk.toSubgraph p).verts ↔ w ∈ support p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ w ∈ (Walk.toSubgraph nil).verts ↔ w ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"content":"induction' p with _ x y z h p' ih"},{"tailPos":93131,"headPos":93129,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ w ∈ (Walk.toSubgraph nil).verts ↔ w ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ w ∈ (Walk.toSubgraph nil).verts ↔ w ∈ support nil"],"content":"·"},{"tailPos":93136,"headPos":93132,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ w ∈ (Walk.toSubgraph nil).verts ↔ w ∈ support nil"],"goalsAfter":[],"content":"simp only [Walk.toSubgraph, singletonSubgraph_verts, Set.mem_singleton_iff, support_nil, List.mem_singleton]"},{"tailPos":93136,"headPos":93129,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ w ∈ (Walk.toSubgraph nil).verts ↔ w ∈ support nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"content":"· simp"},{"tailPos":93141,"headPos":93139,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"content":"·"},{"tailPos":93228,"headPos":93212,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w = y ∨ w ∈ support p' → w ∈ support p'"],"goalsAfter":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x z : V\nh : Adj G x w\np' : Walk G w z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p'","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh✝ : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\nh : w ∈ support p'\n⊢ w ∈ support p'"],"content":"rintro (rfl | h)"},{"tailPos":93232,"headPos":93229,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x z : V\nh : Adj G x w\np' : Walk G w z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p'","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh✝ : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\nh : w ∈ support p'\n⊢ w ∈ support p'"],"goalsAfter":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x z : V\nh : Adj G x w\np' : Walk G w z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p'","case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh✝ : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\nh : w ∈ support p'\n⊢ w ∈ support p'"],"content":"<;>"},{"tailPos":93241,"headPos":93233,"goalsBefore":["case inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x z : V\nh : Adj G x w\np' : Walk G w z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p'"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":93241,"headPos":93233,"goalsBefore":["case inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh✝ : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\nh : w ∈ support p'\n⊢ w ∈ support p'"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":93241,"headPos":93212,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w = y ∨ w ∈ support p' → w ∈ support p'"],"goalsAfter":[],"content":"rintro (rfl | h) <;> simp [*]"},{"tailPos":93211,"headPos":93209,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w = y ∨ w ∈ support p' → w ∈ support p'"],"goalsAfter":[],"content":"by"},{"tailPos":93241,"headPos":93209,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w = y ∨ w ∈ support p' → w ∈ support p'"],"goalsAfter":[],"content":"by rintro (rfl | h) <;> simp [*]"},{"tailPos":93285,"headPos":93246,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p' → w = y ∨ w ∈ support p'"],"goalsAfter":[],"content":"simp (config := { contextual := true })"},{"tailPos":93245,"headPos":93243,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p' → w = y ∨ w ∈ support p'"],"goalsAfter":[],"content":"by"},{"tailPos":93285,"headPos":93243,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ support p' → w = y ∨ w ∈ support p'"],"goalsAfter":[],"content":"by simp (config := { contextual := true })"},{"tailPos":93288,"headPos":93142,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\nthis : w = y ∨ w ∈ support p' ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"content":"have : w = y ∨ w ∈ p'.support ↔ w ∈ p'.support :=\n      ⟨by rintro (rfl | h) <;> simp [*], by simp (config := { contextual := true })⟩"},{"tailPos":93318,"headPos":93293,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\nthis : w = y ∨ w ∈ support p' ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":[],"content":"simp [ih, or_assoc, this]"},{"tailPos":93318,"headPos":93142,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":[],"content":"have : w = y ∨ w ∈ p'.support ↔ w ∈ p'.support :=\n      ⟨by rintro (rfl | h) <;> simp [*], by simp (config := { contextual := true })⟩\n    simp [ih, or_assoc, this]"},{"tailPos":93318,"headPos":93139,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w x y z : V\nh : Adj G x y\np' : Walk G y z\nih : w ∈ (Walk.toSubgraph p').verts ↔ w ∈ support p'\n⊢ w ∈ (Walk.toSubgraph (cons h p')).verts ↔ w ∈ support (cons h p')"],"goalsAfter":[],"content":"· have : w = y ∨ w ∈ p'.support ↔ w ∈ p'.support :=\n      ⟨by rintro (rfl | h) <;> simp [*], by simp (config := { contextual := true })⟩\n    simp [ih, or_assoc, this]"},{"tailPos":93318,"headPos":93093,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ (Walk.toSubgraph p).verts ↔ w ∈ support p"],"goalsAfter":[],"content":"induction' p with _ x y z h p' ih\n  · simp\n  · have : w = y ∨ w ∈ p'.support ↔ w ∈ p'.support :=\n      ⟨by rintro (rfl | h) <;> simp [*], by simp (config := { contextual := true })⟩\n    simp [ih, or_assoc, this]"},{"tailPos":93090,"headPos":93088,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ (Walk.toSubgraph p).verts ↔ w ∈ support p"],"goalsAfter":[],"content":"by"},{"tailPos":93318,"headPos":93088,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ w ∈ (Walk.toSubgraph p).verts ↔ w ∈ support p"],"goalsAfter":[],"content":"by\n  induction' p with _ x y z h p' ih\n  · simp\n  · have : w = y ∨ w ∈ p'.support ↔ w ∈ p'.support :=\n      ⟨by rintro (rfl | h) <;> simp [*], by simp (config := { contextual := true })⟩\n    simp [ih, or_assoc, this]"},{"tailPos":93752,"headPos":93741,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\ne : Sym2 V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph p) ↔ e ∈ edges p"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ : V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph nil) ↔ e ∈ edges nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : e ∈ Subgraph.edgeSet (Walk.toSubgraph p✝) ↔ e ∈ edges p✝\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph (cons h✝ p✝)) ↔ e ∈ edges (cons h✝ p✝)"],"content":"induction p"},{"tailPos":93756,"headPos":93753,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ : V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph nil) ↔ e ∈ edges nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : e ∈ Subgraph.edgeSet (Walk.toSubgraph p✝) ↔ e ∈ edges p✝\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph (cons h✝ p✝)) ↔ e ∈ edges (cons h✝ p✝)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ : V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph nil) ↔ e ∈ edges nil","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : e ∈ Subgraph.edgeSet (Walk.toSubgraph p✝) ↔ e ∈ edges p✝\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph (cons h✝ p✝)) ↔ e ∈ edges (cons h✝ p✝)"],"content":"<;>"},{"tailPos":93765,"headPos":93757,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ : V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph nil) ↔ e ∈ edges nil"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":93765,"headPos":93757,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ne : Sym2 V\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : e ∈ Subgraph.edgeSet (Walk.toSubgraph p✝) ↔ e ∈ edges p✝\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph (cons h✝ p✝)) ↔ e ∈ edges (cons h✝ p✝)"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":93765,"headPos":93741,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\ne : Sym2 V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph p) ↔ e ∈ edges p"],"goalsAfter":[],"content":"induction p <;> simp [*]"},{"tailPos":93740,"headPos":93738,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\ne : Sym2 V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph p) ↔ e ∈ edges p"],"goalsAfter":[],"content":"by"},{"tailPos":93765,"headPos":93738,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\ne : Sym2 V\n⊢ e ∈ Subgraph.edgeSet (Walk.toSubgraph p) ↔ e ∈ edges p"],"goalsAfter":[],"content":"by induction p <;> simp [*]"},{"tailPos":94226,"headPos":94215,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.toSubgraph (append p q) = Walk.toSubgraph p ⊔ Walk.toSubgraph q"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.toSubgraph (append nil q) = Walk.toSubgraph nil ⊔ Walk.toSubgraph q","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.toSubgraph (append p✝ q) = Walk.toSubgraph p✝ ⊔ Walk.toSubgraph q\nq : Walk G w✝ w\n⊢ Walk.toSubgraph (append (cons h✝ p✝) q) = Walk.toSubgraph (cons h✝ p✝) ⊔ Walk.toSubgraph q"],"content":"induction p"},{"tailPos":94230,"headPos":94227,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.toSubgraph (append nil q) = Walk.toSubgraph nil ⊔ Walk.toSubgraph q","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.toSubgraph (append p✝ q) = Walk.toSubgraph p✝ ⊔ Walk.toSubgraph q\nq : Walk G w✝ w\n⊢ Walk.toSubgraph (append (cons h✝ p✝) q) = Walk.toSubgraph (cons h✝ p✝) ⊔ Walk.toSubgraph q"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.toSubgraph (append nil q) = Walk.toSubgraph nil ⊔ Walk.toSubgraph q","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.toSubgraph (append p✝ q) = Walk.toSubgraph p✝ ⊔ Walk.toSubgraph q\nq : Walk G w✝ w\n⊢ Walk.toSubgraph (append (cons h✝ p✝) q) = Walk.toSubgraph (cons h✝ p✝) ⊔ Walk.toSubgraph q"],"content":"<;>"},{"tailPos":94250,"headPos":94231,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\nq : Walk G u✝ w\n⊢ Walk.toSubgraph (append nil q) = Walk.toSubgraph nil ⊔ Walk.toSubgraph q"],"goalsAfter":[],"content":"simp [*, sup_assoc]"},{"tailPos":94250,"headPos":94231,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : ∀ (q : Walk G w✝ w), Walk.toSubgraph (append p✝ q) = Walk.toSubgraph p✝ ⊔ Walk.toSubgraph q\nq : Walk G w✝ w\n⊢ Walk.toSubgraph (append (cons h✝ p✝) q) = Walk.toSubgraph (cons h✝ p✝) ⊔ Walk.toSubgraph q"],"goalsAfter":[],"content":"simp [*, sup_assoc]"},{"tailPos":94250,"headPos":94215,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.toSubgraph (append p q) = Walk.toSubgraph p ⊔ Walk.toSubgraph q"],"goalsAfter":[],"content":"induction p <;> simp [*, sup_assoc]"},{"tailPos":94214,"headPos":94212,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.toSubgraph (append p q) = Walk.toSubgraph p ⊔ Walk.toSubgraph q"],"goalsAfter":[],"content":"by"},{"tailPos":94250,"headPos":94212,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\nq : Walk G v w\n⊢ Walk.toSubgraph (append p q) = Walk.toSubgraph p ⊔ Walk.toSubgraph q"],"goalsAfter":[],"content":"by induction p <;> simp [*, sup_assoc]"},{"tailPos":94461,"headPos":94457,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Walk.toSubgraph (reverse nil) = Walk.toSubgraph nil"],"goalsAfter":[],"content":"simp only [Walk.toSubgraph]"},{"tailPos":94461,"headPos":94448,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Walk.toSubgraph (reverse nil) = Walk.toSubgraph nil"],"goalsAfter":[],"content":"| nil => simp"},{"tailPos":94567,"headPos":94484,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ Walk.toSubgraph (reverse (cons h✝ p✝)) = Walk.toSubgraph (cons h✝ p✝)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ Walk.toSubgraph p✝ ⊔ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"content":"simp only [*, Walk.toSubgraph, reverse_cons, toSubgraph_append, subgraphOfAdj_symm]"},{"tailPos":94584,"headPos":94576,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ Walk.toSubgraph p✝ ⊔ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ ⊔ Walk.toSubgraph p✝ =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"content":"sup_comm"},{"tailPos":94585,"headPos":94584,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ ⊔ Walk.toSubgraph p✝ =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ ⊔ Walk.toSubgraph p✝ =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"content":"]"},{"tailPos":94585,"headPos":94572,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ Walk.toSubgraph p✝ ⊔ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ ⊔ Walk.toSubgraph p✝ =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"content":"rw [sup_comm]"},{"tailPos":94595,"headPos":94590,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ ⊔ Walk.toSubgraph p✝ =\n    subgraphOfAdj G h✝ ⊔ Walk.toSubgraph p✝"],"goalsAfter":["case cons.e_a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ = subgraphOfAdj G h✝"],"content":"congr"},{"tailPos":94603,"headPos":94600,"goalsBefore":["case cons.e_a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ = subgraphOfAdj G h✝"],"goalsAfter":["case cons.e_a.verts.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝ : V\n⊢ x✝ ∈ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝).verts ↔ x✝ ∈ (subgraphOfAdj G h✝).verts","case cons.e_a.Adj.h.h.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝¹ x✝ : V\n⊢ Subgraph.Adj (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) x✝¹ x✝ ↔\n    Subgraph.Adj (subgraphOfAdj G h✝) x✝¹ x✝"],"content":"ext"},{"tailPos":94607,"headPos":94604,"goalsBefore":["case cons.e_a.verts.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝ : V\n⊢ x✝ ∈ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝).verts ↔ x✝ ∈ (subgraphOfAdj G h✝).verts","case cons.e_a.Adj.h.h.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝¹ x✝ : V\n⊢ Subgraph.Adj (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) x✝¹ x✝ ↔\n    Subgraph.Adj (subgraphOfAdj G h✝) x✝¹ x✝"],"goalsAfter":["case cons.e_a.verts.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝ : V\n⊢ x✝ ∈ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝).verts ↔ x✝ ∈ (subgraphOfAdj G h✝).verts","case cons.e_a.Adj.h.h.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝¹ x✝ : V\n⊢ Subgraph.Adj (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) x✝¹ x✝ ↔\n    Subgraph.Adj (subgraphOfAdj G h✝) x✝¹ x✝"],"content":"<;>"},{"tailPos":94632,"headPos":94608,"goalsBefore":["case cons.e_a.verts.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝ : V\n⊢ x✝ ∈ (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝).verts ↔ x✝ ∈ (subgraphOfAdj G h✝).verts"],"goalsAfter":[],"content":"simp [-Set.bot_eq_empty]"},{"tailPos":94632,"headPos":94608,"goalsBefore":["case cons.e_a.Adj.h.h.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\nx✝¹ x✝ : V\n⊢ Subgraph.Adj (subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝) x✝¹ x✝ ↔\n    Subgraph.Adj (subgraphOfAdj G h✝) x✝¹ x✝"],"goalsAfter":[],"content":"simp [-Set.bot_eq_empty]"},{"tailPos":94632,"headPos":94600,"goalsBefore":["case cons.e_a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ subgraphOfAdj G (_ : Adj G u✝ v✝) ⊔ SimpleGraph.singletonSubgraph G u✝ = subgraphOfAdj G h✝"],"goalsAfter":[],"content":"ext <;> simp [-Set.bot_eq_empty]"},{"tailPos":94632,"headPos":94484,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ Walk.toSubgraph (reverse (cons h✝ p✝)) = Walk.toSubgraph (cons h✝ p✝)"],"goalsAfter":[],"content":"simp only [*, Walk.toSubgraph, reverse_cons, toSubgraph_append, subgraphOfAdj_symm]\n    rw [sup_comm]\n    congr\n    ext <;> simp [-Set.bot_eq_empty]"},{"tailPos":94632,"headPos":94464,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (reverse p✝) = Walk.toSubgraph p✝\n⊢ Walk.toSubgraph (reverse (cons h✝ p✝)) = Walk.toSubgraph (cons h✝ p✝)"],"goalsAfter":[],"content":"| cons _ _ _ =>\n    simp only [*, Walk.toSubgraph, reverse_cons, toSubgraph_append, subgraphOfAdj_symm]\n    rw [sup_comm]\n    congr\n    ext <;> simp [-Set.bot_eq_empty]"},{"tailPos":94632,"headPos":94429,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Walk.toSubgraph (reverse p) = Walk.toSubgraph p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Walk.toSubgraph (reverse p) = Walk.toSubgraph p"],"content":"induction p with\n  | nil => simp\n  | cons _ _ _ =>\n    simp only [*, Walk.toSubgraph, reverse_cons, toSubgraph_append, subgraphOfAdj_symm]\n    rw [sup_comm]\n    congr\n    ext <;> simp [-Set.bot_eq_empty]"},{"tailPos":94426,"headPos":94424,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Walk.toSubgraph (reverse p) = Walk.toSubgraph p"],"goalsAfter":[],"content":"by"},{"tailPos":94632,"headPos":94424,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Walk.toSubgraph (reverse p) = Walk.toSubgraph p"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil => simp\n  | cons _ _ _ =>\n    simp only [*, Walk.toSubgraph, reverse_cons, toSubgraph_append, subgraphOfAdj_symm]\n    rw [sup_comm]\n    congr\n    ext <;> simp [-Set.bot_eq_empty]"},{"tailPos":94868,"headPos":94861,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (rotate c h) = Walk.toSubgraph c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (append (dropUntil c u h) (takeUntil c u h)) = Walk.toSubgraph c"],"content":"rotate,"},{"tailPos":94887,"headPos":94869,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (append (dropUntil c u h) (takeUntil c u h)) = Walk.toSubgraph c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (dropUntil c u h) ⊔ Walk.toSubgraph (takeUntil c u h) = Walk.toSubgraph c"],"content":"toSubgraph_append,"},{"tailPos":94897,"headPos":94888,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (dropUntil c u h) ⊔ Walk.toSubgraph (takeUntil c u h) = Walk.toSubgraph c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (takeUntil c u h) ⊔ Walk.toSubgraph (dropUntil c u h) = Walk.toSubgraph c"],"content":"sup_comm,"},{"tailPos":94920,"headPos":94898,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (takeUntil c u h) ⊔ Walk.toSubgraph (dropUntil c u h) = Walk.toSubgraph c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (append (takeUntil c u h) (dropUntil c u h)) = Walk.toSubgraph c"],"content":"← toSubgraph_append,"},{"tailPos":94930,"headPos":94921,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (append (takeUntil c u h) (dropUntil c u h)) = Walk.toSubgraph c"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph c = Walk.toSubgraph c"],"content":"take_spec"},{"tailPos":94931,"headPos":94930,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph c = Walk.toSubgraph c"],"goalsAfter":[],"content":"]"},{"tailPos":94931,"headPos":94857,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (rotate c h) = Walk.toSubgraph c"],"goalsAfter":[],"content":"rw [rotate, toSubgraph_append, sup_comm, ← toSubgraph_append, take_spec]"},{"tailPos":94854,"headPos":94852,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (rotate c h) = Walk.toSubgraph c"],"goalsAfter":[],"content":"by"},{"tailPos":94931,"headPos":94852,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\ninst✝ : DecidableEq V\nc : Walk G v v\nh : u ∈ support c\n⊢ Walk.toSubgraph (rotate c h) = Walk.toSubgraph c"],"goalsAfter":[],"content":"by\n  rw [rotate, toSubgraph_append, sup_comm, ← toSubgraph_append, take_spec]"},{"tailPos":95139,"headPos":95128,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\np : Walk G u v\n⊢ Walk.toSubgraph (Walk.map f p) = Subgraph.map f (Walk.toSubgraph p)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ : V\n⊢ Walk.toSubgraph (Walk.map f nil) = Subgraph.map f (Walk.toSubgraph nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (Walk.map f p✝) = Subgraph.map f (Walk.toSubgraph p✝)\n⊢ Walk.toSubgraph (Walk.map f (cons h✝ p✝)) = Subgraph.map f (Walk.toSubgraph (cons h✝ p✝))"],"content":"induction p"},{"tailPos":95143,"headPos":95140,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ : V\n⊢ Walk.toSubgraph (Walk.map f nil) = Subgraph.map f (Walk.toSubgraph nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (Walk.map f p✝) = Subgraph.map f (Walk.toSubgraph p✝)\n⊢ Walk.toSubgraph (Walk.map f (cons h✝ p✝)) = Subgraph.map f (Walk.toSubgraph (cons h✝ p✝))"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ : V\n⊢ Walk.toSubgraph (Walk.map f nil) = Subgraph.map f (Walk.toSubgraph nil)","case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (Walk.map f p✝) = Subgraph.map f (Walk.toSubgraph p✝)\n⊢ Walk.toSubgraph (Walk.map f (cons h✝ p✝)) = Subgraph.map f (Walk.toSubgraph (cons h✝ p✝))"],"content":"<;>"},{"tailPos":95170,"headPos":95144,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ : V\n⊢ Walk.toSubgraph (Walk.map f nil) = Subgraph.map f (Walk.toSubgraph nil)"],"goalsAfter":[],"content":"simp [*, Subgraph.map_sup]"},{"tailPos":95170,"headPos":95144,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\nu✝ v✝ w✝ : V\nh✝ : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\np_ih✝ : Walk.toSubgraph (Walk.map f p✝) = Subgraph.map f (Walk.toSubgraph p✝)\n⊢ Walk.toSubgraph (Walk.map f (cons h✝ p✝)) = Subgraph.map f (Walk.toSubgraph (cons h✝ p✝))"],"goalsAfter":[],"content":"simp [*, Subgraph.map_sup]"},{"tailPos":95170,"headPos":95128,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\np : Walk G u v\n⊢ Walk.toSubgraph (Walk.map f p) = Subgraph.map f (Walk.toSubgraph p)"],"goalsAfter":[],"content":"induction p <;> simp [*, Subgraph.map_sup]"},{"tailPos":95127,"headPos":95125,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\np : Walk G u v\n⊢ Walk.toSubgraph (Walk.map f p) = Subgraph.map f (Walk.toSubgraph p)"],"goalsAfter":[],"content":"by"},{"tailPos":95170,"headPos":95125,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nf : G →g G'\np : Walk G u v\n⊢ Walk.toSubgraph (Walk.map f p) = Subgraph.map f (Walk.toSubgraph p)"],"goalsAfter":[],"content":"by induction p <;> simp [*, Subgraph.map_sup]"},{"tailPos":95406,"headPos":95390,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph nil) w)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite (Subgraph.neighborSet (SimpleGraph.singletonSubgraph G u✝) w)"],"content":"Walk.toSubgraph,"},{"tailPos":95436,"headPos":95407,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite (Subgraph.neighborSet (SimpleGraph.singletonSubgraph G u✝) w)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite ∅"],"content":"neighborSet_singletonSubgraph"},{"tailPos":95437,"headPos":95436,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite ∅"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite ∅"],"content":"]"},{"tailPos":95437,"headPos":95386,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph nil) w)"],"goalsAfter":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite ∅"],"content":"rw [Walk.toSubgraph, neighborSet_singletonSubgraph]"},{"tailPos":95460,"headPos":95442,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite ∅"],"goalsAfter":[],"content":"apply Set.toFinite"},{"tailPos":95460,"headPos":95386,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph nil) w)"],"goalsAfter":[],"content":"rw [Walk.toSubgraph, neighborSet_singletonSubgraph]\n    apply Set.toFinite"},{"tailPos":95460,"headPos":95373,"goalsBefore":["case nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ : V\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph nil) w)"],"goalsAfter":[],"content":"| nil =>\n    rw [Walk.toSubgraph, neighborSet_singletonSubgraph]\n    apply Set.toFinite"},{"tailPos":95505,"headPos":95489,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph (cons ha p✝)) w)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha ⊔ Walk.toSubgraph p✝) w)"],"content":"Walk.toSubgraph,"},{"tailPos":95530,"headPos":95506,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha ⊔ Walk.toSubgraph p✝) w)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w ∪ Subgraph.neighborSet (Walk.toSubgraph p✝) w)"],"content":"Subgraph.neighborSet_sup"},{"tailPos":95531,"headPos":95530,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w ∪ Subgraph.neighborSet (Walk.toSubgraph p✝) w)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w ∪ Subgraph.neighborSet (Walk.toSubgraph p✝) w)"],"content":"]"},{"tailPos":95531,"headPos":95485,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph (cons ha p✝)) w)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w ∪ Subgraph.neighborSet (Walk.toSubgraph p✝) w)"],"content":"rw [Walk.toSubgraph, Subgraph.neighborSet_sup]"},{"tailPos":95565,"headPos":95536,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w ∪ Subgraph.neighborSet (Walk.toSubgraph p✝) w)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w)"],"content":"refine Set.Finite.union ?_ ih"},{"tailPos":95635,"headPos":95570,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (subgraphOfAdj G ha) w)"],"goalsAfter":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite {u✝, v✝}"],"content":"refine Set.Finite.subset ?_ (neighborSet_subgraphOfAdj_subset ha)"},{"tailPos":95658,"headPos":95640,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite {u✝, v✝}"],"goalsAfter":[],"content":"apply Set.toFinite"},{"tailPos":95658,"headPos":95485,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph (cons ha p✝)) w)"],"goalsAfter":[],"content":"rw [Walk.toSubgraph, Subgraph.neighborSet_sup]\n    refine Set.Finite.union ?_ ih\n    refine Set.Finite.subset ?_ (neighborSet_subgraphOfAdj_subset ha)\n    apply Set.toFinite"},{"tailPos":95658,"headPos":95463,"goalsBefore":["case cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w u✝ v✝ w✝ : V\nha : Adj G u✝ v✝\np✝ : Walk G v✝ w✝\nih : Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p✝) w)\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph (cons ha p✝)) w)"],"goalsAfter":[],"content":"| cons ha _ ih =>\n    rw [Walk.toSubgraph, Subgraph.neighborSet_sup]\n    refine Set.Finite.union ?_ ih\n    refine Set.Finite.subset ?_ (neighborSet_subgraphOfAdj_subset ha)\n    apply Set.toFinite"},{"tailPos":95658,"headPos":95354,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p) w)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p) w)"],"content":"induction p with\n  | nil =>\n    rw [Walk.toSubgraph, neighborSet_singletonSubgraph]\n    apply Set.toFinite\n  | cons ha _ ih =>\n    rw [Walk.toSubgraph, Subgraph.neighborSet_sup]\n    refine Set.Finite.union ?_ ih\n    refine Set.Finite.subset ?_ (neighborSet_subgraphOfAdj_subset ha)\n    apply Set.toFinite"},{"tailPos":95351,"headPos":95349,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p) w)"],"goalsAfter":[],"content":"by"},{"tailPos":95658,"headPos":95349,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\np : Walk G u v\n⊢ Set.Finite (Subgraph.neighborSet (Walk.toSubgraph p) w)"],"goalsAfter":[],"content":"by\n  induction p with\n  | nil =>\n    rw [Walk.toSubgraph, neighborSet_singletonSubgraph]\n    apply Set.toFinite\n  | cons ha _ ih =>\n    rw [Walk.toSubgraph, Subgraph.neighborSet_sup]\n    refine Set.Finite.union ?_ ih\n    refine Set.Finite.subset ?_ (neighborSet_subgraphOfAdj_subset ha)\n    apply Set.toFinite"},{"tailPos":95938,"headPos":95933,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ {p | Walk.length p = 0} = {Walk.nil}"],"goalsAfter":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ p ∈ {p | Walk.length p = 0} ↔ p ∈ {Walk.nil}"],"content":"ext p"},{"tailPos":95945,"headPos":95941,"goalsBefore":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\np : Walk G u u\n⊢ p ∈ {p | Walk.length p = 0} ↔ p ∈ {Walk.nil}"],"goalsAfter":[],"content":"simp only [Walk.length_eq_zero_iff, Set.setOf_eq_eq_singleton, Set.mem_singleton_iff]"},{"tailPos":95945,"headPos":95933,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ {p | Walk.length p = 0} = {Walk.nil}"],"goalsAfter":[],"content":"ext p\n  simp"},{"tailPos":95930,"headPos":95928,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ {p | Walk.length p = 0} = {Walk.nil}"],"goalsAfter":[],"content":"by"},{"tailPos":95945,"headPos":95928,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\n⊢ {p | Walk.length p = 0} = {Walk.nil}"],"goalsAfter":[],"content":"by\n  ext p\n  simp"},{"tailPos":96156,"headPos":96151,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\n⊢ {p | Walk.length p = 0} = ∅"],"goalsAfter":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = 0} ↔ p ∈ ∅"],"content":"ext p"},{"tailPos":96227,"headPos":96159,"goalsBefore":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = 0} ↔ p ∈ ∅"],"goalsAfter":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ ¬Walk.length p = 0"],"content":"simp only [Set.mem_setOf_eq, Set.mem_empty_iff_false, iff_false_iff]"},{"tailPos":96285,"headPos":96230,"goalsBefore":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\np : Walk G u v\n⊢ ¬Walk.length p = 0"],"goalsAfter":[],"content":"exact fun h' => absurd (Walk.eq_of_length_eq_zero h') h"},{"tailPos":96285,"headPos":96151,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\n⊢ {p | Walk.length p = 0} = ∅"],"goalsAfter":[],"content":"ext p\n  simp only [Set.mem_setOf_eq, Set.mem_empty_iff_false, iff_false_iff]\n  exact fun h' => absurd (Walk.eq_of_length_eq_zero h') h"},{"tailPos":96148,"headPos":96146,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\n⊢ {p | Walk.length p = 0} = ∅"],"goalsAfter":[],"content":"by"},{"tailPos":96285,"headPos":96146,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nh : u ≠ v\n⊢ {p | Walk.length p = 0} = ∅"],"goalsAfter":[],"content":"by\n  ext p\n  simp only [Set.mem_setOf_eq, Set.mem_empty_iff_false, iff_false_iff]\n  exact fun h' => absurd (Walk.eq_of_length_eq_zero h') h"},{"tailPos":96573,"headPos":96568,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\n⊢ {p | Walk.length p = Nat.succ n} = ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = Nat.succ n} ↔ p ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"ext p"},{"tailPos":96605,"headPos":96576,"goalsBefore":["case h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = Nat.succ n} ↔ p ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case h.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nn : ℕ\n⊢ Walk.nil ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.nil ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}","case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"cases' p with _ _ w _ huw pwv"},{"tailPos":96610,"headPos":96608,"goalsBefore":["case h.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nn : ℕ\n⊢ Walk.nil ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.nil ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}","case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case h.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nn : ℕ\n⊢ Walk.nil ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.nil ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"·"},{"tailPos":96625,"headPos":96611,"goalsBefore":["case h.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nn : ℕ\n⊢ Walk.nil ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.nil ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":[],"content":"simp [eq_comm]"},{"tailPos":96625,"headPos":96608,"goalsBefore":["case h.nil\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu : V\nn : ℕ\n⊢ Walk.nil ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.nil ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}","case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"· simp [eq_comm]"},{"tailPos":96630,"headPos":96628,"goalsBefore":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"·"},{"tailPos":96762,"headPos":96631,"goalsBefore":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n ↔ ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"content":"simp only [Nat.succ_eq_add_one, Set.mem_setOf_eq, Walk.length_cons, add_left_inj,\n      Set.mem_iUnion, Set.mem_image, exists_prop]"},{"tailPos":96778,"headPos":96767,"goalsBefore":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n ↔ ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"goalsAfter":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n → ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv","case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"content":"constructor"},{"tailPos":96785,"headPos":96783,"goalsBefore":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n → ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv","case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"goalsAfter":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n → ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"content":"·"},{"tailPos":96796,"headPos":96786,"goalsBefore":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n → ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"goalsAfter":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ ∃ i h x, Walk.length x = Walk.length pwv ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"content":"rintro rfl"},{"tailPos":96836,"headPos":96803,"goalsBefore":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ ∃ i h x, Walk.length x = Walk.length pwv ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"goalsAfter":[],"content":"exact ⟨w, huw, pwv, rfl, rfl⟩"},{"tailPos":96836,"headPos":96786,"goalsBefore":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n → ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv"],"goalsAfter":[],"content":"rintro rfl\n      exact ⟨w, huw, pwv, rfl, rfl⟩"},{"tailPos":96836,"headPos":96783,"goalsBefore":["case h.cons.mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.length pwv = n → ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv","case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"goalsAfter":["case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"content":"· rintro rfl\n      exact ⟨w, huw, pwv, rfl, rfl⟩"},{"tailPos":96843,"headPos":96841,"goalsBefore":["case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"goalsAfter":["case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"content":"·"},{"tailPos":96883,"headPos":96844,"goalsBefore":["case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"goalsAfter":["case h.cons.mpr.intro.intro.intro.intro.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nhuw✝ : Adj G u w\npwv : Walk G w v\nhuw : Adj G u w\n⊢ Walk.length pwv = Walk.length pwv"],"content":"rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩"},{"tailPos":96893,"headPos":96890,"goalsBefore":["case h.cons.mpr.intro.intro.intro.intro.refl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v w : V\nhuw✝ : Adj G u w\npwv : Walk G w v\nhuw : Adj G u w\n⊢ Walk.length pwv = Walk.length pwv"],"goalsAfter":[],"content":"rfl"},{"tailPos":96893,"headPos":96844,"goalsBefore":["case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"goalsAfter":[],"content":"rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩\n      rfl"},{"tailPos":96893,"headPos":96841,"goalsBefore":["case h.cons.mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ (∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = Walk.cons huw pwv) → Walk.length pwv = n"],"goalsAfter":[],"content":"· rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩\n      rfl"},{"tailPos":96893,"headPos":96631,"goalsBefore":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":[],"content":"simp only [Nat.succ_eq_add_one, Set.mem_setOf_eq, Walk.length_cons, add_left_inj,\n      Set.mem_iUnion, Set.mem_image, exists_prop]\n    constructor\n    · rintro rfl\n      exact ⟨w, huw, pwv, rfl, rfl⟩\n    · rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩\n      rfl"},{"tailPos":96893,"headPos":96628,"goalsBefore":["case h.cons\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\nw : V\nhuw : Adj G u w\npwv : Walk G w v\n⊢ Walk.cons huw pwv ∈ {p | Walk.length p = Nat.succ n} ↔\n    Walk.cons huw pwv ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":[],"content":"· simp only [Nat.succ_eq_add_one, Set.mem_setOf_eq, Walk.length_cons, add_left_inj,\n      Set.mem_iUnion, Set.mem_image, exists_prop]\n    constructor\n    · rintro rfl\n      exact ⟨w, huw, pwv, rfl, rfl⟩\n    · rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩\n      rfl"},{"tailPos":96893,"headPos":96568,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\n⊢ {p | Walk.length p = Nat.succ n} = ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":[],"content":"ext p\n  cases' p with _ _ w _ huw pwv\n  · simp [eq_comm]\n  · simp only [Nat.succ_eq_add_one, Set.mem_setOf_eq, Walk.length_cons, add_left_inj,\n      Set.mem_iUnion, Set.mem_image, exists_prop]\n    constructor\n    · rintro rfl\n      exact ⟨w, huw, pwv, rfl, rfl⟩\n    · rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩\n      rfl"},{"tailPos":96565,"headPos":96563,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\n⊢ {p | Walk.length p = Nat.succ n} = ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":[],"content":"by"},{"tailPos":96893,"headPos":96563,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nu v : V\nn : ℕ\n⊢ {p | Walk.length p = Nat.succ n} = ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":[],"content":"by\n  ext p\n  cases' p with _ _ w _ huw pwv\n  · simp [eq_comm]\n  · simp only [Nat.succ_eq_add_one, Set.mem_setOf_eq, Walk.length_cons, add_left_inj,\n      Set.mem_iUnion, Set.mem_image, exists_prop]\n    constructor\n    · rintro rfl\n      exact ⟨w, huw, pwv, rfl, rfl⟩\n    · rintro ⟨w, huw, pwv, rfl, rfl, rfl⟩\n      rfl"},{"tailPos":97522,"headPos":97515,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\nh : u = v\n⊢ Finset (Walk G u v)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nv : V\n⊢ Finset (Walk G v v)"],"content":"subst u"},{"tailPos":97545,"headPos":97529,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nv : V\n⊢ Finset (Walk G v v)"],"goalsAfter":[],"content":"exact {Walk.nil}"},{"tailPos":97545,"headPos":97515,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\nh : u = v\n⊢ Finset (Walk G u v)"],"goalsAfter":[],"content":"subst u\n      exact {Walk.nil}"},{"tailPos":97508,"headPos":97506,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\nh : u = v\n⊢ Finset (Walk G u v)"],"goalsAfter":[],"content":"by"},{"tailPos":97545,"headPos":97506,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\nh : u = v\n⊢ Finset (Walk G u v)"],"goalsAfter":[],"content":"by\n      subst u\n      exact {Walk.nil}"},{"tailPos":97714,"headPos":97710,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn✝ : ℕ\nu v : V\nn : ℕ\nw : ↑(neighborSet G u)\nx✝¹ x✝ : Walk G (↑w) v\n⊢ (fun p => Walk.cons (_ : ↑w ∈ neighborSet G u) p) x✝¹ = (fun p => Walk.cons (_ : ↑w ∈ neighborSet G u) p) x✝ →\n    x✝¹ = x✝"],"goalsAfter":[],"content":"simp only [Walk.cons.injEq, heq_eq_eq, true_and, imp_self]"},{"tailPos":97709,"headPos":97707,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn✝ : ℕ\nu v : V\nn : ℕ\nw : ↑(neighborSet G u)\nx✝¹ x✝ : Walk G (↑w) v\n⊢ (fun p => Walk.cons (_ : ↑w ∈ neighborSet G u) p) x✝¹ = (fun p => Walk.cons (_ : ↑w ∈ neighborSet G u) p) x✝ →\n    x✝¹ = x✝"],"goalsAfter":[],"content":"by"},{"tailPos":97714,"headPos":97707,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn✝ : ℕ\nu v : V\nn : ℕ\nw : ↑(neighborSet G u)\nx✝¹ x✝ : Walk G (↑w) v\n⊢ (fun p => Walk.cons (_ : ↑w ∈ neighborSet G u) p) x✝¹ = (fun p => Walk.cons (_ : ↑w ∈ neighborSet G u) p) x✝ →\n    x✝¹ = x✝"],"goalsAfter":[],"content":"by simp"},{"tailPos":97972,"headPos":97933,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}"],"goalsAfter":["case zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}","case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"content":"induction' n with n ih generalizing u v"},{"tailPos":97977,"headPos":97975,"goalsBefore":["case zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}","case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"goalsAfter":["case zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"content":"·"},{"tailPos":98010,"headPos":97978,"goalsBefore":["case zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"goalsAfter":["case zero.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v u : V\n⊢ ↑(finsetWalkLength G Nat.zero u u) = {p | Walk.length p = Nat.zero}","case zero.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\nhuv : u ≠ v\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"content":"obtain rfl | huv := eq_or_ne u v"},{"tailPos":98014,"headPos":98011,"goalsBefore":["case zero.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v u : V\n⊢ ↑(finsetWalkLength G Nat.zero u u) = {p | Walk.length p = Nat.zero}","case zero.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\nhuv : u ≠ v\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"goalsAfter":["case zero.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v u : V\n⊢ ↑(finsetWalkLength G Nat.zero u u) = {p | Walk.length p = Nat.zero}","case zero.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\nhuv : u ≠ v\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"content":"<;>"},{"tailPos":98072,"headPos":98015,"goalsBefore":["case zero.inl\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v u : V\n⊢ ↑(finsetWalkLength G Nat.zero u u) = {p | Walk.length p = Nat.zero}"],"goalsAfter":[],"content":"simp [finsetWalkLength, set_walk_length_zero_eq_of_ne, *]"},{"tailPos":98072,"headPos":98015,"goalsBefore":["case zero.inr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\nhuv : u ≠ v\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"goalsAfter":[],"content":"simp [finsetWalkLength, set_walk_length_zero_eq_of_ne, *]"},{"tailPos":98072,"headPos":97978,"goalsBefore":["case zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}"],"goalsAfter":[],"content":"obtain rfl | huv := eq_or_ne u v <;> simp [finsetWalkLength, set_walk_length_zero_eq_of_ne, *]"},{"tailPos":98072,"headPos":97975,"goalsBefore":["case zero\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ u v : V\n⊢ ↑(finsetWalkLength G Nat.zero u v) = {p | Walk.length p = Nat.zero}","case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"goalsAfter":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"content":"· obtain rfl | huv := eq_or_ne u v <;> simp [finsetWalkLength, set_walk_length_zero_eq_of_ne, *]"},{"tailPos":98077,"headPos":98075,"goalsBefore":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"goalsAfter":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"content":"·"},{"tailPos":98207,"headPos":98078,"goalsBefore":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"goalsAfter":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ (⋃ (x : ↑(neighborSet G u)),\n      ↑(Finset.map\n          { toFun := fun p => Walk.cons (_ : ↑x ∈ neighborSet G u) p,\n            inj' :=\n              (_ :\n                ∀ (x_1 x_2 : Walk G (↑x) v),\n                  Walk.cons (_ : ↑x ∈ neighborSet G u) x_1 = Walk.cons (_ : ↑x ∈ neighborSet G u) x_2 → x_1 = x_2) }\n          (finsetWalkLength G n (↑x) v))) =\n    ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"simp only [finsetWalkLength, set_walk_length_succ_eq, Finset.coe_biUnion, Finset.mem_coe,\n      Finset.mem_univ, Set.iUnion_true]"},{"tailPos":98217,"headPos":98212,"goalsBefore":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ (⋃ (x : ↑(neighborSet G u)),\n      ↑(Finset.map\n          { toFun := fun p => Walk.cons (_ : ↑x ∈ neighborSet G u) p,\n            inj' :=\n              (_ :\n                ∀ (x_1 x_2 : Walk G (↑x) v),\n                  Walk.cons (_ : ↑x ∈ neighborSet G u) x_1 = Walk.cons (_ : ↑x ∈ neighborSet G u) x_2 → x_1 = x_2) }\n          (finsetWalkLength G n (↑x) v))) =\n    ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case succ.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\n⊢ (p ∈\n      ⋃ (x : ↑(neighborSet G u)),\n        ↑(Finset.map\n            { toFun := fun p => Walk.cons (_ : ↑x ∈ neighborSet G u) p,\n              inj' :=\n                (_ :\n                  ∀ (x_1 x_2 : Walk G (↑x) v),\n                    Walk.cons (_ : ↑x ∈ neighborSet G u) x_1 = Walk.cons (_ : ↑x ∈ neighborSet G u) x_2 → x_1 = x_2) }\n            (finsetWalkLength G n (↑x) v))) ↔\n    p ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"content":"ext p"},{"tailPos":98376,"headPos":98222,"goalsBefore":["case succ.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\n⊢ (p ∈\n      ⋃ (x : ↑(neighborSet G u)),\n        ↑(Finset.map\n            { toFun := fun p => Walk.cons (_ : ↑x ∈ neighborSet G u) p,\n              inj' :=\n                (_ :\n                  ∀ (x_1 x_2 : Walk G (↑x) v),\n                    Walk.cons (_ : ↑x ∈ neighborSet G u) x_1 = Walk.cons (_ : ↑x ∈ neighborSet G u) x_2 → x_1 = x_2) }\n            (finsetWalkLength G n (↑x) v))) ↔\n    p ∈ ⋃ (w : V) (h : Adj G u w), Walk.cons h '' {p' | Walk.length p' = n}"],"goalsAfter":["case succ.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\n⊢ (∃ i h x,\n      x ∈ finsetWalkLength G n i v ∧\n        Walk.cons (_ : ↑{ val := i, property := (_ : i ∈ neighborSet G u) } ∈ neighborSet G u) x = p) ↔\n    ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = p"],"content":"simp only [mem_neighborSet, Finset.coe_map, Embedding.coeFn_mk, Set.iUnion_coe_set,\n      Set.mem_iUnion, Set.mem_image, Finset.mem_coe, Set.mem_setOf_eq]"},{"tailPos":98387,"headPos":98381,"goalsBefore":["case succ.h\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\n⊢ (∃ i h x,\n      x ∈ finsetWalkLength G n i v ∧\n        Walk.cons (_ : ↑{ val := i, property := (_ : i ∈ neighborSet G u) } ∈ neighborSet G u) x = p) ↔\n    ∃ i h x, Walk.length x = n ∧ Walk.cons (_ : Adj G u i) x = p"],"goalsAfter":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nx✝² : V\nx✝¹ : Adj G u x✝²\nx✝ : Walk G x✝² v\n⊢ x✝ ∈ finsetWalkLength G n x✝² v ↔ Walk.length x✝ = n"],"content":"congr!"},{"tailPos":98406,"headPos":98392,"goalsBefore":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nx✝² : V\nx✝¹ : Adj G u x✝²\nx✝ : Walk G x✝² v\n⊢ x✝ ∈ finsetWalkLength G n x✝² v ↔ Walk.length x✝ = n"],"goalsAfter":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"content":"rename_i w _ q"},{"tailPos":98444,"headPos":98411,"goalsBefore":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"goalsAfter":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ ↑(finsetWalkLength G n w v) ↔ q ∈ {p | Walk.length p = n}\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"content":"have := Set.ext_iff.mp (ih w v) q"},{"tailPos":98501,"headPos":98449,"goalsBefore":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ ↑(finsetWalkLength G n w v) ↔ q ∈ {p | Walk.length p = n}\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"goalsAfter":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ finsetWalkLength G n w v ↔ Walk.length q = n\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"content":"simp only [Finset.mem_coe, Set.mem_setOf_eq] at this"},{"tailPos":98518,"headPos":98510,"goalsBefore":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ finsetWalkLength G n w v ↔ Walk.length q = n\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"goalsAfter":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ finsetWalkLength G n w v ↔ Walk.length q = n\n⊢ q ∈ finsetWalkLength G n w v ↔ q ∈ finsetWalkLength G n w v"],"content":"← this"},{"tailPos":98519,"headPos":98518,"goalsBefore":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ finsetWalkLength G n w v ↔ Walk.length q = n\n⊢ q ∈ finsetWalkLength G n w v ↔ q ∈ finsetWalkLength G n w v"],"goalsAfter":[],"content":"]"},{"tailPos":98519,"headPos":98506,"goalsBefore":["case succ.h.a.h.e'_2.h.h.e'_2.h.h.e'_2.h.h.e'_1.a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\np : Walk G u v\nw : V\nx✝ : Adj G u w\nq : Walk G w v\nthis : q ∈ finsetWalkLength G n w v ↔ Walk.length q = n\n⊢ q ∈ finsetWalkLength G n w v ↔ Walk.length q = n"],"goalsAfter":[],"content":"rw [← this]"},{"tailPos":98519,"headPos":98078,"goalsBefore":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"goalsAfter":[],"content":"simp only [finsetWalkLength, set_walk_length_succ_eq, Finset.coe_biUnion, Finset.mem_coe,\n      Finset.mem_univ, Set.iUnion_true]\n    ext p\n    simp only [mem_neighborSet, Finset.coe_map, Embedding.coeFn_mk, Set.iUnion_coe_set,\n      Set.mem_iUnion, Set.mem_image, Finset.mem_coe, Set.mem_setOf_eq]\n    congr!\n    rename_i w _ q\n    have := Set.ext_iff.mp (ih w v) q\n    simp only [Finset.mem_coe, Set.mem_setOf_eq] at this\n    rw [← this]"},{"tailPos":98519,"headPos":98075,"goalsBefore":["case succ\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu✝ v✝ : V\nn : ℕ\nih : ∀ (u v : V), ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}\nu v : V\n⊢ ↑(finsetWalkLength G (Nat.succ n) u v) = {p | Walk.length p = Nat.succ n}"],"goalsAfter":[],"content":"· simp only [finsetWalkLength, set_walk_length_succ_eq, Finset.coe_biUnion, Finset.mem_coe,\n      Finset.mem_univ, Set.iUnion_true]\n    ext p\n    simp only [mem_neighborSet, Finset.coe_map, Embedding.coeFn_mk, Set.iUnion_coe_set,\n      Set.mem_iUnion, Set.mem_image, Finset.mem_coe, Set.mem_setOf_eq]\n    congr!\n    rename_i w _ q\n    have := Set.ext_iff.mp (ih w v) q\n    simp only [Finset.mem_coe, Set.mem_setOf_eq] at this\n    rw [← this]"},{"tailPos":98519,"headPos":97933,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}"],"goalsAfter":[],"content":"induction' n with n ih generalizing u v\n  · obtain rfl | huv := eq_or_ne u v <;> simp [finsetWalkLength, set_walk_length_zero_eq_of_ne, *]\n  · simp only [finsetWalkLength, set_walk_length_succ_eq, Finset.coe_biUnion, Finset.mem_coe,\n      Finset.mem_univ, Set.iUnion_true]\n    ext p\n    simp only [mem_neighborSet, Finset.coe_map, Embedding.coeFn_mk, Set.iUnion_coe_set,\n      Set.mem_iUnion, Set.mem_image, Finset.mem_coe, Set.mem_setOf_eq]\n    congr!\n    rename_i w _ q\n    have := Set.ext_iff.mp (ih w v) q\n    simp only [Finset.mem_coe, Set.mem_setOf_eq] at this\n    rw [← this]"},{"tailPos":97930,"headPos":97928,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}"],"goalsAfter":[],"content":"by"},{"tailPos":98519,"headPos":97928,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ ↑(finsetWalkLength G n u v) = {p | Walk.length p = n}"],"goalsAfter":[],"content":"by\n  induction' n with n ih generalizing u v\n  · obtain rfl | huv := eq_or_ne u v <;> simp [finsetWalkLength, set_walk_length_zero_eq_of_ne, *]\n  · simp only [finsetWalkLength, set_walk_length_succ_eq, Finset.coe_biUnion, Finset.mem_coe,\n      Finset.mem_univ, Set.iUnion_true]\n    ext p\n    simp only [mem_neighborSet, Finset.coe_map, Embedding.coeFn_mk, Set.iUnion_coe_set,\n      Set.mem_iUnion, Set.mem_image, Finset.mem_coe, Set.mem_setOf_eq]\n    congr!\n    rename_i w _ q\n    have := Set.ext_iff.mp (ih w v) q\n    simp only [Finset.mem_coe, Set.mem_setOf_eq] at this\n    rw [← this]"},{"tailPos":99121,"headPos":99102,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ ↑(finsetWalkLength G n u v) ↔ p ∈ {p | Walk.length p = n}"],"content":"← Finset.mem_coe,"},{"tailPos":99145,"headPos":99122,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ ↑(finsetWalkLength G n u v) ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = n} ↔ p ∈ {p | Walk.length p = n}"],"content":"coe_finsetWalkLength_eq"},{"tailPos":99146,"headPos":99145,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = n} ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"]"},{"tailPos":99146,"headPos":99098,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"rw [← Finset.mem_coe, coe_finsetWalkLength_eq]"},{"tailPos":99093,"headPos":99091,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"by"},{"tailPos":99146,"headPos":99091,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"by\n    rw [← Finset.mem_coe, coe_finsetWalkLength_eq]"},{"tailPos":99368,"headPos":99363,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ Set.toFinset {p | Walk.length p = n} = finsetWalkLength G n u v"],"goalsAfter":["case a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\np : Walk G u v\n⊢ p ∈ Set.toFinset {p | Walk.length p = n} ↔ p ∈ finsetWalkLength G n u v"],"content":"ext p"},{"tailPos":99405,"headPos":99371,"goalsBefore":["case a\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\np : Walk G u v\n⊢ p ∈ Set.toFinset {p | Walk.length p = n} ↔ p ∈ finsetWalkLength G n u v"],"goalsAfter":[],"content":"simp [← coe_finsetWalkLength_eq]"},{"tailPos":99405,"headPos":99363,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ Set.toFinset {p | Walk.length p = n} = finsetWalkLength G n u v"],"goalsAfter":[],"content":"ext p\n  simp [← coe_finsetWalkLength_eq]"},{"tailPos":99360,"headPos":99358,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ Set.toFinset {p | Walk.length p = n} = finsetWalkLength G n u v"],"goalsAfter":[],"content":"by"},{"tailPos":99405,"headPos":99358,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nn : ℕ\nu v : V\n⊢ Set.toFinset {p | Walk.length p = n} = finsetWalkLength G n u v"],"goalsAfter":[],"content":"by\n  ext p\n  simp [← coe_finsetWalkLength_eq]"},{"tailPos":99856,"headPos":99837,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ ↑(finsetWalkLength G n u v) ↔ p ∈ {p | Walk.length p = n}"],"content":"← Finset.mem_coe,"},{"tailPos":99880,"headPos":99857,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ ↑(finsetWalkLength G n u v) ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = n} ↔ p ∈ {p | Walk.length p = n}"],"content":"coe_finsetWalkLength_eq"},{"tailPos":99881,"headPos":99880,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ {p | Walk.length p = n} ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"]"},{"tailPos":99881,"headPos":99833,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"rw [← Finset.mem_coe, coe_finsetWalkLength_eq]"},{"tailPos":99828,"headPos":99826,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"by"},{"tailPos":99881,"headPos":99826,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\np : Walk G u v\n⊢ p ∈ finsetWalkLength G n u v ↔ p ∈ {p | Walk.length p = n}"],"goalsAfter":[],"content":"by\n    rw [← Finset.mem_coe, coe_finsetWalkLength_eq]"},{"tailPos":100208,"headPos":100152,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\n⊢ ∀ (x : Walk G u v),\n    x ∈ Finset.filter Walk.IsPath (finsetWalkLength G n u v) ↔ x ∈ {p | Walk.IsPath p ∧ Walk.length p = n}"],"goalsAfter":[],"content":"simp [Walk.mem_finsetWalkLength_iff_length_eq, and_comm]"},{"tailPos":100147,"headPos":100145,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\n⊢ ∀ (x : Walk G u v),\n    x ∈ Finset.filter Walk.IsPath (finsetWalkLength G n u v) ↔ x ∈ {p | Walk.IsPath p ∧ Walk.length p = n}"],"goalsAfter":[],"content":"by"},{"tailPos":100208,"headPos":100145,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝¹ : DecidableEq V\ninst✝ : LocallyFinite G\nu v : V\nn : ℕ\n⊢ ∀ (x : Walk G u v),\n    x ∈ Finset.filter Walk.IsPath (finsetWalkLength G n u v) ↔ x ∈ {p | Walk.IsPath p ∧ Walk.length p = n}"],"goalsAfter":[],"content":"by\n    simp [Walk.mem_finsetWalkLength_iff_length_eq, and_comm]"},{"tailPos":100541,"headPos":100530,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v ↔ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v → ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"content":"constructor"},{"tailPos":100546,"headPos":100544,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v → ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v → ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"content":"·"},{"tailPos":100554,"headPos":100547,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v → ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nr : Reachable G u v\n⊢ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"content":"intro r"},{"tailPos":100589,"headPos":100559,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nr : Reachable G u v\n⊢ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nr : Reachable G u v\np : Path G u v\n⊢ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"content":"refine r.elim_path fun p => ?_"},{"tailPos":100641,"headPos":100594,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nr : Reachable G u v\np : Path G u v\n⊢ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nr : Reachable G u v\np : Path G u v\n⊢ ↑p ∈ finsetWalkLength G (↑{ val := Walk.length ↑p, isLt := (_ : Walk.length ↑p < Fintype.card V) }) u v"],"content":"refine ⟨⟨_, p.isPath.length_lt⟩, p, ?_⟩"},{"tailPos":100692,"headPos":100646,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nr : Reachable G u v\np : Path G u v\n⊢ ↑p ∈ finsetWalkLength G (↑{ val := Walk.length ↑p, isLt := (_ : Walk.length ↑p < Fintype.card V) }) u v"],"goalsAfter":[],"content":"simp [Walk.mem_finsetWalkLength_iff_length_eq]"},{"tailPos":100692,"headPos":100547,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v → ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":[],"content":"intro r\n    refine r.elim_path fun p => ?_\n    refine ⟨⟨_, p.isPath.length_lt⟩, p, ?_⟩\n    simp [Walk.mem_finsetWalkLength_iff_length_eq]"},{"tailPos":100692,"headPos":100544,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v → ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"content":"· intro r\n    refine r.elim_path fun p => ?_\n    refine ⟨⟨_, p.isPath.length_lt⟩, p, ?_⟩\n    simp [Walk.mem_finsetWalkLength_iff_length_eq]"},{"tailPos":100697,"headPos":100695,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"content":"·"},{"tailPos":100718,"headPos":100698,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nw✝ : Fin (Fintype.card V)\np : Walk G u v\nh✝ : p ∈ finsetWalkLength G (↑w✝) u v\n⊢ Reachable G u v"],"content":"rintro ⟨_, p, _⟩"},{"tailPos":100736,"headPos":100723,"goalsBefore":["case mpr.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\nw✝ : Fin (Fintype.card V)\np : Walk G u v\nh✝ : p ∈ finsetWalkLength G (↑w✝) u v\n⊢ Reachable G u v"],"goalsAfter":[],"content":"exact ⟨p⟩"},{"tailPos":100736,"headPos":100698,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"goalsAfter":[],"content":"rintro ⟨_, p, _⟩\n    exact ⟨p⟩"},{"tailPos":100736,"headPos":100695,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ (∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)) → Reachable G u v"],"goalsAfter":[],"content":"· rintro ⟨_, p, _⟩\n    exact ⟨p⟩"},{"tailPos":100736,"headPos":100530,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v ↔ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":[],"content":"constructor\n  · intro r\n    refine r.elim_path fun p => ?_\n    refine ⟨⟨_, p.isPath.length_lt⟩, p, ?_⟩\n    simp [Walk.mem_finsetWalkLength_iff_length_eq]\n  · rintro ⟨_, p, _⟩\n    exact ⟨p⟩"},{"tailPos":100527,"headPos":100525,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v ↔ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":[],"content":"by"},{"tailPos":100736,"headPos":100525,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\n⊢ Reachable G u v ↔ ∃ n, Finset.Nonempty (finsetWalkLength G (↑n) u v)"],"goalsAfter":[],"content":"by\n  constructor\n  · intro r\n    refine r.elim_path fun p => ?_\n    refine ⟨⟨_, p.isPath.length_lt⟩, p, ?_⟩\n    simp [Walk.mem_finsetWalkLength_iff_length_eq]\n  · rintro ⟨_, p, _⟩\n    exact ⟨p⟩"},{"tailPos":101280,"headPos":101266,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Connected G)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Nonempty V)"],"content":"connected_iff,"},{"tailPos":101309,"headPos":101281,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Nonempty V)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Finset.Nonempty Finset.univ)"],"content":"← Finset.univ_nonempty_iff"},{"tailPos":101310,"headPos":101309,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Finset.Nonempty Finset.univ)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Finset.Nonempty Finset.univ)"],"content":"]"},{"tailPos":101310,"headPos":101262,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Connected G)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Finset.Nonempty Finset.univ)"],"content":"rw [connected_iff, ← Finset.univ_nonempty_iff]"},{"tailPos":101327,"headPos":101313,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Preconnected G ∧ Finset.Nonempty Finset.univ)"],"goalsAfter":[],"content":"infer_instance"},{"tailPos":101327,"headPos":101262,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Connected G)"],"goalsAfter":[],"content":"rw [connected_iff, ← Finset.univ_nonempty_iff]\n  infer_instance"},{"tailPos":101259,"headPos":101257,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Connected G)"],"goalsAfter":[],"content":"by"},{"tailPos":101327,"headPos":101257,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Decidable (Connected G)"],"goalsAfter":[],"content":"by\n  rw [connected_iff, ← Finset.univ_nonempty_iff]\n  infer_instance"},{"tailPos":101702,"headPos":101681,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\ne : Sym2 V\n⊢ ∀ (a₁ a₂ : V),\n    (fun v w => ¬Reachable (G \\ fromEdgeSet {e}) v w) a₁ a₂ = (fun v w => ¬Reachable (G \\ fromEdgeSet {e}) v w) a₂ a₁"],"goalsAfter":[],"content":"simp [reachable_comm]"},{"tailPos":101680,"headPos":101678,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\ne : Sym2 V\n⊢ ∀ (a₁ a₂ : V),\n    (fun v w => ¬Reachable (G \\ fromEdgeSet {e}) v w) a₁ a₂ = (fun v w => ¬Reachable (G \\ fromEdgeSet {e}) v w) a₂ a₁"],"goalsAfter":[],"content":"by"},{"tailPos":101702,"headPos":101678,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG✝ : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nG : SimpleGraph V\ne : Sym2 V\n⊢ ∀ (a₁ a₂ : V),\n    (fun v w => ¬Reachable (G \\ fromEdgeSet {e}) v w) a₁ a₂ = (fun v w => ¬Reachable (G \\ fromEdgeSet {e}) v w) a₂ a₁"],"goalsAfter":[],"content":"by simp [reachable_comm]"},{"tailPos":102139,"headPos":102128,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w →\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"constructor"},{"tailPos":102144,"headPos":102142,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w →\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w →\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"·"},{"tailPos":102159,"headPos":102145,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w →\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"rintro ⟨p⟩"},{"tailPos":102208,"headPos":102204,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G"],"goalsAfter":[],"content":"simp only [sdiff_le_iff, ge_iff_le, le_sup_right]"},{"tailPos":102203,"headPos":102201,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G"],"goalsAfter":[],"content":"by"},{"tailPos":102208,"headPos":102201,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G"],"goalsAfter":[],"content":"by simp"},{"tailPos":102210,"headPos":102164,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      Walk.edges\n        (Walk.map (Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)) p)"],"content":"use p.map (Hom.mapSpanningSubgraphs (by simp))"},{"tailPos":102224,"headPos":102215,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      Walk.edges\n        (Walk.map (Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)) p)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      Walk.edges\n        (Walk.map (Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)) p)"],"content":"simp_rw ["},{"tailPos":102239,"headPos":102224,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      Walk.edges\n        (Walk.map (Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)) p)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      List.map (Sym2.map ↑(Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)))\n        (Walk.edges p)"],"content":"Walk.edges_map,"},{"tailPos":102253,"headPos":102240,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      List.map (Sym2.map ↑(Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)))\n        (Walk.edges p)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a,\n      a ∈ Walk.edges p ∧\n        Sym2.map (↑(Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G))) a =\n          Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"List.mem_map,"},{"tailPos":102285,"headPos":102254,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a,\n      a ∈ Walk.edges p ∧\n        Sym2.map (↑(Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G))) a =\n          Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ Sym2.map (fun x => x) a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"Hom.mapSpanningSubgraphs_apply,"},{"tailPos":102299,"headPos":102286,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ Sym2.map (fun x => x) a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ id a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"Sym2.map_id',"},{"tailPos":102306,"headPos":102300,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ id a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"simp only [id.def]"},{"tailPos":102307,"headPos":102215,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈\n      Walk.edges\n        (Walk.map (Hom.mapSpanningSubgraphs (_ : G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)} ≤ G)) p)"],"goalsAfter":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"simp_rw [Walk.edges_map, List.mem_map, Hom.mapSpanningSubgraphs_apply, Sym2.map_id', id.def]"},{"tailPos":102334,"headPos":102312,"goalsBefore":["case mp.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\n⊢ ¬∃ a, a ∈ Walk.edges p ∧ a = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"goalsAfter":["case mp.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ False"],"content":"rintro ⟨e, h, rfl⟩"},{"tailPos":102375,"headPos":102339,"goalsBefore":["case mp.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ False"],"goalsAfter":[],"content":"simpa only [edgeSet_sdiff, edgeSet_fromEdgeSet, edgeSet_sdiff_sdiff_isDiag, mem_edgeSet, Set.mem_diff,\n  Set.mem_singleton_iff, not_true, and_false] using p.edges_subset_edgeSet h"},{"tailPos":102375,"headPos":102145,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w →\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rintro ⟨p⟩\n    use p.map (Hom.mapSpanningSubgraphs (by simp))\n    simp_rw [Walk.edges_map, List.mem_map, Hom.mapSpanningSubgraphs_apply, Sym2.map_id', id.def]\n    rintro ⟨e, h, rfl⟩\n    simpa using p.edges_subset_edgeSet h"},{"tailPos":102375,"headPos":102142,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w →\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"· rintro ⟨p⟩\n    use p.map (Hom.mapSpanningSubgraphs (by simp))\n    simp_rw [Walk.edges_map, List.mem_map, Hom.mapSpanningSubgraphs_apply, Sym2.map_id', id.def]\n    rintro ⟨e, h, rfl⟩\n    simpa using p.edges_subset_edgeSet h"},{"tailPos":102380,"headPos":102378,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"·"},{"tailPos":102398,"headPos":102381,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":["case mpr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nh : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"rintro ⟨p, h⟩"},{"tailPos":102443,"headPos":102403,"goalsBefore":["case mpr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nh : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":["case mpr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nh : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\ne : Sym2 V\nep : e ∈ Walk.edges p\n⊢ e ∈ edgeSet (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)})"],"content":"refine ⟨p.transfer _ fun e ep => ?_⟩"},{"tailPos":102565,"headPos":102448,"goalsBefore":["case mpr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nh : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\ne : Sym2 V\nep : e ∈ Walk.edges p\n⊢ e ∈ edgeSet (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)})"],"goalsAfter":["case mpr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nh : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\ne : Sym2 V\nep : e ∈ Walk.edges p\n⊢ e ∈ edgeSet G ∧ ¬e = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"simp only [edgeSet_sdiff, edgeSet_fromEdgeSet, edgeSet_sdiff_sdiff_isDiag, Set.mem_diff,\n      Set.mem_singleton_iff]"},{"tailPos":102632,"headPos":102570,"goalsBefore":["case mpr.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\np : Walk G v w\nh : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\ne : Sym2 V\nep : e ∈ Walk.edges p\n⊢ e ∈ edgeSet G ∧ ¬e = Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"goalsAfter":[],"content":"exact ⟨p.edges_subset_edgeSet ep, fun h' => h (h' ▸ ep)⟩"},{"tailPos":102632,"headPos":102381,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":[],"content":"rintro ⟨p, h⟩\n    refine ⟨p.transfer _ fun e ep => ?_⟩\n    simp only [edgeSet_sdiff, edgeSet_fromEdgeSet, edgeSet_sdiff_sdiff_isDiag, Set.mem_diff,\n      Set.mem_singleton_iff]\n    exact ⟨p.edges_subset_edgeSet ep, fun h' => h (h' ▸ ep)⟩"},{"tailPos":102632,"headPos":102378,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":[],"content":"· rintro ⟨p, h⟩\n    refine ⟨p.transfer _ fun e ep => ?_⟩\n    simp only [edgeSet_sdiff, edgeSet_fromEdgeSet, edgeSet_sdiff_sdiff_isDiag, Set.mem_diff,\n      Set.mem_singleton_iff]\n    exact ⟨p.edges_subset_edgeSet ep, fun h' => h (h' ▸ ep)⟩"},{"tailPos":102632,"headPos":102128,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"constructor\n  · rintro ⟨p⟩\n    use p.map (Hom.mapSpanningSubgraphs (by simp))\n    simp_rw [Walk.edges_map, List.mem_map, Hom.mapSpanningSubgraphs_apply, Sym2.map_id', id.def]\n    rintro ⟨e, h, rfl⟩\n    simpa using p.edges_subset_edgeSet h\n  · rintro ⟨p, h⟩\n    refine ⟨p.transfer _ fun e ep => ?_⟩\n    simp only [edgeSet_sdiff, edgeSet_fromEdgeSet, edgeSet_sdiff_sdiff_isDiag, Set.mem_diff,\n      Set.mem_singleton_iff]\n    exact ⟨p.edges_subset_edgeSet ep, fun h' => h (h' ▸ ep)⟩"},{"tailPos":102125,"headPos":102123,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by"},{"tailPos":102632,"headPos":102123,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by\n  constructor\n  · rintro ⟨p⟩\n    use p.map (Hom.mapSpanningSubgraphs (by simp))\n    simp_rw [Walk.edges_map, List.mem_map, Hom.mapSpanningSubgraphs_apply, Sym2.map_id', id.def]\n    rintro ⟨e, h, rfl⟩\n    simpa using p.edges_subset_edgeSet h\n  · rintro ⟨p, h⟩\n    refine ⟨p.transfer _ fun e ep => ?_⟩\n    simp only [edgeSet_sdiff, edgeSet_fromEdgeSet, edgeSet_sdiff_sdiff_isDiag, Set.mem_diff,\n      Set.mem_singleton_iff]\n    exact ⟨p.edges_subset_edgeSet ep, fun h' => h (h' ▸ ep)⟩"},{"tailPos":102923,"headPos":102910,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"isBridge_iff,"},{"tailPos":102940,"headPos":102924,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ ?m.615030 ↔ Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔ ?m.615030","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Prop"],"content":"and_congr_right'"},{"tailPos":102941,"headPos":102940,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ ?m.615030 ↔ Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔ ?m.615030","V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Prop"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"]"},{"tailPos":102941,"headPos":102906,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"rw [isBridge_iff, and_congr_right']"},{"tailPos":102987,"headPos":102948,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (¬∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"reachable_delete_edges_iff_exists_walk,"},{"tailPos":103002,"headPos":102988,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (¬∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∀ (x : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges x) ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"not_exists_not"},{"tailPos":103003,"headPos":103002,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∀ (x : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges x) ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"]"},{"tailPos":103003,"headPos":102944,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rw [reachable_delete_edges_iff_exists_walk, not_exists_not]"},{"tailPos":103003,"headPos":102906,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rw [isBridge_iff, and_congr_right']\n  rw [reachable_delete_edges_iff_exists_walk, not_exists_not]"},{"tailPos":102903,"headPos":102901,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by"},{"tailPos":103003,"headPos":102901,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by\n  rw [isBridge_iff, and_congr_right']\n  rw [reachable_delete_edges_iff_exists_walk, not_exists_not]"},{"tailPos":103466,"headPos":103422,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\n⊢ False"],"content":"have hv := c.fst_mem_support_of_mem_edges he"},{"tailPos":103598,"headPos":103554,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\n⊢ False"],"content":"let puw := (c.takeUntil v hv).takeUntil w hw"},{"tailPos":103645,"headPos":103601,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\n⊢ False"],"content":"let pwv := (c.takeUntil v hv).dropUntil w hw"},{"tailPos":103675,"headPos":103648,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\n⊢ False"],"content":"let pvu := c.dropUntil v hv"},{"tailPos":103727,"headPos":103723,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\n⊢ c = Walk.append (Walk.append puw pwv) pvu"],"goalsAfter":[],"content":"simp only [Walk.take_spec]"},{"tailPos":103722,"headPos":103720,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\n⊢ c = Walk.append (Walk.append puw pwv) pvu"],"goalsAfter":[],"content":"by"},{"tailPos":103727,"headPos":103720,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\n⊢ c = Walk.append (Walk.append puw pwv) pvu"],"goalsAfter":[],"content":"by simp"},{"tailPos":103727,"headPos":103678,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\n⊢ False"],"content":"have : c = (puw.append pwv).append pvu := by simp"},{"tailPos":104010,"headPos":103979,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\n⊢ False"],"content":"have hbq := hb (pvu.append puw)"},{"tailPos":104040,"headPos":104013,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.reverse pwv)\n⊢ False"],"content":"have hpq' := hb pwv.reverse"},{"tailPos":104066,"headPos":104047,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.reverse pwv)\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ List.reverse (Walk.edges pwv)\n⊢ False"],"content":"Walk.edges_reverse,"},{"tailPos":104084,"headPos":104067,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ List.reverse (Walk.edges pwv)\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"List.mem_reverse'"},{"tailPos":104085,"headPos":104084,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"]"},{"tailPos":104093,"headPos":104043,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.reverse pwv)\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"rw [Walk.edges_reverse, List.mem_reverse'] at hpq'"},{"tailPos":104117,"headPos":104100,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : List.Nodup (Walk.edges c)\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"Walk.isTrail_def,"},{"tailPos":104123,"headPos":104118,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : List.Nodup (Walk.edges c)\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append (Walk.append puw pwv) pvu))\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"this,"},{"tailPos":104142,"headPos":104124,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append (Walk.append puw pwv) pvu))\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append puw pwv) ++ Walk.edges pvu)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"Walk.edges_append,"},{"tailPos":104161,"headPos":104143,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append puw pwv) ++ Walk.edges pvu)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges puw ++ Walk.edges pwv ++ Walk.edges pvu)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"Walk.edges_append,"},{"tailPos":104185,"headPos":104162,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges puw ++ Walk.edges pwv ++ Walk.edges pvu)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges pvu ++ (Walk.edges puw ++ Walk.edges pwv))\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"List.nodup_append_comm,"},{"tailPos":104212,"headPos":104190,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges pvu ++ (Walk.edges puw ++ Walk.edges pwv))\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges pvu ++ Walk.edges puw ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"← List.append_assoc,"},{"tailPos":104234,"headPos":104213,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges pvu ++ Walk.edges puw ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append pvu puw) ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"← Walk.edges_append"},{"tailPos":104235,"headPos":104234,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append pvu puw) ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append pvu puw) ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"]"},{"tailPos":104241,"headPos":104096,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append pvu puw) ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"content":"rw [Walk.isTrail_def, this, Walk.edges_append, Walk.edges_append, List.nodup_append_comm,\n    ← List.append_assoc, ← Walk.edges_append] at hc"},{"tailPos":104291,"headPos":104244,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\nhv : v ∈ Walk.support c\npuw : Walk G u w := Walk.takeUntil (Walk.takeUntil c v hv) w hw\npwv : Walk G w v := Walk.dropUntil (Walk.takeUntil c v hv) w hw\npvu : Walk G v u := Walk.dropUntil c v hv\nhc : List.Nodup (Walk.edges (Walk.append pvu puw) ++ Walk.edges pwv)\nthis : c = Walk.append (Walk.append puw pwv) pvu\nhbq : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.append pvu puw)\nhpq' : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges pwv\n⊢ False"],"goalsAfter":[],"content":"exact List.disjoint_of_nodup_append hc hbq hpq'"},{"tailPos":104291,"headPos":103422,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\n⊢ False"],"goalsAfter":[],"content":"have hv := c.fst_mem_support_of_mem_edges he\n  -- decompose c into\n  --      puw     pwv     pvu\n  --   u ----> w ----> v ----> u\n  let puw := (c.takeUntil v hv).takeUntil w hw\n  let pwv := (c.takeUntil v hv).dropUntil w hw\n  let pvu := c.dropUntil v hv\n  have : c = (puw.append pwv).append pvu := by simp\n  -- We have two walks from v to w\n  --      pvu     puw\n  --   v ----> u ----> w\n  --   |               ^\n  --    `-------------'\n  --      pwv.reverse\n  -- so they both contain the edge ⟦(v, w)⟧, but that's a contradiction since c is a trail.\n  have hbq := hb (pvu.append puw)\n  have hpq' := hb pwv.reverse\n  rw [Walk.edges_reverse, List.mem_reverse'] at hpq'\n  rw [Walk.isTrail_def, this, Walk.edges_append, Walk.edges_append, List.nodup_append_comm,\n    ← List.append_assoc, ← Walk.edges_append] at hc\n  exact List.disjoint_of_nodup_append hc hbq hpq'"},{"tailPos":103419,"headPos":103417,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\n⊢ False"],"goalsAfter":[],"content":"by"},{"tailPos":104291,"headPos":103417,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\ninst✝ : DecidableEq V\nu v w : V\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nc : Walk G u u\nhc : Walk.IsTrail c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhw : w ∈ Walk.support (Walk.takeUntil c v (_ : v ∈ Walk.support c))\n⊢ False"],"goalsAfter":[],"content":"by\n  have hv := c.fst_mem_support_of_mem_edges he\n  -- decompose c into\n  --      puw     pwv     pvu\n  --   u ----> w ----> v ----> u\n  let puw := (c.takeUntil v hv).takeUntil w hw\n  let pwv := (c.takeUntil v hv).dropUntil w hw\n  let pvu := c.dropUntil v hv\n  have : c = (puw.append pwv).append pvu := by simp\n  -- We have two walks from v to w\n  --      pvu     puw\n  --   v ----> u ----> w\n  --   |               ^\n  --    `-------------'\n  --      pwv.reverse\n  -- so they both contain the edge ⟦(v, w)⟧, but that's a contradiction since c is a trail.\n  have hbq := hb (pvu.append puw)\n  have hpq' := hb pwv.reverse\n  rw [Walk.edges_reverse, List.mem_reverse'] at hpq'\n  rw [Walk.isTrail_def, this, Walk.edges_append, Walk.edges_append, List.nodup_append_comm,\n    ← List.append_assoc, ← Walk.edges_append] at hc\n  exact List.disjoint_of_nodup_append hc hbq hpq'"},{"tailPos":104779,"headPos":104741,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"reachable_delete_edges_iff_exists_walk"},{"tailPos":104780,"headPos":104779,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"]"},{"tailPos":104780,"headPos":104737,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"rw [reachable_delete_edges_iff_exists_walk]"},{"tailPos":104794,"headPos":104783,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"constructor"},{"tailPos":104799,"headPos":104797,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"·"},{"tailPos":104821,"headPos":104800,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"rintro ⟨h, p, hp⟩"},{"tailPos":104875,"headPos":104826,"goalsBefore":["case mp.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mp.intro.intro.refine_1\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Walk.IsCycle (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))","case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"content":"refine ⟨w, Walk.cons h.symm p.toPath, ?_, ?_⟩"},{"tailPos":104882,"headPos":104880,"goalsBefore":["case mp.intro.intro.refine_1\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Walk.IsCycle (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))","case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":["case mp.intro.intro.refine_1\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Walk.IsCycle (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"content":"·"},{"tailPos":104906,"headPos":104883,"goalsBefore":["case mp.intro.intro.refine_1\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Walk.IsCycle (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges ↑(Walk.toPath p)"],"content":"apply Path.cons_isCycle"},{"tailPos":104929,"headPos":104917,"goalsBefore":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges ↑(Walk.toPath p)"],"goalsAfter":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)"],"content":"Sym2.eq_swap"},{"tailPos":104930,"headPos":104929,"goalsBefore":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)"],"goalsAfter":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)"],"content":"]"},{"tailPos":104930,"headPos":104913,"goalsBefore":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges ↑(Walk.toPath p)"],"goalsAfter":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)"],"content":"rw [Sym2.eq_swap]"},{"tailPos":104944,"headPos":104937,"goalsBefore":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)"],"goalsAfter":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh✝ : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)\n⊢ False"],"content":"intro h"},{"tailPos":104990,"headPos":104951,"goalsBefore":["case mp.intro.intro.refine_1.he\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh✝ : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nh : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges ↑(Walk.toPath p)\n⊢ False"],"goalsAfter":[],"content":"cases hp (Walk.edges_toPath_subset p h)"},{"tailPos":104990,"headPos":104883,"goalsBefore":["case mp.intro.intro.refine_1\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Walk.IsCycle (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":[],"content":"apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)"},{"tailPos":104990,"headPos":104880,"goalsBefore":["case mp.intro.intro.refine_1\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Walk.IsCycle (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))","case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":["case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"content":"· apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)"},{"tailPos":104997,"headPos":104995,"goalsBefore":["case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":["case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"content":"·"},{"tailPos":105085,"headPos":104998,"goalsBefore":["case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":[],"content":"simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]"},{"tailPos":105085,"headPos":104995,"goalsBefore":["case mp.intro.intro.refine_2\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\np : Walk G v w\nhp : ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges (Walk.cons (_ : Adj G w v) ↑(Walk.toPath p))"],"goalsAfter":[],"content":"· simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]"},{"tailPos":105085,"headPos":104800,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rintro ⟨h, p, hp⟩\n    refine ⟨w, Walk.cons h.symm p.toPath, ?_, ?_⟩\n    · apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)\n    · simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]"},{"tailPos":105085,"headPos":104797,"goalsBefore":["case mp\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p","case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"· rintro ⟨h, p, hp⟩\n    refine ⟨w, Walk.cons h.symm p.toPath, ?_, ?_⟩\n    · apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)\n    · simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]"},{"tailPos":105090,"headPos":105088,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"·"},{"tailPos":105116,"headPos":105091,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\n⊢ Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"rintro ⟨u, c, hc, he⟩"},{"tailPos":105159,"headPos":105121,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\n⊢ Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\n⊢ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"refine ⟨c.adj_of_mem_edges he, ?_⟩"},{"tailPos":105177,"headPos":105164,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\n⊢ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ False"],"content":"by_contra' hb"},{"tailPos":105257,"headPos":105250,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\np : Walk G w v\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p"],"content":"intro p"},{"tailPos":105303,"headPos":105264,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\np : Walk G w v\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p"],"goalsAfter":[],"content":"simpa only [Sym2.eq_swap, Walk.edges_reverse, List.mem_reverse] using hb p.reverse"},{"tailPos":105303,"headPos":105250,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p"],"goalsAfter":[],"content":"intro p\n      simpa [Sym2.eq_swap] using hb p.reverse"},{"tailPos":105243,"headPos":105241,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p"],"goalsAfter":[],"content":"by"},{"tailPos":105303,"headPos":105241,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p"],"goalsAfter":[],"content":"by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse"},{"tailPos":105303,"headPos":105182,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\n⊢ False"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\n⊢ False"],"content":"have hb' : ∀ p : G.Walk w v, ⟦(w, v)⟧ ∈ p.edges := by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse"},{"tailPos":105376,"headPos":105308,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\n⊢ False"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ False"],"content":"have hvc : v ∈ c.support := Walk.fst_mem_support_of_mem_edges c he"},{"tailPos":105509,"headPos":105381,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ False"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges (Walk.rotate c hvc)"],"content":"refine reachable_deleteEdges_iff_exists_cycle.aux hb' (c.rotate hvc) (hc.isTrail.rotate hvc)\n      ?_ (Walk.start_mem_support _)"},{"tailPos":105553,"headPos":105519,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges (Walk.rotate c hvc)"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges c"],"content":"(Walk.rotate_edges c hvc).mem_iff,"},{"tailPos":105566,"headPos":105554,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges c"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c"],"content":"Sym2.eq_swap"},{"tailPos":105567,"headPos":105566,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c"],"goalsAfter":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c"],"content":"]"},{"tailPos":105567,"headPos":105514,"goalsBefore":["case mpr.intro.intro.intro\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w u : V\nc : Walk G u u\nhc : Walk.IsCycle c\nhe : Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges c\nhb : ∀ (p : Walk G v w), Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p\nhb' : ∀ (p : Walk G w v), Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges p\nhvc : v ∈ Walk.support c\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) ∈ Walk.edges (Walk.rotate c hvc)"],"goalsAfter":[],"content":"rwa [(Walk.rotate_edges c hvc).mem_iff, Sym2.eq_swap]"},{"tailPos":105567,"headPos":105091,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rintro ⟨u, c, hc, he⟩\n    refine ⟨c.adj_of_mem_edges he, ?_⟩\n    by_contra' hb\n    have hb' : ∀ p : G.Walk w v, ⟦(w, v)⟧ ∈ p.edges := by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse\n    have hvc : v ∈ c.support := Walk.fst_mem_support_of_mem_edges c he\n    refine reachable_deleteEdges_iff_exists_cycle.aux hb' (c.rotate hvc) (hc.isTrail.rotate hvc)\n      ?_ (Walk.start_mem_support _)\n    rwa [(Walk.rotate_edges c hvc).mem_iff, Sym2.eq_swap]"},{"tailPos":105567,"headPos":105088,"goalsBefore":["case mpr\nV : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ (∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p) →\n    Adj G v w ∧ ∃ p, ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"· rintro ⟨u, c, hc, he⟩\n    refine ⟨c.adj_of_mem_edges he, ?_⟩\n    by_contra' hb\n    have hb' : ∀ p : G.Walk w v, ⟦(w, v)⟧ ∈ p.edges := by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse\n    have hvc : v ∈ c.support := Walk.fst_mem_support_of_mem_edges c he\n    refine reachable_deleteEdges_iff_exists_cycle.aux hb' (c.rotate hvc) (hc.isTrail.rotate hvc)\n      ?_ (Walk.start_mem_support _)\n    rwa [(Walk.rotate_edges c hvc).mem_iff, Sym2.eq_swap]"},{"tailPos":105567,"headPos":104737,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rw [reachable_delete_edges_iff_exists_walk]\n  constructor\n  · rintro ⟨h, p, hp⟩\n    refine ⟨w, Walk.cons h.symm p.toPath, ?_, ?_⟩\n    · apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)\n    · simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]\n  · rintro ⟨u, c, hc, he⟩\n    refine ⟨c.adj_of_mem_edges he, ?_⟩\n    by_contra' hb\n    have hb' : ∀ p : G.Walk w v, ⟦(w, v)⟧ ∈ p.edges := by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse\n    have hvc : v ∈ c.support := Walk.fst_mem_support_of_mem_edges c he\n    refine reachable_deleteEdges_iff_exists_cycle.aux hb' (c.rotate hvc) (hc.isTrail.rotate hvc)\n      ?_ (Walk.start_mem_support _)\n    rwa [(Walk.rotate_edges c hvc).mem_iff, Sym2.eq_swap]"},{"tailPos":105567,"headPos":104725,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"classical\n  rw [reachable_delete_edges_iff_exists_walk]\n  constructor\n  · rintro ⟨h, p, hp⟩\n    refine ⟨w, Walk.cons h.symm p.toPath, ?_, ?_⟩\n    · apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)\n    · simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]\n  · rintro ⟨u, c, hc, he⟩\n    refine ⟨c.adj_of_mem_edges he, ?_⟩\n    by_contra' hb\n    have hb' : ∀ p : G.Walk w v, ⟦(w, v)⟧ ∈ p.edges := by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse\n    have hvc : v ∈ c.support := Walk.fst_mem_support_of_mem_edges c he\n    refine reachable_deleteEdges_iff_exists_cycle.aux hb' (c.rotate hvc) (hc.isTrail.rotate hvc)\n      ?_ (Walk.start_mem_support _)\n    rwa [(Walk.rotate_edges c hvc).mem_iff, Sym2.eq_swap]"},{"tailPos":104722,"headPos":104720,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by"},{"tailPos":105567,"headPos":104720,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∃ u p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by\n  classical\n  rw [reachable_delete_edges_iff_exists_walk]\n  constructor\n  · rintro ⟨h, p, hp⟩\n    refine ⟨w, Walk.cons h.symm p.toPath, ?_, ?_⟩\n    · apply Path.cons_isCycle\n      rw [Sym2.eq_swap]\n      intro h\n      cases hp (Walk.edges_toPath_subset p h)\n    · simp only [Sym2.eq_swap, Walk.edges_cons, List.mem_cons, eq_self_iff_true, true_or_iff]\n  · rintro ⟨u, c, hc, he⟩\n    refine ⟨c.adj_of_mem_edges he, ?_⟩\n    by_contra' hb\n    have hb' : ∀ p : G.Walk w v, ⟦(w, v)⟧ ∈ p.edges := by\n      intro p\n      simpa [Sym2.eq_swap] using hb p.reverse\n    have hvc : v ∈ c.support := Walk.fst_mem_support_of_mem_edges c he\n    refine reachable_deleteEdges_iff_exists_cycle.aux hb' (c.rotate hvc) (hc.isTrail.rotate hvc)\n      ?_ (Walk.start_mem_support _)\n    rwa [(Walk.rotate_edges c hvc).mem_iff, Sym2.eq_swap]"},{"tailPos":105903,"headPos":105890,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"isBridge_iff,"},{"tailPos":105923,"headPos":105904,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w ∧ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w →\n    (¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n      ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p)"],"content":"and_congr_right_iff"},{"tailPos":105924,"headPos":105923,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w →\n    (¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n      ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w →\n    (¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n      ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p)"],"content":"]"},{"tailPos":105924,"headPos":105886,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w →\n    (¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n      ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p)"],"content":"rw [isBridge_iff, and_congr_right_iff]"},{"tailPos":105934,"headPos":105927,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ Adj G v w →\n    (¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n      ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p)"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"intro h"},{"tailPos":105956,"headPos":105941,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ¬∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"← not_iff_not"},{"tailPos":105957,"headPos":105956,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ¬∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ¬∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"]"},{"tailPos":105957,"headPos":105937,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ¬∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"rw [← not_iff_not]"},{"tailPos":105968,"headPos":105960,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ ¬¬Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    ¬∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Exists fun ⦃u⦄ => ∃ p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"content":"push_neg"},{"tailPos":106026,"headPos":105975,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Exists fun ⦃u⦄ => ∃ p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"← adj_and_reachable_delete_edges_iff_exists_cycle"},{"tailPos":106027,"headPos":106026,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"]"},{"tailPos":106027,"headPos":105971,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Exists fun ⦃u⦄ => ∃ p, Walk.IsCycle p ∧ Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"content":"rw [← adj_and_reachable_delete_edges_iff_exists_cycle]"},{"tailPos":106057,"headPos":106030,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\nh : Adj G v w\n⊢ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w ↔\n    Adj G v w ∧ Reachable (G \\ fromEdgeSet {Quotient.mk (Sym2.Rel.setoid V) (v, w)}) v w"],"goalsAfter":[],"content":"simp only [h, true_and_iff]"},{"tailPos":106057,"headPos":105886,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"rw [isBridge_iff, and_congr_right_iff]\n  intro h\n  rw [← not_iff_not]\n  push_neg\n  rw [← adj_and_reachable_delete_edges_iff_exists_cycle]\n  simp only [h, true_and_iff]"},{"tailPos":105883,"headPos":105881,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by"},{"tailPos":106057,"headPos":105881,"goalsBefore":["V : Type u\nV' : Type v\nV'' : Type w\nG : SimpleGraph V\nG' : SimpleGraph V'\nG'' : SimpleGraph V''\nv w : V\n⊢ IsBridge G (Quotient.mk (Sym2.Rel.setoid V) (v, w)) ↔\n    Adj G v w ∧ ∀ ⦃u : V⦄ (p : Walk G u u), Walk.IsCycle p → ¬Quotient.mk (Sym2.Rel.setoid V) (v, w) ∈ Walk.edges p"],"goalsAfter":[],"content":"by\n  rw [isBridge_iff, and_congr_right_iff]\n  intro h\n  rw [← not_iff_not]\n  push_neg\n  rw [← adj_and_reachable_delete_edges_iff_exists_cycle]\n  simp only [h, true_and_iff]"}]
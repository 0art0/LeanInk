[{"tailPos":2615,"headPos":2503,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ (funMap f fun i => Quotient.mk s (x i)) = Quotient.mk s (funMap f x)"],"goalsAfter":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.map (funMap f) (_ : ∀ (x y : Fin n → M), x ≈ y → funMap f x ≈ funMap f y)\n      (Quotient.finChoice fun i => Quotient.mk s (x i)) =\n    Quotient.mk s (funMap f x)"],"content":"change\n    Quotient.map (@funMap L M ps.toStructure n f) Prestructure.fun_equiv (Quotient.finChoice _) =\n      _"},{"tailPos":2644,"headPos":2622,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.map (funMap f) (_ : ∀ (x y : Fin n → M), x ≈ y → funMap f x ≈ funMap f y)\n      (Quotient.finChoice fun i => Quotient.mk s (x i)) =\n    Quotient.mk s (funMap f x)"],"goalsAfter":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.map (funMap f) (_ : ∀ (x y : Fin n → M), x ≈ y → funMap f x ≈ funMap f y)\n      (Quotient.mk inferInstance fun i => x i) =\n    Quotient.mk s (funMap f x)"],"content":"Quotient.finChoice_eq,"},{"tailPos":2660,"headPos":2645,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.map (funMap f) (_ : ∀ (x y : Fin n → M), x ≈ y → funMap f x ≈ funMap f y)\n      (Quotient.mk inferInstance fun i => x i) =\n    Quotient.mk s (funMap f x)"],"goalsAfter":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.mk s (funMap f fun i => x i) = Quotient.mk s (funMap f x)"],"content":"Quotient.map_mk"},{"tailPos":2661,"headPos":2660,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.mk s (funMap f fun i => x i) = Quotient.mk s (funMap f x)"],"goalsAfter":[],"content":"]"},{"tailPos":2661,"headPos":2618,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ Quotient.map (funMap f) (_ : ∀ (x y : Fin n → M), x ≈ y → funMap f x ≈ funMap f y)\n      (Quotient.finChoice fun i => Quotient.mk s (x i)) =\n    Quotient.mk s (funMap f x)"],"goalsAfter":[],"content":"rw [Quotient.finChoice_eq, Quotient.map_mk]"},{"tailPos":2661,"headPos":2503,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ (funMap f fun i => Quotient.mk s (x i)) = Quotient.mk s (funMap f x)"],"goalsAfter":[],"content":"change\n    Quotient.map (@funMap L M ps.toStructure n f) Prestructure.fun_equiv (Quotient.finChoice _) =\n      _\n  rw [Quotient.finChoice_eq, Quotient.map_mk]"},{"tailPos":2500,"headPos":2498,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ (funMap f fun i => Quotient.mk s (x i)) = Quotient.mk s (funMap f x)"],"goalsAfter":[],"content":"by"},{"tailPos":2661,"headPos":2498,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nf : Functions L n\nx : Fin n → M\n⊢ (funMap f fun i => Quotient.mk s (x i)) = Quotient.mk s (funMap f x)"],"goalsAfter":[],"content":"by\n  change\n    Quotient.map (@funMap L M ps.toStructure n f) Prestructure.fun_equiv (Quotient.finChoice _) =\n      _\n  rw [Quotient.finChoice_eq, Quotient.map_mk]"},{"tailPos":3038,"headPos":2923,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ (RelMap r fun i => Quotient.mk s (x i)) ↔ RelMap r x"],"goalsAfter":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ Quotient.lift (RelMap r) (_ : ∀ (x y : Fin n → M), x ≈ y → RelMap r x = RelMap r y)\n      (Quotient.finChoice fun i => Quotient.mk s (x i)) ↔\n    RelMap r x"],"content":"change\n    Quotient.lift (@RelMap L M ps.toStructure n r) Prestructure.rel_equiv (Quotient.finChoice _) ↔\n      _"},{"tailPos":3067,"headPos":3045,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ Quotient.lift (RelMap r) (_ : ∀ (x y : Fin n → M), x ≈ y → RelMap r x = RelMap r y)\n      (Quotient.finChoice fun i => Quotient.mk s (x i)) ↔\n    RelMap r x"],"goalsAfter":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ Quotient.lift (RelMap r) (_ : ∀ (x y : Fin n → M), x ≈ y → RelMap r x = RelMap r y)\n      (Quotient.mk inferInstance fun i => x i) ↔\n    RelMap r x"],"content":"Quotient.finChoice_eq,"},{"tailPos":3084,"headPos":3068,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ Quotient.lift (RelMap r) (_ : ∀ (x y : Fin n → M), x ≈ y → RelMap r x = RelMap r y)\n      (Quotient.mk inferInstance fun i => x i) ↔\n    RelMap r x"],"goalsAfter":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ (RelMap r fun i => x i) ↔ RelMap r x"],"content":"Quotient.lift_mk"},{"tailPos":3085,"headPos":3084,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ (RelMap r fun i => x i) ↔ RelMap r x"],"goalsAfter":[],"content":"]"},{"tailPos":3085,"headPos":3041,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ Quotient.lift (RelMap r) (_ : ∀ (x y : Fin n → M), x ≈ y → RelMap r x = RelMap r y)\n      (Quotient.finChoice fun i => Quotient.mk s (x i)) ↔\n    RelMap r x"],"goalsAfter":[],"content":"rw [Quotient.finChoice_eq, Quotient.lift_mk]"},{"tailPos":3085,"headPos":2923,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ (RelMap r fun i => Quotient.mk s (x i)) ↔ RelMap r x"],"goalsAfter":[],"content":"change\n    Quotient.lift (@RelMap L M ps.toStructure n r) Prestructure.rel_equiv (Quotient.finChoice _) ↔\n      _\n  rw [Quotient.finChoice_eq, Quotient.lift_mk]"},{"tailPos":2920,"headPos":2918,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ (RelMap r fun i => Quotient.mk s (x i)) ↔ RelMap r x"],"goalsAfter":[],"content":"by"},{"tailPos":3085,"headPos":2918,"goalsBefore":["L : Language\nM : Type u_3\ns : Setoid M\nps : Prestructure L s\nn : ℕ\nr : Relations L n\nx : Fin n → M\n⊢ (RelMap r fun i => Quotient.mk s (x i)) ↔ RelMap r x"],"goalsAfter":[],"content":"by\n  change\n    Quotient.lift (@RelMap L M ps.toStructure n r) Prestructure.rel_equiv (Quotient.finChoice _) ↔\n      _\n  rw [Quotient.finChoice_eq, Quotient.lift_mk]"},{"tailPos":3389,"headPos":3361,"goalsBefore":["L : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nt : Term L β\nx : β → M\n⊢ realize (fun i => Quotient.mk s (x i)) t = Quotient.mk s (realize x t)"],"goalsAfter":["case var\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\n_a✝ : β\n⊢ realize (fun i => Quotient.mk s (x i)) (var _a✝) = Quotient.mk s (realize x (var _a✝))","case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"content":"induction' t with _ _ _ _ ih"},{"tailPos":3394,"headPos":3392,"goalsBefore":["case var\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\n_a✝ : β\n⊢ realize (fun i => Quotient.mk s (x i)) (var _a✝) = Quotient.mk s (realize x (var _a✝))","case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"goalsAfter":["case var\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\n_a✝ : β\n⊢ realize (fun i => Quotient.mk s (x i)) (var _a✝) = Quotient.mk s (realize x (var _a✝))"],"content":"·"},{"tailPos":3398,"headPos":3395,"goalsBefore":["case var\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\n_a✝ : β\n⊢ realize (fun i => Quotient.mk s (x i)) (var _a✝) = Quotient.mk s (realize x (var _a✝))"],"goalsAfter":[],"content":"rfl"},{"tailPos":3398,"headPos":3392,"goalsBefore":["case var\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\n_a✝ : β\n⊢ realize (fun i => Quotient.mk s (x i)) (var _a✝) = Quotient.mk s (realize x (var _a✝))","case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"content":"· rfl"},{"tailPos":3403,"headPos":3401,"goalsBefore":["case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"content":"·"},{"tailPos":3453,"headPos":3404,"goalsBefore":["case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"goalsAfter":[],"content":"simp only [ih, funMap_quotient_mk', Term.realize]"},{"tailPos":3453,"headPos":3401,"goalsBefore":["case func\nL : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nx : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L β\nih : ∀ (a : Fin l✝), realize (fun i => Quotient.mk s (x i)) (_ts✝ a) = Quotient.mk s (realize x (_ts✝ a))\n⊢ realize (fun i => Quotient.mk s (x i)) (func _f✝ _ts✝) = Quotient.mk s (realize x (func _f✝ _ts✝))"],"goalsAfter":[],"content":"· simp only [ih, funMap_quotient_mk', Term.realize]"},{"tailPos":3453,"headPos":3361,"goalsBefore":["L : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nt : Term L β\nx : β → M\n⊢ realize (fun i => Quotient.mk s (x i)) t = Quotient.mk s (realize x t)"],"goalsAfter":[],"content":"induction' t with _ _ _ _ ih\n  · rfl\n  · simp only [ih, funMap_quotient_mk', Term.realize]"},{"tailPos":3358,"headPos":3356,"goalsBefore":["L : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nt : Term L β\nx : β → M\n⊢ realize (fun i => Quotient.mk s (x i)) t = Quotient.mk s (realize x t)"],"goalsAfter":[],"content":"by"},{"tailPos":3453,"headPos":3356,"goalsBefore":["L : Language\nM : Type u_4\ns : Setoid M\nps : Prestructure L s\nβ : Type u_1\nt : Term L β\nx : β → M\n⊢ realize (fun i => Quotient.mk s (x i)) t = Quotient.mk s (realize x t)"],"goalsAfter":[],"content":"by\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp only [ih, funMap_quotient_mk', Term.realize]"}]
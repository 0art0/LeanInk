[{"tailPos":3921,"headPos":3892,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ng : α → β\nv : β → M\n⊢ realize v (relabel g t) = realize (v ∘ g) t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\n_a✝ : α\n⊢ realize v (relabel g (var _a✝)) = realize (v ∘ g) (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"content":"induction' t with _ n f ts ih"},{"tailPos":3926,"headPos":3924,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\n_a✝ : α\n⊢ realize v (relabel g (var _a✝)) = realize (v ∘ g) (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\n_a✝ : α\n⊢ realize v (relabel g (var _a✝)) = realize (v ∘ g) (var _a✝)"],"content":"·"},{"tailPos":3930,"headPos":3927,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\n_a✝ : α\n⊢ realize v (relabel g (var _a✝)) = realize (v ∘ g) (var _a✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":3930,"headPos":3924,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\n_a✝ : α\n⊢ realize v (relabel g (var _a✝)) = realize (v ∘ g) (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"content":"· rfl"},{"tailPos":3935,"headPos":3933,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"content":"·"},{"tailPos":3945,"headPos":3936,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"goalsAfter":[],"content":"simp [ih]"},{"tailPos":3945,"headPos":3933,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : α → β\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), realize v (relabel g (ts a)) = realize (v ∘ g) (ts a)\n⊢ realize v (relabel g (func f ts)) = realize (v ∘ g) (func f ts)"],"goalsAfter":[],"content":"· simp [ih]"},{"tailPos":3945,"headPos":3892,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ng : α → β\nv : β → M\n⊢ realize v (relabel g t) = realize (v ∘ g) t"],"goalsAfter":[],"content":"induction' t with _ n f ts ih\n  · rfl\n  · simp [ih]"},{"tailPos":3889,"headPos":3887,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ng : α → β\nv : β → M\n⊢ realize v (relabel g t) = realize (v ∘ g) t"],"goalsAfter":[],"content":"by"},{"tailPos":3945,"headPos":3887,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.1019\nP : Type ?u.1022\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ng : α → β\nv : β → M\n⊢ realize v (relabel g t) = realize (v ∘ g) t"],"goalsAfter":[],"content":"by\n  induction' t with _ n f ts ih\n  · rfl\n  · simp [ih]"},{"tailPos":4803,"headPos":4784,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (Functions.apply₁ f t) = funMap f ![realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (func f ![t]) = funMap f ![realize v t]"],"content":"Functions.apply₁,"},{"tailPos":4816,"headPos":4804,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (func f ![t]) = funMap f ![realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t ![] i)) = funMap f ![realize v t]"],"content":"Term.realize"},{"tailPos":4817,"headPos":4816,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t ![] i)) = funMap f ![realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t ![] i)) = funMap f ![realize v t]"],"content":"]"},{"tailPos":4817,"headPos":4780,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (Functions.apply₁ f t) = funMap f ![realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t ![] i)) = funMap f ![realize v t]"],"content":"rw [Functions.apply₁, Term.realize]"},{"tailPos":4857,"headPos":4820,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t ![] i)) = funMap f ![realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\ni : Fin 1\n⊢ realize v (Matrix.vecCons t ![] i) = Matrix.vecCons (realize v t) ![] i"],"content":"refine' congr rfl (funext fun i => _)"},{"tailPos":4895,"headPos":4860,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\ni : Fin 1\n⊢ realize v (Matrix.vecCons t ![] i) = Matrix.vecCons (realize v t) ![] i"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_fin_one]"},{"tailPos":4895,"headPos":4780,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (Functions.apply₁ f t) = funMap f ![realize v t]"],"goalsAfter":[],"content":"rw [Functions.apply₁, Term.realize]\n  refine' congr rfl (funext fun i => _)\n  simp only [Matrix.cons_val_fin_one]"},{"tailPos":4777,"headPos":4775,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (Functions.apply₁ f t) = funMap f ![realize v t]"],"goalsAfter":[],"content":"by"},{"tailPos":4895,"headPos":4775,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.5630\nP : Type ?u.5633\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 1\nt : Term L α\nv : α → M\n⊢ realize v (Functions.apply₁ f t) = funMap f ![realize v t]"],"goalsAfter":[],"content":"by\n  rw [Functions.apply₁, Term.realize]\n  refine' congr rfl (funext fun i => _)\n  simp only [Matrix.cons_val_fin_one]"},{"tailPos":5226,"headPos":5207,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Functions.apply₂ f t₁ t₂) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (func f ![t₁, t₂]) = funMap f ![realize v t₁, realize v t₂]"],"content":"Functions.apply₂,"},{"tailPos":5239,"headPos":5227,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (func f ![t₁, t₂]) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t₁ ![t₂] i)) = funMap f ![realize v t₁, realize v t₂]"],"content":"Term.realize"},{"tailPos":5240,"headPos":5239,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t₁ ![t₂] i)) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t₁ ![t₂] i)) = funMap f ![realize v t₁, realize v t₂]"],"content":"]"},{"tailPos":5240,"headPos":5203,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Functions.apply₂ f t₁ t₂) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t₁ ![t₂] i)) = funMap f ![realize v t₁, realize v t₂]"],"content":"rw [Functions.apply₂, Term.realize]"},{"tailPos":5285,"headPos":5243,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ (funMap f fun i => realize v (Matrix.vecCons t₁ ![t₂] i)) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (realize v t₁) ![realize v t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"content":"refine' congr rfl (funext (Fin.cases _ _))"},{"tailPos":5290,"headPos":5288,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (realize v t₁) ![realize v t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (realize v t₁) ![realize v t₂] 0"],"content":"·"},{"tailPos":5323,"headPos":5291,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (realize v t₁) ![realize v t₂] 0"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_zero]"},{"tailPos":5323,"headPos":5288,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (realize v t₁) ![realize v t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"content":"· simp only [Matrix.cons_val_zero]"},{"tailPos":5328,"headPos":5326,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"content":"·"},{"tailPos":5400,"headPos":5329,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":5400,"headPos":5326,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ ∀ (i : Fin 1), realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (realize v t₁) ![realize v t₂] (succ i)"],"goalsAfter":[],"content":"· simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":5400,"headPos":5203,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Functions.apply₂ f t₁ t₂) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":[],"content":"rw [Functions.apply₂, Term.realize]\n  refine' congr rfl (funext (Fin.cases _ _))\n  · simp only [Matrix.cons_val_zero]\n  · simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":5200,"headPos":5198,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Functions.apply₂ f t₁ t₂) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":[],"content":"by"},{"tailPos":5400,"headPos":5198,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.6618\nP : Type ?u.6621\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nf : Functions L 2\nt₁ t₂ : Term L α\nv : α → M\n⊢ realize v (Functions.apply₂ f t₁ t₂) = funMap f ![realize v t₁, realize v t₂]"],"goalsAfter":[],"content":"by\n  rw [Functions.apply₂, Term.realize]\n  refine' congr rfl (funext (Fin.cases _ _))\n  · simp only [Matrix.cons_val_zero]\n  · simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":5880,"headPos":5852,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ntf : α → Term L β\nv : β → M\n⊢ realize v (subst t tf) = realize (fun a => realize v (tf a)) t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\n_a✝ : α\n⊢ realize v (subst (var _a✝) tf) = realize (fun a => realize v (tf a)) (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"content":"induction' t with _ _ _ _ ih"},{"tailPos":5885,"headPos":5883,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\n_a✝ : α\n⊢ realize v (subst (var _a✝) tf) = realize (fun a => realize v (tf a)) (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\n_a✝ : α\n⊢ realize v (subst (var _a✝) tf) = realize (fun a => realize v (tf a)) (var _a✝)"],"content":"·"},{"tailPos":5889,"headPos":5886,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\n_a✝ : α\n⊢ realize v (subst (var _a✝) tf) = realize (fun a => realize v (tf a)) (var _a✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":5889,"headPos":5883,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\n_a✝ : α\n⊢ realize v (subst (var _a✝) tf) = realize (fun a => realize v (tf a)) (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"content":"· rfl"},{"tailPos":5894,"headPos":5892,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"content":"·"},{"tailPos":5904,"headPos":5895,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"goalsAfter":[],"content":"simp [ih]"},{"tailPos":5904,"headPos":5892,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ntf : α → Term L β\nv : β → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih : ∀ (a : Fin l✝), realize v (subst (_ts✝ a) tf) = realize (fun a => realize v (tf a)) (_ts✝ a)\n⊢ realize v (subst (func _f✝ _ts✝) tf) = realize (fun a => realize v (tf a)) (func _f✝ _ts✝)"],"goalsAfter":[],"content":"· simp [ih]"},{"tailPos":5904,"headPos":5852,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ntf : α → Term L β\nv : β → M\n⊢ realize v (subst t tf) = realize (fun a => realize v (tf a)) t"],"goalsAfter":[],"content":"induction' t with _ _ _ _ ih\n  · rfl\n  · simp [ih]"},{"tailPos":5849,"headPos":5847,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ntf : α → Term L β\nv : β → M\n⊢ realize v (subst t tf) = realize (fun a => realize v (tf a)) t"],"goalsAfter":[],"content":"by"},{"tailPos":5904,"headPos":5847,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.7876\nP : Type ?u.7879\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nt : Term L α\ntf : α → Term L β\nv : β → M\n⊢ realize v (subst t tf) = realize (fun a => realize v (tf a)) t"],"goalsAfter":[],"content":"by\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp [ih]"},{"tailPos":6228,"headPos":6200,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh : ↑(varFinset t) ⊆ s\nv : α → M\n⊢ realize (v ∘ Subtype.val) (restrictVar t (Set.inclusion h)) = realize v t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\n_a✝ : α\nh : ↑(varFinset (var _a✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (var _a✝) (Set.inclusion h)) = realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"content":"induction' t with _ _ _ _ ih"},{"tailPos":6233,"headPos":6231,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\n_a✝ : α\nh : ↑(varFinset (var _a✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (var _a✝) (Set.inclusion h)) = realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\n_a✝ : α\nh : ↑(varFinset (var _a✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (var _a✝) (Set.inclusion h)) = realize v (var _a✝)"],"content":"·"},{"tailPos":6237,"headPos":6234,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\n_a✝ : α\nh : ↑(varFinset (var _a✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (var _a✝) (Set.inclusion h)) = realize v (var _a✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":6237,"headPos":6231,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\n_a✝ : α\nh : ↑(varFinset (var _a✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (var _a✝) (Set.inclusion h)) = realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"content":"· rfl"},{"tailPos":6242,"headPos":6240,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"content":"·"},{"tailPos":6252,"headPos":6243,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"content":"simp_rw ["},{"tailPos":6262,"headPos":6252,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"content":"varFinset,"},{"tailPos":6282,"headPos":6263,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝¹ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\nh : (⋃ (x : Fin l✝) (_ : x ∈ ↑Finset.univ), ↑(varFinset (_ts✝ x))) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h✝)) = realize v (func _f✝ _ts✝)"],"content":"Finset.coe_biUnion,"},{"tailPos":6304,"headPos":6283,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝¹ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\nh : (⋃ (x : Fin l✝) (_ : x ∈ ↑Finset.univ), ↑(varFinset (_ts✝ x))) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h✝)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝¹ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\nh : ∀ (i : Fin l✝), i ∈ ↑Finset.univ → ↑(varFinset (_ts✝ i)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h✝)) = realize v (func _f✝ _ts✝)"],"content":"simp only [Set.iUnion_subset_iff] at h "},{"tailPos":6310,"headPos":6243,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝¹ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\nh : ∀ (i : Fin l✝), i ∈ ↑Finset.univ → ↑(varFinset (_ts✝ i)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h✝)) = realize v (func _f✝ _ts✝)"],"content":"simp_rw [varFinset, Finset.coe_biUnion, Set.iUnion_subset_iff] at h"},{"tailPos":6379,"headPos":6315,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝¹ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinset (_ts✝ i)) ⊆ s\nh : ∀ (i : Fin l✝), i ∈ ↑Finset.univ → ↑(varFinset (_ts✝ i)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h✝)) = realize v (func _f✝ _ts✝)"],"goalsAfter":[],"content":"exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6379,"headPos":6243,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":[],"content":"simp_rw [varFinset, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6379,"headPos":6240,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh✝ : ↑(varFinset t) ⊆ s\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinset (_ts✝ a)) ⊆ s),\n    realize (v ∘ Subtype.val) (restrictVar (_ts✝ a) (Set.inclusion h)) = realize v (_ts✝ a)\nh : ↑(varFinset (func _f✝ _ts✝)) ⊆ s\n⊢ realize (v ∘ Subtype.val) (restrictVar (func _f✝ _ts✝) (Set.inclusion h)) = realize v (func _f✝ _ts✝)"],"goalsAfter":[],"content":"· simp_rw [varFinset, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6379,"headPos":6200,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh : ↑(varFinset t) ⊆ s\nv : α → M\n⊢ realize (v ∘ Subtype.val) (restrictVar t (Set.inclusion h)) = realize v t"],"goalsAfter":[],"content":"induction' t with _ _ _ _ ih\n  · rfl\n  · simp_rw [varFinset, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6197,"headPos":6195,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh : ↑(varFinset t) ⊆ s\nv : α → M\n⊢ realize (v ∘ Subtype.val) (restrictVar t (Set.inclusion h)) = realize v t"],"goalsAfter":[],"content":"by"},{"tailPos":6379,"headPos":6195,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.9538\nP : Type ?u.9541\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nt : Term L α\ns : Set α\nh : ↑(varFinset t) ⊆ s\nv : α → M\n⊢ realize (v ∘ Subtype.val) (restrictVar t (Set.inclusion h)) = realize v t"],"goalsAfter":[],"content":"by\n  induction' t with _ _ _ _ ih\n  · rfl\n  · simp_rw [varFinset, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6805,"headPos":6777,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft t (Set.inclusion h)) = realize (Sum.elim v xs) t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\na : α ⊕ γ\nh : ↑(varFinsetLeft (var a)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var a) (Set.inclusion h)) = realize (Sum.elim v xs) (var a)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"induction' t with a _ _ _ ih"},{"tailPos":6810,"headPos":6808,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\na : α ⊕ γ\nh : ↑(varFinsetLeft (var a)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var a) (Set.inclusion h)) = realize (Sum.elim v xs) (var a)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\na : α ⊕ γ\nh : ↑(varFinsetLeft (var a)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var a) (Set.inclusion h)) = realize (Sum.elim v xs) (var a)"],"content":"·"},{"tailPos":6818,"headPos":6811,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\na : α ⊕ γ\nh : ↑(varFinsetLeft (var a)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var a) (Set.inclusion h)) = realize (Sum.elim v xs) (var a)"],"goalsAfter":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : α\nh : ↑(varFinsetLeft (var (Sum.inl val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inl val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inl val✝))","case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : γ\nh : ↑(varFinsetLeft (var (Sum.inr val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inr val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inr val✝))"],"content":"cases a"},{"tailPos":6822,"headPos":6819,"goalsBefore":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : α\nh : ↑(varFinsetLeft (var (Sum.inl val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inl val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inl val✝))","case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : γ\nh : ↑(varFinsetLeft (var (Sum.inr val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inr val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inr val✝))"],"goalsAfter":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : α\nh : ↑(varFinsetLeft (var (Sum.inl val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inl val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inl val✝))","case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : γ\nh : ↑(varFinsetLeft (var (Sum.inr val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inr val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inr val✝))"],"content":"<;>"},{"tailPos":6826,"headPos":6823,"goalsBefore":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : α\nh : ↑(varFinsetLeft (var (Sum.inl val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inl val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inl val✝))"],"goalsAfter":[],"content":"rfl"},{"tailPos":6826,"headPos":6823,"goalsBefore":["case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nval✝ : γ\nh : ↑(varFinsetLeft (var (Sum.inr val✝))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var (Sum.inr val✝)) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (var (Sum.inr val✝))"],"goalsAfter":[],"content":"rfl"},{"tailPos":6826,"headPos":6811,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\na : α ⊕ γ\nh : ↑(varFinsetLeft (var a)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var a) (Set.inclusion h)) = realize (Sum.elim v xs) (var a)"],"goalsAfter":[],"content":"cases a <;> rfl"},{"tailPos":6826,"headPos":6808,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\na : α ⊕ γ\nh : ↑(varFinsetLeft (var a)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (var a) (Set.inclusion h)) = realize (Sum.elim v xs) (var a)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"· cases a <;> rfl"},{"tailPos":6831,"headPos":6829,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"·"},{"tailPos":6841,"headPos":6832,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"simp_rw ["},{"tailPos":6855,"headPos":6841,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"varFinsetLeft,"},{"tailPos":6875,"headPos":6856,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝¹ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\nh : (⋃ (x : Fin l✝) (_ : x ∈ ↑Finset.univ), ↑(varFinsetLeft (_ts✝ x))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h✝)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"Finset.coe_biUnion,"},{"tailPos":6897,"headPos":6876,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝¹ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\nh : (⋃ (x : Fin l✝) (_ : x ∈ ↑Finset.univ), ↑(varFinsetLeft (_ts✝ x))) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h✝)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝¹ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\nh : ∀ (i : Fin l✝), i ∈ ↑Finset.univ → ↑(varFinsetLeft (_ts✝ i)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h✝)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"simp only [Set.iUnion_subset_iff] at h "},{"tailPos":6903,"headPos":6832,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝¹ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\nh : ∀ (i : Fin l✝), i ∈ ↑Finset.univ → ↑(varFinsetLeft (_ts✝ i)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h✝)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"content":"simp_rw [varFinsetLeft, Finset.coe_biUnion, Set.iUnion_subset_iff] at h"},{"tailPos":6972,"headPos":6908,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝¹ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh✝ : ↑(Finset.biUnion Finset.univ fun i => varFinsetLeft (_ts✝ i)) ⊆ s\nh : ∀ (i : Fin l✝), i ∈ ↑Finset.univ → ↑(varFinsetLeft (_ts✝ i)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h✝)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":[],"content":"exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6972,"headPos":6832,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":[],"content":"simp_rw [varFinsetLeft, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6972,"headPos":6829,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh✝ : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L (α ⊕ γ)\nih :\n  ∀ (a : Fin l✝) (h : ↑(varFinsetLeft (_ts✝ a)) ⊆ s),\n    realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (_ts✝ a) (Set.inclusion h)) =\n      realize (Sum.elim v xs) (_ts✝ a)\nh : ↑(varFinsetLeft (func _f✝ _ts✝)) ⊆ s\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft (func _f✝ _ts✝) (Set.inclusion h)) =\n    realize (Sum.elim v xs) (func _f✝ _ts✝)"],"goalsAfter":[],"content":"· simp_rw [varFinsetLeft, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6972,"headPos":6777,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft t (Set.inclusion h)) = realize (Sum.elim v xs) t"],"goalsAfter":[],"content":"induction' t with a _ _ _ ih\n  · cases a <;> rfl\n  · simp_rw [varFinsetLeft, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":6774,"headPos":6772,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft t (Set.inclusion h)) = realize (Sum.elim v xs) t"],"goalsAfter":[],"content":"by"},{"tailPos":6972,"headPos":6772,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.12423\nP : Type ?u.12426\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\ninst✝ : DecidableEq α\nγ : Type u_1\nt : Term L (α ⊕ γ)\ns : Set α\nh : ↑(varFinsetLeft t) ⊆ s\nv : α → M\nxs : γ → M\n⊢ realize (Sum.elim (v ∘ Subtype.val) xs) (restrictVarLeft t (Set.inclusion h)) = realize (Sum.elim v xs) t"],"goalsAfter":[],"content":"by\n  induction' t with a _ _ _ ih\n  · cases a <;> rfl\n  · simp_rw [varFinsetLeft, Finset.coe_biUnion, Set.iUnion_subset_iff] at h\n    exact congr rfl (funext fun i => ih i (h i (Finset.mem_univ i)))"},{"tailPos":7348,"headPos":7319,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term (L[[α]]) β\nv : β → M\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars t) = realize v t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\n_a✝ : β\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (var _a✝)) = realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"induction' t with _ n f ts ih"},{"tailPos":7353,"headPos":7351,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\n_a✝ : β\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (var _a✝)) = realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\n_a✝ : β\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (var _a✝)) = realize v (var _a✝)"],"content":"·"},{"tailPos":7358,"headPos":7354,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\n_a✝ : β\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (var _a✝)) = realize v (var _a✝)"],"goalsAfter":[],"content":"simp only [constantsToVars, realize_var, Sum.elim_inr]"},{"tailPos":7358,"headPos":7351,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\n_a✝ : β\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (var _a✝)) = realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"· simp"},{"tailPos":7363,"headPos":7361,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"·"},{"tailPos":7371,"headPos":7364,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func.zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nf : Functions (L[[α]]) Nat.zero\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)","case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"cases n"},{"tailPos":7378,"headPos":7376,"goalsBefore":["case func.zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nf : Functions (L[[α]]) Nat.zero\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)","case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func.zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nf : Functions (L[[α]]) Nat.zero\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"·"},{"tailPos":7386,"headPos":7379,"goalsBefore":["case func.zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nf : Functions (L[[α]]) Nat.zero\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)","case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"content":"cases f"},{"tailPos":7395,"headPos":7393,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)","case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"goalsAfter":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)"],"content":"·"},{"tailPos":7462,"headPos":7396,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)"],"goalsAfter":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap (Sum.inl val✝) fun i => realize v (ts i)"],"content":"simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]"},{"tailPos":7579,"headPos":7551,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap (Sum.inl val✝) fun i => realize v (ts i)"],"goalsAfter":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap val✝ fun i => realize v (ts i)"],"content":"withConstants_funMap_sum_inl"},{"tailPos":7580,"headPos":7579,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap val✝ fun i => realize v (ts i)"],"goalsAfter":[],"content":"]"},{"tailPos":7580,"headPos":7547,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap (Sum.inl val✝) fun i => realize v (ts i)"],"goalsAfter":[],"content":"rw [withConstants_funMap_sum_inl]"},{"tailPos":7580,"headPos":7396,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)"],"goalsAfter":[],"content":"simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]"},{"tailPos":7580,"headPos":7393,"goalsBefore":["case func.zero.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)","case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"goalsAfter":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"content":"· simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]"},{"tailPos":7589,"headPos":7587,"goalsBefore":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"goalsAfter":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"content":"·"},{"tailPos":7665,"headPos":7590,"goalsBefore":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"goalsAfter":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ ↑(Language.con L val✝) = ↑(Sum.inr val✝)"],"content":"simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]"},{"tailPos":7677,"headPos":7674,"goalsBefore":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ ↑(Language.con L val✝) = ↑(Sum.inr val✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":7677,"headPos":7590,"goalsBefore":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"goalsAfter":[],"content":"simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl"},{"tailPos":7677,"headPos":7587,"goalsBefore":["case func.zero.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions (constantsOn α) Nat.zero\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr val✝) ts)) =\n    realize v (func (Sum.inr val✝) ts)"],"goalsAfter":[],"content":"· simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl"},{"tailPos":7677,"headPos":7379,"goalsBefore":["case func.zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nf : Functions (L[[α]]) Nat.zero\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":[],"content":"cases f\n      · simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl"},{"tailPos":7677,"headPos":7376,"goalsBefore":["case func.zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nf : Functions (L[[α]]) Nat.zero\nts : Fin Nat.zero → Term (L[[α]]) β\nih :\n  ∀ (a : Fin Nat.zero), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)","case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"· cases f\n      · simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl"},{"tailPos":7684,"headPos":7682,"goalsBefore":["case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"content":"·"},{"tailPos":7702,"headPos":7685,"goalsBefore":["case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)","case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"content":"cases' f with _ f"},{"tailPos":7711,"headPos":7709,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)","case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"goalsAfter":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)"],"content":"·"},{"tailPos":7765,"headPos":7712,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)"],"goalsAfter":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap (Sum.inl val✝) fun i => realize v (ts i)"],"content":"simp only [realize, ih, constantsOn, mk₂_Functions]"},{"tailPos":7882,"headPos":7854,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap (Sum.inl val✝) fun i => realize v (ts i)"],"goalsAfter":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap val✝ fun i => realize v (ts i)"],"content":"withConstants_funMap_sum_inl"},{"tailPos":7883,"headPos":7882,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap val✝ fun i => realize v (ts i)"],"goalsAfter":[],"content":"]"},{"tailPos":7883,"headPos":7850,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ (funMap val✝ fun i => realize v (ts i)) = funMap (Sum.inl val✝) fun i => realize v (ts i)"],"goalsAfter":[],"content":"rw [withConstants_funMap_sum_inl]"},{"tailPos":7883,"headPos":7712,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)"],"goalsAfter":[],"content":"simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]"},{"tailPos":7883,"headPos":7709,"goalsBefore":["case func.succ.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nval✝ : Functions L (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inl val✝) ts)) =\n    realize v (func (Sum.inl val✝) ts)","case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"goalsAfter":["case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"content":"· simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]"},{"tailPos":7892,"headPos":7890,"goalsBefore":["case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"goalsAfter":["case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"content":"·"},{"tailPos":7912,"headPos":7893,"goalsBefore":["case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"goalsAfter":[],"content":"exact isEmptyElim f"},{"tailPos":7912,"headPos":7890,"goalsBefore":["case func.succ.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\nf : Functions (constantsOn α) (Nat.succ n✝)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func (Sum.inr f) ts)) =\n    realize v (func (Sum.inr f) ts)"],"goalsAfter":[],"content":"· exact isEmptyElim f"},{"tailPos":7912,"headPos":7685,"goalsBefore":["case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":[],"content":"cases' f with _ f\n      · simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · exact isEmptyElim f"},{"tailPos":7912,"headPos":7682,"goalsBefore":["case func.succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn✝ : ℕ\nf : Functions (L[[α]]) (Nat.succ n✝)\nts : Fin (Nat.succ n✝) → Term (L[[α]]) β\nih :\n  ∀ (a : Fin (Nat.succ n✝)),\n    realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":[],"content":"· cases' f with _ f\n      · simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · exact isEmptyElim f"},{"tailPos":7912,"headPos":7364,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":[],"content":"cases n\n    · cases f\n      · simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl\n    · cases' f with _ f\n      · simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · exact isEmptyElim f"},{"tailPos":7912,"headPos":7361,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions (L[[α]]) n\nts : Fin n → Term (L[[α]]) β\nih : ∀ (a : Fin n), realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (ts a)) = realize v (ts a)\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars (func f ts)) = realize v (func f ts)"],"goalsAfter":[],"content":"· cases n\n    · cases f\n      · simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl\n    · cases' f with _ f\n      · simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · exact isEmptyElim f"},{"tailPos":7912,"headPos":7319,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term (L[[α]]) β\nv : β → M\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars t) = realize v t"],"goalsAfter":[],"content":"induction' t with _ n f ts ih\n  · simp\n  · cases n\n    · cases f\n      · simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl\n    · cases' f with _ f\n      · simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · exact isEmptyElim f"},{"tailPos":7316,"headPos":7314,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term (L[[α]]) β\nv : β → M\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars t) = realize v t"],"goalsAfter":[],"content":"by"},{"tailPos":7912,"headPos":7314,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.15741\nP : Type ?u.15744\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term (L[[α]]) β\nv : β → M\n⊢ realize (Sum.elim (fun a => ↑(Language.con L a)) v) (constantsToVars t) = realize v t"],"goalsAfter":[],"content":"by\n  induction' t with _ n f ts ih\n  · simp\n  · cases n\n    · cases f\n      · simp only [realize, ih, Nat.zero_eq, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · simp only [realize, constantsToVars, Sum.elim_inl, funMap_eq_coe_constants]\n        rfl\n    · cases' f with _ f\n      · simp only [realize, ih, constantsOn, mk₂_Functions]\n        --Porting note: below lemma does not work with simp for some reason\n        rw [withConstants_funMap_sum_inl]\n      · exact isEmptyElim f"},{"tailPos":8292,"headPos":8262,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term L (α ⊕ β)\nv : β → M\n⊢ realize v (varsToConstants t) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nab : α ⊕ β\n⊢ realize v (varsToConstants (var ab)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var ab)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"content":"induction' t with ab n f ts ih"},{"tailPos":8297,"headPos":8295,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nab : α ⊕ β\n⊢ realize v (varsToConstants (var ab)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var ab)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nab : α ⊕ β\n⊢ realize v (varsToConstants (var ab)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var ab)"],"content":"·"},{"tailPos":8316,"headPos":8298,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nab : α ⊕ β\n⊢ realize v (varsToConstants (var ab)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var ab)"],"goalsAfter":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\na : α\n⊢ realize v (varsToConstants (var (Sum.inl a))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inl a))","case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"content":"cases' ab with a b"},{"tailPos":8379,"headPos":8378,"goalsBefore":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\na : α\n⊢ realize v (varsToConstants (var (Sum.inl a))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inl a))","case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"goalsAfter":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\na : α\n⊢ realize v (varsToConstants (var (Sum.inl a))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inl a))"],"content":"."},{"tailPos":8446,"headPos":8380,"goalsBefore":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\na : α\n⊢ realize v (varsToConstants (var (Sum.inl a))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inl a))"],"goalsAfter":[],"content":"simp [Language.con, realize, constantMap, funMap_eq_coe_constants]"},{"tailPos":8446,"headPos":8378,"goalsBefore":["case var.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\na : α\n⊢ realize v (varsToConstants (var (Sum.inl a))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inl a))","case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"goalsAfter":["case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"content":". simp [Language.con, realize, constantMap, funMap_eq_coe_constants]"},{"tailPos":8452,"headPos":8451,"goalsBefore":["case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"goalsAfter":["case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"content":"."},{"tailPos":8480,"headPos":8453,"goalsBefore":["case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"goalsAfter":[],"content":"simp [realize, constantMap]"},{"tailPos":8480,"headPos":8451,"goalsBefore":["case var.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nb : β\n⊢ realize v (varsToConstants (var (Sum.inr b))) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var (Sum.inr b))"],"goalsAfter":[],"content":". simp [realize, constantMap]"},{"tailPos":8480,"headPos":8298,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nab : α ⊕ β\n⊢ realize v (varsToConstants (var ab)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var ab)"],"goalsAfter":[],"content":"cases' ab with a b\n    --Porting note: both cases were `simp [Language.con]\n    . simp [Language.con, realize, constantMap, funMap_eq_coe_constants]\n    . simp [realize, constantMap]"},{"tailPos":8480,"headPos":8295,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nab : α ⊕ β\n⊢ realize v (varsToConstants (var ab)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (var ab)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"content":"· cases' ab with a b\n    --Porting note: both cases were `simp [Language.con]\n    . simp [Language.con, realize, constantMap, funMap_eq_coe_constants]\n    . simp [realize, constantMap]"},{"tailPos":8485,"headPos":8483,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"content":"·"},{"tailPos":8539,"headPos":8486,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ (funMap (Sum.inl f) fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)) =\n    funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)"],"content":"simp only [realize, constantsOn, mk₂_Functions, ih]"},{"tailPos":8648,"headPos":8620,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ (funMap (Sum.inl f) fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)) =\n    funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ (funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)) =\n    funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)"],"content":"withConstants_funMap_sum_inl"},{"tailPos":8649,"headPos":8648,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ (funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)) =\n    funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)"],"goalsAfter":[],"content":"]"},{"tailPos":8649,"headPos":8616,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ (funMap (Sum.inl f) fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)) =\n    funMap f fun i => realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts i)"],"goalsAfter":[],"content":"rw [withConstants_funMap_sum_inl]"},{"tailPos":8649,"headPos":8486,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"goalsAfter":[],"content":"simp only [realize, constantsOn, mk₂_Functions, ih]\n    --Porting note: below lemma does not work with simp for some reason\n    rw [withConstants_funMap_sum_inl]"},{"tailPos":8649,"headPos":8483,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nv : β → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L (α ⊕ β)\nih : ∀ (a : Fin n), realize v (varsToConstants (ts a)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (ts a)\n⊢ realize v (varsToConstants (func f ts)) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) (func f ts)"],"goalsAfter":[],"content":"· simp only [realize, constantsOn, mk₂_Functions, ih]\n    --Porting note: below lemma does not work with simp for some reason\n    rw [withConstants_funMap_sum_inl]"},{"tailPos":8649,"headPos":8262,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term L (α ⊕ β)\nv : β → M\n⊢ realize v (varsToConstants t) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) t"],"goalsAfter":[],"content":"induction' t with ab n f ts ih\n  · cases' ab with a b\n    --Porting note: both cases were `simp [Language.con]\n    . simp [Language.con, realize, constantMap, funMap_eq_coe_constants]\n    . simp [realize, constantMap]\n  · simp only [realize, constantsOn, mk₂_Functions, ih]\n    --Porting note: below lemma does not work with simp for some reason\n    rw [withConstants_funMap_sum_inl]"},{"tailPos":8259,"headPos":8257,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term L (α ⊕ β)\nv : β → M\n⊢ realize v (varsToConstants t) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) t"],"goalsAfter":[],"content":"by"},{"tailPos":8649,"headPos":8257,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.19079\nP : Type ?u.19082\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nt : Term L (α ⊕ β)\nv : β → M\n⊢ realize v (varsToConstants t) = realize (Sum.elim (fun a => ↑(Language.con L a)) v) t"],"goalsAfter":[],"content":"by\n  induction' t with ab n f ts ih\n  · cases' ab with a b\n    --Porting note: both cases were `simp [Language.con]\n    . simp [Language.con, realize, constantMap, funMap_eq_coe_constants]\n    . simp [realize, constantMap]\n  · simp only [realize, constantsOn, mk₂_Functions, ih]\n    --Porting note: below lemma does not work with simp for some reason\n    rw [withConstants_funMap_sum_inl]"},{"tailPos":9223,"headPos":9079,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs) (↑constantsVarsEquivLeft t) =\n    realize (Sum.elim v xs) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm)\n      (constantsToVars t) =\n    realize (Sum.elim v xs) t"],"content":"simp only [constantsVarsEquivLeft, realize_relabel, Equiv.coe_trans, Function.comp_apply,\n    constantsVarsEquiv_apply, relabelEquiv_symm_apply]"},{"tailPos":9272,"headPos":9226,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm)\n      (constantsToVars t) =\n    realize (Sum.elim v xs) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm)\n      (constantsToVars t) =\n    realize (Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs)) (constantsToVars t)"],"content":"refine' _root_.trans _ realize_constantsToVars"},{"tailPos":9283,"headPos":9275,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm)\n      (constantsToVars t) =\n    realize (Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs)) (constantsToVars t)"],"goalsAfter":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nx : α ⊕ β ⊕ Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) x =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) x"],"content":"rcongr x"},{"tailPos":9313,"headPos":9286,"goalsBefore":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nx : α ⊕ β ⊕ Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) x =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) x"],"goalsAfter":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\na : α\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inl a) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inl a)","case e_v.h.inr.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nb : β\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inl b)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inl b))","case e_v.h.inr.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inr i)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inr i))"],"content":"rcases x with (a | (b | i))"},{"tailPos":9317,"headPos":9314,"goalsBefore":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\na : α\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inl a) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inl a)","case e_v.h.inr.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nb : β\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inl b)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inl b))","case e_v.h.inr.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inr i)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inr i))"],"goalsAfter":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\na : α\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inl a) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inl a)","case e_v.h.inr.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nb : β\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inl b)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inl b))","case e_v.h.inr.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inr i)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inr i))"],"content":"<;>"},{"tailPos":9322,"headPos":9318,"goalsBefore":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\na : α\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inl a) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inl a)"],"goalsAfter":[],"content":"simp only [Function.comp_apply, Equiv.sumAssoc_symm_apply_inl, Sum.elim_inl]"},{"tailPos":9322,"headPos":9318,"goalsBefore":["case e_v.h.inr.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nb : β\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inl b)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inl b))"],"goalsAfter":[],"content":"simp only [Function.comp_apply, Equiv.sumAssoc_symm_apply_inl, Sum.elim_inl]"},{"tailPos":9322,"headPos":9318,"goalsBefore":["case e_v.h.inr.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) (Sum.inr (Sum.inr i)) =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) (Sum.inr (Sum.inr i))"],"goalsAfter":[],"content":"simp only [Function.comp_apply, Equiv.sumAssoc_symm_apply_inl, Sum.elim_inl]"},{"tailPos":9322,"headPos":9286,"goalsBefore":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\nx : α ⊕ β ⊕ Fin n\n⊢ (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs ∘ ↑(Equiv.sumAssoc α β (Fin n)).symm) x =\n    Sum.elim (fun a => ↑(Language.con L a)) (Sum.elim v xs) x"],"goalsAfter":[],"content":"rcases x with (a | (b | i)) <;> simp"},{"tailPos":9322,"headPos":9079,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs) (↑constantsVarsEquivLeft t) =\n    realize (Sum.elim v xs) t"],"goalsAfter":[],"content":"simp only [constantsVarsEquivLeft, realize_relabel, Equiv.coe_trans, Function.comp_apply,\n    constantsVarsEquiv_apply, relabelEquiv_symm_apply]\n  refine' _root_.trans _ realize_constantsToVars\n  rcongr x\n  rcases x with (a | (b | i)) <;> simp"},{"tailPos":9076,"headPos":9074,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs) (↑constantsVarsEquivLeft t) =\n    realize (Sum.elim v xs) t"],"goalsAfter":[],"content":"by"},{"tailPos":9322,"headPos":9074,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.22479\nP : Type ?u.22482\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nt : Term (L[[α]]) (β ⊕ Fin n)\nv : β → M\nxs : Fin n → M\n⊢ realize (Sum.elim (Sum.elim (fun a => ↑(Language.con L a)) v) xs) (↑constantsVarsEquivLeft t) =\n    realize (Sum.elim v xs) t"],"goalsAfter":[],"content":"by\n  simp only [constantsVarsEquivLeft, realize_relabel, Equiv.coe_trans, Function.comp_apply,\n    constantsVarsEquiv_apply, relabelEquiv_symm_apply]\n  refine' _root_.trans _ realize_constantsToVars\n  rcongr x\n  rcases x with (a | (b | i)) <;> simp"},{"tailPos":9673,"headPos":9644,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nt : Term L α\nv : α → M\n⊢ Term.realize v (onTerm φ t) = Term.realize v t"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\n_a✝ : α\n⊢ Term.realize v (onTerm φ (var _a✝)) = Term.realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"content":"induction' t with _ n f ts ih"},{"tailPos":9678,"headPos":9676,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\n_a✝ : α\n⊢ Term.realize v (onTerm φ (var _a✝)) = Term.realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\n_a✝ : α\n⊢ Term.realize v (onTerm φ (var _a✝)) = Term.realize v (var _a✝)"],"content":"·"},{"tailPos":9682,"headPos":9679,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\n_a✝ : α\n⊢ Term.realize v (onTerm φ (var _a✝)) = Term.realize v (var _a✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":9682,"headPos":9676,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\n_a✝ : α\n⊢ Term.realize v (onTerm φ (var _a✝)) = Term.realize v (var _a✝)","case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"content":"· rfl"},{"tailPos":9687,"headPos":9685,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"content":"·"},{"tailPos":9750,"headPos":9688,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"goalsAfter":[],"content":"simp only [Term.realize, LHom.onTerm, LHom.map_onFunction, ih]"},{"tailPos":9750,"headPos":9685,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nv : α → M\nn : ℕ\nf : Functions L n\nts : Fin n → Term L α\nih : ∀ (a : Fin n), Term.realize v (onTerm φ (ts a)) = Term.realize v (ts a)\n⊢ Term.realize v (onTerm φ (func f ts)) = Term.realize v (func f ts)"],"goalsAfter":[],"content":"· simp only [Term.realize, LHom.onTerm, LHom.map_onFunction, ih]"},{"tailPos":9750,"headPos":9644,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nt : Term L α\nv : α → M\n⊢ Term.realize v (onTerm φ t) = Term.realize v t"],"goalsAfter":[],"content":"induction' t with _ n f ts ih\n  · rfl\n  · simp only [Term.realize, LHom.onTerm, LHom.map_onFunction, ih]"},{"tailPos":9641,"headPos":9639,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nt : Term L α\nv : α → M\n⊢ Term.realize v (onTerm φ t) = Term.realize v t"],"goalsAfter":[],"content":"by"},{"tailPos":9750,"headPos":9639,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.25879\nP : Type ?u.25882\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nt : Term L α\nv : α → M\n⊢ Term.realize v (onTerm φ t) = Term.realize v t"],"goalsAfter":[],"content":"by\n  induction' t with _ n f ts ih\n  · rfl\n  · simp only [Term.realize, LHom.onTerm, LHom.map_onFunction, ih]"},{"tailPos":10037,"headPos":10026,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nt : Term L α\nv : α → M\n⊢ Term.realize (↑g ∘ v) t = ↑g (Term.realize v t)"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\n_a✝ : α\n⊢ Term.realize (↑g ∘ v) (var _a✝) = ↑g (Term.realize v (var _a✝))","case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"content":"induction t"},{"tailPos":10042,"headPos":10040,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\n_a✝ : α\n⊢ Term.realize (↑g ∘ v) (var _a✝) = ↑g (Term.realize v (var _a✝))","case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\n_a✝ : α\n⊢ Term.realize (↑g ∘ v) (var _a✝) = ↑g (Term.realize v (var _a✝))"],"content":"·"},{"tailPos":10046,"headPos":10043,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\n_a✝ : α\n⊢ Term.realize (↑g ∘ v) (var _a✝) = ↑g (Term.realize v (var _a✝))"],"goalsAfter":[],"content":"rfl"},{"tailPos":10046,"headPos":10040,"goalsBefore":["case var\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\n_a✝ : α\n⊢ Term.realize (↑g ∘ v) (var _a✝) = ↑g (Term.realize v (var _a✝))","case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"content":"· rfl"},{"tailPos":10051,"headPos":10049,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"content":"·"},{"tailPos":10069,"headPos":10056,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = ↑g (Term.realize v (func _f✝ _ts✝))"],"content":"Term.realize,"},{"tailPos":10083,"headPos":10070,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = ↑g (funMap _f✝ fun i => Term.realize v (_ts✝ i))"],"content":"Term.realize,"},{"tailPos":10093,"headPos":10084,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = ↑g (funMap _f✝ fun i => Term.realize v (_ts✝ i))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = funMap _f✝ (↑g ∘ fun i => Term.realize v (_ts✝ i))"],"content":"g.map_fun"},{"tailPos":10094,"headPos":10093,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = funMap _f✝ (↑g ∘ fun i => Term.realize v (_ts✝ i))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = funMap _f✝ (↑g ∘ fun i => Term.realize v (_ts✝ i))"],"content":"]"},{"tailPos":10094,"headPos":10052,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = funMap _f✝ (↑g ∘ fun i => Term.realize v (_ts✝ i))"],"content":"rw [Term.realize, Term.realize, g.map_fun]"},{"tailPos":10118,"headPos":10099,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (funMap _f✝ fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = funMap _f✝ (↑g ∘ fun i => Term.realize v (_ts✝ i))"],"goalsAfter":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = ↑g ∘ fun i => Term.realize v (_ts✝ i)"],"content":"refine' congr rfl _"},{"tailPos":10128,"headPos":10123,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ (fun i => Term.realize (↑g ∘ v) (_ts✝ i)) = ↑g ∘ fun i => Term.realize v (_ts✝ i)"],"goalsAfter":["case func.h\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\nx : Fin l✝\n⊢ Term.realize (↑g ∘ v) (_ts✝ x) = (↑g ∘ fun i => Term.realize v (_ts✝ i)) x"],"content":"ext x"},{"tailPos":10141,"headPos":10133,"goalsBefore":["case func.h\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\nx : Fin l✝\n⊢ Term.realize (↑g ∘ v) (_ts✝ x) = (↑g ∘ fun i => Term.realize v (_ts✝ i)) x"],"goalsAfter":[],"content":"simp [*]"},{"tailPos":10141,"headPos":10052,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":[],"content":"rw [Term.realize, Term.realize, g.map_fun]\n    refine' congr rfl _\n    ext x\n    simp [*]"},{"tailPos":10141,"headPos":10049,"goalsBefore":["case func\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nv : α → M\nl✝ : ℕ\n_f✝ : Functions L l✝\n_ts✝ : Fin l✝ → Term L α\n_ts_ih✝ : ∀ (a : Fin l✝), Term.realize (↑g ∘ v) (_ts✝ a) = ↑g (Term.realize v (_ts✝ a))\n⊢ Term.realize (↑g ∘ v) (func _f✝ _ts✝) = ↑g (Term.realize v (func _f✝ _ts✝))"],"goalsAfter":[],"content":"· rw [Term.realize, Term.realize, g.map_fun]\n    refine' congr rfl _\n    ext x\n    simp [*]"},{"tailPos":10141,"headPos":10026,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nt : Term L α\nv : α → M\n⊢ Term.realize (↑g ∘ v) t = ↑g (Term.realize v t)"],"goalsAfter":[],"content":"induction t\n  · rfl\n  · rw [Term.realize, Term.realize, g.map_fun]\n    refine' congr rfl _\n    ext x\n    simp [*]"},{"tailPos":10023,"headPos":10021,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nt : Term L α\nv : α → M\n⊢ Term.realize (↑g ∘ v) t = ↑g (Term.realize v t)"],"goalsAfter":[],"content":"by"},{"tailPos":10141,"headPos":10021,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.26756\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\ng : M →[L] N\nt : Term L α\nv : α → M\n⊢ Term.realize (↑g ∘ v) t = ↑g (Term.realize v t)"],"goalsAfter":[],"content":"by\n  induction t\n  · rfl\n  · rw [Term.realize, Term.realize, g.map_fun]\n    refine' congr rfl _\n    ext x\n    simp [*]"},{"tailPos":12356,"headPos":12342,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31282\nP : Type ?u.31285\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize ⊤ v xs ↔ True"],"goalsAfter":[],"content":"simp [Top.top]"},{"tailPos":12341,"headPos":12339,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31282\nP : Type ?u.31285\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize ⊤ v xs ↔ True"],"goalsAfter":[],"content":"by"},{"tailPos":12356,"headPos":12339,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31282\nP : Type ?u.31285\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize ⊤ v xs ↔ True"],"goalsAfter":[],"content":"by simp [Top.top]"},{"tailPos":12587,"headPos":12564,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊓ ψ) v xs ↔ Realize φ v xs ∧ Realize ψ v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (Realize φ v xs → Realize ψ v xs → False) → False ↔ Realize φ v xs ∧ Realize ψ v xs"],"content":"simp [Inf.inf, Realize]"},{"tailPos":12588,"headPos":12587,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (Realize φ v xs → Realize ψ v xs → False) → False ↔ Realize φ v xs ∧ Realize ψ v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (Realize φ v xs → Realize ψ v xs → False) → False ↔ Realize φ v xs ∧ Realize ψ v xs"],"content":";"},{"tailPos":12594,"headPos":12589,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (Realize φ v xs → Realize ψ v xs → False) → False ↔ Realize φ v xs ∧ Realize ψ v xs"],"goalsAfter":[],"content":"tauto"},{"tailPos":12594,"headPos":12564,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊓ ψ) v xs ↔ Realize φ v xs ∧ Realize ψ v xs"],"goalsAfter":[],"content":"simp [Inf.inf, Realize]; tauto"},{"tailPos":12561,"headPos":12559,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊓ ψ) v xs ↔ Realize φ v xs ∧ Realize ψ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":12594,"headPos":12559,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.31660\nP : Type ?u.31663\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊓ ψ) v xs ↔ Realize φ v xs ∧ Realize ψ v xs"],"goalsAfter":[],"content":"by\n  simp [Inf.inf, Realize]; tauto"},{"tailPos":12929,"headPos":12904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs"],"goalsAfter":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ []) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ [] → Realize φ v xs","case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"content":"induction' l with φ l ih"},{"tailPos":12934,"headPos":12932,"goalsBefore":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ []) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ [] → Realize φ v xs","case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"goalsAfter":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ []) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ [] → Realize φ v xs"],"content":"·"},{"tailPos":12939,"headPos":12935,"goalsBefore":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ []) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ [] → Realize φ v xs"],"goalsAfter":[],"content":"simp only [List.foldr, realize_top, List.find?, List.not_mem_nil, IsEmpty.forall_iff, forall_const]"},{"tailPos":12939,"headPos":12932,"goalsBefore":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ []) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ [] → Realize φ v xs","case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"content":"· simp"},{"tailPos":12944,"headPos":12942,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"content":"·"},{"tailPos":12954,"headPos":12945,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"goalsAfter":[],"content":"simp [ih]"},{"tailPos":12954,"headPos":12942,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ (φ :: l)) v xs ↔\n    ∀ (φ_1 : BoundedFormula L α n), φ_1 ∈ φ :: l → Realize φ_1 v xs"],"goalsAfter":[],"content":"· simp [ih]"},{"tailPos":12954,"headPos":12904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs"],"goalsAfter":[],"content":"induction' l with φ l ih\n  · simp\n  · simp [ih]"},{"tailPos":12901,"headPos":12899,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":12954,"headPos":12899,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.45572\nP : Type ?u.45575\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊓ x_1) ⊤ l) v xs ↔ ∀ (φ : BoundedFormula L α n), φ ∈ l → Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' l with φ l ih\n  · simp\n  · simp [ih]"},{"tailPos":13193,"headPos":13174,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.53846\nP : Type ?u.53849\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⟹ ψ) v xs ↔ Realize φ v xs → Realize ψ v xs"],"goalsAfter":[],"content":"simp only [Realize]"},{"tailPos":13171,"headPos":13169,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.53846\nP : Type ?u.53849\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⟹ ψ) v xs ↔ Realize φ v xs → Realize ψ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":13193,"headPos":13169,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.53846\nP : Type ?u.53849\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⟹ ψ) v xs ↔ Realize φ v xs → Realize ψ v xs"],"goalsAfter":[],"content":"by\n  simp only [Realize]"},{"tailPos":13784,"headPos":13756,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₁ R t) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula R ![t]) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"content":"Relations.boundedFormula₁,"},{"tailPos":13797,"headPos":13785,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula R ![t]) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) ↔ RelMap R ![realize (Sum.elim v xs) t]"],"content":"realize_rel,"},{"tailPos":13807,"headPos":13798,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) = RelMap R ![realize (Sum.elim v xs) t]"],"content":"iff_eq_eq"},{"tailPos":13808,"headPos":13807,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) = RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) = RelMap R ![realize (Sum.elim v xs) t]"],"content":"]"},{"tailPos":13808,"headPos":13752,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₁ R t) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) = RelMap R ![realize (Sum.elim v xs) t]"],"content":"rw [Relations.boundedFormula₁, realize_rel, iff_eq_eq]"},{"tailPos":13848,"headPos":13811,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t ![] i)) = RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\nx✝ : Fin 1\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t ![] x✝) = Matrix.vecCons (realize (Sum.elim v xs) t) ![] x✝"],"content":"refine' congr rfl (funext fun _ => _)"},{"tailPos":13886,"headPos":13851,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\nx✝ : Fin 1\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t ![] x✝) = Matrix.vecCons (realize (Sum.elim v xs) t) ![] x✝"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_fin_one]"},{"tailPos":13886,"headPos":13752,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₁ R t) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":[],"content":"rw [Relations.boundedFormula₁, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext fun _ => _)\n  simp only [Matrix.cons_val_fin_one]"},{"tailPos":13749,"headPos":13747,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₁ R t) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":[],"content":"by"},{"tailPos":13886,"headPos":13747,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.54593\nP : Type ?u.54596\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 1\nt : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₁ R t) v xs ↔ RelMap R ![realize (Sum.elim v xs) t]"],"goalsAfter":[],"content":"by\n  rw [Relations.boundedFormula₁, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext fun _ => _)\n  simp only [Matrix.cons_val_fin_one]"},{"tailPos":14243,"headPos":14215,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₂ R t₁ t₂) v xs ↔ RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula R ![t₁, t₂]) v xs ↔\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"content":"Relations.boundedFormula₂,"},{"tailPos":14256,"headPos":14244,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula R ![t₁, t₂]) v xs ↔\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) ↔\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"content":"realize_rel,"},{"tailPos":14266,"headPos":14257,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) ↔\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) =\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"content":"iff_eq_eq"},{"tailPos":14267,"headPos":14266,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) =\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) =\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"content":"]"},{"tailPos":14267,"headPos":14211,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₂ R t₁ t₂) v xs ↔ RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) =\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"content":"rw [Relations.boundedFormula₂, realize_rel, iff_eq_eq]"},{"tailPos":14312,"headPos":14270,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ (RelMap R fun i => realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] i)) =\n    RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] 0) =\n    Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"content":"refine' congr rfl (funext (Fin.cases _ _))"},{"tailPos":14317,"headPos":14315,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] 0) =\n    Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] 0) =\n    Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] 0"],"content":"·"},{"tailPos":14350,"headPos":14318,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] 0) =\n    Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] 0"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_zero]"},{"tailPos":14350,"headPos":14315,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] 0) =\n    Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"content":"· simp only [Matrix.cons_val_zero]"},{"tailPos":14355,"headPos":14353,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"content":"·"},{"tailPos":14427,"headPos":14356,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":14427,"headPos":14353,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ ∀ (i : Fin 1),\n    realize (Sum.elim v xs) (Matrix.vecCons t₁ ![t₂] (succ i)) =\n      Matrix.vecCons (realize (Sum.elim v xs) t₁) ![realize (Sum.elim v xs) t₂] (succ i)"],"goalsAfter":[],"content":"· simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":14427,"headPos":14211,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₂ R t₁ t₂) v xs ↔ RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":[],"content":"rw [Relations.boundedFormula₂, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext (Fin.cases _ _))\n  · simp only [Matrix.cons_val_zero]\n  · simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":14208,"headPos":14206,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₂ R t₁ t₂) v xs ↔ RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":[],"content":"by"},{"tailPos":14427,"headPos":14206,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.55232\nP : Type ?u.55235\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\nR : Relations L 2\nt₁ t₂ : Term L (α ⊕ Fin l)\n⊢ Realize (Relations.boundedFormula₂ R t₁ t₂) v xs ↔ RelMap R ![realize (Sum.elim v xs) t₁, realize (Sum.elim v xs) t₂]"],"goalsAfter":[],"content":"by\n  rw [Relations.boundedFormula₂, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext (Fin.cases _ _))\n  · simp only [Matrix.cons_val_zero]\n  · simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":14694,"headPos":14641,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.56171\nP : Type ?u.56174\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊔ ψ) v xs ↔ Realize φ v xs ∨ Realize ψ v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.56171\nP : Type ?u.56174\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∼φ ⟹ ψ) v xs ↔ Realize φ v xs ∨ Realize ψ v xs"],"content":"simp only [realize, Sup.sup, realize_not, eq_iff_iff]"},{"tailPos":14702,"headPos":14697,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.56171\nP : Type ?u.56174\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∼φ ⟹ ψ) v xs ↔ Realize φ v xs ∨ Realize ψ v xs"],"goalsAfter":[],"content":"tauto"},{"tailPos":14702,"headPos":14641,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.56171\nP : Type ?u.56174\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊔ ψ) v xs ↔ Realize φ v xs ∨ Realize ψ v xs"],"goalsAfter":[],"content":"simp only [realize, Sup.sup, realize_not, eq_iff_iff]\n  tauto"},{"tailPos":14638,"headPos":14636,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.56171\nP : Type ?u.56174\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊔ ψ) v xs ↔ Realize φ v xs ∨ Realize ψ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":14702,"headPos":14636,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.56171\nP : Type ?u.56174\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⊔ ψ) v xs ↔ Realize φ v xs ∨ Realize ψ v xs"],"goalsAfter":[],"content":"by\n  simp only [realize, Sup.sup, realize_not, eq_iff_iff]\n  tauto"},{"tailPos":15037,"headPos":15012,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs"],"goalsAfter":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ []) v xs ↔ ∃ φ, φ ∈ [] ∧ Realize φ v xs","case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"induction' l with φ l ih"},{"tailPos":15042,"headPos":15040,"goalsBefore":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ []) v xs ↔ ∃ φ, φ ∈ [] ∧ Realize φ v xs","case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ []) v xs ↔ ∃ φ, φ ∈ [] ∧ Realize φ v xs"],"content":"·"},{"tailPos":15047,"headPos":15043,"goalsBefore":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ []) v xs ↔ ∃ φ, φ ∈ [] ∧ Realize φ v xs"],"goalsAfter":[],"content":"simp only [List.foldr, realize_bot, List.find?, List.not_mem_nil, false_and, exists_false]"},{"tailPos":15047,"headPos":15040,"goalsBefore":["case nil\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ []) v xs ↔ ∃ φ, φ ∈ [] ∧ Realize φ v xs","case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"· simp"},{"tailPos":15052,"headPos":15050,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"·"},{"tailPos":15066,"headPos":15057,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"simp_rw ["},{"tailPos":15082,"headPos":15066,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (φ ⊔ List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"List.foldr_cons,"},{"tailPos":15095,"headPos":15083,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (φ ⊔ List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize φ v xs ∨ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"realize_sup,"},{"tailPos":15099,"headPos":15096,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize φ v xs ∨ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"ih,"},{"tailPos":15112,"headPos":15100,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"content":"exists_prop,"},{"tailPos":15127,"headPos":15113,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, (φ_1 = φ ∨ φ_1 ∈ l) ∧ Realize φ_1 v xs"],"content":"List.mem_cons,"},{"tailPos":15141,"headPos":15128,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, (φ_1 = φ ∨ φ_1 ∈ l) ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, φ_1 = φ ∧ Realize φ_1 v xs ∨ φ_1 ∈ l ∧ Realize φ_1 v xs"],"content":"or_and_right,"},{"tailPos":15152,"headPos":15142,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ ∃ φ_1, φ_1 = φ ∧ Realize φ_1 v xs ∨ φ_1 ∈ l ∧ Realize φ_1 v xs"],"goalsAfter":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ (∃ x, x = φ ∧ Realize x v xs) ∨ ∃ x, x ∈ l ∧ Realize x v xs"],"content":"exists_or,"},{"tailPos":15173,"headPos":15159,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ (Realize φ v xs ∨ ∃ φ, φ ∈ l ∧ Realize φ v xs) ↔ (∃ x, x = φ ∧ Realize x v xs) ∨ ∃ x, x ∈ l ∧ Realize x v xs"],"goalsAfter":[],"content":"simp only [exists_eq_left]"},{"tailPos":15174,"headPos":15057,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":[],"content":"simp_rw [List.foldr_cons, realize_sup, ih, exists_prop, List.mem_cons, or_and_right, exists_or,\n      exists_eq_left]"},{"tailPos":15174,"headPos":15050,"goalsBefore":["case cons\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ✝ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nv : α → M\nxs : Fin n → M\nφ : BoundedFormula L α n\nl : List (BoundedFormula L α n)\nih : Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ (φ :: l)) v xs ↔ ∃ φ_1, φ_1 ∈ φ :: l ∧ Realize φ_1 v xs"],"goalsAfter":[],"content":"·\n    simp_rw [List.foldr_cons, realize_sup, ih, exists_prop, List.mem_cons, or_and_right, exists_or,\n      exists_eq_left]"},{"tailPos":15174,"headPos":15012,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs"],"goalsAfter":[],"content":"induction' l with φ l ih\n  · simp\n  ·\n    simp_rw [List.foldr_cons, realize_sup, ih, exists_prop, List.mem_cons, or_and_right, exists_or,\n      exists_eq_left]"},{"tailPos":15009,"headPos":15007,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":15174,"headPos":15007,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.66568\nP : Type ?u.66571\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l✝ : ℕ\nφ ψ : BoundedFormula L α l✝\nθ : BoundedFormula L α (Nat.succ l✝)\nv✝ : α → M\nxs✝ : Fin l✝ → M\nl : List (BoundedFormula L α n)\nv : α → M\nxs : Fin n → M\n⊢ Realize (List.foldr (fun x x_1 => x ⊔ x_1) ⊥ l) v xs ↔ ∃ φ, φ ∈ l ∧ Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' l with φ l ih\n  · simp\n  ·\n    simp_rw [List.foldr_cons, realize_sup, ih, exists_prop, List.mem_cons, or_and_right, exists_or,\n      exists_eq_left]"},{"tailPos":15626,"headPos":15608,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∃'θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∼(∀'∼θ)) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"BoundedFormula.ex,"},{"tailPos":15639,"headPos":15627,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∼(∀'∼θ)) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ ¬Realize (∀'∼θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"realize_not,"},{"tailPos":15652,"headPos":15640,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ ¬Realize (∀'∼θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (¬∀ (a : M), Realize (∼θ) v (snoc xs a)) ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"realize_all,"},{"tailPos":15663,"headPos":15653,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (¬∀ (a : M), Realize (∼θ) v (snoc xs a)) ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"not_forall"},{"tailPos":15664,"headPos":15663,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"]"},{"tailPos":15664,"headPos":15604,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∃'θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"rw [BoundedFormula.ex, realize_not, realize_all, not_forall]"},{"tailPos":15676,"headPos":15667,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"simp_rw ["},{"tailPos":15688,"headPos":15676,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬¬Realize θ v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"content":"realize_not,"},{"tailPos":15706,"headPos":15689,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬¬Realize θ v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":[],"content":"simp only [not_not]"},{"tailPos":15707,"headPos":15667,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ (∃ x, ¬Realize (∼θ) v (snoc xs x)) ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":[],"content":"simp_rw [realize_not, Classical.not_not]"},{"tailPos":15707,"headPos":15604,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∃'θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":[],"content":"rw [BoundedFormula.ex, realize_not, realize_all, not_forall]\n  simp_rw [realize_not, Classical.not_not]"},{"tailPos":15601,"headPos":15599,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∃'θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":[],"content":"by"},{"tailPos":15707,"headPos":15599,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.69331\nP : Type ?u.69334\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (∃'θ) v xs ↔ ∃ a, Realize θ v (snoc xs a)"],"goalsAfter":[],"content":"by\n  rw [BoundedFormula.ex, realize_not, realize_all, not_forall]\n  simp_rw [realize_not, Classical.not_not]"},{"tailPos":15993,"headPos":15915,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70178\nP : Type ?u.70181\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⇔ ψ) v xs ↔ (Realize φ v xs ↔ Realize ψ v xs)"],"goalsAfter":[],"content":"simp only [BoundedFormula.iff, realize_inf, realize_imp, and_imp, ← iff_def]"},{"tailPos":15912,"headPos":15910,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70178\nP : Type ?u.70181\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⇔ ψ) v xs ↔ (Realize φ v xs ↔ Realize ψ v xs)"],"goalsAfter":[],"content":"by"},{"tailPos":15993,"headPos":15910,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70178\nP : Type ?u.70181\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv : α → M\nxs : Fin l → M\n⊢ Realize (φ ⇔ ψ) v xs ↔ (Realize φ v xs ↔ Realize ψ v xs)"],"goalsAfter":[],"content":"by\n  simp only [BoundedFormula.iff, realize_inf, realize_imp, and_imp, ← iff_def]"},{"tailPos":16315,"headPos":16308,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70714\nP : Type ?u.70717\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nh : m = n\nh' : m ≤ n\nφ : BoundedFormula L α m\nv : α → M\nxs : Fin n → M\n⊢ Realize (castLE h' φ) v xs ↔ Realize φ v (xs ∘ ↑(Fin.cast h))"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70714\nP : Type ?u.70717\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm : ℕ\nφ : BoundedFormula L α m\nv : α → M\nh' : m ≤ m\nxs : Fin m → M\n⊢ Realize (castLE h' φ) v xs ↔ Realize φ v (xs ∘ ↑(Fin.cast (_ : m = m)))"],"content":"subst h"},{"tailPos":16394,"headPos":16318,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70714\nP : Type ?u.70717\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm : ℕ\nφ : BoundedFormula L α m\nv : α → M\nh' : m ≤ m\nxs : Fin m → M\n⊢ Realize (castLE h' φ) v xs ↔ Realize φ v (xs ∘ ↑(Fin.cast (_ : m = m)))"],"goalsAfter":[],"content":"simp only [castLE_rfl, cast_refl, OrderIso.coe_refl, Function.comp.right_id]"},{"tailPos":16394,"headPos":16308,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70714\nP : Type ?u.70717\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nh : m = n\nh' : m ≤ n\nφ : BoundedFormula L α m\nv : α → M\nxs : Fin n → M\n⊢ Realize (castLE h' φ) v xs ↔ Realize φ v (xs ∘ ↑(Fin.cast h))"],"goalsAfter":[],"content":"subst h\n  simp only [castLE_rfl, cast_refl, OrderIso.coe_refl, Function.comp.right_id]"},{"tailPos":16305,"headPos":16303,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70714\nP : Type ?u.70717\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nh : m = n\nh' : m ≤ n\nφ : BoundedFormula L α m\nv : α → M\nxs : Fin n → M\n⊢ Realize (castLE h' φ) v xs ↔ Realize φ v (xs ∘ ↑(Fin.cast h))"],"goalsAfter":[],"content":"by"},{"tailPos":16394,"headPos":16303,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.70714\nP : Type ?u.70717\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nh : m = n\nh' : m ≤ n\nφ : BoundedFormula L α m\nv : α → M\nxs : Fin n → M\n⊢ Realize (castLE h' φ) v xs ↔ Realize φ v (xs ∘ ↑(Fin.cast h))"],"goalsAfter":[],"content":"by\n  subst h\n  simp only [castLE_rfl, cast_refl, OrderIso.coe_refl, Function.comp.right_id]"},{"tailPos":17145,"headPos":17090,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nv' : β → M\nxs : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\n⊢ Realize (mapTermRel ft fr (fun x => id) φ) v' xs ↔ Realize φ v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) falsum) v' xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih"},{"tailPos":17150,"headPos":17148,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) falsum) v' xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) falsum) v' xs ↔ Realize falsum v xs"],"content":"·"},{"tailPos":17154,"headPos":17151,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) falsum) v' xs ↔ Realize falsum v xs"],"goalsAfter":[],"content":"rfl"},{"tailPos":17154,"headPos":17148,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) falsum) v' xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"content":"· rfl"},{"tailPos":17159,"headPos":17157,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"content":"·"},{"tailPos":17190,"headPos":17160,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, h1]"},{"tailPos":17190,"headPos":17157,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (equal t₁✝ t₂✝)) v' xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"content":"· simp [mapTermRel, Realize, h1]"},{"tailPos":17195,"headPos":17193,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs"],"content":"·"},{"tailPos":17230,"headPos":17196,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, h1, h2]"},{"tailPos":17230,"headPos":17193,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (rel R✝ ts✝)) v' xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"content":"· simp [mapTermRel, Realize, h1, h2]"},{"tailPos":17235,"headPos":17233,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"·"},{"tailPos":17272,"headPos":17236,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, ih1, ih2]"},{"tailPos":17272,"headPos":17233,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₁✝) v' xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (mapTermRel ft fr (fun x => id) f₂✝) v' xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (f₁✝ ⟹ f₂✝)) v' xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"content":"· simp [mapTermRel, Realize, ih1, ih2]"},{"tailPos":17277,"headPos":17275,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"content":"·"},{"tailPos":17321,"headPos":17278,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"simp only [mapTermRel, Realize, ih, id.def]"},{"tailPos":17321,"headPos":17275,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : α → M\nv' : β → M\nxs✝ : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih : ∀ {xs : Fin (n✝ + 1) → M}, Realize (mapTermRel ft fr (fun x => id) f✝) v' xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (mapTermRel ft fr (fun x => id) (∀'f✝)) v' xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"· simp only [mapTermRel, Realize, ih, id.def]"},{"tailPos":17321,"headPos":17090,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nv' : β → M\nxs : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\n⊢ Realize (mapTermRel ft fr (fun x => id) φ) v' xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih\n  · rfl\n  · simp [mapTermRel, Realize, h1]\n  · simp [mapTermRel, Realize, h1, h2]\n  · simp [mapTermRel, Realize, ih1, ih2]\n  · simp only [mapTermRel, Realize, ih, id.def]"},{"tailPos":17087,"headPos":17085,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nv' : β → M\nxs : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\n⊢ Realize (mapTermRel ft fr (fun x => id) φ) v' xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":17321,"headPos":17085,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.71406\nP : Type ?u.71409\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin n)\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nv' : β → M\nxs : Fin n → M\nh1 : ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs : Fin n → M), realize (Sum.elim v' xs) (ft n t) = realize (Sum.elim v xs) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\n⊢ Realize (mapTermRel ft fr (fun x => id) φ) v' xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih\n  · rfl\n  · simp [mapTermRel, Realize, h1]\n  · simp [mapTermRel, Realize, h1, h2]\n  · simp [mapTermRel, Realize, ih1, ih2]\n  · simp only [mapTermRel, Realize, ih, id.def]"},{"tailPos":18329,"headPos":18274,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) φ) v' xs ↔\n    Realize φ (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) falsum) v' xs ↔\n    Realize falsum (v xs) (xs ∘ ↑(natAdd k))","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih"},{"tailPos":18334,"headPos":18332,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) falsum) v' xs ↔\n    Realize falsum (v xs) (xs ∘ ↑(natAdd k))","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) falsum) v' xs ↔\n    Realize falsum (v xs) (xs ∘ ↑(natAdd k))"],"content":"·"},{"tailPos":18338,"headPos":18335,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) falsum) v' xs ↔\n    Realize falsum (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"rfl"},{"tailPos":18338,"headPos":18332,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) falsum) v' xs ↔\n    Realize falsum (v xs) (xs ∘ ↑(natAdd k))","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"· rfl"},{"tailPos":18343,"headPos":18341,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"·"},{"tailPos":18374,"headPos":18344,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, h1]"},{"tailPos":18374,"headPos":18341,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (equal t₁✝ t₂✝)) v' xs ↔\n    Realize (equal t₁✝ t₂✝) (v xs) (xs ∘ ↑(natAdd k))","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"· simp [mapTermRel, Realize, h1]"},{"tailPos":18379,"headPos":18377,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"·"},{"tailPos":18414,"headPos":18380,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, h1, h2]"},{"tailPos":18414,"headPos":18377,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (rel R✝ ts✝)) v' xs ↔\n    Realize (rel R✝ ts✝) (v xs) (xs ∘ ↑(natAdd k))","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"· simp [mapTermRel, Realize, h1, h2]"},{"tailPos":18419,"headPos":18417,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"·"},{"tailPos":18456,"headPos":18420,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, ih1, ih2]"},{"tailPos":18456,"headPos":18417,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₁✝) v' xs ↔\n      Realize f₁✝ (v xs) (xs ∘ ↑(natAdd k))\nih2 :\n  ∀ (xs : Fin (k + n✝) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f₂✝) v' xs ↔\n      Realize f₂✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (f₁✝ ⟹ f₂✝)) v' xs ↔\n    Realize (f₁✝ ⟹ f₂✝) (v xs) (xs ∘ ↑(natAdd k))","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"· simp [mapTermRel, Realize, ih1, ih2]"},{"tailPos":18461,"headPos":18459,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"content":"·"},{"tailPos":18496,"headPos":18462,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, ih, hv]"},{"tailPos":18496,"headPos":18459,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs✝ : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih :\n  ∀ (xs : Fin (k + (n✝ + 1)) → M),\n    Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) f✝) v' xs ↔\n      Realize f✝ (v xs) (xs ∘ ↑(natAdd k))\nxs : Fin (k + n✝) → M\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) (∀'f✝)) v' xs ↔\n    Realize (∀'f✝) (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"· simp [mapTermRel, Realize, ih, hv]"},{"tailPos":18496,"headPos":18274,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) φ) v' xs ↔\n    Realize φ (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih\n  · rfl\n  · simp [mapTermRel, Realize, h1]\n  · simp [mapTermRel, Realize, h1, h2]\n  · simp [mapTermRel, Realize, ih1, ih2]\n  · simp [mapTermRel, Realize, ih, hv]"},{"tailPos":18271,"headPos":18269,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) φ) v' xs ↔\n    Realize φ (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"by"},{"tailPos":18496,"headPos":18269,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.78808\nP : Type ?u.78811\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Structure L' M\nk : ℕ\nft : (n : ℕ) → Term L (α ⊕ Fin n) → Term L' (β ⊕ Fin (k + n))\nfr : (n : ℕ) → Relations L n → Relations L' n\nn : ℕ\nφ : BoundedFormula L α n\nv : {n : ℕ} → (Fin (k + n) → M) → α → M\nv' : β → M\nxs : Fin (k + n) → M\nh1 :\n  ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (k + n) → M),\n    realize (Sum.elim v' xs') (ft n t) = realize (Sum.elim (v xs') (xs' ∘ ↑(natAdd k))) t\nh2 : ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (fr n R) x = RelMap R x\nhv : ∀ (n : ℕ) (xs : Fin (k + n) → M) (x : M), v (snoc xs x) = v xs\n⊢ Realize (mapTermRel ft fr (fun n => castLE (_ : k + (n + 1) ≤ k + n + 1)) φ) v' xs ↔\n    Realize φ (v xs) (xs ∘ ↑(natAdd k))"],"goalsAfter":[],"content":"by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih\n  · rfl\n  · simp [mapTermRel, Realize, h1]\n  · simp [mapTermRel, Realize, h1, h2]\n  · simp [mapTermRel, Realize, ih1, ih2]\n  · simp [mapTermRel, Realize, ih, hv]"},{"tailPos":18916,"headPos":18908,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize (relabel g φ) v xs ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize\n      (mapTermRel (fun x t => Term.relabel (relabelAux g x) t) (fun x => id)\n        (fun x => castLE (_ : m + x + 1 ≥ m + (x + 1))) φ)\n      v xs ↔\n    Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"content":"relabel,"},{"tailPos":18946,"headPos":18917,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize\n      (mapTermRel (fun x t => Term.relabel (relabelAux g x) t) (fun x => id)\n        (fun x => castLE (_ : m + x + 1 ≥ m + (x + 1))) φ)\n      v xs ↔\n    Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize φ (?v xs) (xs ∘ ↑(natAdd m)) ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))","case v\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ {n : ℕ} → (Fin (m + n) → M) → α → M","case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) = realize (Sum.elim (?v xs') (xs' ∘ ↑(natAdd m))) t","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M), ?v (snoc xs x) = ?v xs"],"content":"realize_mapTermRel_add_castLe"},{"tailPos":18947,"headPos":18946,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize φ (?v xs) (xs ∘ ↑(natAdd m)) ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))","case v\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ {n : ℕ} → (Fin (m + n) → M) → α → M","case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) = realize (Sum.elim (?v xs') (xs' ∘ ↑(natAdd m))) t","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M), ?v (snoc xs x) = ?v xs"],"goalsAfter":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) =\n      realize (Sum.elim (Sum.elim v (xs' ∘ ↑(castAdd n)) ∘ g) (xs' ∘ ↑(natAdd m))) t","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M),\n    Sum.elim v (snoc xs x ∘ ↑(castAdd (n + 1))) ∘ g = Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g"],"content":"]"},{"tailPos":18947,"headPos":18904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize (relabel g φ) v xs ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) =\n      realize (Sum.elim (Sum.elim v (xs' ∘ ↑(castAdd n)) ∘ g) (xs' ∘ ↑(natAdd m))) t","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M),\n    Sum.elim v (snoc xs x ∘ ↑(castAdd (n + 1))) ∘ g = Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g"],"content":"rw [relabel, realize_mapTermRel_add_castLe]"},{"tailPos":18951,"headPos":18948,"goalsBefore":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) =\n      realize (Sum.elim (Sum.elim v (xs' ∘ ↑(castAdd n)) ∘ g) (xs' ∘ ↑(natAdd m))) t","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M),\n    Sum.elim v (snoc xs x ∘ ↑(castAdd (n + 1))) ∘ g = Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g"],"goalsAfter":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) =\n      realize (Sum.elim (Sum.elim v (xs' ∘ ↑(castAdd n)) ∘ g) (xs' ∘ ↑(natAdd m))) t","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M),\n    Sum.elim v (snoc xs x ∘ ↑(castAdd (n + 1))) ∘ g = Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g"],"content":"<;>"},{"tailPos":18958,"headPos":18952,"goalsBefore":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (t : Term L (α ⊕ Fin n)) (xs' : Fin (m + n) → M),\n    realize (Sum.elim v xs') (Term.relabel (relabelAux g n) t) =\n      realize (Sum.elim (Sum.elim v (xs' ∘ ↑(castAdd n)) ∘ g) (xs' ∘ ↑(natAdd m))) t"],"goalsAfter":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nt✝ : Term L (α ⊕ Fin n✝)\nxs'✝ : Fin (m + n✝) → M\n⊢ realize (Sum.elim v xs'✝) (Term.relabel (relabelAux g n✝) t✝) =\n    realize (Sum.elim (Sum.elim v (xs'✝ ∘ ↑(castAdd n✝)) ∘ g) (xs'✝ ∘ ↑(natAdd m))) t✝"],"content":"intros"},{"tailPos":18958,"headPos":18952,"goalsBefore":["case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x"],"goalsAfter":["case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nR✝ : Relations L n✝\nx✝ : Fin n✝ → M\n⊢ RelMap (id R✝) x✝ = RelMap R✝ x✝"],"content":"intros"},{"tailPos":18958,"headPos":18952,"goalsBefore":["case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ ∀ (n : ℕ) (xs : Fin (m + n) → M) (x : M),\n    Sum.elim v (snoc xs x ∘ ↑(castAdd (n + 1))) ∘ g = Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g"],"goalsAfter":["case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nxs✝ : Fin (m + n✝) → M\nx✝ : M\n⊢ Sum.elim v (snoc xs✝ x✝ ∘ ↑(castAdd (n✝ + 1))) ∘ g = Sum.elim v (xs✝ ∘ ↑(castAdd n✝)) ∘ g"],"content":"intros"},{"tailPos":18958,"headPos":18904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize (relabel g φ) v xs ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nt✝ : Term L (α ⊕ Fin n✝)\nxs'✝ : Fin (m + n✝) → M\n⊢ realize (Sum.elim v xs'✝) (Term.relabel (relabelAux g n✝) t✝) =\n    realize (Sum.elim (Sum.elim v (xs'✝ ∘ ↑(castAdd n✝)) ∘ g) (xs'✝ ∘ ↑(natAdd m))) t✝","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nR✝ : Relations L n✝\nx✝ : Fin n✝ → M\n⊢ RelMap (id R✝) x✝ = RelMap R✝ x✝","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nxs✝ : Fin (m + n✝) → M\nx✝ : M\n⊢ Sum.elim v (snoc xs✝ x✝ ∘ ↑(castAdd (n✝ + 1))) ∘ g = Sum.elim v (xs✝ ∘ ↑(castAdd n✝)) ∘ g"],"content":"rw [relabel, realize_mapTermRel_add_castLe] <;> intros"},{"tailPos":18962,"headPos":18959,"goalsBefore":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nt✝ : Term L (α ⊕ Fin n✝)\nxs'✝ : Fin (m + n✝) → M\n⊢ realize (Sum.elim v xs'✝) (Term.relabel (relabelAux g n✝) t✝) =\n    realize (Sum.elim (Sum.elim v (xs'✝ ∘ ↑(castAdd n✝)) ∘ g) (xs'✝ ∘ ↑(natAdd m))) t✝","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nR✝ : Relations L n✝\nx✝ : Fin n✝ → M\n⊢ RelMap (id R✝) x✝ = RelMap R✝ x✝","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nxs✝ : Fin (m + n✝) → M\nx✝ : M\n⊢ Sum.elim v (snoc xs✝ x✝ ∘ ↑(castAdd (n✝ + 1))) ∘ g = Sum.elim v (xs✝ ∘ ↑(castAdd n✝)) ∘ g"],"goalsAfter":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nt✝ : Term L (α ⊕ Fin n✝)\nxs'✝ : Fin (m + n✝) → M\n⊢ realize (Sum.elim v xs'✝) (Term.relabel (relabelAux g n✝) t✝) =\n    realize (Sum.elim (Sum.elim v (xs'✝ ∘ ↑(castAdd n✝)) ∘ g) (xs'✝ ∘ ↑(natAdd m))) t✝","case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nR✝ : Relations L n✝\nx✝ : Fin n✝ → M\n⊢ RelMap (id R✝) x✝ = RelMap R✝ x✝","case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nxs✝ : Fin (m + n✝) → M\nx✝ : M\n⊢ Sum.elim v (snoc xs✝ x✝ ∘ ↑(castAdd (n✝ + 1))) ∘ g = Sum.elim v (xs✝ ∘ ↑(castAdd n✝)) ∘ g"],"content":"<;>"},{"tailPos":18967,"headPos":18963,"goalsBefore":["case h1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nt✝ : Term L (α ⊕ Fin n✝)\nxs'✝ : Fin (m + n✝) → M\n⊢ realize (Sum.elim v xs'✝) (Term.relabel (relabelAux g n✝) t✝) =\n    realize (Sum.elim (Sum.elim v (xs'✝ ∘ ↑(castAdd n✝)) ∘ g) (xs'✝ ∘ ↑(natAdd m))) t✝"],"goalsAfter":[],"content":"simp only [realize_relabel, sum_elim_comp_relabelAux]"},{"tailPos":18967,"headPos":18963,"goalsBefore":["case h2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nR✝ : Relations L n✝\nx✝ : Fin n✝ → M\n⊢ RelMap (id R✝) x✝ = RelMap R✝ x✝"],"goalsAfter":[],"content":"simp only [realize_relabel, sum_elim_comp_relabelAux]"},{"tailPos":18967,"headPos":18963,"goalsBefore":["case hv\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\nn✝ : ℕ\nxs✝ : Fin (m + n✝) → M\nx✝ : M\n⊢ Sum.elim v (snoc xs✝ x✝ ∘ ↑(castAdd (n✝ + 1))) ∘ g = Sum.elim v (xs✝ ∘ ↑(castAdd n✝)) ∘ g"],"goalsAfter":[],"content":"simp only [realize_relabel, sum_elim_comp_relabelAux]"},{"tailPos":18967,"headPos":18904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize (relabel g φ) v xs ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":[],"content":"rw [relabel, realize_mapTermRel_add_castLe] <;> intros <;> simp"},{"tailPos":18903,"headPos":18901,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize (relabel g φ) v xs ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":[],"content":"by"},{"tailPos":18967,"headPos":18901,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.96990\nP : Type ?u.96993\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nm n : ℕ\nφ : BoundedFormula L α n\ng : α → β ⊕ Fin m\nv : β → M\nxs : Fin (m + n) → M\n⊢ Realize (relabel g φ) v xs ↔ Realize φ (Sum.elim v (xs ∘ ↑(castAdd n)) ∘ g) (xs ∘ ↑(natAdd m))"],"goalsAfter":[],"content":"by rw [relabel, realize_mapTermRel_add_castLe] <;> intros <;> simp"},{"tailPos":19367,"headPos":19361,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (liftAt n' m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) φ) v\n      xs ↔\n    Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"liftAt"},{"tailPos":19368,"headPos":19367,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) φ) v\n      xs ↔\n    Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) φ) v\n      xs ↔\n    Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"]"},{"tailPos":19368,"headPos":19357,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (liftAt n' m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) φ) v\n      xs ↔\n    Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"rw [liftAt]"},{"tailPos":19427,"headPos":19371,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) φ) v\n      xs ↔\n    Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) falsum)\n      v xs ↔\n    Realize falsum v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 k _ ih3"},{"tailPos":19432,"headPos":19430,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) falsum)\n      v xs ↔\n    Realize falsum v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) falsum)\n      v xs ↔\n    Realize falsum v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"·"},{"tailPos":19459,"headPos":19433,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) falsum)\n      v xs ↔\n    Realize falsum v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"simp [mapTermRel, Realize]"},{"tailPos":19459,"headPos":19430,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) falsum)\n      v xs ↔\n    Realize falsum v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"· simp [mapTermRel, Realize]"},{"tailPos":19464,"headPos":19462,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"·"},{"tailPos":19539,"headPos":19465,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]"},{"tailPos":19539,"headPos":19462,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (equal t₁✝ t₂✝))\n      v xs ↔\n    Realize (equal t₁✝ t₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"· simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]"},{"tailPos":19544,"headPos":19542,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"·"},{"tailPos":19619,"headPos":19545,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]"},{"tailPos":19619,"headPos":19542,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (rel R✝ ts✝))\n      v xs ↔\n    Realize (rel R✝ ts✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"· simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]"},{"tailPos":19624,"headPos":19622,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"·"},{"tailPos":19674,"headPos":19625,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"simp only [mapTermRel, Realize, ih1 hmn, ih2 hmn]"},{"tailPos":19674,"headPos":19622,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₁✝)\n          v xs ↔\n        Realize f₁✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nih2 :\n  ∀ {xs : Fin (n✝ + n') → M},\n    m + n' ≤ n✝ + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f₂✝)\n          v xs ↔\n        Realize f₂✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (n✝ + n') → M\nhmn : m + n' ≤ n✝ + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1))\n        (f₁✝ ⟹ f₂✝))\n      v xs ↔\n    Realize (f₁✝ ⟹ f₂✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"· simp only [mapTermRel, Realize, ih1 hmn, ih2 hmn]"},{"tailPos":19679,"headPos":19677,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"·"},{"tailPos":19733,"headPos":19723,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + 1 + n' = k + n' + 1"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + (1 + n') = k + n' + 1"],"content":"add_assoc,"},{"tailPos":19748,"headPos":19734,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + (1 + n') = k + n' + 1"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + (n' + 1) = k + n' + 1"],"content":"add_comm 1 n',"},{"tailPos":19762,"headPos":19749,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + (n' + 1) = k + n' + 1"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + n' + 1 = k + n' + 1"],"content":"← add_assoc"},{"tailPos":19763,"headPos":19762,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + n' + 1 = k + n' + 1"],"goalsAfter":[],"content":"]"},{"tailPos":19763,"headPos":19719,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + 1 + n' = k + n' + 1"],"goalsAfter":[],"content":"rw [add_assoc, add_comm 1 n', ← add_assoc]"},{"tailPos":19718,"headPos":19716,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + 1 + n' = k + n' + 1"],"goalsAfter":[],"content":"by"},{"tailPos":19763,"headPos":19716,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ k + 1 + n' = k + n' + 1"],"goalsAfter":[],"content":"by rw [add_assoc, add_comm 1 n', ← add_assoc]"},{"tailPos":19763,"headPos":19680,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"have h : k + 1 + n' = k + n' + 1 := by rw [add_assoc, add_comm 1 n', ← add_assoc]"},{"tailPos":19855,"headPos":19768,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\n⊢ (∀ (x : M),\n      Realize f✝ v ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)) ↔\n    ∀ (x : M), Realize f✝ v (snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x)"],"content":"simp only [mapTermRel, Realize, realize_castLe_of_eq h, ih3 (hmn.trans k.succ.le_succ)]"},{"tailPos":19954,"headPos":19860,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\n⊢ (∀ (x : M),\n      Realize f✝ v ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)) ↔\n    ∀ (x : M), Realize f✝ v (snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x)"],"goalsAfter":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (last k) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (last k)","case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"content":"refine' forall_congr' fun x => iff_eq_eq.mpr (congr rfl (funext (Fin.lastCases _ fun i => _)))"},{"tailPos":19961,"headPos":19959,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (last k) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (last k)","case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"goalsAfter":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (last k) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (last k)"],"content":"·"},{"tailPos":20014,"headPos":19962,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (last k) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (last k)"],"goalsAfter":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ snoc xs x (↑(Fin.cast h) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"content":"simp only [Function.comp_apply, val_last, snoc_last]"},{"tailPos":20035,"headPos":20021,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ snoc xs x (↑(Fin.cast h) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"content":"by_cases k < m"},{"tailPos":20044,"headPos":20042,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"content":"·"},{"tailPos":20057,"headPos":20049,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(castAdd n') (last k))) = x"],"content":"if_pos h"},{"tailPos":20058,"headPos":20057,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(castAdd n') (last k))) = x"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(castAdd n') (last k))) = x"],"content":"]"},{"tailPos":20058,"headPos":20045,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(castAdd n') (last k))) = x"],"content":"rw [if_pos h]"},{"tailPos":20116,"headPos":20067,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(castAdd n') (last k))) = x"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ ↑(↑(Fin.cast h✝) (↑(castAdd n') (last k))) = ↑(last (k + n'))"],"content":"refine' (congr rfl (ext _)).trans (snoc_last _ _)"},{"tailPos":20197,"headPos":20125,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ ↑(↑(Fin.cast h✝) (↑(castAdd n') (last k))) = ↑(last (k + n'))"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ n' = 0"],"content":"simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]"},{"tailPos":20314,"headPos":20206,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ n' = 0"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ m ≤ m + 0"],"content":"refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le"},{"tailPos":20335,"headPos":20327,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ m ≤ m + 0"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ m ≤ m"],"content":"add_zero"},{"tailPos":20336,"headPos":20335,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ m ≤ m"],"goalsAfter":[],"content":"]"},{"tailPos":20336,"headPos":20323,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ m ≤ m + 0"],"goalsAfter":[],"content":"rw [add_zero]"},{"tailPos":20336,"headPos":20045,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":[],"content":"rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]"},{"tailPos":20336,"headPos":20042,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"content":"· rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]"},{"tailPos":20345,"headPos":20343,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"content":"·"},{"tailPos":20358,"headPos":20350,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(addNat n') (last k))) = x"],"content":"if_neg h"},{"tailPos":20359,"headPos":20358,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(addNat n') (last k))) = x"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(addNat n') (last k))) = x"],"content":"]"},{"tailPos":20359,"headPos":20346,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(addNat n') (last k))) = x"],"content":"rw [if_neg h]"},{"tailPos":20417,"headPos":20368,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (↑(addNat n') (last k))) = x"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ ↑(↑(Fin.cast h✝) (↑(addNat n') (last k))) = ↑(last (k + n'))"],"content":"refine' (congr rfl (ext _)).trans (snoc_last _ _)"},{"tailPos":20430,"headPos":20426,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ ↑(↑(Fin.cast h✝) (↑(addNat n') (last k))) = ↑(last (k + n'))"],"goalsAfter":[],"content":"simp only [coe_orderIso_apply, coe_addNat, val_last]"},{"tailPos":20430,"headPos":20346,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":[],"content":"rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp"},{"tailPos":20430,"headPos":20343,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh✝ : k + 1 + n' = k + n' + 1\nx : M\nh : ¬k < m\n⊢ snoc xs x (↑(Fin.cast h✝) (if k < m then ↑(castAdd n') (last k) else ↑(addNat n') (last k))) = x"],"goalsAfter":[],"content":"· rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp"},{"tailPos":20430,"headPos":19962,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (last k) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (last k)"],"goalsAfter":[],"content":"simp only [Function.comp_apply, val_last, snoc_last]\n      by_cases k < m\n      · rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]\n      · rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp"},{"tailPos":20430,"headPos":19959,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (last k) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (last k)","case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"content":"· simp only [Function.comp_apply, val_last, snoc_last]\n      by_cases k < m\n      · rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]\n      · rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp"},{"tailPos":20437,"headPos":20435,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"content":"·"},{"tailPos":20488,"headPos":20438,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ snoc xs x (↑(Fin.cast h) (if ↑(↑castSucc i) < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i))) =\n    xs (if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"simp only [Function.comp_apply, Fin.snoc_castSucc]"},{"tailPos":20550,"headPos":20495,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ snoc xs x (↑(Fin.cast h) (if ↑(↑castSucc i) < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i))) =\n    xs (if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ↑(↑(Fin.cast h) (if ↑(↑castSucc i) < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i))) =\n    ↑(↑castSucc (if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))"],"content":"refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)"},{"tailPos":20601,"headPos":20557,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ↑(↑(Fin.cast h) (if ↑(↑castSucc i) < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i))) =\n    ↑(↑castSucc (if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ↑(if ↑i < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i)) =\n    ↑(if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"content":"simp only [coe_castSucc, coe_orderIso_apply]"},{"tailPos":20617,"headPos":20608,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ↑(if ↑i < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i)) =\n    ↑(if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":["case all.refine'_2.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ↑i < m\n⊢ ↑(↑(castAdd n') (↑castSucc i)) = ↑(↑(castAdd n') i)","case all.refine'_2.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ¬↑i < m\n⊢ ↑(↑(addNat n') (↑castSucc i)) = ↑(↑(addNat n') i)"],"content":"split_ifs"},{"tailPos":20621,"headPos":20618,"goalsBefore":["case all.refine'_2.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ↑i < m\n⊢ ↑(↑(castAdd n') (↑castSucc i)) = ↑(↑(castAdd n') i)","case all.refine'_2.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ¬↑i < m\n⊢ ↑(↑(addNat n') (↑castSucc i)) = ↑(↑(addNat n') i)"],"goalsAfter":["case all.refine'_2.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ↑i < m\n⊢ ↑(↑(castAdd n') (↑castSucc i)) = ↑(↑(castAdd n') i)","case all.refine'_2.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ¬↑i < m\n⊢ ↑(↑(addNat n') (↑castSucc i)) = ↑(↑(addNat n') i)"],"content":"<;>"},{"tailPos":20626,"headPos":20622,"goalsBefore":["case all.refine'_2.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ↑i < m\n⊢ ↑(↑(castAdd n') (↑castSucc i)) = ↑(↑(castAdd n') i)"],"goalsAfter":[],"content":"simp only [coe_castAdd, coe_castSucc]"},{"tailPos":20626,"headPos":20622,"goalsBefore":["case all.refine'_2.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\nh✝ : ¬↑i < m\n⊢ ↑(↑(addNat n') (↑castSucc i)) = ↑(↑(addNat n') i)"],"goalsAfter":[],"content":"simp only [coe_castAdd, coe_castSucc]"},{"tailPos":20626,"headPos":20608,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ↑(if ↑i < m then ↑(castAdd n') (↑castSucc i) else ↑(addNat n') (↑castSucc i)) =\n    ↑(if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"split_ifs <;> simp"},{"tailPos":20626,"headPos":20438,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"goalsAfter":[],"content":"simp only [Function.comp_apply, Fin.snoc_castSucc]\n      refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)\n      simp only [coe_castSucc, coe_orderIso_apply]\n      split_ifs <;> simp"},{"tailPos":20626,"headPos":20435,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\nh : k + 1 + n' = k + n' + 1\nx : M\ni : Fin k\n⊢ ((snoc xs x ∘ ↑(Fin.cast h)) ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) (↑castSucc i) =\n    snoc (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i) x (↑castSucc i)"],"goalsAfter":[],"content":"· simp only [Function.comp_apply, Fin.snoc_castSucc]\n      refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)\n      simp only [coe_castSucc, coe_orderIso_apply]\n      split_ifs <;> simp"},{"tailPos":20626,"headPos":19680,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"have h : k + 1 + n' = k + n' + 1 := by rw [add_assoc, add_comm 1 n', ← add_assoc]\n    simp only [mapTermRel, Realize, realize_castLe_of_eq h, ih3 (hmn.trans k.succ.le_succ)]\n    refine' forall_congr' fun x => iff_eq_eq.mpr (congr rfl (funext (Fin.lastCases _ fun i => _)))\n    · simp only [Function.comp_apply, val_last, snoc_last]\n      by_cases k < m\n      · rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]\n      · rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp\n    · simp only [Function.comp_apply, Fin.snoc_castSucc]\n      refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)\n      simp only [coe_castSucc, coe_orderIso_apply]\n      split_ifs <;> simp"},{"tailPos":20626,"headPos":19677,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\nn n' m : ℕ\nv : α → M\nxs✝ : Fin (n + n') → M\nhmn✝ : m + n' ≤ n + 1\nk : ℕ\nf✝ : BoundedFormula L α (k + 1)\nih3 :\n  ∀ {xs : Fin (k + 1 + n') → M},\n    m + n' ≤ k + 1 + 1 →\n      (Realize\n          (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) f✝)\n          v xs ↔\n        Realize f✝ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i))\nxs : Fin (k + n') → M\nhmn : m + n' ≤ k + 1\n⊢ Realize\n      (mapTermRel (fun k t => Term.liftAt n' m t) (fun x => id) (fun x => castLE (_ : x + 1 + n' ≤ x + n' + 1)) (∀'f✝))\n      v xs ↔\n    Realize (∀'f✝) v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"· have h : k + 1 + n' = k + n' + 1 := by rw [add_assoc, add_comm 1 n', ← add_assoc]\n    simp only [mapTermRel, Realize, realize_castLe_of_eq h, ih3 (hmn.trans k.succ.le_succ)]\n    refine' forall_congr' fun x => iff_eq_eq.mpr (congr rfl (funext (Fin.lastCases _ fun i => _)))\n    · simp only [Function.comp_apply, val_last, snoc_last]\n      by_cases k < m\n      · rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]\n      · rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp\n    · simp only [Function.comp_apply, Fin.snoc_castSucc]\n      refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)\n      simp only [coe_castSucc, coe_orderIso_apply]\n      split_ifs <;> simp"},{"tailPos":20626,"headPos":19357,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (liftAt n' m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"rw [liftAt]\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 k _ ih3\n  · simp [mapTermRel, Realize]\n  · simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]\n  · simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]\n  · simp only [mapTermRel, Realize, ih1 hmn, ih2 hmn]\n  · have h : k + 1 + n' = k + n' + 1 := by rw [add_assoc, add_comm 1 n', ← add_assoc]\n    simp only [mapTermRel, Realize, realize_castLe_of_eq h, ih3 (hmn.trans k.succ.le_succ)]\n    refine' forall_congr' fun x => iff_eq_eq.mpr (congr rfl (funext (Fin.lastCases _ fun i => _)))\n    · simp only [Function.comp_apply, val_last, snoc_last]\n      by_cases k < m\n      · rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]\n      · rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp\n    · simp only [Function.comp_apply, Fin.snoc_castSucc]\n      refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)\n      simp only [coe_castSucc, coe_orderIso_apply]\n      split_ifs <;> simp"},{"tailPos":19354,"headPos":19352,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (liftAt n' m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"by"},{"tailPos":20626,"headPos":19352,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.105226\nP : Type ?u.105229\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn n' m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + n') → M\nhmn : m + n' ≤ n + 1\n⊢ Realize (liftAt n' m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑(castAdd n') i else ↑(addNat n') i)"],"goalsAfter":[],"content":"by\n  rw [liftAt]\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 k _ ih3\n  · simp [mapTermRel, Realize]\n  · simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]\n  · simp [mapTermRel, Realize, realize_rel, realize_liftAt, Sum.elim_comp_map]\n  · simp only [mapTermRel, Realize, ih1 hmn, ih2 hmn]\n  · have h : k + 1 + n' = k + n' + 1 := by rw [add_assoc, add_comm 1 n', ← add_assoc]\n    simp only [mapTermRel, Realize, realize_castLe_of_eq h, ih3 (hmn.trans k.succ.le_succ)]\n    refine' forall_congr' fun x => iff_eq_eq.mpr (congr rfl (funext (Fin.lastCases _ fun i => _)))\n    · simp only [Function.comp_apply, val_last, snoc_last]\n      by_cases k < m\n      · rw [if_pos h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp only [coe_orderIso_apply, coe_castAdd, val_last, self_eq_add_right]\n        refine'\n          le_antisymm (le_of_add_le_add_left ((hmn.trans (Nat.succ_le_of_lt h)).trans _)) n'.zero_le\n        rw [add_zero]\n      · rw [if_neg h]\n        refine' (congr rfl (ext _)).trans (snoc_last _ _)\n        simp\n    · simp only [Function.comp_apply, Fin.snoc_castSucc]\n      refine' (congr rfl (ext _)).trans (snoc_castSucc _ _ _)\n      simp only [coe_castSucc, coe_orderIso_apply]\n      split_ifs <;> simp"},{"tailPos":21046,"headPos":20990,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.118977\nP : Type ?u.118980\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\nhmn : m ≤ n\n⊢ Realize (liftAt 1 m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑castSucc i else succ i)"],"goalsAfter":[],"content":"simp [realize_liftAt (add_le_add_right hmn 1), castSucc]"},{"tailPos":20987,"headPos":20985,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.118977\nP : Type ?u.118980\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\nhmn : m ≤ n\n⊢ Realize (liftAt 1 m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑castSucc i else succ i)"],"goalsAfter":[],"content":"by"},{"tailPos":21046,"headPos":20985,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.118977\nP : Type ?u.118980\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn m : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\nhmn : m ≤ n\n⊢ Realize (liftAt 1 m φ) v xs ↔ Realize φ v (xs ∘ fun i => if ↑i < m then ↑castSucc i else succ i)"],"goalsAfter":[],"content":"by\n  simp [realize_liftAt (add_le_add_right hmn 1), castSucc]"},{"tailPos":21395,"headPos":21367,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize (liftAt 1 n φ) v xs ↔ Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) ↔ Realize φ v (xs ∘ ↑castSucc)"],"content":"realize_liftAt_one (refl n),"},{"tailPos":21405,"headPos":21396,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) ↔ Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) = Realize φ v (xs ∘ ↑castSucc)"],"content":"iff_eq_eq"},{"tailPos":21406,"headPos":21405,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) = Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) = Realize φ v (xs ∘ ↑castSucc)"],"content":"]"},{"tailPos":21406,"headPos":21363,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize (liftAt 1 n φ) v xs ↔ Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) = Realize φ v (xs ∘ ↑castSucc)"],"content":"rw [realize_liftAt_one (refl n), iff_eq_eq]"},{"tailPos":21458,"headPos":21409,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize φ v (xs ∘ fun i => if ↑i < n then ↑castSucc i else succ i) = Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\ni : Fin n\n⊢ (if ↑i < n then ↑castSucc i else succ i) = ↑castSucc i"],"content":"refine' congr rfl (congr rfl (funext fun i => _))"},{"tailPos":21479,"headPos":21465,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\ni : Fin n\n⊢ (if ↑i < n then ↑castSucc i else succ i) = ↑castSucc i"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\ni : Fin n\n⊢ ↑castSucc i = ↑castSucc i"],"content":"if_pos i.is_lt"},{"tailPos":21480,"headPos":21479,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\ni : Fin n\n⊢ ↑castSucc i = ↑castSucc i"],"goalsAfter":[],"content":"]"},{"tailPos":21480,"headPos":21461,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\ni : Fin n\n⊢ (if ↑i < n then ↑castSucc i else succ i) = ↑castSucc i"],"goalsAfter":[],"content":"rw [if_pos i.is_lt]"},{"tailPos":21480,"headPos":21363,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize (liftAt 1 n φ) v xs ↔ Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":[],"content":"rw [realize_liftAt_one (refl n), iff_eq_eq]\n  refine' congr rfl (congr rfl (funext fun i => _))\n  rw [if_pos i.is_lt]"},{"tailPos":21360,"headPos":21358,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize (liftAt 1 n φ) v xs ↔ Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":[],"content":"by"},{"tailPos":21480,"headPos":21358,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.123113\nP : Type ?u.123116\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin (n + 1) → M\n⊢ Realize (liftAt 1 n φ) v xs ↔ Realize φ v (xs ∘ ↑castSucc)"],"goalsAfter":[],"content":"by\n  rw [realize_liftAt_one (refl n), iff_eq_eq]\n  refine' congr rfl (congr rfl (funext fun i => _))\n  rw [if_pos i.is_lt]"},{"tailPos":21874,"headPos":21856,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (Sum.elim v x) (Term.subst t (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr))) =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (fun a => realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a)) t =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"content":"Term.realize_subst"},{"tailPos":21875,"headPos":21874,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (fun a => realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a)) t =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (fun a => realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a)) t =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"content":"]"},{"tailPos":21875,"headPos":21852,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (Sum.elim v x) (Term.subst t (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr))) =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (fun a => realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a)) t =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"content":"rw [Term.realize_subst]"},{"tailPos":21890,"headPos":21882,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (fun a => realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a)) t =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\na : α ⊕ Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a) =\n    Sum.elim (fun a => realize v (tf a)) x a"],"content":"rcongr a"},{"tailPos":21899,"headPos":21897,"goalsBefore":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\na : α ⊕ Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a) =\n    Sum.elim (fun a => realize v (tf a)) x a"],"goalsAfter":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\na : α ⊕ Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a) =\n    Sum.elim (fun a => realize v (tf a)) x a"],"content":"·"},{"tailPos":21907,"headPos":21900,"goalsBefore":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\na : α ⊕ Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a) =\n    Sum.elim (fun a => realize v (tf a)) x a"],"goalsAfter":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : α\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inl val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inl val✝)","case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"content":"cases a"},{"tailPos":21918,"headPos":21916,"goalsBefore":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : α\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inl val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inl val✝)","case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"goalsAfter":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : α\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inl val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inl val✝)"],"content":"·"},{"tailPos":22005,"headPos":21919,"goalsBefore":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : α\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inl val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inl val✝)"],"goalsAfter":[],"content":"simp only [Sum.elim_inl, Function.comp_apply, Term.realize_relabel, Sum.elim_comp_inl]"},{"tailPos":22005,"headPos":21916,"goalsBefore":["case e_v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : α\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inl val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inl val✝)","case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"goalsAfter":["case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"content":"· simp only [Sum.elim_inl, Function.comp_apply, Term.realize_relabel, Sum.elim_comp_inl]"},{"tailPos":22016,"headPos":22014,"goalsBefore":["case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"goalsAfter":["case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"content":"·"},{"tailPos":22020,"headPos":22017,"goalsBefore":["case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"goalsAfter":[],"content":"rfl"},{"tailPos":22020,"headPos":22014,"goalsBefore":["case e_v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\nval✝ : Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) (Sum.inr val✝)) =\n    Sum.elim (fun a => realize v (tf a)) x (Sum.inr val✝)"],"goalsAfter":[],"content":"· rfl"},{"tailPos":22020,"headPos":21900,"goalsBefore":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\na : α ⊕ Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a) =\n    Sum.elim (fun a => realize v (tf a)) x a"],"goalsAfter":[],"content":"cases a\n        · simp only [Sum.elim_inl, Function.comp_apply, Term.realize_relabel, Sum.elim_comp_inl]\n        · rfl"},{"tailPos":22020,"headPos":21897,"goalsBefore":["case e_v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\na : α ⊕ Fin n\n⊢ realize (Sum.elim v x) (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr) a) =\n    Sum.elim (fun a => realize v (tf a)) x a"],"goalsAfter":[],"content":"· cases a\n        · simp only [Sum.elim_inl, Function.comp_apply, Term.realize_relabel, Sum.elim_comp_inl]\n        · rfl"},{"tailPos":22020,"headPos":21852,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (Sum.elim v x) (Term.subst t (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr))) =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":[],"content":"rw [Term.realize_subst]\n      rcongr a\n      · cases a\n        · simp only [Sum.elim_inl, Function.comp_apply, Term.realize_relabel, Sum.elim_comp_inl]\n        · rfl"},{"tailPos":21845,"headPos":21843,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (Sum.elim v x) (Term.subst t (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr))) =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":[],"content":"by"},{"tailPos":22020,"headPos":21843,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n✝\ntf : α → Term L β\nv : β → M\nxs : Fin n✝ → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nx : Fin n → M\n⊢ realize (Sum.elim v x) (Term.subst t (Sum.elim (Term.relabel Sum.inl ∘ tf) (var ∘ Sum.inr))) =\n    realize (Sum.elim (fun a => realize v (tf a)) x) t"],"goalsAfter":[],"content":"by\n      rw [Term.realize_subst]\n      rcongr a\n      · cases a\n        · simp only [Sum.elim_inl, Function.comp_apply, Term.realize_relabel, Sum.elim_comp_inl]\n        · rfl"},{"tailPos":22034,"headPos":22030,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n\ntf : α → Term L β\nv : β → M\nxs : Fin n → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x"],"goalsAfter":[],"content":"simp only [id_eq, implies_true, forall_const]"},{"tailPos":22029,"headPos":22027,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n\ntf : α → Term L β\nv : β → M\nxs : Fin n → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x"],"goalsAfter":[],"content":"by"},{"tailPos":22034,"headPos":22027,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.124912\nP : Type ?u.124915\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\nφ : BoundedFormula L α n\ntf : α → Term L β\nv : β → M\nxs : Fin n → M\n⊢ ∀ (n : ℕ) (R : Relations L n) (x : Fin n → M), RelMap (id R) x = RelMap R x"],"goalsAfter":[],"content":"by simp"},{"tailPos":22477,"headPos":22421,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs : Fin n → M\n⊢ Realize (restrictFreeVar φ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize φ v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nh : ↑(freeVarFinset falsum) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar falsum (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3"},{"tailPos":22482,"headPos":22480,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nh : ↑(freeVarFinset falsum) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar falsum (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nh : ↑(freeVarFinset falsum) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar falsum (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize falsum v xs"],"content":"·"},{"tailPos":22486,"headPos":22483,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nh : ↑(freeVarFinset falsum) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar falsum (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize falsum v xs"],"goalsAfter":[],"content":"rfl"},{"tailPos":22486,"headPos":22480,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nh : ↑(freeVarFinset falsum) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar falsum (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"content":"· rfl"},{"tailPos":22491,"headPos":22489,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"content":"·"},{"tailPos":22523,"headPos":22492,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"goalsAfter":[],"content":"simp [restrictFreeVar, Realize]"},{"tailPos":22523,"headPos":22489,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (equal t₁✝ t₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (equal t₁✝ t₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"content":"· simp [restrictFreeVar, Realize]"},{"tailPos":22528,"headPos":22526,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs"],"content":"·"},{"tailPos":22560,"headPos":22529,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs"],"goalsAfter":[],"content":"simp [restrictFreeVar, Realize]"},{"tailPos":22560,"headPos":22526,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nh : ↑(freeVarFinset (rel R✝ ts✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (rel R✝ ts✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"content":"· simp [restrictFreeVar, Realize]"},{"tailPos":22565,"headPos":22563,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"·"},{"tailPos":22607,"headPos":22566,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":[],"content":"simp [restrictFreeVar, Realize, ih1, ih2]"},{"tailPos":22607,"headPos":22563,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 :\n  ∀ (h : ↑(freeVarFinset f₁✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₁✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₁✝ v xs\nih2 :\n  ∀ (h : ↑(freeVarFinset f₂✝) ⊆ s) {xs : Fin n✝ → M},\n    Realize (restrictFreeVar f₂✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f₂✝ v xs\nh : ↑(freeVarFinset (f₁✝ ⟹ f₂✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (f₁✝ ⟹ f₂✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"content":"· simp [restrictFreeVar, Realize, ih1, ih2]"},{"tailPos":22612,"headPos":22610,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"content":"·"},{"tailPos":22649,"headPos":22613,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"simp [restrictFreeVar, Realize, ih3]"},{"tailPos":22649,"headPos":22610,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh✝ : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 :\n  ∀ (h : ↑(freeVarFinset f✝) ⊆ s) {xs : Fin (n✝ + 1) → M},\n    Realize (restrictFreeVar f✝ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize f✝ v xs\nh : ↑(freeVarFinset (∀'f✝)) ⊆ s\nxs : Fin n✝ → M\n⊢ Realize (restrictFreeVar (∀'f✝) (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"· simp [restrictFreeVar, Realize, ih3]"},{"tailPos":22649,"headPos":22421,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs : Fin n → M\n⊢ Realize (restrictFreeVar φ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp [restrictFreeVar, Realize]\n  · simp [restrictFreeVar, Realize]\n  · simp [restrictFreeVar, Realize, ih1, ih2]\n  · simp [restrictFreeVar, Realize, ih3]"},{"tailPos":22418,"headPos":22416,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs : Fin n → M\n⊢ Realize (restrictFreeVar φ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":22649,"headPos":22416,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.135581\nP : Type ?u.135584\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : DecidableEq α\nn : ℕ\nφ : BoundedFormula L α n\ns : Set α\nh : ↑(freeVarFinset φ) ⊆ s\nv : α → M\nxs : Fin n → M\n⊢ Realize (restrictFreeVar φ (Set.inclusion h)) (v ∘ Subtype.val) xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp [restrictFreeVar, Realize]\n  · simp [restrictFreeVar, Realize]\n  · simp [restrictFreeVar, Realize, ih1, ih2]\n  · simp [restrictFreeVar, Realize, ih3]"},{"tailPos":23155,"headPos":23063,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nφ : BoundedFormula (L[[α]]) β n\nv : β → M\nxs : Fin n → M\n⊢ Realize (↑constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) v) xs ↔ Realize φ v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (↑((fun x => Equiv.sumEmpty (Relations L x) (Relations (constantsOn α) x)) n) R) xs = RelMap R xs"],"content":"refine' realize_mapTermRel_id (fun n t xs => realize_constantsVarsEquivLeft) fun n R xs => _"},{"tailPos":23280,"headPos":23162,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (↑((fun x => Equiv.sumEmpty (Relations L x) (Relations (constantsOn α) x)) n) R) xs = RelMap R xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs =\n    RelMap R xs"],"content":"← (lhomWithConstants L α).map_onRelation\n      (Equiv.sumEmpty (L.Relations n) ((constantsOn α).Relations n) R) xs"},{"tailPos":23281,"headPos":23280,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs =\n    RelMap R xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs =\n    RelMap R xs"],"content":"]"},{"tailPos":23281,"headPos":23158,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (↑((fun x => Equiv.sumEmpty (Relations L x) (Relations (constantsOn α) x)) n) R) xs = RelMap R xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs =\n    RelMap R xs"],"content":"rw [← (lhomWithConstants L α).map_onRelation\n      (Equiv.sumEmpty (L.Relations n) ((constantsOn α).Relations n) R) xs]"},{"tailPos":23290,"headPos":23284,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs =\n    RelMap R xs"],"goalsAfter":["case a\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs ↔\n    RelMap R xs"],"content":"rcongr"},{"tailPos":23310,"headPos":23293,"goalsBefore":["case a\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nR : Relations (L[[α]]) n\nxs : Fin n → M\n⊢ RelMap (LHom.onRelation (lhomWithConstants L α) (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) R))\n      xs ↔\n    RelMap R xs"],"goalsAfter":["case a.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations L n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inl R)))\n      xs ↔\n    RelMap (Sum.inl R) xs","case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"content":"cases' R with R R"},{"tailPos":23315,"headPos":23313,"goalsBefore":["case a.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations L n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inl R)))\n      xs ↔\n    RelMap (Sum.inl R) xs","case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"goalsAfter":["case a.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations L n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inl R)))\n      xs ↔\n    RelMap (Sum.inl R) xs"],"content":"·"},{"tailPos":23320,"headPos":23316,"goalsBefore":["case a.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations L n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inl R)))\n      xs ↔\n    RelMap (Sum.inl R) xs"],"goalsAfter":[],"content":"simp only [constantsOn, mk₂_Relations, Equiv.sumEmpty_apply_inl, lhomWithConstants_onRelation]"},{"tailPos":23320,"headPos":23313,"goalsBefore":["case a.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations L n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inl R)))\n      xs ↔\n    RelMap (Sum.inl R) xs","case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"goalsAfter":["case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"content":"· simp"},{"tailPos":23325,"headPos":23323,"goalsBefore":["case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"goalsAfter":["case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"content":"·"},{"tailPos":23345,"headPos":23326,"goalsBefore":["case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"goalsAfter":[],"content":"exact isEmptyElim R"},{"tailPos":23345,"headPos":23323,"goalsBefore":["case a.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn✝ : ℕ\nφ : BoundedFormula (L[[α]]) β n✝\nv : β → M\nxs✝ : Fin n✝ → M\nn : ℕ\nxs : Fin n → M\nR : Relations (constantsOn α) n\n⊢ RelMap\n      (LHom.onRelation (lhomWithConstants L α)\n        (↑(Equiv.sumEmpty (Relations L n) (Relations (constantsOn α) n)) (Sum.inr R)))\n      xs ↔\n    RelMap (Sum.inr R) xs"],"goalsAfter":[],"content":"· exact isEmptyElim R"},{"tailPos":23345,"headPos":23063,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nφ : BoundedFormula (L[[α]]) β n\nv : β → M\nxs : Fin n → M\n⊢ Realize (↑constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) v) xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"refine' realize_mapTermRel_id (fun n t xs => realize_constantsVarsEquivLeft) fun n R xs => _\n  rw [← (lhomWithConstants L α).map_onRelation\n      (Equiv.sumEmpty (L.Relations n) ((constantsOn α).Relations n) R) xs]\n  rcongr\n  cases' R with R R\n  · simp\n  · exact isEmptyElim R"},{"tailPos":23060,"headPos":23058,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nφ : BoundedFormula (L[[α]]) β n\nv : β → M\nxs : Fin n → M\n⊢ Realize (↑constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) v) xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":23345,"headPos":23058,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.161517\nP : Type ?u.161520\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nn : ℕ\nφ : BoundedFormula (L[[α]]) β n\nv : β → M\nxs : Fin n → M\n⊢ Realize (↑constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) v) xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by\n  refine' realize_mapTermRel_id (fun n t xs => realize_constantsVarsEquivLeft) fun n R xs => _\n  rw [← (lhomWithConstants L α).map_onRelation\n      (Equiv.sumEmpty (L.Relations n) ((constantsOn α).Relations n) R) xs]\n  rcongr\n  cases' R with R R\n  · simp\n  · exact isEmptyElim R"},{"tailPos":23740,"headPos":23677,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs : Fin k → M\n⊢ Realize (↑(relabelEquiv g) φ) v xs ↔ Realize φ (v ∘ ↑g) xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs : Fin k → M\n⊢ Realize\n      (mapTermRel (fun n => ↑(Term.relabelEquiv (Equiv.sumCongr g (_root_.Equiv.refl (Fin n))))) (fun n => id)\n        (fun x => id) φ)\n      v xs ↔\n    Realize φ (v ∘ ↑g) xs"],"content":"simp only [relabelEquiv, mapTermRelEquiv_apply, Equiv.coe_refl]"},{"tailPos":23807,"headPos":23743,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs : Fin k → M\n⊢ Realize\n      (mapTermRel (fun n => ↑(Term.relabelEquiv (Equiv.sumCongr g (_root_.Equiv.refl (Fin n))))) (fun n => id)\n        (fun x => id) φ)\n      v xs ↔\n    Realize φ (v ∘ ↑g) xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ realize (Sum.elim v xs) (↑(Term.relabelEquiv (Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) t) =\n    realize (Sum.elim (v ∘ ↑g) xs) t"],"content":"refine' realize_mapTermRel_id (fun n t xs => _) fun _ _ _ => rfl"},{"tailPos":23862,"headPos":23810,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ realize (Sum.elim v xs) (↑(Term.relabelEquiv (Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) t) =\n    realize (Sum.elim (v ∘ ↑g) xs) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ realize (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) t = realize (Sum.elim (v ∘ ↑g) xs) t"],"content":"simp only [relabelEquiv_apply, Term.realize_relabel]"},{"tailPos":23896,"headPos":23865,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ realize (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) t = realize (Sum.elim (v ∘ ↑g) xs) t"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n))) = Sum.elim (v ∘ ↑g) xs"],"content":"refine' congr (congr rfl _) rfl"},{"tailPos":23910,"headPos":23899,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n))) = Sum.elim (v ∘ ↑g) xs"],"goalsAfter":["case h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : α\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inl i) = Sum.elim (v ∘ ↑g) xs (Sum.inl i)","case h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inr i) = Sum.elim (v ∘ ↑g) xs (Sum.inr i)"],"content":"ext (i | i)"},{"tailPos":23914,"headPos":23911,"goalsBefore":["case h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : α\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inl i) = Sum.elim (v ∘ ↑g) xs (Sum.inl i)","case h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inr i) = Sum.elim (v ∘ ↑g) xs (Sum.inr i)"],"goalsAfter":["case h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : α\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inl i) = Sum.elim (v ∘ ↑g) xs (Sum.inl i)","case h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inr i) = Sum.elim (v ∘ ↑g) xs (Sum.inr i)"],"content":"<;>"},{"tailPos":23918,"headPos":23915,"goalsBefore":["case h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : α\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inl i) = Sum.elim (v ∘ ↑g) xs (Sum.inl i)"],"goalsAfter":[],"content":"rfl"},{"tailPos":23918,"headPos":23915,"goalsBefore":["case h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\ni : Fin n\n⊢ (Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n)))) (Sum.inr i) = Sum.elim (v ∘ ↑g) xs (Sum.inr i)"],"goalsAfter":[],"content":"rfl"},{"tailPos":23918,"headPos":23899,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs✝ : Fin k → M\nn : ℕ\nt : Term L (α ⊕ Fin n)\nxs : Fin n → M\n⊢ Sum.elim v xs ∘ ↑(Equiv.sumCongr g (_root_.Equiv.refl (Fin n))) = Sum.elim (v ∘ ↑g) xs"],"goalsAfter":[],"content":"ext (i | i) <;> rfl"},{"tailPos":23918,"headPos":23677,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs : Fin k → M\n⊢ Realize (↑(relabelEquiv g) φ) v xs ↔ Realize φ (v ∘ ↑g) xs"],"goalsAfter":[],"content":"simp only [relabelEquiv, mapTermRelEquiv_apply, Equiv.coe_refl]\n  refine' realize_mapTermRel_id (fun n t xs => _) fun _ _ _ => rfl\n  simp only [relabelEquiv_apply, Term.realize_relabel]\n  refine' congr (congr rfl _) rfl\n  ext (i | i) <;> rfl"},{"tailPos":23674,"headPos":23672,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs : Fin k → M\n⊢ Realize (↑(relabelEquiv g) φ) v xs ↔ Realize φ (v ∘ ↑g) xs"],"goalsAfter":[],"content":"by"},{"tailPos":23918,"headPos":23672,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.163438\nP : Type ?u.163441\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ng : α ≃ β\nk : ℕ\nφ : BoundedFormula L α k\nv : β → M\nxs : Fin k → M\n⊢ Realize (↑(relabelEquiv g) φ) v xs ↔ Realize φ (v ∘ ↑g) xs"],"goalsAfter":[],"content":"by\n  simp only [relabelEquiv, mapTermRelEquiv_apply, Equiv.coe_refl]\n  refine' realize_mapTermRel_id (fun n t xs => _) fun _ _ _ => rfl\n  simp only [relabelEquiv_apply, Term.realize_relabel]\n  refine' congr (congr rfl _) rfl\n  ext (i | i) <;> rfl"},{"tailPos":24250,"headPos":24241,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (∀'liftAt 1 n φ) v xs ↔ Realize φ v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\n⊢ Realize (∀'liftAt 1 n φ) v xs ↔ Realize φ v xs"],"content":"inhabit M"},{"tailPos":24301,"headPos":24253,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\n⊢ Realize (∀'liftAt 1 n φ) v xs ↔ Realize φ v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\n⊢ (∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)) ↔ Realize φ v xs"],"content":"simp only [realize_all, realize_liftAt_one_self]"},{"tailPos":24342,"headPos":24304,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\n⊢ (∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)) ↔ Realize φ v xs"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\n⊢ Realize φ v xs","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"content":"refine' ⟨fun h => _, fun h a => _⟩"},{"tailPos":24347,"headPos":24345,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\n⊢ Realize φ v xs","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\n⊢ Realize φ v xs"],"content":"·"},{"tailPos":24402,"headPos":24348,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\n⊢ Realize φ v xs"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\ni : Fin n\n⊢ (snoc xs default ∘ ↑castSucc) i = xs i"],"content":"refine' (congr rfl (funext fun i => _)).mp (h default)"},{"tailPos":24411,"headPos":24407,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\ni : Fin n\n⊢ (snoc xs default ∘ ↑castSucc) i = xs i"],"goalsAfter":[],"content":"simp only [Function.comp_apply, snoc_castSucc]"},{"tailPos":24411,"headPos":24348,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\n⊢ Realize φ v xs"],"goalsAfter":[],"content":"refine' (congr rfl (funext fun i => _)).mp (h default)\n    simp"},{"tailPos":24411,"headPos":24345,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : ∀ (a : M), Realize φ v (snoc xs a ∘ ↑castSucc)\n⊢ Realize φ v xs","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"content":"· refine' (congr rfl (funext fun i => _)).mp (h default)\n    simp"},{"tailPos":24416,"headPos":24414,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"content":"·"},{"tailPos":24461,"headPos":24417,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\ni : Fin n\n⊢ xs i = (snoc xs a ∘ ↑castSucc) i"],"content":"refine' (congr rfl (funext fun i => _)).mp h"},{"tailPos":24470,"headPos":24466,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\ni : Fin n\n⊢ xs i = (snoc xs a ∘ ↑castSucc) i"],"goalsAfter":[],"content":"simp only [Function.comp_apply, snoc_castSucc]"},{"tailPos":24470,"headPos":24417,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"goalsAfter":[],"content":"refine' (congr rfl (funext fun i => _)).mp h\n    simp"},{"tailPos":24470,"headPos":24414,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\ninhabited_h : Inhabited M\nh : Realize φ v xs\na : M\n⊢ Realize φ v (snoc xs a ∘ ↑castSucc)"],"goalsAfter":[],"content":"· refine' (congr rfl (funext fun i => _)).mp h\n    simp"},{"tailPos":24470,"headPos":24241,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (∀'liftAt 1 n φ) v xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"inhabit M\n  simp only [realize_all, realize_liftAt_one_self]\n  refine' ⟨fun h => _, fun h a => _⟩\n  · refine' (congr rfl (funext fun i => _)).mp (h default)\n    simp\n  · refine' (congr rfl (funext fun i => _)).mp h\n    simp"},{"tailPos":24238,"headPos":24236,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (∀'liftAt 1 n φ) v xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":24470,"headPos":24236,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.165049\nP : Type ?u.165052\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nn : ℕ\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (∀'liftAt 1 n φ) v xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by\n  inhabit M\n  simp only [realize_all, realize_liftAt_one_self]\n  refine' ⟨fun h => _, fun h a => _⟩\n  · refine' (congr rfl (funext fun i => _)).mp (h default)\n    simp\n  · refine' (congr rfl (funext fun i => _)).mp h\n    simp"},{"tailPos":24879,"headPos":24828,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsQF φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImpRight φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"induction' hψ with _ _ hψ _ _ _hψ ih _ _ _hψ ih"},{"tailPos":24884,"headPos":24882,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs"],"content":"·"},{"tailPos":24909,"headPos":24889,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (φ ⟹ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs"],"content":"hψ.toPrenexImpRight"},{"tailPos":24910,"headPos":24909,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (φ ⟹ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs"],"goalsAfter":[],"content":"]"},{"tailPos":24910,"headPos":24885,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs"],"goalsAfter":[],"content":"rw [hψ.toPrenexImpRight]"},{"tailPos":24910,"headPos":24882,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhψ : IsQF φ✝\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"· rw [hψ.toPrenexImpRight]"},{"tailPos":24915,"headPos":24913,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs"],"content":"·"},{"tailPos":24977,"headPos":24916,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∀ (a : M), Realize (liftAt 1 n✝ φ ⟹ φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∀'φ✝) v xs"],"content":"refine' _root_.trans (forall_congr' fun _ => ih hφ.liftAt) _"},{"tailPos":25063,"headPos":24982,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∀ (a : M), Realize (liftAt 1 n✝ φ ⟹ φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∀'φ✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∀ (a : M), Realize φ v xs → Realize φ✝ v (snoc xs a)) ↔ Realize φ v xs → ∀ (a : M), Realize φ✝ v (snoc xs a)"],"content":"simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]"},{"tailPos":25126,"headPos":25068,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∀ (a : M), Realize φ v xs → Realize φ✝ v (snoc xs a)) ↔ Realize φ v xs → ∀ (a : M), Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"exact ⟨fun h1 a h2 => h1 h2 a, fun h1 h2 a => h1 a h2⟩"},{"tailPos":25126,"headPos":24916,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs"],"goalsAfter":[],"content":"refine' _root_.trans (forall_congr' fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    exact ⟨fun h1 a h2 => h1 h2 a, fun h1 h2 a => h1 a h2⟩"},{"tailPos":25126,"headPos":24913,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∀'φ✝)) v xs ↔ Realize (φ ⟹ ∀'φ✝) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"· refine' _root_.trans (forall_congr' fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    exact ⟨fun h1 a h2 => h1 h2 a, fun h1 h2 a => h1 a h2⟩"},{"tailPos":25131,"headPos":25129,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"·"},{"tailPos":25155,"headPos":25132,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (∃'toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"unfold toPrenexImpRight"},{"tailPos":25174,"headPos":25164,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (∃'toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"realize_ex"},{"tailPos":25175,"headPos":25174,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"]"},{"tailPos":25175,"headPos":25160,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (∃'toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"rw [realize_ex]"},{"tailPos":25240,"headPos":25180,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (toPrenexImpRight (liftAt 1 n✝ φ) φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (liftAt 1 n✝ φ ⟹ φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"content":"refine' _root_.trans (exists_congr fun _ => ih hφ.liftAt) _"},{"tailPos":25325,"headPos":25245,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize (liftAt 1 n✝ φ ⟹ φ✝) v (snoc xs a)) ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) ↔ Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)"],"content":"simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_ex]"},{"tailPos":25358,"headPos":25330,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) ↔ Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)"],"goalsAfter":["case ex.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) → Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)","case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"refine' ⟨_, fun h' => _⟩"},{"tailPos":25365,"headPos":25363,"goalsBefore":["case ex.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) → Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)","case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case ex.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) → Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)"],"content":"·"},{"tailPos":25386,"headPos":25366,"goalsBefore":["case ex.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) → Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)"],"goalsAfter":["case ex.refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\na : M\nha : Realize φ v xs → Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a)"],"content":"rintro ⟨a, ha⟩ h"},{"tailPos":25412,"headPos":25393,"goalsBefore":["case ex.refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\na : M\nha : Realize φ v xs → Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"exact ⟨a, ha h⟩"},{"tailPos":25412,"headPos":25366,"goalsBefore":["case ex.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) → Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"rintro ⟨a, ha⟩ h\n      exact ⟨a, ha h⟩"},{"tailPos":25412,"headPos":25363,"goalsBefore":["case ex.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ (∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)) → Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)","case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"· rintro ⟨a, ha⟩ h\n      exact ⟨a, ha h⟩"},{"tailPos":25419,"headPos":25417,"goalsBefore":["case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"·"},{"tailPos":25444,"headPos":25420,"goalsBefore":["case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"by_cases φ.Realize v xs"},{"tailPos":25453,"headPos":25451,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"·"},{"tailPos":25480,"headPos":25454,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case pos.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\na : M\nha : Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"obtain ⟨a, ha⟩ := h' h"},{"tailPos":25515,"headPos":25489,"goalsBefore":["case pos.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\na : M\nha : Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"exact ⟨a, fun _ => ha⟩"},{"tailPos":25515,"headPos":25454,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩"},{"tailPos":25515,"headPos":25451,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"· obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩"},{"tailPos":25524,"headPos":25522,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"·"},{"tailPos":25534,"headPos":25525,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\ninhabited_h : Inhabited M\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"content":"inhabit M"},{"tailPos":25587,"headPos":25543,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\ninhabited_h : Inhabited M\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":25525,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":25522,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\nh : ¬Realize φ v xs\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"· inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":25420,"goalsBefore":["case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"by_cases φ.Realize v xs\n      · obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩\n      · inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":25417,"goalsBefore":["case ex.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\nh' : Realize φ v xs → ∃ a, Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ v xs → Realize φ✝ v (snoc xs a)"],"goalsAfter":[],"content":"· by_cases φ.Realize v xs\n      · obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩\n      · inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":25132,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":[],"content":"unfold toPrenexImpRight\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_ex]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ⟨a, ha h⟩\n    · by_cases φ.Realize v xs\n      · obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩\n      · inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":25129,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝² ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ✝¹ ψ : BoundedFormula L α n\nhφ✝ : IsQF φ✝¹\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hψ : IsPrenex φ✝\nih :\n  ∀ {φ : BoundedFormula L α (n✝ + 1)},\n    IsQF φ → ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenexImpRight φ φ✝) v xs ↔ Realize (φ ⟹ φ✝) v xs\nφ : BoundedFormula L α n✝\nhφ : IsQF φ\nxs : Fin n✝ → M\n⊢ Realize (toPrenexImpRight φ (∃'φ✝)) v xs ↔ Realize (φ ⟹ ∃'φ✝) v xs"],"goalsAfter":[],"content":"· unfold toPrenexImpRight\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_ex]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ⟨a, ha h⟩\n    · by_cases φ.Realize v xs\n      · obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩\n      · inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25587,"headPos":24828,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsQF φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImpRight φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":[],"content":"induction' hψ with _ _ hψ _ _ _hψ ih _ _ _hψ ih\n  · rw [hψ.toPrenexImpRight]\n  · refine' _root_.trans (forall_congr' fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    exact ⟨fun h1 a h2 => h1 h2 a, fun h1 h2 a => h1 a h2⟩\n  · unfold toPrenexImpRight\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_ex]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ⟨a, ha h⟩\n    · by_cases φ.Realize v xs\n      · obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩\n      · inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":24825,"headPos":24823,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsQF φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImpRight φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":[],"content":"by"},{"tailPos":25587,"headPos":24823,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.166214\nP : Type ?u.166217\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsQF φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImpRight φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":[],"content":"by\n  induction' hψ with _ _ hψ _ _ _hψ ih _ _ _hψ ih\n  · rw [hψ.toPrenexImpRight]\n  · refine' _root_.trans (forall_congr' fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    exact ⟨fun h1 a h2 => h1 h2 a, fun h1 h2 a => h1 a h2⟩\n  · unfold toPrenexImpRight\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hφ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_ex]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ⟨a, ha h⟩\n    · by_cases φ.Realize v xs\n      · obtain ⟨a, ha⟩ := h' h\n        exact ⟨a, fun _ => ha⟩\n      · inhabit M\n        exact ⟨default, fun h'' => (h h'').elim⟩"},{"tailPos":25940,"headPos":25931,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsPrenex φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nhφ : IsPrenex φ\nv : α → M\nxs : Fin n → M\n⊢ ∀ {ψ : BoundedFormula L α n}, IsPrenex ψ → (Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs)"],"content":"revert ψ"},{"tailPos":25994,"headPos":25943,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nhφ : IsPrenex φ\nv : α → M\nxs : Fin n → M\n⊢ ∀ {ψ : BoundedFormula L α n}, IsPrenex ψ → (Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs)"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs)","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs)"],"content":"induction' hφ with _ _ hφ _ _ _hφ ih _ _ _hφ ih"},{"tailPos":25998,"headPos":25995,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs)","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs)"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs)","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs)"],"content":"<;>"},{"tailPos":26011,"headPos":25999,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"content":"intro ψ hψ"},{"tailPos":26011,"headPos":25999,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"intro ψ hψ"},{"tailPos":26011,"headPos":25999,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\n⊢ ∀ {ψ : BoundedFormula L α n✝}, IsPrenex ψ → (Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs)"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"content":"intro ψ hψ"},{"tailPos":26011,"headPos":25943,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nhφ : IsPrenex φ\nv : α → M\nxs : Fin n → M\n⊢ ∀ {ψ : BoundedFormula L α n}, IsPrenex ψ → (Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs)"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"content":"induction' hφ with _ _ hφ _ _ _hφ ih _ _ _hφ ih <;> intro ψ hψ"},{"tailPos":26016,"headPos":26014,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"content":"·"},{"tailPos":26036,"headPos":26021,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImpRight φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"content":"hφ.toPrenexImp"},{"tailPos":26037,"headPos":26036,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImpRight φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImpRight φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"content":"]"},{"tailPos":26037,"headPos":26017,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"goalsAfter":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImpRight φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"content":"rw [hφ.toPrenexImp]"},{"tailPos":26080,"headPos":26042,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImpRight φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"goalsAfter":[],"content":"exact realize_toPrenexImpRight hφ hψ"},{"tailPos":26080,"headPos":26017,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs"],"goalsAfter":[],"content":"rw [hφ.toPrenexImp]\n    exact realize_toPrenexImpRight hφ hψ"},{"tailPos":26080,"headPos":26014,"goalsBefore":["case of_isQF\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α n✝\nhφ : IsQF φ✝\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"content":"· rw [hφ.toPrenexImp]\n    exact realize_toPrenexImpRight hφ hψ"},{"tailPos":26085,"headPos":26083,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"·"},{"tailPos":26104,"headPos":26086,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (∃'toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"unfold toPrenexImp"},{"tailPos":26123,"headPos":26113,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (∃'toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"realize_ex"},{"tailPos":26124,"headPos":26123,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"]"},{"tailPos":26124,"headPos":26109,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (∃'toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"rw [realize_ex]"},{"tailPos":26189,"headPos":26129,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (toPrenexImp φ✝ (liftAt 1 n✝ ψ)) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (φ✝ ⟹ liftAt 1 n✝ ψ) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"content":"refine' _root_.trans (exists_congr fun _ => ih hψ.liftAt) _"},{"tailPos":26275,"headPos":26194,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize (φ✝ ⟹ liftAt 1 n✝ ψ) v (snoc xs a)) ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) ↔ (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs"],"content":"simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]"},{"tailPos":26308,"headPos":26280,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) ↔ (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs"],"goalsAfter":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) → (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs","case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"refine' ⟨_, fun h' => _⟩"},{"tailPos":26315,"headPos":26313,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) → (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs","case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) → (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs"],"content":"·"},{"tailPos":26336,"headPos":26316,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) → (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs"],"goalsAfter":["case all.refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\na : M\nha : Realize φ✝ v (snoc xs a) → Realize ψ v xs\nh : ∀ (a : M), Realize φ✝ v (snoc xs a)\n⊢ Realize ψ v xs"],"content":"rintro ⟨a, ha⟩ h"},{"tailPos":26357,"headPos":26343,"goalsBefore":["case all.refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\na : M\nha : Realize φ✝ v (snoc xs a) → Realize ψ v xs\nh : ∀ (a : M), Realize φ✝ v (snoc xs a)\n⊢ Realize ψ v xs"],"goalsAfter":[],"content":"exact ha (h a)"},{"tailPos":26357,"headPos":26316,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) → (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs"],"goalsAfter":[],"content":"rintro ⟨a, ha⟩ h\n      exact ha (h a)"},{"tailPos":26357,"headPos":26313,"goalsBefore":["case all.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs) → (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs","case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"· rintro ⟨a, ha⟩ h\n      exact ha (h a)"},{"tailPos":26364,"headPos":26362,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"·"},{"tailPos":26389,"headPos":26365,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"by_cases ψ.Realize v xs"},{"tailPos":26398,"headPos":26396,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"·"},{"tailPos":26408,"headPos":26399,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\ninhabited_h : Inhabited M\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"inhabit M"},{"tailPos":26451,"headPos":26417,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\ninhabited_h : Inhabited M\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"exact ⟨default, fun _h'' => h⟩"},{"tailPos":26451,"headPos":26399,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"inhabit M\n        exact ⟨default, fun _h'' => h⟩"},{"tailPos":26451,"headPos":26396,"goalsBefore":["case pos\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs","case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"· inhabit M\n        exact ⟨default, fun _h'' => h⟩"},{"tailPos":26460,"headPos":26458,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"·"},{"tailPos":26506,"headPos":26461,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":["case neg.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\na : M\nha : ¬Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"content":"obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')"},{"tailPos":26550,"headPos":26515,"goalsBefore":["case neg.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\na : M\nha : ¬Realize φ✝ v (snoc xs a)\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26550,"headPos":26461,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26550,"headPos":26458,"goalsBefore":["case neg\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\nh : ¬Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"· obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26550,"headPos":26365,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"by_cases ψ.Realize v xs\n      · inhabit M\n        exact ⟨default, fun _h'' => h⟩\n      · obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26550,"headPos":26362,"goalsBefore":["case all.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\nh' : (∀ (a : M), Realize φ✝ v (snoc xs a)) → Realize ψ v xs\n⊢ ∃ a, Realize φ✝ v (snoc xs a) → Realize ψ v xs"],"goalsAfter":[],"content":"· by_cases ψ.Realize v xs\n      · inhabit M\n        exact ⟨default, fun _h'' => h⟩\n      · obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26550,"headPos":26086,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs"],"goalsAfter":[],"content":"unfold toPrenexImp\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hψ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ha (h a)\n    · by_cases ψ.Realize v xs\n      · inhabit M\n        exact ⟨default, fun _h'' => h⟩\n      · obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26550,"headPos":26083,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∀'φ✝) ψ) v xs ↔ Realize (∀'φ✝ ⟹ ψ) v xs","case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"content":"· unfold toPrenexImp\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hψ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ha (h a)\n    · by_cases ψ.Realize v xs\n      · inhabit M\n        exact ⟨default, fun _h'' => h⟩\n      · obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩"},{"tailPos":26555,"headPos":26553,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"content":"·"},{"tailPos":26617,"headPos":26556,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∀ (a : M), Realize (φ✝ ⟹ liftAt 1 n✝ ψ) v (snoc xs a)) ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"content":"refine' _root_.trans (forall_congr' fun _ => ih hψ.liftAt) _"},{"tailPos":26626,"headPos":26622,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ (∀ (a : M), Realize (φ✝ ⟹ liftAt 1 n✝ ψ) v (snoc xs a)) ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":[],"content":"simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_ex, forall_exists_index]"},{"tailPos":26626,"headPos":26556,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":[],"content":"refine' _root_.trans (forall_congr' fun _ => ih hψ.liftAt) _\n    simp"},{"tailPos":26626,"headPos":26553,"goalsBefore":["case ex\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝¹ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝¹ : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nφ✝ : BoundedFormula L α (n✝ + 1)\n_hφ : IsPrenex φ✝\nih :\n  ∀ {xs : Fin (n✝ + 1) → M} {ψ : BoundedFormula L α (n✝ + 1)},\n    IsPrenex ψ → (Realize (toPrenexImp φ✝ ψ) v xs ↔ Realize (φ✝ ⟹ ψ) v xs)\nxs : Fin n✝ → M\nψ : BoundedFormula L α n✝\nhψ : IsPrenex ψ\n⊢ Realize (toPrenexImp (∃'φ✝) ψ) v xs ↔ Realize (∃'φ✝ ⟹ ψ) v xs"],"goalsAfter":[],"content":"· refine' _root_.trans (forall_congr' fun _ => ih hψ.liftAt) _\n    simp"},{"tailPos":26626,"headPos":25931,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsPrenex φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":[],"content":"revert ψ\n  induction' hφ with _ _ hφ _ _ _hφ ih _ _ _hφ ih <;> intro ψ hψ\n  · rw [hφ.toPrenexImp]\n    exact realize_toPrenexImpRight hφ hψ\n  · unfold toPrenexImp\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hψ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ha (h a)\n    · by_cases ψ.Realize v xs\n      · inhabit M\n        exact ⟨default, fun _h'' => h⟩\n      · obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩\n  · refine' _root_.trans (forall_congr' fun _ => ih hψ.liftAt) _\n    simp"},{"tailPos":25928,"headPos":25926,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsPrenex φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":[],"content":"by"},{"tailPos":26626,"headPos":25926,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.197102\nP : Type ?u.197105\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ✝ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs✝ : Fin l → M\ninst✝ : Nonempty M\nφ ψ : BoundedFormula L α n\nhφ : IsPrenex φ\nhψ : IsPrenex ψ\nv : α → M\nxs : Fin n → M\n⊢ Realize (toPrenexImp φ ψ) v xs ↔ Realize (φ ⟹ ψ) v xs"],"goalsAfter":[],"content":"by\n  revert ψ\n  induction' hφ with _ _ hφ _ _ _hφ ih _ _ _hφ ih <;> intro ψ hψ\n  · rw [hφ.toPrenexImp]\n    exact realize_toPrenexImpRight hφ hψ\n  · unfold toPrenexImp\n    rw [realize_ex]\n    refine' _root_.trans (exists_congr fun _ => ih hψ.liftAt) _\n    simp only [realize_imp, realize_liftAt_one_self, snoc_comp_castSucc, realize_all]\n    refine' ⟨_, fun h' => _⟩\n    · rintro ⟨a, ha⟩ h\n      exact ha (h a)\n    · by_cases ψ.Realize v xs\n      · inhabit M\n        exact ⟨default, fun _h'' => h⟩\n      · obtain ⟨a, ha⟩ := not_forall.1 (h ∘ h')\n        exact ⟨a, fun h => (ha h).elim⟩\n  · refine' _root_.trans (forall_congr' fun _ => ih hψ.liftAt) _\n    simp"},{"tailPos":26963,"headPos":26909,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\n⊢ ∀ {xs : Fin n → M}, Realize (toPrenex φ) v xs ↔ Realize φ v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex falsum) v xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ f1 f2 h1 h2 _ _ h"},{"tailPos":26967,"headPos":26966,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex falsum) v xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex falsum) v xs ↔ Realize falsum v xs"],"content":"."},{"tailPos":26981,"headPos":26968,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex falsum) v xs ↔ Realize falsum v xs"],"goalsAfter":[],"content":"exact Iff.rfl"},{"tailPos":26981,"headPos":26966,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex falsum) v xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":". exact Iff.rfl"},{"tailPos":26985,"headPos":26984,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"content":"."},{"tailPos":26999,"headPos":26986,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"goalsAfter":[],"content":"exact Iff.rfl"},{"tailPos":26999,"headPos":26984,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":". exact Iff.rfl"},{"tailPos":27003,"headPos":27002,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs"],"content":"."},{"tailPos":27017,"headPos":27004,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs"],"goalsAfter":[],"content":"exact Iff.rfl"},{"tailPos":27017,"headPos":27002,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":". exact Iff.rfl"},{"tailPos":27022,"headPos":27020,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs"],"content":"·"},{"tailPos":27029,"headPos":27023,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (f1 ⟹ f2)) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"content":"intros"},{"tailPos":27047,"headPos":27038,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (f1 ⟹ f2)) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenexImp (toPrenex f1) (toPrenex f2)) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"content":"toPrenex,"},{"tailPos":27110,"headPos":27048,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenexImp (toPrenex f1) (toPrenex f2)) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex f1 ⟹ toPrenex f2) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"content":"realize_toPrenexImp f1.toPrenex_isPrenex f2.toPrenex_isPrenex,"},{"tailPos":27123,"headPos":27111,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex f1 ⟹ toPrenex f2) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex f1) v xs✝ → Realize (toPrenex f2) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"content":"realize_imp,"},{"tailPos":27142,"headPos":27130,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex f1) v xs✝ → Realize (toPrenex f2) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex f1) v xs✝ → Realize (toPrenex f2) v xs✝ ↔ Realize f1 v xs✝ → Realize f2 v xs✝"],"content":"realize_imp,"},{"tailPos":27146,"headPos":27143,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex f1) v xs✝ → Realize (toPrenex f2) v xs✝ ↔ Realize f1 v xs✝ → Realize f2 v xs✝"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize f1 v xs✝ → Realize (toPrenex f2) v xs✝ ↔ Realize f1 v xs✝ → Realize f2 v xs✝"],"content":"h1,"},{"tailPos":27149,"headPos":27147,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize f1 v xs✝ → Realize (toPrenex f2) v xs✝ ↔ Realize f1 v xs✝ → Realize f2 v xs✝"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize f1 v xs✝ → Realize f2 v xs✝ ↔ Realize f1 v xs✝ → Realize f2 v xs✝"],"content":"h2"},{"tailPos":27150,"headPos":27149,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize f1 v xs✝ → Realize f2 v xs✝ ↔ Realize f1 v xs✝ → Realize f2 v xs✝"],"goalsAfter":[],"content":"]"},{"tailPos":27150,"headPos":27034,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (f1 ⟹ f2)) v xs✝ ↔ Realize (f1 ⟹ f2) v xs✝"],"goalsAfter":[],"content":"rw [toPrenex, realize_toPrenexImp f1.toPrenex_isPrenex f2.toPrenex_isPrenex, realize_imp,\n      realize_imp, h1, h2]"},{"tailPos":27150,"headPos":27023,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs"],"goalsAfter":[],"content":"intros\n    rw [toPrenex, realize_toPrenexImp f1.toPrenex_isPrenex f2.toPrenex_isPrenex, realize_imp,\n      realize_imp, h1, h2]"},{"tailPos":27150,"headPos":27020,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf1 f2 : BoundedFormula L α n✝\nh1 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f1) v xs ↔ Realize f1 v xs\nh2 : ∀ {xs : Fin n✝ → M}, Realize (toPrenex f2) v xs ↔ Realize f2 v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (f1 ⟹ f2)) v xs ↔ Realize (f1 ⟹ f2) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"· intros\n    rw [toPrenex, realize_toPrenexImp f1.toPrenex_isPrenex f2.toPrenex_isPrenex, realize_imp,\n      realize_imp, h1, h2]"},{"tailPos":27155,"headPos":27153,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"·"},{"tailPos":27162,"headPos":27156,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (∀'f✝)) v xs✝ ↔ Realize (∀'f✝) v xs✝"],"content":"intros"},{"tailPos":27183,"headPos":27171,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (∀'f✝)) v xs✝ ↔ Realize (∀'f✝) v xs✝"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (∀'f✝)) v xs✝ ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"content":"realize_all,"},{"tailPos":27193,"headPos":27184,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (∀'f✝)) v xs✝ ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (∀'toPrenex f✝) v xs✝ ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"content":"toPrenex,"},{"tailPos":27205,"headPos":27194,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (∀'toPrenex f✝) v xs✝ ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ (∀ (a : M), Realize (toPrenex f✝) v (snoc xs✝ a)) ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"content":"realize_all"},{"tailPos":27206,"headPos":27205,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ (∀ (a : M), Realize (toPrenex f✝) v (snoc xs✝ a)) ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ (∀ (a : M), Realize (toPrenex f✝) v (snoc xs✝ a)) ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"content":"]"},{"tailPos":27206,"headPos":27167,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ Realize (toPrenex (∀'f✝)) v xs✝ ↔ Realize (∀'f✝) v xs✝"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ (∀ (a : M), Realize (toPrenex f✝) v (snoc xs✝ a)) ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"content":"rw [realize_all, toPrenex, realize_all]"},{"tailPos":27241,"headPos":27211,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\nxs✝ : Fin n✝ → M\n⊢ (∀ (a : M), Realize (toPrenex f✝) v (snoc xs✝ a)) ↔ ∀ (a : M), Realize f✝ v (snoc xs✝ a)"],"goalsAfter":[],"content":"exact forall_congr' fun a => h"},{"tailPos":27241,"headPos":27156,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"intros\n    rw [realize_all, toPrenex, realize_all]\n    exact forall_congr' fun a => h"},{"tailPos":27241,"headPos":27153,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nv : α → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nh : ∀ {xs : Fin (n✝ + 1) → M}, Realize (toPrenex f✝) v xs ↔ Realize f✝ v xs\n⊢ ∀ {xs : Fin n✝ → M}, Realize (toPrenex (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"· intros\n    rw [realize_all, toPrenex, realize_all]\n    exact forall_congr' fun a => h"},{"tailPos":27241,"headPos":26909,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\n⊢ ∀ {xs : Fin n → M}, Realize (toPrenex φ) v xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"induction' φ with _ _ _ _ _ _ _ _ _ f1 f2 h1 h2 _ _ h\n  . exact Iff.rfl\n  . exact Iff.rfl\n  . exact Iff.rfl\n  · intros\n    rw [toPrenex, realize_toPrenexImp f1.toPrenex_isPrenex f2.toPrenex_isPrenex, realize_imp,\n      realize_imp, h1, h2]\n  · intros\n    rw [realize_all, toPrenex, realize_all]\n    exact forall_congr' fun a => h"},{"tailPos":26906,"headPos":26904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\n⊢ ∀ {xs : Fin n → M}, Realize (toPrenex φ) v xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":27241,"headPos":26904,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.229555\nP : Type ?u.229558\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn l : ℕ\nφ✝ ψ : BoundedFormula L α l\nθ : BoundedFormula L α (Nat.succ l)\nv✝ : α → M\nxs : Fin l → M\ninst✝ : Nonempty M\nφ : BoundedFormula L α n\nv : α → M\n⊢ ∀ {xs : Fin n → M}, Realize (toPrenex φ) v xs ↔ Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' φ with _ _ _ _ _ _ _ _ _ f1 f2 h1 h2 _ _ h\n  . exact Iff.rfl\n  . exact Iff.rfl\n  . exact Iff.rfl\n  · intros\n    rw [toPrenex, realize_toPrenexImp f1.toPrenex_isPrenex f2.toPrenex_isPrenex, realize_imp,\n      realize_imp, h1, h2]\n  · intros\n    rw [realize_all, toPrenex, realize_all]\n    exact forall_congr' fun a => h"},{"tailPos":27925,"headPos":27869,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nψ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (onBoundedFormula φ ψ) v xs ↔ Realize ψ v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ falsum) v xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"induction' ψ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3"},{"tailPos":27930,"headPos":27928,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ falsum) v xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ falsum) v xs ↔ Realize falsum v xs"],"content":"·"},{"tailPos":27934,"headPos":27931,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ falsum) v xs ↔ Realize falsum v xs"],"goalsAfter":[],"content":"rfl"},{"tailPos":27934,"headPos":27928,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ falsum) v xs ↔ Realize falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"· rfl"},{"tailPos":27939,"headPos":27937,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"content":"·"},{"tailPos":28001,"headPos":27940,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Term.realize (Sum.elim v xs) t₁✝ = Term.realize (Sum.elim v xs) t₂✝ ↔ Realize (equal t₁✝ t₂✝) v xs"],"content":"simp only [onBoundedFormula, realize_bdEqual, realize_onTerm]"},{"tailPos":28009,"headPos":28006,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Term.realize (Sum.elim v xs) t₁✝ = Term.realize (Sum.elim v xs) t₂✝ ↔ Realize (equal t₁✝ t₂✝) v xs"],"goalsAfter":[],"content":"rfl"},{"tailPos":28009,"headPos":27940,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs"],"goalsAfter":[],"content":"simp only [onBoundedFormula, realize_bdEqual, realize_onTerm]\n    rfl"},{"tailPos":28009,"headPos":27937,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (equal t₁✝ t₂✝)) v xs ↔ Realize (equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"· simp only [onBoundedFormula, realize_bdEqual, realize_onTerm]\n    rfl"},{"tailPos":28014,"headPos":28012,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs"],"content":"·"},{"tailPos":28120,"headPos":28015,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ (RelMap R✝ fun i => Term.realize (Sum.elim v xs) (ts✝ i)) ↔ Realize (rel R✝ ts✝) v xs"],"content":"simp only [onBoundedFormula, realize_rel, LHom.map_onRelation,\n      Function.comp_apply, realize_onTerm]"},{"tailPos":28128,"headPos":28125,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ (RelMap R✝ fun i => Term.realize (Sum.elim v xs) (ts✝ i)) ↔ Realize (rel R✝ ts✝) v xs"],"goalsAfter":[],"content":"rfl"},{"tailPos":28128,"headPos":28015,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs"],"goalsAfter":[],"content":"simp only [onBoundedFormula, realize_rel, LHom.map_onRelation,\n      Function.comp_apply, realize_onTerm]\n    rfl"},{"tailPos":28128,"headPos":28012,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (rel R✝ ts✝)) v xs ↔ Realize (rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"· simp only [onBoundedFormula, realize_rel, LHom.map_onRelation,\n      Function.comp_apply, realize_onTerm]\n    rfl"},{"tailPos":28133,"headPos":28131,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"·"},{"tailPos":28185,"headPos":28134,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":[],"content":"simp only [onBoundedFormula, ih1, ih2, realize_imp]"},{"tailPos":28185,"headPos":28131,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₁✝) v xs ↔ Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, Realize (onBoundedFormula φ f₂✝) v xs ↔ Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (f₁✝ ⟹ f₂✝)) v xs ↔ Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"· simp only [onBoundedFormula, ih1, ih2, realize_imp]"},{"tailPos":28190,"headPos":28188,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"content":"·"},{"tailPos":28237,"headPos":28191,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"simp only [onBoundedFormula, ih3, realize_all]"},{"tailPos":28237,"headPos":28188,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝¹ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, Realize (onBoundedFormula φ f✝) v xs ↔ Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ Realize (onBoundedFormula φ (∀'f✝)) v xs ↔ Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"· simp only [onBoundedFormula, ih3, realize_all]"},{"tailPos":28237,"headPos":27869,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nψ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (onBoundedFormula φ ψ) v xs ↔ Realize ψ v xs"],"goalsAfter":[],"content":"induction' ψ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp only [onBoundedFormula, realize_bdEqual, realize_onTerm]\n    rfl\n  · simp only [onBoundedFormula, realize_rel, LHom.map_onRelation,\n      Function.comp_apply, realize_onTerm]\n    rfl\n  · simp only [onBoundedFormula, ih1, ih2, realize_imp]\n  · simp only [onBoundedFormula, ih3, realize_all]"},{"tailPos":27866,"headPos":27864,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nψ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (onBoundedFormula φ ψ) v xs ↔ Realize ψ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":28237,"headPos":27864,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.231167\nP : Type ?u.231170\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nn : ℕ\nψ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ Realize (onBoundedFormula φ ψ) v xs ↔ Realize ψ v xs"],"goalsAfter":[],"content":"by\n  induction' ψ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp only [onBoundedFormula, realize_bdEqual, realize_onTerm]\n    rfl\n  · simp only [onBoundedFormula, realize_rel, LHom.map_onRelation,\n      Function.comp_apply, realize_onTerm]\n    rfl\n  · simp only [onBoundedFormula, ih1, ih2, realize_imp]\n  · simp only [onBoundedFormula, ih3, realize_all]"},{"tailPos":30081,"headPos":30077,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.235577\nP : Type ?u.235580\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nk : ℕ\nR : Relations L k\nts : Fin k → Term L α\n⊢ (RelMap R fun i => Term.realize (Sum.elim v default) (Term.relabel Sum.inl (ts i))) ↔\n    RelMap R fun i => Term.realize v (ts i)"],"goalsAfter":[],"content":"simp only [Term.realize_relabel, Sum.elim_comp_inl]"},{"tailPos":30076,"headPos":30074,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.235577\nP : Type ?u.235580\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nk : ℕ\nR : Relations L k\nts : Fin k → Term L α\n⊢ (RelMap R fun i => Term.realize (Sum.elim v default) (Term.relabel Sum.inl (ts i))) ↔\n    RelMap R fun i => Term.realize v (ts i)"],"goalsAfter":[],"content":"by"},{"tailPos":30081,"headPos":30074,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.235577\nP : Type ?u.235580\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nk : ℕ\nR : Relations L k\nts : Fin k → Term L α\n⊢ (RelMap R fun i => Term.realize (Sum.elim v default) (Term.relabel Sum.inl (ts i))) ↔\n    RelMap R fun i => Term.realize v (ts i)"],"goalsAfter":[],"content":"by simp"},{"tailPos":30332,"headPos":30311,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula₁ R t) v ↔ RelMap R ![Term.realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula R ![t]) v ↔ RelMap R ![Term.realize v t]"],"content":"Relations.formula₁,"},{"tailPos":30345,"headPos":30333,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula R ![t]) v ↔ RelMap R ![Term.realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) ↔ RelMap R ![Term.realize v t]"],"content":"realize_rel,"},{"tailPos":30355,"headPos":30346,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) ↔ RelMap R ![Term.realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) = RelMap R ![Term.realize v t]"],"content":"iff_eq_eq"},{"tailPos":30356,"headPos":30355,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) = RelMap R ![Term.realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) = RelMap R ![Term.realize v t]"],"content":"]"},{"tailPos":30356,"headPos":30307,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula₁ R t) v ↔ RelMap R ![Term.realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) = RelMap R ![Term.realize v t]"],"content":"rw [Relations.formula₁, realize_rel, iff_eq_eq]"},{"tailPos":30396,"headPos":30359,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t ![] i)) = RelMap R ![Term.realize v t]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\nx✝ : Fin 1\n⊢ Term.realize v (Matrix.vecCons t ![] x✝) = Matrix.vecCons (Term.realize v t) ![] x✝"],"content":"refine' congr rfl (funext fun _ => _)"},{"tailPos":30434,"headPos":30399,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\nx✝ : Fin 1\n⊢ Term.realize v (Matrix.vecCons t ![] x✝) = Matrix.vecCons (Term.realize v t) ![] x✝"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_fin_one]"},{"tailPos":30434,"headPos":30307,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula₁ R t) v ↔ RelMap R ![Term.realize v t]"],"goalsAfter":[],"content":"rw [Relations.formula₁, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext fun _ => _)\n  simp only [Matrix.cons_val_fin_one]"},{"tailPos":30304,"headPos":30302,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula₁ R t) v ↔ RelMap R ![Term.realize v t]"],"goalsAfter":[],"content":"by"},{"tailPos":30434,"headPos":30302,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.236870\nP : Type ?u.236873\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 1\nt : Term L α\n⊢ Realize (Relations.formula₁ R t) v ↔ RelMap R ![Term.realize v t]"],"goalsAfter":[],"content":"by\n  rw [Relations.formula₁, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext fun _ => _)\n  simp only [Matrix.cons_val_fin_one]"},{"tailPos":30725,"headPos":30704,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula₂ R t₁ t₂) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula R ![t₁, t₂]) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"content":"Relations.formula₂,"},{"tailPos":30738,"headPos":30726,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula R ![t₁, t₂]) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"content":"realize_rel,"},{"tailPos":30748,"headPos":30739,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) = RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"content":"iff_eq_eq"},{"tailPos":30749,"headPos":30748,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) = RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) = RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"content":"]"},{"tailPos":30749,"headPos":30700,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula₂ R t₁ t₂) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) = RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"content":"rw [Relations.formula₂, realize_rel, iff_eq_eq]"},{"tailPos":30794,"headPos":30752,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ (RelMap R fun i => Term.realize v (Matrix.vecCons t₁ ![t₂] i)) = RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Term.realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"content":"refine' congr rfl (funext (Fin.cases _ _))"},{"tailPos":30799,"headPos":30797,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Term.realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Term.realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] 0"],"content":"·"},{"tailPos":30832,"headPos":30800,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Term.realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] 0"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_zero]"},{"tailPos":30832,"headPos":30797,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Term.realize v (Matrix.vecCons t₁ ![t₂] 0) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] 0","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"content":"· simp only [Matrix.cons_val_zero]"},{"tailPos":30837,"headPos":30835,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"content":"·"},{"tailPos":30909,"headPos":30838,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"goalsAfter":[],"content":"simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":30909,"headPos":30835,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ ∀ (i : Fin 1),\n    Term.realize v (Matrix.vecCons t₁ ![t₂] (succ i)) = Matrix.vecCons (Term.realize v t₁) ![Term.realize v t₂] (succ i)"],"goalsAfter":[],"content":"· simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":30909,"headPos":30700,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula₂ R t₁ t₂) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":[],"content":"rw [Relations.formula₂, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext (Fin.cases _ _))\n  · simp only [Matrix.cons_val_zero]\n  · simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":30697,"headPos":30695,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula₂ R t₁ t₂) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":[],"content":"by"},{"tailPos":30909,"headPos":30695,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.237419\nP : Type ?u.237422\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nR : Relations L 2\nt₁ t₂ : Term L α\n⊢ Realize (Relations.formula₂ R t₁ t₂) v ↔ RelMap R ![Term.realize v t₁, Term.realize v t₂]"],"goalsAfter":[],"content":"by\n  rw [Relations.formula₂, realize_rel, iff_eq_eq]\n  refine' congr rfl (funext (Fin.cases _ _))\n  · simp only [Matrix.cons_val_zero]\n  · simp only [Matrix.cons_val_succ, Matrix.cons_val_fin_one, forall_const]"},{"tailPos":31580,"headPos":31572,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ Realize (relabel g φ) v ↔ Realize φ (v ∘ g)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize (relabel g φ) v default ↔ Realize φ (v ∘ g)"],"content":"Realize,"},{"tailPos":31589,"headPos":31581,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize (relabel g φ) v default ↔ Realize φ (v ∘ g)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize (relabel g φ) v default ↔ BoundedFormula.Realize φ (v ∘ g) default"],"content":"Realize,"},{"tailPos":31598,"headPos":31590,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize (relabel g φ) v default ↔ BoundedFormula.Realize φ (v ∘ g) default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize (BoundedFormula.relabel (Sum.inl ∘ g) φ) v default ↔ BoundedFormula.Realize φ (v ∘ g) default"],"content":"relabel,"},{"tailPos":31630,"headPos":31599,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize (BoundedFormula.relabel (Sum.inl ∘ g) φ) v default ↔ BoundedFormula.Realize φ (v ∘ g) default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(castAdd 0)) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) ↔\n    BoundedFormula.Realize φ (v ∘ g) default"],"content":"BoundedFormula.realize_relabel,"},{"tailPos":31641,"headPos":31631,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(castAdd 0)) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) ↔\n    BoundedFormula.Realize φ (v ∘ g) default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(castAdd 0)) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"content":"iff_eq_eq,"},{"tailPos":31658,"headPos":31642,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(castAdd 0)) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(Fin.cast (_ : 0 = 0))) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"content":"Fin.castAdd_zero"},{"tailPos":31659,"headPos":31658,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(Fin.cast (_ : 0 = 0))) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(Fin.cast (_ : 0 = 0))) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"content":"]"},{"tailPos":31659,"headPos":31568,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ Realize (relabel g φ) v ↔ Realize φ (v ∘ g)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(Fin.cast (_ : 0 = 0))) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"content":"rw [Realize, Realize, relabel, BoundedFormula.realize_relabel, iff_eq_eq, Fin.castAdd_zero]"},{"tailPos":31698,"headPos":31662,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (default ∘ ↑(Fin.cast (_ : 0 = 0))) ∘ Sum.inl ∘ g) (default ∘ ↑(natAdd 0)) =\n    BoundedFormula.Realize φ (v ∘ g) default"],"goalsAfter":[],"content":"exact congr rfl (funext finZeroElim)"},{"tailPos":31698,"headPos":31568,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ Realize (relabel g φ) v ↔ Realize φ (v ∘ g)"],"goalsAfter":[],"content":"rw [Realize, Realize, relabel, BoundedFormula.realize_relabel, iff_eq_eq, Fin.castAdd_zero]\n  exact congr rfl (funext finZeroElim)"},{"tailPos":31565,"headPos":31563,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ Realize (relabel g φ) v ↔ Realize φ (v ∘ g)"],"goalsAfter":[],"content":"by"},{"tailPos":31698,"headPos":31563,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.238835\nP : Type ?u.238838\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L α\ng : α → β\nv : β → M\n⊢ Realize (relabel g φ) v ↔ Realize φ (v ∘ g)"],"goalsAfter":[],"content":"by\n  rw [Realize, Realize, relabel, BoundedFormula.realize_relabel, iff_eq_eq, Fin.castAdd_zero]\n  exact congr rfl (funext finZeroElim)"},{"tailPos":32003,"headPos":31972,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize (BoundedFormula.relabel Sum.inr φ) v x ↔ Realize φ x"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (x ∘ ↑(castAdd 0)) ∘ Sum.inr) (x ∘ ↑(natAdd n)) ↔ Realize φ x"],"content":"BoundedFormula.realize_relabel,"},{"tailPos":32020,"headPos":32004,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (x ∘ ↑(castAdd 0)) ∘ Sum.inr) (x ∘ ↑(natAdd n)) ↔ Realize φ x"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (x ∘ ↑(castAdd 0)) ∘ Sum.inr) (x ∘ ↑(natAdd n)) ↔\n    BoundedFormula.Realize φ x default"],"content":"Formula.Realize,"},{"tailPos":32039,"headPos":32021,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (Sum.elim v (x ∘ ↑(castAdd 0)) ∘ Sum.inr) (x ∘ ↑(natAdd n)) ↔\n    BoundedFormula.Realize φ x default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ ↑(castAdd 0)) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"content":"Sum.elim_comp_inr,"},{"tailPos":32057,"headPos":32040,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ ↑(castAdd 0)) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ ↑(Fin.cast (_ : n = n))) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"content":"Fin.castAdd_zero,"},{"tailPos":32072,"headPos":32062,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ ↑(Fin.cast (_ : n = n))) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ ↑(OrderIso.refl (Fin n))) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"content":"cast_refl,"},{"tailPos":32091,"headPos":32073,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ ↑(OrderIso.refl (Fin n))) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ id) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"content":"OrderIso.coe_refl,"},{"tailPos":32115,"headPos":32092,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ (x ∘ id) (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ x (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"content":"Function.comp.right_id,"},{"tailPos":32182,"headPos":32120,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ x (x ∘ ↑(natAdd n)) ↔ BoundedFormula.Realize φ x default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ x default ↔ BoundedFormula.Realize φ x default"],"content":"Subsingleton.elim (x ∘ (natAdd n : Fin 0 → Fin n)) default"},{"tailPos":32183,"headPos":32182,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize φ x default ↔ BoundedFormula.Realize φ x default"],"goalsAfter":[],"content":"]"},{"tailPos":32183,"headPos":31968,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize (BoundedFormula.relabel Sum.inr φ) v x ↔ Realize φ x"],"goalsAfter":[],"content":"rw [BoundedFormula.realize_relabel, Formula.Realize, Sum.elim_comp_inr, Fin.castAdd_zero,\n    cast_refl, OrderIso.coe_refl, Function.comp.right_id,\n    Subsingleton.elim (x ∘ (natAdd n : Fin 0 → Fin n)) default]"},{"tailPos":31965,"headPos":31963,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize (BoundedFormula.relabel Sum.inr φ) v x ↔ Realize φ x"],"goalsAfter":[],"content":"by"},{"tailPos":32183,"headPos":31963,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.239536\nP : Type ?u.239539\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ✝ ψ : Formula L α\nv✝ : α → M\nφ : Formula L (Fin n)\nv : Empty → M\nx : Fin n → M\n⊢ BoundedFormula.Realize (BoundedFormula.relabel Sum.inr φ) v x ↔ Realize φ x"],"goalsAfter":[],"content":"by\n  rw [BoundedFormula.realize_relabel, Formula.Realize, Sum.elim_comp_inr, Fin.castAdd_zero,\n    cast_refl, OrderIso.coe_refl, Function.comp.right_id,\n    Subsingleton.elim (x ∘ (natAdd n : Fin 0 → Fin n)) default]"},{"tailPos":32468,"headPos":32442,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.245966\nP : Type ?u.245969\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nt₁ t₂ : Term L α\nx : α → M\n⊢ Realize (Term.equal t₁ t₂) x ↔ Term.realize x t₁ = Term.realize x t₂"],"goalsAfter":[],"content":"simp [Term.equal, Realize]"},{"tailPos":32441,"headPos":32439,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.245966\nP : Type ?u.245969\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nt₁ t₂ : Term L α\nx : α → M\n⊢ Realize (Term.equal t₁ t₂) x ↔ Term.realize x t₁ = Term.realize x t₂"],"goalsAfter":[],"content":"by"},{"tailPos":32468,"headPos":32439,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.245966\nP : Type ?u.245969\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nt₁ t₂ : Term L α\nx : α → M\n⊢ Realize (Term.equal t₁ t₂) x ↔ Term.realize x t₁ = Term.realize x t₂"],"goalsAfter":[],"content":"by simp [Term.equal, Realize]"},{"tailPos":32806,"headPos":32722,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ Realize (graph f) (cons y x) ↔ funMap f x = y"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ (y = funMap f fun i => x i) ↔ funMap f x = y"],"content":"simp only [Formula.graph, Term.realize, realize_equal, Fin.cons_zero, Fin.cons_succ]"},{"tailPos":32820,"headPos":32813,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ (y = funMap f fun i => x i) ↔ funMap f x = y"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ (funMap f fun i => x i) = y ↔ funMap f x = y"],"content":"eq_comm"},{"tailPos":32821,"headPos":32820,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ (funMap f fun i => x i) = y ↔ funMap f x = y"],"goalsAfter":[],"content":"]"},{"tailPos":32821,"headPos":32809,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ (y = funMap f fun i => x i) ↔ funMap f x = y"],"goalsAfter":[],"content":"rw [eq_comm]"},{"tailPos":32821,"headPos":32722,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ Realize (graph f) (cons y x) ↔ funMap f x = y"],"goalsAfter":[],"content":"simp only [Formula.graph, Term.realize, realize_equal, Fin.cons_zero, Fin.cons_succ]\n  rw [eq_comm]"},{"tailPos":32719,"headPos":32717,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ Realize (graph f) (cons y x) ↔ funMap f x = y"],"goalsAfter":[],"content":"by"},{"tailPos":32821,"headPos":32717,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.246639\nP : Type ?u.246642\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nφ ψ : Formula L α\nv : α → M\nf : Functions L n\nx : Fin n → M\ny : M\n⊢ Realize (graph f) (cons y x) ↔ funMap f x = y"],"goalsAfter":[],"content":"by\n  simp only [Formula.graph, Term.realize, realize_equal, Fin.cons_zero, Fin.cons_succ]\n  rw [eq_comm]"},{"tailPos":33493,"headPos":33490,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.247641\nP : Type ?u.247644\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nψ : Formula L α\n⊢ setOf (Formula.Realize (onFormula φ ψ)) = setOf (Formula.Realize ψ)"],"goalsAfter":["case h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.247641\nP : Type ?u.247644\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nψ : Formula L α\nx✝ : α → M\n⊢ x✝ ∈ setOf (Formula.Realize (onFormula φ ψ)) ↔ x✝ ∈ setOf (Formula.Realize ψ)"],"content":"ext"},{"tailPos":33500,"headPos":33496,"goalsBefore":["case h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.247641\nP : Type ?u.247644\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nψ : Formula L α\nx✝ : α → M\n⊢ x✝ ∈ setOf (Formula.Realize (onFormula φ ψ)) ↔ x✝ ∈ setOf (Formula.Realize ψ)"],"goalsAfter":[],"content":"simp only [Set.mem_setOf_eq, realize_onFormula]"},{"tailPos":33500,"headPos":33490,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.247641\nP : Type ?u.247644\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nψ : Formula L α\n⊢ setOf (Formula.Realize (onFormula φ ψ)) = setOf (Formula.Realize ψ)"],"goalsAfter":[],"content":"ext\n  simp"},{"tailPos":33487,"headPos":33485,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.247641\nP : Type ?u.247644\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nψ : Formula L α\n⊢ setOf (Formula.Realize (onFormula φ ψ)) = setOf (Formula.Realize ψ)"],"goalsAfter":[],"content":"by"},{"tailPos":33500,"headPos":33485,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.247641\nP : Type ?u.247644\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nψ : Formula L α\n⊢ setOf (Formula.Realize (onFormula φ ψ)) = setOf (Formula.Realize ψ)"],"goalsAfter":[],"content":"by\n  ext\n  simp"},{"tailPos":34592,"headPos":34468,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ (Realize (↑equivSentence.symm φ) fun a => ↑(Language.con L a)) ↔ M ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default ↔\n    M ⊨ φ"],"content":"simp only [equivSentence, Equiv.symm_symm, Equiv.coe_trans, Realize,\n    BoundedFormula.realize_relabelEquiv, Function.comp]"},{"tailPos":34659,"headPos":34595,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default ↔\n    M ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default ↔\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"content":"refine' _root_.trans _ BoundedFormula.realize_constantsVarsEquiv"},{"tailPos":34676,"headPos":34666,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default ↔\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default =\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"content":"iff_iff_eq"},{"tailPos":34677,"headPos":34676,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default =\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default =\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"content":"]"},{"tailPos":34677,"headPos":34662,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default ↔\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default =\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"content":"rw [iff_iff_eq]"},{"tailPos":34698,"headPos":34680,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ)\n      (fun x => ↑(Language.con L (↑(Equiv.sumEmpty α Empty) x))) default =\n    BoundedFormula.Realize (↑BoundedFormula.constantsVarsEquiv φ) (Sum.elim (fun a => ↑(Language.con L a)) default)\n      default"],"goalsAfter":["case e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\nval✝ : α\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inl val✝))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inl val✝)","case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"content":"congr with (_ | a)"},{"tailPos":34702,"headPos":34701,"goalsBefore":["case e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\nval✝ : α\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inl val✝))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inl val✝)","case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"goalsAfter":["case e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\nval✝ : α\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inl val✝))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inl val✝)"],"content":"."},{"tailPos":34707,"headPos":34703,"goalsBefore":["case e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\nval✝ : α\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inl val✝))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inl val✝)"],"goalsAfter":[],"content":"simp only [Equiv.sumEmpty_apply_inl, Sum.elim_inl]"},{"tailPos":34707,"headPos":34701,"goalsBefore":["case e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\nval✝ : α\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inl val✝))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inl val✝)","case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"goalsAfter":["case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"content":". simp"},{"tailPos":34711,"headPos":34710,"goalsBefore":["case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"goalsAfter":["case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"content":"."},{"tailPos":34719,"headPos":34712,"goalsBefore":["case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"goalsAfter":[],"content":"cases a"},{"tailPos":34719,"headPos":34710,"goalsBefore":["case e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\na : Empty\n⊢ ↑(Language.con L (↑(Equiv.sumEmpty α Empty) (Sum.inr a))) =\n    Sum.elim (fun a => ↑(Language.con L a)) default (Sum.inr a)"],"goalsAfter":[],"content":". cases a"},{"tailPos":34719,"headPos":34468,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ (Realize (↑equivSentence.symm φ) fun a => ↑(Language.con L a)) ↔ M ⊨ φ"],"goalsAfter":[],"content":"simp only [equivSentence, Equiv.symm_symm, Equiv.coe_trans, Realize,\n    BoundedFormula.realize_relabelEquiv, Function.comp]\n  refine' _root_.trans _ BoundedFormula.realize_constantsVarsEquiv\n  rw [iff_iff_eq]\n  congr with (_ | a)\n  . simp\n  . cases a"},{"tailPos":34465,"headPos":34463,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ (Realize (↑equivSentence.symm φ) fun a => ↑(Language.con L a)) ↔ M ⊨ φ"],"goalsAfter":[],"content":"by"},{"tailPos":34719,"headPos":34463,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.257040\nP : Type ?u.257043\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Sentence (L[[α]])\n⊢ (Realize (↑equivSentence.symm φ) fun a => ↑(Language.con L a)) ↔ M ⊨ φ"],"goalsAfter":[],"content":"by\n  simp only [equivSentence, Equiv.symm_symm, Equiv.coe_trans, Realize,\n    BoundedFormula.realize_relabelEquiv, Function.comp]\n  refine' _root_.trans _ BoundedFormula.realize_constantsVarsEquiv\n  rw [iff_iff_eq]\n  congr with (_ | a)\n  . simp\n  . cases a"},{"tailPos":35112,"headPos":35056,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ M ⊨ ↑equivSentence φ ↔ Realize φ fun a => ↑(Language.con L a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ (Realize (↑equivSentence.symm (↑equivSentence φ)) fun a => ↑(Language.con L a)) ↔\n    Realize φ fun a => ↑(Language.con L a)"],"content":"← realize_equivSentence_symm_con M (equivSentence φ),"},{"tailPos":35142,"headPos":35113,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ (Realize (↑equivSentence.symm (↑equivSentence φ)) fun a => ↑(Language.con L a)) ↔\n    Realize φ fun a => ↑(Language.con L a)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ (Realize φ fun a => ↑(Language.con L a)) ↔ Realize φ fun a => ↑(Language.con L a)"],"content":"_root_.Equiv.symm_apply_apply"},{"tailPos":35143,"headPos":35142,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ (Realize φ fun a => ↑(Language.con L a)) ↔ Realize φ fun a => ↑(Language.con L a)"],"goalsAfter":[],"content":"]"},{"tailPos":35143,"headPos":35052,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ M ⊨ ↑equivSentence φ ↔ Realize φ fun a => ↑(Language.con L a)"],"goalsAfter":[],"content":"rw [← realize_equivSentence_symm_con M (equivSentence φ), _root_.Equiv.symm_apply_apply]"},{"tailPos":35049,"headPos":35047,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ M ⊨ ↑equivSentence φ ↔ Realize φ fun a => ↑(Language.con L a)"],"goalsAfter":[],"content":"by"},{"tailPos":35143,"headPos":35047,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.259032\nP : Type ?u.259035\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\ninst✝¹ : Structure (L[[α]]) M\ninst✝ : LHom.IsExpansionOn (lhomWithConstants L α) M\nφ : Formula L α\n⊢ M ⊨ ↑equivSentence φ ↔ Realize φ fun a => ↑(Language.con L a)"],"goalsAfter":[],"content":"by\n  rw [← realize_equivSentence_symm_con M (equivSentence φ), _root_.Equiv.symm_apply_apply]"},{"tailPos":37095,"headPos":37014,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.269466\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\n⊢ M ≅[L] N ↔ ∀ (φ : Sentence L), M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":[],"content":"simp only [ElementarilyEquivalent, Set.ext_iff, completeTheory, Set.mem_setOf_eq]"},{"tailPos":37011,"headPos":37009,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.269466\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\n⊢ M ≅[L] N ↔ ∀ (φ : Sentence L), M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":[],"content":"by"},{"tailPos":37095,"headPos":37009,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.269466\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\n⊢ M ≅[L] N ↔ ∀ (φ : Sentence L), M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":[],"content":"by\n  simp only [ElementarilyEquivalent, Set.ext_iff, completeTheory, Set.mem_setOf_eq]"},{"tailPos":38389,"headPos":38351,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.330070\nP : Type ?u.330073\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT✝ : Theory L\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nT : Theory L\n⊢ M ⊨ onTheory φ T ↔ M ⊨ T"],"goalsAfter":[],"content":"simp [Theory.model_iff, LHom.onTheory]"},{"tailPos":38350,"headPos":38348,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.330070\nP : Type ?u.330073\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT✝ : Theory L\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nT : Theory L\n⊢ M ⊨ onTheory φ T ↔ M ⊨ T"],"goalsAfter":[],"content":"by"},{"tailPos":38389,"headPos":38348,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.330070\nP : Type ?u.330073\ninst✝⁴ : Structure L M\ninst✝³ : Structure L N\ninst✝² : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT✝ : Theory L\ninst✝¹ : Structure L' M\nφ : L →ᴸ L'\ninst✝ : IsExpansionOn φ M\nT : Theory L\n⊢ M ⊨ onTheory φ T ↔ M ⊨ T"],"goalsAfter":[],"content":"by simp [Theory.model_iff, LHom.onTheory]"},{"tailPos":39128,"headPos":39087,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.419567\nP : Type ?u.419570\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT T' : Theory L\nh : M ⊨ T\nh' : M ⊨ T'\n⊢ M ⊨ T ∪ T'"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.419567\nP : Type ?u.419570\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT T' : Theory L\nh : ∀ (φ : Sentence L), φ ∈ T → M ⊨ φ\nh' : ∀ (φ : Sentence L), φ ∈ T' → M ⊨ φ\n⊢ ∀ (φ : Sentence L), φ ∈ T ∨ φ ∈ T' → M ⊨ φ"],"content":"simp only [model_iff, Set.mem_union] at *"},{"tailPos":39172,"headPos":39131,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.419567\nP : Type ?u.419570\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT T' : Theory L\nh : ∀ (φ : Sentence L), φ ∈ T → M ⊨ φ\nh' : ∀ (φ : Sentence L), φ ∈ T' → M ⊨ φ\n⊢ ∀ (φ : Sentence L), φ ∈ T ∨ φ ∈ T' → M ⊨ φ"],"goalsAfter":[],"content":"exact fun φ hφ => hφ.elim (h _) (h' _)"},{"tailPos":39172,"headPos":39087,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.419567\nP : Type ?u.419570\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT T' : Theory L\nh : M ⊨ T\nh' : M ⊨ T'\n⊢ M ⊨ T ∪ T'"],"goalsAfter":[],"content":"simp only [model_iff, Set.mem_union] at *\n  exact fun φ hφ => hφ.elim (h _) (h' _)"},{"tailPos":39084,"headPos":39082,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.419567\nP : Type ?u.419570\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT T' : Theory L\nh : M ⊨ T\nh' : M ⊨ T'\n⊢ M ⊨ T ∪ T'"],"goalsAfter":[],"content":"by"},{"tailPos":39172,"headPos":39082,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.419567\nP : Type ?u.419570\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT T' : Theory L\nh : M ⊨ T\nh' : M ⊨ T'\n⊢ M ⊨ T ∪ T'"],"goalsAfter":[],"content":"by\n  simp only [model_iff, Set.mem_union] at *\n  exact fun φ hφ => hφ.elim (h _) (h' _)"},{"tailPos":39744,"headPos":39740,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.522501\nP : Type ?u.522504\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : Sentence L\n⊢ M ⊨ {φ} ↔ M ⊨ φ"],"goalsAfter":[],"content":"simp only [model_iff, Set.mem_singleton_iff, forall_eq]"},{"tailPos":39739,"headPos":39737,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.522501\nP : Type ?u.522504\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : Sentence L\n⊢ M ⊨ {φ} ↔ M ⊨ φ"],"goalsAfter":[],"content":"by"},{"tailPos":39744,"headPos":39737,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.522501\nP : Type ?u.522504\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : Sentence L\n⊢ M ⊨ {φ} ↔ M ⊨ φ"],"goalsAfter":[],"content":"by simp"},{"tailPos":40854,"headPos":40784,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\n⊢ N ⊨ φ ↔ M ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : N ⊨ φ\n⊢ M ⊨ φ"],"content":"refine' ⟨fun h => _, (L.completeTheory M).realize_sentence_of_mem⟩"},{"tailPos":40870,"headPos":40857,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : N ⊨ φ\n⊢ M ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : ¬M ⊨ φ\n⊢ ¬N ⊨ φ"],"content":"contrapose! h"},{"tailPos":40901,"headPos":40877,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : ¬M ⊨ φ\n⊢ ¬N ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : M ⊨ Formula.not φ\n⊢ N ⊨ Formula.not φ"],"content":"← Sentence.realize_not"},{"tailPos":40902,"headPos":40901,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : M ⊨ Formula.not φ\n⊢ N ⊨ Formula.not φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : M ⊨ Formula.not φ\n⊢ N ⊨ Formula.not φ"],"content":"]"},{"tailPos":40907,"headPos":40873,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : ¬M ⊨ φ\n⊢ ¬N ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : M ⊨ Formula.not φ\n⊢ N ⊨ Formula.not φ"],"content":"rw [← Sentence.realize_not] at *"},{"tailPos":40985,"headPos":40910,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\nh : M ⊨ Formula.not φ\n⊢ N ⊨ Formula.not φ"],"goalsAfter":[],"content":"exact (L.completeTheory M).realize_sentence_of_mem (mem_completeTheory.2 h)"},{"tailPos":40985,"headPos":40784,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\n⊢ N ⊨ φ ↔ M ⊨ φ"],"goalsAfter":[],"content":"refine' ⟨fun h => _, (L.completeTheory M).realize_sentence_of_mem⟩\n  contrapose! h\n  rw [← Sentence.realize_not] at *\n  exact (L.completeTheory M).realize_sentence_of_mem (mem_completeTheory.2 h)"},{"tailPos":40781,"headPos":40779,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\n⊢ N ⊨ φ ↔ M ⊨ φ"],"goalsAfter":[],"content":"by"},{"tailPos":40985,"headPos":40779,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.600632\ninst✝³ : Structure L M\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ninst✝ : N ⊨ completeTheory L M\nφ : Sentence L\n⊢ N ⊨ φ ↔ M ⊨ φ"],"goalsAfter":[],"content":"by\n  refine' ⟨fun h => _, (L.completeTheory M).realize_sentence_of_mem⟩\n  contrapose! h\n  rw [← Sentence.realize_not] at *\n  exact (L.completeTheory M).realize_sentence_of_mem (mem_completeTheory.2 h)"},{"tailPos":41319,"headPos":41297,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs"],"goalsAfter":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin Nat.zero → M), Realize φ v xs","case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"content":"induction' n with n ih"},{"tailPos":41324,"headPos":41322,"goalsBefore":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin Nat.zero → M), Realize φ v xs","case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin Nat.zero → M), Realize φ v xs"],"content":"·"},{"tailPos":41353,"headPos":41325,"goalsBefore":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin Nat.zero → M), Realize φ v xs"],"goalsAfter":[],"content":"exact Unique.forall_iff.symm"},{"tailPos":41353,"headPos":41322,"goalsBefore":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin Nat.zero → M), Realize φ v xs","case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"content":"· exact Unique.forall_iff.symm"},{"tailPos":41358,"headPos":41356,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"content":"·"},{"tailPos":41388,"headPos":41359,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∀ (xs : Fin n → M) (x : M), Realize φ v (snoc xs x)) ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"content":"simp only [alls, ih, Realize]"},{"tailPos":41481,"headPos":41393,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∀ (xs : Fin n → M) (x : M), Realize φ v (snoc xs x)) ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":[],"content":"exact ⟨fun h xs => Fin.snoc_init_self xs ▸ h _ _, fun h xs x => h (Fin.snoc xs x)⟩"},{"tailPos":41481,"headPos":41359,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":[],"content":"simp only [alls, ih, Realize]\n    exact ⟨fun h xs => Fin.snoc_init_self xs ▸ h _ _, fun h xs x => h (Fin.snoc xs x)⟩"},{"tailPos":41481,"headPos":41356,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin (Nat.succ n) → M), Realize φ v xs"],"goalsAfter":[],"content":"· simp only [alls, ih, Realize]\n    exact ⟨fun h xs => Fin.snoc_init_self xs ▸ h _ _, fun h xs x => h (Fin.snoc xs x)⟩"},{"tailPos":41481,"headPos":41297,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs"],"goalsAfter":[],"content":"induction' n with n ih\n  · exact Unique.forall_iff.symm\n  · simp only [alls, ih, Realize]\n    exact ⟨fun h xs => Fin.snoc_init_self xs ▸ h _ _, fun h xs x => h (Fin.snoc xs x)⟩"},{"tailPos":41294,"headPos":41292,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":41481,"headPos":41292,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.635929\nP : Type ?u.635932\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (alls φ) v ↔ ∀ (xs : Fin n → M), Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' n with n ih\n  · exact Unique.forall_iff.symm\n  · simp only [alls, ih, Realize]\n    exact ⟨fun h xs => Fin.snoc_init_self xs ▸ h _ _, fun h xs x => h (Fin.snoc xs x)⟩"},{"tailPos":41755,"headPos":41733,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs","case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"content":"induction' n with n ih"},{"tailPos":41760,"headPos":41758,"goalsBefore":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs","case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"content":"·"},{"tailPos":41789,"headPos":41761,"goalsBefore":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"exact Unique.exists_iff.symm"},{"tailPos":41789,"headPos":41758,"goalsBefore":["case zero\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n\nv : α → M\nφ : BoundedFormula L α Nat.zero\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs","case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"content":"· exact Unique.exists_iff.symm"},{"tailPos":41794,"headPos":41792,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"content":"·"},{"tailPos":41841,"headPos":41795,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) ↔ ∃ xs, Realize φ v xs"],"content":"simp only [BoundedFormula.exs, ih, realize_ex]"},{"tailPos":41857,"headPos":41846,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) ↔ ∃ xs, Realize φ v xs"],"goalsAfter":["case succ.mp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) → ∃ xs, Realize φ v xs","case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"content":"constructor"},{"tailPos":41864,"headPos":41862,"goalsBefore":["case succ.mp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) → ∃ xs, Realize φ v xs","case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) → ∃ xs, Realize φ v xs"],"content":"·"},{"tailPos":41886,"headPos":41865,"goalsBefore":["case succ.mp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) → ∃ xs, Realize φ v xs"],"goalsAfter":["case succ.mp.intro.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin n → M\nx : M\nh : Realize φ v (snoc xs x)\n⊢ ∃ xs, Realize φ v xs"],"content":"rintro ⟨xs, x, h⟩"},{"tailPos":41909,"headPos":41893,"goalsBefore":["case succ.mp.intro.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin n → M\nx : M\nh : Realize φ v (snoc xs x)\n⊢ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"exact ⟨_, h⟩"},{"tailPos":41909,"headPos":41865,"goalsBefore":["case succ.mp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) → ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"rintro ⟨xs, x, h⟩\n      exact ⟨_, h⟩"},{"tailPos":41909,"headPos":41862,"goalsBefore":["case succ.mp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs a, Realize φ v (snoc xs a)) → ∃ xs, Realize φ v xs","case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"content":"· rintro ⟨xs, x, h⟩\n      exact ⟨_, h⟩"},{"tailPos":41916,"headPos":41914,"goalsBefore":["case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"content":"·"},{"tailPos":41935,"headPos":41917,"goalsBefore":["case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v xs\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"content":"rintro ⟨xs, h⟩"},{"tailPos":41971,"headPos":41946,"goalsBefore":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v xs\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v (snoc (init xs) (xs (last n)))\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"content":"← Fin.snoc_init_self xs"},{"tailPos":41972,"headPos":41971,"goalsBefore":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v (snoc (init xs) (xs (last n)))\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v (snoc (init xs) (xs (last n)))\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"content":"]"},{"tailPos":41977,"headPos":41942,"goalsBefore":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v xs\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v (snoc (init xs) (xs (last n)))\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"content":"rw [← Fin.snoc_init_self xs] at h"},{"tailPos":42003,"headPos":41984,"goalsBefore":["case succ.mpr.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\nxs : Fin (Nat.succ n) → M\nh : Realize φ v (snoc (init xs) (xs (last n)))\n⊢ ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":[],"content":"exact ⟨_, _, h⟩"},{"tailPos":42003,"headPos":41917,"goalsBefore":["case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":[],"content":"rintro ⟨xs, h⟩\n      rw [← Fin.snoc_init_self xs] at h\n      exact ⟨_, _, h⟩"},{"tailPos":42003,"headPos":41914,"goalsBefore":["case succ.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ (∃ xs, Realize φ v xs) → ∃ xs a, Realize φ v (snoc xs a)"],"goalsAfter":[],"content":"· rintro ⟨xs, h⟩\n      rw [← Fin.snoc_init_self xs] at h\n      exact ⟨_, _, h⟩"},{"tailPos":42003,"headPos":41795,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"simp only [BoundedFormula.exs, ih, realize_ex]\n    constructor\n    · rintro ⟨xs, x, h⟩\n      exact ⟨_, h⟩\n    · rintro ⟨xs, h⟩\n      rw [← Fin.snoc_init_self xs] at h\n      exact ⟨_, _, h⟩"},{"tailPos":42003,"headPos":41792,"goalsBefore":["case succ\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nφ✝ : BoundedFormula L α n✝\nv : α → M\nn : ℕ\nih : ∀ {φ : BoundedFormula L α n}, Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs\nφ : BoundedFormula L α (Nat.succ n)\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"· simp only [BoundedFormula.exs, ih, realize_ex]\n    constructor\n    · rintro ⟨xs, x, h⟩\n      exact ⟨_, h⟩\n    · rintro ⟨xs, h⟩\n      rw [← Fin.snoc_init_self xs] at h\n      exact ⟨_, _, h⟩"},{"tailPos":42003,"headPos":41733,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"induction' n with n ih\n  · exact Unique.exists_iff.symm\n  · simp only [BoundedFormula.exs, ih, realize_ex]\n    constructor\n    · rintro ⟨xs, x, h⟩\n      exact ⟨_, h⟩\n    · rintro ⟨xs, h⟩\n      rw [← Fin.snoc_init_self xs] at h\n      exact ⟨_, _, h⟩"},{"tailPos":41730,"headPos":41728,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":42003,"headPos":41728,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.637329\nP : Type ?u.637332\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α → M\n⊢ Formula.Realize (exs φ) v ↔ ∃ xs, Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' n with n ih\n  · exact Unique.exists_iff.symm\n  · simp only [BoundedFormula.exs, ih, realize_ex]\n    constructor\n    · rintro ⟨xs, x, h⟩\n      exact ⟨_, h⟩\n    · rintro ⟨xs, h⟩\n      rw [← Fin.snoc_init_self xs] at h\n      exact ⟨_, _, h⟩"},{"tailPos":42347,"headPos":42282,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α ⊕ Fin n → M\n⊢ Formula.Realize (toFormula φ) v ↔ Realize φ (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula falsum) v ↔ Realize falsum (v ∘ Sum.inl) (v ∘ Sum.inr)","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3 a8 a9 a0"},{"tailPos":42352,"headPos":42350,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula falsum) v ↔ Realize falsum (v ∘ Sum.inl) (v ∘ Sum.inr)","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula falsum) v ↔ Realize falsum (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"·"},{"tailPos":42356,"headPos":42353,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula falsum) v ↔ Realize falsum (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"rfl"},{"tailPos":42356,"headPos":42350,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula falsum) v ↔ Realize falsum (v ∘ Sum.inl) (v ∘ Sum.inr)","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"· rfl"},{"tailPos":42361,"headPos":42359,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"·"},{"tailPos":42391,"headPos":42362,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"simp [BoundedFormula.Realize]"},{"tailPos":42391,"headPos":42359,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (equal t₁✝ t₂✝)) v ↔ Realize (equal t₁✝ t₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"· simp [BoundedFormula.Realize]"},{"tailPos":42396,"headPos":42394,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"·"},{"tailPos":42426,"headPos":42397,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"simp [BoundedFormula.Realize]"},{"tailPos":42426,"headPos":42394,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (rel R✝ ts✝)) v ↔ Realize (rel R✝ ts✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"· simp [BoundedFormula.Realize]"},{"tailPos":42431,"headPos":42429,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"·"},{"tailPos":42450,"headPos":42440,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula f₁✝ ⟹ toFormula f₂✝) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"toFormula,"},{"tailPos":42467,"headPos":42451,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula f₁✝ ⟹ toFormula f₂✝) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize (toFormula f₁✝ ⟹ toFormula f₂✝) v default ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"Formula.Realize,"},{"tailPos":42480,"headPos":42468,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize (toFormula f₁✝ ⟹ toFormula f₂✝) v default ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize (toFormula f₁✝) v default → Realize (toFormula f₂✝) v default ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"realize_imp,"},{"tailPos":42501,"headPos":42481,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize (toFormula f₁✝) v default → Realize (toFormula f₂✝) v default ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula f₁✝) v → Realize (toFormula f₂✝) v default ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"← Formula.Realize,"},{"tailPos":42506,"headPos":42502,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula f₁✝) v → Realize (toFormula f₂✝) v default ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize (toFormula f₂✝) v default ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"ih1,"},{"tailPos":42527,"headPos":42507,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize (toFormula f₂✝) v default ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Formula.Realize (toFormula f₂✝) v ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"← Formula.Realize,"},{"tailPos":42532,"headPos":42528,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Formula.Realize (toFormula f₂✝) v ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr) ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"ih2,"},{"tailPos":42550,"headPos":42539,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr) ↔\n    Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr) ↔\n    Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"realize_imp"},{"tailPos":42551,"headPos":42550,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr) ↔\n    Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr) → Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"]"},{"tailPos":42551,"headPos":42436,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"rw [toFormula, Formula.Realize, realize_imp, ← Formula.Realize, ih1, ← Formula.Realize, ih2,\n      realize_imp]"},{"tailPos":42551,"headPos":42429,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₁✝) v ↔ Realize f₁✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nih2 : ∀ (v : α ⊕ Fin n✝ → M), Formula.Realize (toFormula f₂✝) v ↔ Realize f₂✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (f₁✝ ⟹ f₂✝)) v ↔ Realize (f₁✝ ⟹ f₂✝) (v ∘ Sum.inl) (v ∘ Sum.inr)","case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"·\n    rw [toFormula, Formula.Realize, realize_imp, ← Formula.Realize, ih1, ← Formula.Realize, ih2,\n      realize_imp]"},{"tailPos":42556,"headPos":42554,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"·"},{"tailPos":42571,"headPos":42561,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (∀'relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝))\n      v ↔\n    Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"toFormula,"},{"tailPos":42588,"headPos":42572,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (∀'relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝))\n      v ↔\n    Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize (∀'relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      default ↔\n    Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"Formula.Realize,"},{"tailPos":42601,"headPos":42589,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Realize (∀'relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      default ↔\n    Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"content":"realize_all,"},{"tailPos":42613,"headPos":42602,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    ∀ (a : M), Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"content":"realize_all"},{"tailPos":42614,"headPos":42613,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    ∀ (a : M), Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    ∀ (a : M), Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"content":"]"},{"tailPos":42614,"headPos":42557,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    ∀ (a : M), Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"content":"rw [toFormula, Formula.Realize, realize_all, realize_all]"},{"tailPos":42651,"headPos":42619,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ (∀ (a : M),\n      Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n        (snoc default a)) ↔\n    ∀ (a : M), Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"content":"refine' forall_congr' fun a => _"},{"tailPos":42721,"headPos":42656,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a) ∘ Sum.inl)\n      (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a) ∘ Sum.inr)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"content":"have h := ih3 (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))"},{"tailPos":42779,"headPos":42726,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a) ∘ Sum.inl)\n      (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a) ∘ Sum.inr)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"content":"simp only [Sum.elim_comp_inl, Sum.elim_comp_inr] at h"},{"tailPos":42794,"headPos":42788,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))"],"content":"← h,"},{"tailPos":42811,"headPos":42795,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) ↔\n    Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))"],"content":"realize_relabel,"},{"tailPos":42828,"headPos":42812,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) ↔\n    Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) ↔\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"content":"Formula.Realize,"},{"tailPos":42839,"headPos":42829,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) ↔\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) =\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"content":"iff_iff_eq"},{"tailPos":42840,"headPos":42839,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) =\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) =\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"content":"]"},{"tailPos":42840,"headPos":42784,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (relabel (Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm)) (toFormula f✝)) v\n      (snoc default a) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) =\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"content":"rw [← h, realize_relabel, Formula.Realize, iff_iff_eq]"},{"tailPos":42870,"headPos":42845,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ Realize (toFormula f✝)\n      (Sum.elim v (snoc default a ∘ ↑(castAdd 0)) ∘\n        Sum.elim (Sum.inl ∘ Sum.inl) (Sum.map Sum.inr id ∘ ↑finSumFinEquiv.symm))\n      (snoc default a ∘ ↑(natAdd 1)) =\n    Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) default"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ (Realize (toFormula f✝)\n      (fun x =>\n        Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n          (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x))\n      fun x => snoc default a (↑(natAdd 1) x)) =\n    Realize (toFormula f✝) (Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a)) default"],"content":"simp only [Function.comp]"},{"tailPos":42887,"headPos":42875,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\n⊢ (Realize (toFormula f✝)\n      (fun x =>\n        Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n          (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x))\n      fun x => snoc default a (↑(natAdd 1) x)) =\n    Realize (toFormula f✝) (Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a)) default"],"goalsAfter":["case all.e__v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : α ⊕ Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) x","case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"content":"congr with x"},{"tailPos":42894,"headPos":42892,"goalsBefore":["case all.e__v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : α ⊕ Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) x","case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"goalsAfter":["case all.e__v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : α ⊕ Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) x"],"content":"·"},{"tailPos":42912,"headPos":42895,"goalsBefore":["case all.e__v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : α ⊕ Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) x"],"goalsAfter":["case all.e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nval✝ : α\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inl val✝)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inl val✝)","case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"content":"cases' x with _ x"},{"tailPos":42921,"headPos":42919,"goalsBefore":["case all.e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nval✝ : α\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inl val✝)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inl val✝)","case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"goalsAfter":["case all.e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nval✝ : α\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inl val✝)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inl val✝)"],"content":"·"},{"tailPos":42926,"headPos":42922,"goalsBefore":["case all.e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nval✝ : α\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inl val✝)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inl val✝)"],"goalsAfter":[],"content":"simp only [Nat.add_zero, castAdd_zero, cast_refl, OrderIso.refl_apply, Sum.elim_inl]"},{"tailPos":42926,"headPos":42919,"goalsBefore":["case all.e__v.h.inl\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nval✝ : α\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inl val✝)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inl val✝)","case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"goalsAfter":["case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"content":"· simp"},{"tailPos":42935,"headPos":42933,"goalsBefore":["case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"goalsAfter":["case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"content":"·"},{"tailPos":42963,"headPos":42936,"goalsBefore":["case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))","case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"content":"refine' Fin.lastCases _ _ x"},{"tailPos":42974,"headPos":42972,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))","case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))"],"content":"·"},{"tailPos":42992,"headPos":42979,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.map Sum.inr id (↑finSumFinEquiv.symm (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))"],"content":"Sum.elim_inr,"},{"tailPos":43006,"headPos":42993,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.map Sum.inr id (↑finSumFinEquiv.symm (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.map Sum.inr id (↑finSumFinEquiv.symm (last n✝))) =\n    snoc (fun x => v (Sum.inr x)) a (last n✝)"],"content":"Sum.elim_inr,"},{"tailPos":43044,"headPos":43019,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.map Sum.inr id (↑finSumFinEquiv.symm (last n✝))) =\n    snoc (fun x => v (Sum.inr x)) a (last n✝)"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.map Sum.inr id (Sum.inr 0)) =\n    snoc (fun x => v (Sum.inr x)) a (last n✝)"],"content":"finSumFinEquiv_symm_last,"},{"tailPos":43057,"headPos":43045,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.map Sum.inr id (Sum.inr 0)) =\n    snoc (fun x => v (Sum.inr x)) a (last n✝)"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.inr (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"content":"Sum.map_inr,"},{"tailPos":43070,"headPos":43058,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x)) (Sum.inr (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ snoc default a (↑(castAdd 0) (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"content":"Sum.elim_inr"},{"tailPos":43071,"headPos":43070,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ snoc default a (↑(castAdd 0) (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ snoc default a (↑(castAdd 0) (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"content":"]"},{"tailPos":43071,"headPos":42975,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))"],"goalsAfter":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ snoc default a (↑(castAdd 0) (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"content":"rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]"},{"tailPos":43097,"headPos":43082,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ snoc default a (↑(castAdd 0) (id 0)) = snoc (fun x => v (Sum.inr x)) a (last n✝)"],"goalsAfter":[],"content":"simp [Fin.snoc]"},{"tailPos":43097,"headPos":42975,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))"],"goalsAfter":[],"content":"rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]"},{"tailPos":43097,"headPos":42972,"goalsBefore":["case all.e__v.h.inr.refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n        (Sum.inr (last n✝))) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (last n✝))","case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"goalsAfter":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"content":"· rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]"},{"tailPos":43108,"headPos":43106,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"goalsAfter":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"content":"·"},{"tailPos":43238,"headPos":43109,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"goalsAfter":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑(castAdd 1) i)"],"content":"simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]"},{"tailPos":43265,"headPos":43253,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑(castAdd 1) i)"],"goalsAfter":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑castSucc i)"],"content":"← castSucc"},{"tailPos":43266,"headPos":43265,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑castSucc i)"],"goalsAfter":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑castSucc i)"],"content":"]"},{"tailPos":43266,"headPos":43249,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑(castAdd 1) i)"],"goalsAfter":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑castSucc i)"],"content":"rw [← castSucc]"},{"tailPos":43281,"headPos":43277,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝), v (Sum.inr i) = snoc (fun x => v (Sum.inr x)) a (↑castSucc i)"],"goalsAfter":[],"content":"simp only [snoc_castSucc, implies_true]"},{"tailPos":43281,"headPos":43109,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"goalsAfter":[],"content":"simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp"},{"tailPos":43281,"headPos":43106,"goalsBefore":["case all.e__v.h.inr.refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ ∀ (i : Fin n✝),\n    Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n        (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x))\n          (Sum.inr (↑castSucc i))) =\n      Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr (↑castSucc i))"],"goalsAfter":[],"content":"· simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp"},{"tailPos":43281,"headPos":42936,"goalsBefore":["case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"goalsAfter":[],"content":"refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp"},{"tailPos":43281,"headPos":42933,"goalsBefore":["case all.e__v.h.inr\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) (Sum.inr x)) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) (Sum.inr x)"],"goalsAfter":[],"content":"· refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp"},{"tailPos":43281,"headPos":42895,"goalsBefore":["case all.e__v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : α ⊕ Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) x"],"goalsAfter":[],"content":"cases' x with _ x\n      · simp\n      · refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp"},{"tailPos":43281,"headPos":42892,"goalsBefore":["case all.e__v.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : α ⊕ Fin (n✝ + 1)\n⊢ Sum.elim v (fun x => snoc default a (↑(castAdd 0) x))\n      (Sum.elim (fun x => Sum.inl (Sum.inl x)) (fun x => Sum.map Sum.inr id (↑finSumFinEquiv.symm x)) x) =\n    Sum.elim (fun x => v (Sum.inl x)) (snoc (fun x => v (Sum.inr x)) a) x","case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"goalsAfter":["case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"content":"· cases' x with _ x\n      · simp\n      · refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp"},{"tailPos":43288,"headPos":43286,"goalsBefore":["case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"goalsAfter":["case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"content":"·"},{"tailPos":43306,"headPos":43289,"goalsBefore":["case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"goalsAfter":[],"content":"exact Fin.elim0 x"},{"tailPos":43306,"headPos":43286,"goalsBefore":["case all.e__xs.h\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\na : M\nh :\n  Formula.Realize (toFormula f✝) (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)) ↔\n    Realize f✝ (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a)\nx : Fin 0\n⊢ snoc default a (↑(natAdd 1) x) = default x"],"goalsAfter":[],"content":"· exact Fin.elim0 x"},{"tailPos":43306,"headPos":42557,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"rw [toFormula, Formula.Realize, realize_all, realize_all]\n    refine' forall_congr' fun a => _\n    have h := ih3 (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))\n    simp only [Sum.elim_comp_inl, Sum.elim_comp_inr] at h\n    rw [← h, realize_relabel, Formula.Realize, iff_iff_eq]\n    simp only [Function.comp]\n    congr with x\n    · cases' x with _ x\n      · simp\n      · refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp\n    · exact Fin.elim0 x"},{"tailPos":43306,"headPos":42554,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nv✝ : α ⊕ Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ (v : α ⊕ Fin (n✝ + 1) → M), Formula.Realize (toFormula f✝) v ↔ Realize f✝ (v ∘ Sum.inl) (v ∘ Sum.inr)\nv : α ⊕ Fin n✝ → M\n⊢ Formula.Realize (toFormula (∀'f✝)) v ↔ Realize (∀'f✝) (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"· rw [toFormula, Formula.Realize, realize_all, realize_all]\n    refine' forall_congr' fun a => _\n    have h := ih3 (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))\n    simp only [Sum.elim_comp_inl, Sum.elim_comp_inr] at h\n    rw [← h, realize_relabel, Formula.Realize, iff_iff_eq]\n    simp only [Function.comp]\n    congr with x\n    · cases' x with _ x\n      · simp\n      · refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp\n    · exact Fin.elim0 x"},{"tailPos":43306,"headPos":42282,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α ⊕ Fin n → M\n⊢ Formula.Realize (toFormula φ) v ↔ Realize φ (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3 a8 a9 a0\n  · rfl\n  · simp [BoundedFormula.Realize]\n  · simp [BoundedFormula.Realize]\n  ·\n    rw [toFormula, Formula.Realize, realize_imp, ← Formula.Realize, ih1, ← Formula.Realize, ih2,\n      realize_imp]\n  · rw [toFormula, Formula.Realize, realize_all, realize_all]\n    refine' forall_congr' fun a => _\n    have h := ih3 (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))\n    simp only [Sum.elim_comp_inl, Sum.elim_comp_inr] at h\n    rw [← h, realize_relabel, Formula.Realize, iff_iff_eq]\n    simp only [Function.comp]\n    congr with x\n    · cases' x with _ x\n      · simp\n      · refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp\n    · exact Fin.elim0 x"},{"tailPos":42279,"headPos":42277,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α ⊕ Fin n → M\n⊢ Formula.Realize (toFormula φ) v ↔ Realize φ (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"by"},{"tailPos":43306,"headPos":42277,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.638594\nP : Type ?u.638597\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nφ : BoundedFormula L α n\nv : α ⊕ Fin n → M\n⊢ Formula.Realize (toFormula φ) v ↔ Realize φ (v ∘ Sum.inl) (v ∘ Sum.inr)"],"goalsAfter":[],"content":"by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3 a8 a9 a0\n  · rfl\n  · simp [BoundedFormula.Realize]\n  · simp [BoundedFormula.Realize]\n  ·\n    rw [toFormula, Formula.Realize, realize_imp, ← Formula.Realize, ih1, ← Formula.Realize, ih2,\n      realize_imp]\n  · rw [toFormula, Formula.Realize, realize_all, realize_all]\n    refine' forall_congr' fun a => _\n    have h := ih3 (Sum.elim (v ∘ Sum.inl) (snoc (v ∘ Sum.inr) a))\n    simp only [Sum.elim_comp_inl, Sum.elim_comp_inr] at h\n    rw [← h, realize_relabel, Formula.Realize, iff_iff_eq]\n    simp only [Function.comp]\n    congr with x\n    · cases' x with _ x\n      · simp\n      · refine' Fin.lastCases _ _ x\n        · rw [Sum.elim_inr, Sum.elim_inr,\n            finSumFinEquiv_symm_last, Sum.map_inr, Sum.elim_inr]\n          simp [Fin.snoc]\n        · simp only [castSucc, Function.comp_apply, Sum.elim_inr,\n            finSumFinEquiv_symm_apply_castAdd, Sum.map_inl, Sum.elim_inl]\n          rw [← castSucc]\n          simp\n    · exact Fin.elim0 x"},{"tailPos":43702,"headPos":43646,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize φ v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize BoundedFormula.falsum (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize BoundedFormula.falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3"},{"tailPos":43707,"headPos":43705,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize BoundedFormula.falsum (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize BoundedFormula.falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize BoundedFormula.falsum (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize BoundedFormula.falsum v xs"],"content":"·"},{"tailPos":43711,"headPos":43708,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize BoundedFormula.falsum (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize BoundedFormula.falsum v xs"],"goalsAfter":[],"content":"rfl"},{"tailPos":43711,"headPos":43705,"goalsBefore":["case falsum\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize BoundedFormula.falsum (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize BoundedFormula.falsum v xs","case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"· rfl"},{"tailPos":43716,"headPos":43714,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs"],"content":"·"},{"tailPos":43810,"headPos":43717,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs"],"goalsAfter":[],"content":"simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term, g.injective.eq_iff]"},{"tailPos":43810,"headPos":43714,"goalsBefore":["case equal\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nt₁✝ t₂✝ : Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.equal t₁✝ t₂✝) v xs","case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"· simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term, g.injective.eq_iff]"},{"tailPos":43815,"headPos":43813,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs"],"content":"·"},{"tailPos":43889,"headPos":43816,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs"],"goalsAfter":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ (RelMap R✝ fun i => ↑g (Term.realize (Sum.elim v xs) (ts✝ i))) ↔\n    RelMap R✝ fun i => Term.realize (Sum.elim v xs) (ts✝ i)"],"content":"simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term]"},{"tailPos":43913,"headPos":43894,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ (RelMap R✝ fun i => ↑g (Term.realize (Sum.elim v xs) (ts✝ i))) ↔\n    RelMap R✝ fun i => Term.realize (Sum.elim v xs) (ts✝ i)"],"goalsAfter":[],"content":"exact g.map_rel _ _"},{"tailPos":43913,"headPos":43816,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs"],"goalsAfter":[],"content":"simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term]\n    exact g.map_rel _ _"},{"tailPos":43913,"headPos":43813,"goalsBefore":["case rel\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ l✝ : ℕ\nR✝ : Relations L l✝\nts✝ : Fin l✝ → Term L (α ⊕ Fin n✝)\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (BoundedFormula.rel R✝ ts✝) v xs","case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"· simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term]\n    exact g.map_rel _ _"},{"tailPos":43918,"headPos":43916,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"·"},{"tailPos":43946,"headPos":43923,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) → BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"BoundedFormula.Realize,"},{"tailPos":43951,"headPos":43947,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) → BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"ih1,"},{"tailPos":43956,"headPos":43952,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔\n    BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ v xs ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"content":"ih2,"},{"tailPos":43979,"headPos":43957,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ v xs ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ v xs ↔\n    BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ v xs"],"content":"BoundedFormula.Realize"},{"tailPos":43980,"headPos":43979,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ v xs ↔\n    BoundedFormula.Realize f₁✝ v xs → BoundedFormula.Realize f₂✝ v xs"],"goalsAfter":[],"content":"]"},{"tailPos":43980,"headPos":43919,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs"],"goalsAfter":[],"content":"rw [BoundedFormula.Realize, ih1, ih2, BoundedFormula.Realize]"},{"tailPos":43980,"headPos":43916,"goalsBefore":["case imp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf₁✝ f₂✝ : BoundedFormula L α n✝\nih1 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₁✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₁✝ v xs\nih2 : ∀ {xs : Fin n✝ → M}, BoundedFormula.Realize f₂✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f₂✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (f₁✝ ⟹ f₂✝) v xs","case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"· rw [BoundedFormula.Realize, ih1, ih2, BoundedFormula.Realize]"},{"tailPos":43985,"headPos":43983,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"·"},{"tailPos":44013,"headPos":43990,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"content":"BoundedFormula.Realize,"},{"tailPos":44036,"headPos":44014,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"content":"BoundedFormula.Realize"},{"tailPos":44037,"headPos":44036,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"content":"]"},{"tailPos":44037,"headPos":43986,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"content":"rw [BoundedFormula.Realize, BoundedFormula.Realize]"},{"tailPos":44053,"headPos":44042,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) ↔\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) →\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)","case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"content":"constructor"},{"tailPos":44060,"headPos":44058,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) →\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)","case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) →\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"content":"·"},{"tailPos":44070,"headPos":44061,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) →\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"content":"intro h a"},{"tailPos":44095,"headPos":44077,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) (↑g a))\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"content":"have h' := h (g a)"},{"tailPos":44124,"headPos":44106,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) (↑g a))\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"content":"← Fin.comp_snoc,"},{"tailPos":44128,"headPos":44125,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ v (snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"content":"ih3"},{"tailPos":44129,"headPos":44128,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ v (snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ v (snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"content":"]"},{"tailPos":44135,"headPos":44102,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) (↑g a))\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"goalsAfter":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ v (snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"content":"rw [← Fin.comp_snoc, ih3] at h'"},{"tailPos":44150,"headPos":44142,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)\na : M\nh' : BoundedFormula.Realize f✝ v (snoc xs a)\n⊢ BoundedFormula.Realize f✝ v (snoc xs a)"],"goalsAfter":[],"content":"exact h'"},{"tailPos":44150,"headPos":44061,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) →\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)"],"goalsAfter":[],"content":"intro h a\n      have h' := h (g a)\n      rw [← Fin.comp_snoc, ih3] at h'\n      exact h'"},{"tailPos":44150,"headPos":44058,"goalsBefore":["case all.mp\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)) →\n    ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)","case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"content":"· intro h a\n      have h' := h (g a)\n      rw [← Fin.comp_snoc, ih3] at h'\n      exact h'"},{"tailPos":44157,"headPos":44155,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"content":"·"},{"tailPos":44167,"headPos":44158,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"intro h a"},{"tailPos":44197,"headPos":44174,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ v (snoc xs (↑(symm g) a))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"have h' := h (g.symm a)"},{"tailPos":44216,"headPos":44208,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ v (snoc xs (↑(symm g) a))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ snoc xs (↑(symm g) a))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"← ih3,"},{"tailPos":44231,"headPos":44217,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ snoc xs (↑(symm g) a))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) (↑g (↑(symm g) a)))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"Fin.comp_snoc,"},{"tailPos":44250,"headPos":44232,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) (↑g (↑(symm g) a)))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"g.apply_symm_apply"},{"tailPos":44251,"headPos":44250,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"]"},{"tailPos":44257,"headPos":44204,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ v (snoc xs (↑(symm g) a))\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"content":"rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'"},{"tailPos":44272,"headPos":44264,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\nh : ∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)\na : N\nh' : BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)\n⊢ BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) a)"],"goalsAfter":[],"content":"exact h'"},{"tailPos":44272,"headPos":44158,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"goalsAfter":[],"content":"intro h a\n      have h' := h (g.symm a)\n      rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'\n      exact h'"},{"tailPos":44272,"headPos":44155,"goalsBefore":["case all.mpr\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ (∀ (x : M), BoundedFormula.Realize f✝ v (snoc xs x)) →\n    ∀ (x : N), BoundedFormula.Realize f✝ (↑g ∘ v) (snoc (↑g ∘ xs) x)"],"goalsAfter":[],"content":"· intro h a\n      have h' := h (g.symm a)\n      rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'\n      exact h'"},{"tailPos":44272,"headPos":43986,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"rw [BoundedFormula.Realize, BoundedFormula.Realize]\n    constructor\n    · intro h a\n      have h' := h (g a)\n      rw [← Fin.comp_snoc, ih3] at h'\n      exact h'\n    · intro h a\n      have h' := h (g.symm a)\n      rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'\n      exact h'"},{"tailPos":44272,"headPos":43983,"goalsBefore":["case all\nL : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nv : α → M\nxs✝ : Fin n → M\nn✝ : ℕ\nf✝ : BoundedFormula L α (n✝ + 1)\nih3 : ∀ {xs : Fin (n✝ + 1) → M}, BoundedFormula.Realize f✝ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize f✝ v xs\nxs : Fin n✝ → M\n⊢ BoundedFormula.Realize (∀'f✝) (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize (∀'f✝) v xs"],"goalsAfter":[],"content":"· rw [BoundedFormula.Realize, BoundedFormula.Realize]\n    constructor\n    · intro h a\n      have h' := h (g a)\n      rw [← Fin.comp_snoc, ih3] at h'\n      exact h'\n    · intro h a\n      have h' := h (g.symm a)\n      rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'\n      exact h'"},{"tailPos":44272,"headPos":43646,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize φ v xs"],"goalsAfter":[],"content":"induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term, g.injective.eq_iff]\n  · simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term]\n    exact g.map_rel _ _\n  · rw [BoundedFormula.Realize, ih1, ih2, BoundedFormula.Realize]\n  · rw [BoundedFormula.Realize, BoundedFormula.Realize]\n    constructor\n    · intro h a\n      have h' := h (g a)\n      rw [← Fin.comp_snoc, ih3] at h'\n      exact h'\n    · intro h a\n      have h' := h (g.symm a)\n      rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'\n      exact h'"},{"tailPos":43643,"headPos":43641,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize φ v xs"],"goalsAfter":[],"content":"by"},{"tailPos":44272,"headPos":43641,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.650244\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : BoundedFormula L α n\nv : α → M\nxs : Fin n → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ xs) ↔ BoundedFormula.Realize φ v xs"],"goalsAfter":[],"content":"by\n  induction' φ with _ _ _ _ _ _ _ _ _ _ _ ih1 ih2 _ _ ih3\n  · rfl\n  · simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term, g.injective.eq_iff]\n  · simp only [BoundedFormula.Realize, ← Sum.comp_elim, Equiv.realize_term]\n    exact g.map_rel _ _\n  · rw [BoundedFormula.Realize, ih1, ih2, BoundedFormula.Realize]\n  · rw [BoundedFormula.Realize, BoundedFormula.Realize]\n    constructor\n    · intro h a\n      have h' := h (g a)\n      rw [← Fin.comp_snoc, ih3] at h'\n      exact h'\n    · intro h a\n      have h' := h (g.symm a)\n      rw [← ih3, Fin.comp_snoc, g.apply_symm_apply] at h'\n      exact h'"},{"tailPos":44537,"headPos":44521,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ Formula.Realize φ (↑g ∘ v) ↔ Formula.Realize φ v"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default ↔ Formula.Realize φ v"],"content":"Formula.Realize,"},{"tailPos":44554,"headPos":44538,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default ↔ Formula.Realize φ v"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default ↔ BoundedFormula.Realize φ v default"],"content":"Formula.Realize,"},{"tailPos":44587,"headPos":44555,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default ↔ BoundedFormula.Realize φ v default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default ↔ BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ default)"],"content":"← g.realize_boundedFormula φ,"},{"tailPos":44598,"headPos":44588,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default ↔ BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ default)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default = BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ default)"],"content":"iff_eq_eq,"},{"tailPos":44636,"headPos":44603,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default = BoundedFormula.Realize φ (↑g ∘ v) (↑g ∘ default)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default = BoundedFormula.Realize φ (↑g ∘ v) default"],"content":"Unique.eq_default (g ∘ default)"},{"tailPos":44637,"headPos":44636,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ BoundedFormula.Realize φ (↑g ∘ v) default = BoundedFormula.Realize φ (↑g ∘ v) default"],"goalsAfter":[],"content":"]"},{"tailPos":44637,"headPos":44517,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ Formula.Realize φ (↑g ∘ v) ↔ Formula.Realize φ v"],"goalsAfter":[],"content":"rw [Formula.Realize, Formula.Realize, ← g.realize_boundedFormula φ, iff_eq_eq,\n    Unique.eq_default (g ∘ default)]"},{"tailPos":44514,"headPos":44512,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ Formula.Realize φ (↑g ∘ v) ↔ Formula.Realize φ v"],"goalsAfter":[],"content":"by"},{"tailPos":44637,"headPos":44512,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.653346\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Formula L α\nv : α → M\n⊢ Formula.Realize φ (↑g ∘ v) ↔ Formula.Realize φ v"],"goalsAfter":[],"content":"by\n  rw [Formula.Realize, Formula.Realize, ← g.realize_boundedFormula φ, iff_eq_eq,\n    Unique.eq_default (g ∘ default)]"},{"tailPos":44844,"headPos":44827,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ default ↔ N ⊨ φ"],"content":"Sentence.Realize,"},{"tailPos":44862,"headPos":44845,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ default ↔ N ⊨ φ"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ default ↔ Formula.Realize φ default"],"content":"Sentence.Realize,"},{"tailPos":44885,"headPos":44863,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ default ↔ Formula.Realize φ default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ (↑g ∘ default) ↔ Formula.Realize φ default"],"content":"← g.realize_formula,"},{"tailPos":44919,"headPos":44886,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ (↑g ∘ default) ↔ Formula.Realize φ default"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ default ↔ Formula.Realize φ default"],"content":"Unique.eq_default (g ∘ default)"},{"tailPos":44920,"headPos":44919,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ Formula.Realize φ default ↔ Formula.Realize φ default"],"goalsAfter":[],"content":"]"},{"tailPos":44920,"headPos":44823,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":[],"content":"rw [Sentence.Realize, Sentence.Realize, ← g.realize_formula, Unique.eq_default (g ∘ default)]"},{"tailPos":44820,"headPos":44818,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":[],"content":"by"},{"tailPos":44920,"headPos":44818,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.654592\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\ng : M ≃[L] N\nφ : Sentence L\n⊢ M ⊨ φ ↔ N ⊨ φ"],"goalsAfter":[],"content":"by\n  rw [Sentence.Realize, Sentence.Realize, ← g.realize_formula, Unique.eq_default (g ∘ default)]"},{"tailPos":47581,"headPos":47565,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ ↑n ≤ (#M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ lift (#Fin n) ≤ (#M)"],"content":"← lift_mk_fin,"},{"tailPos":47601,"headPos":47582,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ lift (#Fin n) ≤ (#M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ lift (lift (#Fin n)) ≤ lift (#M)"],"content":"← lift_le.{w, 0},"},{"tailPos":47612,"headPos":47602,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ lift (lift (#Fin n)) ≤ lift (#M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ lift (#Fin n) ≤ lift (#M)"],"content":"lift_lift,"},{"tailPos":47624,"headPos":47613,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ lift (#Fin n) ≤ lift (#M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ Nonempty (Fin n ↪ M)"],"content":"lift_mk_le,"},{"tailPos":47641,"headPos":47625,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨\n      BoundedFormula.exs\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)))) ↔\n    Nonempty (Fin n ↪ M)"],"content":"Sentence.cardGe,"},{"tailPos":47659,"headPos":47642,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨\n      BoundedFormula.exs\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)))) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ Formula.Realize\n      (BoundedFormula.exs\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)))))\n      default ↔\n    Nonempty (Fin n ↪ M)"],"content":"Sentence.Realize,"},{"tailPos":47690,"headPos":47664,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ Formula.Realize\n      (BoundedFormula.exs\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)))))\n      default ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"BoundedFormula.realize_exs"},{"tailPos":47691,"headPos":47690,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"]"},{"tailPos":47691,"headPos":47561,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ ↑n ≤ (#M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"rw [← lift_mk_fin, ← lift_le.{w, 0}, lift_lift, lift_mk_le, Sentence.cardGe, Sentence.Realize,\n    BoundedFormula.realize_exs]"},{"tailPos":47703,"headPos":47694,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"simp_rw ["},{"tailPos":47735,"headPos":47703,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n),\n        φ ∈\n            List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n              (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)) →\n          BoundedFormula.Realize φ default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"simp only [BoundedFormula.realize_foldr_inf]"},{"tailPos":47736,"headPos":47694,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      BoundedFormula.Realize\n        (List.foldr (fun x x_1 => x ⊓ x_1) ⊤\n          (List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n            (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n))))\n        default xs) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n),\n        φ ∈\n            List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n              (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)) →\n          BoundedFormula.Realize φ default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"simp_rw [BoundedFormula.realize_foldr_inf]"},{"tailPos":47907,"headPos":47739,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n),\n        φ ∈\n            List.map (fun ij => ∼((var ∘ Sum.inr) ij.fst =' (var ∘ Sum.inr) ij.snd))\n              (List.filter (fun ij => decide (ij.fst ≠ ij.snd)) (List.finRange n ×ˢ List.finRange n)) →\n          BoundedFormula.Realize φ default xs) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) ↔\n    Nonempty (Fin n ↪ M)"],"content":"simp only [Function.comp_apply, List.mem_map, Prod.exists, Ne.def, List.mem_product,\n    List.mem_finRange, forall_exists_index, and_imp, List.mem_filter, true_and_iff]"},{"tailPos":47953,"headPos":47910,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) ↔\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) →\n    Nonempty (Fin n ↪ M)","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"content":"refine' ⟨_, fun xs => ⟨xs.some, _⟩⟩"},{"tailPos":47958,"headPos":47956,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) →\n    Nonempty (Fin n ↪ M)","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) →\n    Nonempty (Fin n ↪ M)"],"content":"·"},{"tailPos":47977,"headPos":47959,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) →\n    Nonempty (Fin n ↪ M)"],"goalsAfter":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\n⊢ Nonempty (Fin n ↪ M)"],"content":"rintro ⟨xs, h⟩"},{"tailPos":48021,"headPos":47982,"goalsBefore":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\n⊢ Nonempty (Fin n ↪ M)"],"goalsAfter":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : xs i = xs j\n⊢ i = j"],"content":"refine' ⟨⟨xs, fun i j ij => _⟩⟩"},{"tailPos":48040,"headPos":48026,"goalsBefore":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : xs i = xs j\n⊢ i = j"],"goalsAfter":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\n⊢ xs i ≠ xs j"],"content":"contrapose! ij"},{"tailPos":48083,"headPos":48069,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\n⊢ (decide ¬i = j) = true"],"goalsAfter":[],"content":"simpa only [decide_not, Bool.not_eq_true', decide_eq_false_iff_not, ne_eq] using ij"},{"tailPos":48068,"headPos":48066,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\n⊢ (decide ¬i = j) = true"],"goalsAfter":[],"content":"by"},{"tailPos":48083,"headPos":48066,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\n⊢ (decide ¬i = j) = true"],"goalsAfter":[],"content":"by simpa using ij"},{"tailPos":48088,"headPos":48045,"goalsBefore":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\n⊢ xs i ≠ xs j"],"goalsAfter":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\nhij : BoundedFormula.Realize (∼(var (Sum.inr i) =' var (Sum.inr j))) default xs\n⊢ xs i ≠ xs j"],"content":"have hij := h _ i j (by simpa using ij) rfl"},{"tailPos":48204,"headPos":48093,"goalsBefore":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\nhij : BoundedFormula.Realize (∼(var (Sum.inr i) =' var (Sum.inr j))) default xs\n⊢ xs i ≠ xs j"],"goalsAfter":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\nhij : ¬xs i = xs j\n⊢ xs i ≠ xs j"],"content":"simp only [BoundedFormula.realize_not, Term.realize, BoundedFormula.realize_bdEqual,\n      Sum.elim_inr] at hij"},{"tailPos":48218,"headPos":48209,"goalsBefore":["case refine'_1.intro\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Fin n → M\nh :\n  ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs\ni j : Fin n\nij : i ≠ j\nhij : ¬xs i = xs j\n⊢ xs i ≠ xs j"],"goalsAfter":[],"content":"exact hij"},{"tailPos":48218,"headPos":47959,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) →\n    Nonempty (Fin n ↪ M)"],"goalsAfter":[],"content":"rintro ⟨xs, h⟩\n    refine' ⟨⟨xs, fun i j ij => _⟩⟩\n    contrapose! ij\n    have hij := h _ i j (by simpa using ij) rfl\n    simp only [BoundedFormula.realize_not, Term.realize, BoundedFormula.realize_bdEqual,\n      Sum.elim_inr] at hij\n    exact hij"},{"tailPos":48218,"headPos":47956,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ (∃ xs,\n      ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n        (decide ¬x = x_1) = true → ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default xs) →\n    Nonempty (Fin n ↪ M)","case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"content":"· rintro ⟨xs, h⟩\n    refine' ⟨⟨xs, fun i j ij => _⟩⟩\n    contrapose! ij\n    have hij := h _ i j (by simpa using ij) rfl\n    simp only [BoundedFormula.realize_not, Term.realize, BoundedFormula.realize_bdEqual,\n      Sum.elim_inr] at hij\n    exact hij"},{"tailPos":48223,"headPos":48221,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"content":"·"},{"tailPos":48243,"headPos":48224,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\ni j : Fin n\nij : (decide ¬i = j) = true\n⊢ BoundedFormula.Realize (∼(var (Sum.inr i) =' var (Sum.inr j))) default ↑(Nonempty.some xs)"],"content":"rintro _ i j ij rfl"},{"tailPos":48262,"headPos":48248,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\ni j : Fin n\nij : (decide ¬i = j) = true\n⊢ BoundedFormula.Realize (∼(var (Sum.inr i) =' var (Sum.inr j))) default ↑(Nonempty.some xs)"],"goalsAfter":[],"content":"simpa only [BoundedFormula.realize_not, BoundedFormula.realize_bdEqual, Term.realize_var, Sum.elim_inr,\n  EmbeddingLike.apply_eq_iff_eq, decide_not, Bool.not_eq_true', decide_eq_false_iff_not] using ij"},{"tailPos":48262,"headPos":48224,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"goalsAfter":[],"content":"rintro _ i j ij rfl\n    simpa using ij"},{"tailPos":48262,"headPos":48221,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\nxs : Nonempty (Fin n ↪ M)\n⊢ ∀ (φ : BoundedFormula L Empty n) (x x_1 : Fin n),\n    (decide ¬x = x_1) = true →\n      ∼(var (Sum.inr x) =' var (Sum.inr x_1)) = φ → BoundedFormula.Realize φ default ↑(Nonempty.some xs)"],"goalsAfter":[],"content":"· rintro _ i j ij rfl\n    simpa using ij"},{"tailPos":48262,"headPos":47561,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ ↑n ≤ (#M)"],"goalsAfter":[],"content":"rw [← lift_mk_fin, ← lift_le.{w, 0}, lift_lift, lift_mk_le, Sentence.cardGe, Sentence.Realize,\n    BoundedFormula.realize_exs]\n  simp_rw [BoundedFormula.realize_foldr_inf]\n  simp only [Function.comp_apply, List.mem_map, Prod.exists, Ne.def, List.mem_product,\n    List.mem_finRange, forall_exists_index, and_imp, List.mem_filter, true_and_iff]\n  refine' ⟨_, fun xs => ⟨xs.some, _⟩⟩\n  · rintro ⟨xs, h⟩\n    refine' ⟨⟨xs, fun i j ij => _⟩⟩\n    contrapose! ij\n    have hij := h _ i j (by simpa using ij) rfl\n    simp only [BoundedFormula.realize_not, Term.realize, BoundedFormula.realize_bdEqual,\n      Sum.elim_inr] at hij\n    exact hij\n  · rintro _ i j ij rfl\n    simpa using ij"},{"tailPos":47558,"headPos":47556,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ ↑n ≤ (#M)"],"goalsAfter":[],"content":"by"},{"tailPos":48262,"headPos":47556,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.762328\nP : Type ?u.762331\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn✝ : ℕ\nT : Theory L\nn : ℕ\n⊢ M ⊨ Sentence.cardGe L n ↔ ↑n ≤ (#M)"],"goalsAfter":[],"content":"by\n  rw [← lift_mk_fin, ← lift_le.{w, 0}, lift_lift, lift_mk_le, Sentence.cardGe, Sentence.Realize,\n    BoundedFormula.realize_exs]\n  simp_rw [BoundedFormula.realize_foldr_inf]\n  simp only [Function.comp_apply, List.mem_map, Prod.exists, Ne.def, List.mem_product,\n    List.mem_finRange, forall_exists_index, and_imp, List.mem_filter, true_and_iff]\n  refine' ⟨_, fun xs => ⟨xs.some, _⟩⟩\n  · rintro ⟨xs, h⟩\n    refine' ⟨⟨xs, fun i j ij => _⟩⟩\n    contrapose! ij\n    have hij := h _ i j (by simpa using ij) rfl\n    simp only [BoundedFormula.realize_not, Term.realize, BoundedFormula.realize_bdEqual,\n      Sum.elim_inr] at hij\n    exact hij\n  · rintro _ i j ij rfl\n    simpa using ij"},{"tailPos":48496,"headPos":48450,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.782402\nP : Type ?u.782405\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\n⊢ M ⊨ infiniteTheory L ↔ Infinite M"],"goalsAfter":[],"content":"simp [infiniteTheory, infinite_iff, aleph0_le]"},{"tailPos":48447,"headPos":48445,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.782402\nP : Type ?u.782405\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\n⊢ M ⊨ infiniteTheory L ↔ Infinite M"],"goalsAfter":[],"content":"by"},{"tailPos":48496,"headPos":48445,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.782402\nP : Type ?u.782405\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\n⊢ M ⊨ infiniteTheory L ↔ Infinite M"],"goalsAfter":[],"content":"by\n  simp [infiniteTheory, infinite_iff, aleph0_le]"},{"tailPos":49043,"headPos":48886,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.819644\nP : Type ?u.819647\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\n⊢ M ⊨ nonemptyTheory L ↔ Nonempty M"],"goalsAfter":[],"content":"simp only [nonemptyTheory, Theory.model_iff, Set.mem_singleton_iff, forall_eq,\n    Sentence.realize_cardGe, Nat.cast_one, one_le_iff_ne_zero, mk_ne_zero_iff]"},{"tailPos":48883,"headPos":48881,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.819644\nP : Type ?u.819647\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\n⊢ M ⊨ nonemptyTheory L ↔ Nonempty M"],"goalsAfter":[],"content":"by"},{"tailPos":49043,"headPos":48881,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type ?u.819644\nP : Type ?u.819647\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\n⊢ M ⊨ nonemptyTheory L ↔ Nonempty M"],"goalsAfter":[],"content":"by\n  simp only [nonemptyTheory, Theory.model_iff, Set.mem_singleton_iff, forall_eq,\n    Sentence.realize_cardGe, Nat.cast_one, one_le_iff_ne_zero, mk_ne_zero_iff]"},{"tailPos":49664,"headPos":49505,"goalsBefore":["L : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ M ⊨ distinctConstantsTheory L s ↔ Set.InjOn (fun i => ↑(Language.con L i)) s"],"goalsAfter":["L : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ (∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ →\n          M ⊨ φ) ↔\n    Set.InjOn (fun i => ↑(Language.con L i)) s"],"content":"simp only [distinctConstantsTheory, Theory.model_iff, Set.mem_image, Set.mem_inter,\n    Set.mem_prod, Set.mem_compl, Prod.exists, forall_exists_index, and_imp]"},{"tailPos":49707,"headPos":49667,"goalsBefore":["L : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ (∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ →\n          M ⊨ φ) ↔\n    Set.InjOn (fun i => ↑(Language.con L i)) s"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : (fun i => ↑(Language.con L i)) a = (fun i => ↑(Language.con L i)) b\n⊢ a = b","case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"content":"refine' ⟨fun h a as b bs ab => _, _⟩"},{"tailPos":49712,"headPos":49710,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : (fun i => ↑(Language.con L i)) a = (fun i => ↑(Language.con L i)) b\n⊢ a = b","case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : (fun i => ↑(Language.con L i)) a = (fun i => ↑(Language.con L i)) b\n⊢ a = b"],"content":"·"},{"tailPos":49727,"headPos":49713,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : (fun i => ↑(Language.con L i)) a = (fun i => ↑(Language.con L i)) b\n⊢ a = b"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : a ≠ b\n⊢ ↑(Language.con L a) ≠ ↑(Language.con L b)"],"content":"contrapose! ab"},{"tailPos":49777,"headPos":49732,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : a ≠ b\n⊢ ↑(Language.con L a) ≠ ↑(Language.con L b)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : a ≠ b\nh' : M ⊨ Formula.not (Term.equal (Constants.term (Language.con L a)) (Constants.term (Language.con L b)))\n⊢ ↑(Language.con L a) ≠ ↑(Language.con L b)"],"content":"have h' := h _ a b ⟨⟨as, bs⟩, ab⟩ rfl"},{"tailPos":49890,"headPos":49782,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : a ≠ b\nh' : M ⊨ Formula.not (Term.equal (Constants.term (Language.con L a)) (Constants.term (Language.con L b)))\n⊢ ↑(Language.con L a) ≠ ↑(Language.con L b)"],"goalsAfter":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : a ≠ b\nh' : ¬↑(Language.con L a) = ↑(Language.con L b)\n⊢ ↑(Language.con L a) ≠ ↑(Language.con L b)"],"content":"simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal,\n      Term.realize_constants] at h'"},{"tailPos":49903,"headPos":49895,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : a ≠ b\nh' : ¬↑(Language.con L a) = ↑(Language.con L b)\n⊢ ↑(Language.con L a) ≠ ↑(Language.con L b)"],"goalsAfter":[],"content":"exact h'"},{"tailPos":49903,"headPos":49713,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : (fun i => ↑(Language.con L i)) a = (fun i => ↑(Language.con L i)) b\n⊢ a = b"],"goalsAfter":[],"content":"contrapose! ab\n    have h' := h _ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal,\n      Term.realize_constants] at h'\n    exact h'"},{"tailPos":49903,"headPos":49710,"goalsBefore":["case refine'_1\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh :\n  ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n    (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n      Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ\na : α\nas : a ∈ s\nb : α\nbs : b ∈ s\nab : (fun i => ↑(Language.con L i)) a = (fun i => ↑(Language.con L i)) b\n⊢ a = b","case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"content":"· contrapose! ab\n    have h' := h _ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal,\n      Term.realize_constants] at h'\n    exact h'"},{"tailPos":49908,"headPos":49906,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"goalsAfter":["case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"content":"·"},{"tailPos":49951,"headPos":49909,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"goalsAfter":["case refine'_2.intro.intro\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh : Set.InjOn (fun i => ↑(Language.con L i)) s\na b : α\nab : (a, b) ∈ Set.diagonal αᶜ\nas : (a, b).fst ∈ s\nbs : (a, b).snd ∈ s\n⊢ M ⊨ Formula.not (Term.equal (Constants.term (Language.con L a)) (Constants.term (Language.con L b)))"],"content":"rintro h φ a b ⟨⟨as, bs⟩, ab⟩ rfl"},{"tailPos":50052,"headPos":49956,"goalsBefore":["case refine'_2.intro.intro\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh : Set.InjOn (fun i => ↑(Language.con L i)) s\na b : α\nab : (a, b) ∈ Set.diagonal αᶜ\nas : (a, b).fst ∈ s\nbs : (a, b).snd ∈ s\n⊢ M ⊨ Formula.not (Term.equal (Constants.term (Language.con L a)) (Constants.term (Language.con L b)))"],"goalsAfter":["case refine'_2.intro.intro\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh : Set.InjOn (fun i => ↑(Language.con L i)) s\na b : α\nab : (a, b) ∈ Set.diagonal αᶜ\nas : (a, b).fst ∈ s\nbs : (a, b).snd ∈ s\n⊢ ¬↑(Language.con L a) = ↑(Language.con L b)"],"content":"simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal, Term.realize_constants]"},{"tailPos":50096,"headPos":50057,"goalsBefore":["case refine'_2.intro.intro\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\nh : Set.InjOn (fun i => ↑(Language.con L i)) s\na b : α\nab : (a, b) ∈ Set.diagonal αᶜ\nas : (a, b).fst ∈ s\nbs : (a, b).snd ∈ s\n⊢ ¬↑(Language.con L a) = ↑(Language.con L b)"],"goalsAfter":[],"content":"exact fun contra => ab (h as bs contra)"},{"tailPos":50096,"headPos":49909,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"goalsAfter":[],"content":"rintro h φ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal, Term.realize_constants]\n    exact fun contra => ab (h as bs contra)"},{"tailPos":50096,"headPos":49906,"goalsBefore":["case refine'_2\nL : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ Set.InjOn (fun i => ↑(Language.con L i)) s →\n    ∀ (φ : Sentence (L[[α]])) (x x_1 : α),\n      (x, x_1) ∈ s ×ˢ s ∩ Set.diagonal αᶜ →\n        Formula.not (Term.equal (Constants.term (Language.con L x)) (Constants.term (Language.con L x_1))) = φ → M ⊨ φ"],"goalsAfter":[],"content":"· rintro h φ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal, Term.realize_constants]\n    exact fun contra => ab (h as bs contra)"},{"tailPos":50096,"headPos":49505,"goalsBefore":["L : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ M ⊨ distinctConstantsTheory L s ↔ Set.InjOn (fun i => ↑(Language.con L i)) s"],"goalsAfter":[],"content":"simp only [distinctConstantsTheory, Theory.model_iff, Set.mem_image, Set.mem_inter,\n    Set.mem_prod, Set.mem_compl, Prod.exists, forall_exists_index, and_imp]\n  refine' ⟨fun h a as b bs ab => _, _⟩\n  · contrapose! ab\n    have h' := h _ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal,\n      Term.realize_constants] at h'\n    exact h'\n  · rintro h φ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal, Term.realize_constants]\n    exact fun contra => ab (h as bs contra)"},{"tailPos":49502,"headPos":49500,"goalsBefore":["L : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ M ⊨ distinctConstantsTheory L s ↔ Set.InjOn (fun i => ↑(Language.con L i)) s"],"goalsAfter":[],"content":"by"},{"tailPos":50096,"headPos":49500,"goalsBefore":["L : Language\nL' : Language\nM✝ : Type w\nN : Type ?u.854555\nP : Type ?u.854558\ninst✝³ : Structure L M✝\ninst✝² : Structure L N\ninst✝¹ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nM : Type w\ninst✝ : Structure (L[[α]]) M\ns : Set α\n⊢ M ⊨ distinctConstantsTheory L s ↔ Set.InjOn (fun i => ↑(Language.con L i)) s"],"goalsAfter":[],"content":"by\n  simp only [distinctConstantsTheory, Theory.model_iff, Set.mem_image, Set.mem_inter,\n    Set.mem_prod, Set.mem_compl, Prod.exists, forall_exists_index, and_imp]\n  refine' ⟨fun h a as b bs ab => _, _⟩\n  · contrapose! ab\n    have h' := h _ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal,\n      Term.realize_constants] at h'\n    exact h'\n  · rintro h φ a b ⟨⟨as, bs⟩, ab⟩ rfl\n    simp only [Sentence.Realize, Formula.realize_not, Formula.realize_equal, Term.realize_constants]\n    exact fun contra => ab (h as bs contra)"},{"tailPos":51663,"headPos":51624,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ M ⊨ T ↔ N ⊨ T"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ T ⊆ completeTheory L M ↔ N ⊨ T"],"content":"Theory.model_iff_subset_completeTheory,"},{"tailPos":51703,"headPos":51664,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ T ⊆ completeTheory L M ↔ N ⊨ T"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ T ⊆ completeTheory L M ↔ T ⊆ completeTheory L N"],"content":"Theory.model_iff_subset_completeTheory,"},{"tailPos":51727,"headPos":51708,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ T ⊆ completeTheory L M ↔ T ⊆ completeTheory L N"],"goalsAfter":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ T ⊆ completeTheory L N ↔ T ⊆ completeTheory L N"],"content":"h.completeTheory_eq"},{"tailPos":51728,"headPos":51727,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ T ⊆ completeTheory L N ↔ T ⊆ completeTheory L N"],"goalsAfter":[],"content":"]"},{"tailPos":51728,"headPos":51620,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ M ⊨ T ↔ N ⊨ T"],"goalsAfter":[],"content":"rw [Theory.model_iff_subset_completeTheory, Theory.model_iff_subset_completeTheory,\n    h.completeTheory_eq]"},{"tailPos":51617,"headPos":51615,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ M ⊨ T ↔ N ⊨ T"],"goalsAfter":[],"content":"by"},{"tailPos":51728,"headPos":51615,"goalsBefore":["L : Language\nL' : Language\nM : Type w\nN : Type u_1\nP : Type ?u.909458\ninst✝² : Structure L M\ninst✝¹ : Structure L N\ninst✝ : Structure L P\nα : Type u'\nβ : Type v'\nn : ℕ\nT : Theory L\nh : M ≅[L] N\n⊢ M ⊨ T ↔ N ⊨ T"],"goalsAfter":[],"content":"by\n  rw [Theory.model_iff_subset_completeTheory, Theory.model_iff_subset_completeTheory,\n    h.completeTheory_eq]"}]
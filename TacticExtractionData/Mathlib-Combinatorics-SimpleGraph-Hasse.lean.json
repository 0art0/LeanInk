[{"tailPos":1601,"headPos":1587,"goalsBefore":["α : Type ?u.321\nβ : Type ?u.324\ninst✝¹ : Preorder α\ninst✝ : Preorder β\na b : α\nsrc✝ : αᵒᵈ ≃ α := ofDual\n⊢ ∀ {a b : αᵒᵈ},\n    Adj (hasse α)\n        (↑{ toFun := src✝.toFun, invFun := src✝.invFun, left_inv := (_ : Function.LeftInverse src✝.invFun src✝.toFun),\n              right_inv := (_ : Function.RightInverse src✝.invFun src✝.toFun) }\n          a)\n        (↑{ toFun := src✝.toFun, invFun := src✝.invFun, left_inv := (_ : Function.LeftInverse src✝.invFun src✝.toFun),\n              right_inv := (_ : Function.RightInverse src✝.invFun src✝.toFun) }\n          b) ↔\n      Adj (hasse αᵒᵈ) a b"],"goalsAfter":[],"content":"simp [or_comm]"},{"tailPos":1586,"headPos":1584,"goalsBefore":["α : Type ?u.321\nβ : Type ?u.324\ninst✝¹ : Preorder α\ninst✝ : Preorder β\na b : α\nsrc✝ : αᵒᵈ ≃ α := ofDual\n⊢ ∀ {a b : αᵒᵈ},\n    Adj (hasse α)\n        (↑{ toFun := src✝.toFun, invFun := src✝.invFun, left_inv := (_ : Function.LeftInverse src✝.invFun src✝.toFun),\n              right_inv := (_ : Function.RightInverse src✝.invFun src✝.toFun) }\n          a)\n        (↑{ toFun := src✝.toFun, invFun := src✝.invFun, left_inv := (_ : Function.LeftInverse src✝.invFun src✝.toFun),\n              right_inv := (_ : Function.RightInverse src✝.invFun src✝.toFun) }\n          b) ↔\n      Adj (hasse αᵒᵈ) a b"],"goalsAfter":[],"content":"by"},{"tailPos":1601,"headPos":1584,"goalsBefore":["α : Type ?u.321\nβ : Type ?u.324\ninst✝¹ : Preorder α\ninst✝ : Preorder β\na b : α\nsrc✝ : αᵒᵈ ≃ α := ofDual\n⊢ ∀ {a b : αᵒᵈ},\n    Adj (hasse α)\n        (↑{ toFun := src✝.toFun, invFun := src✝.invFun, left_inv := (_ : Function.LeftInverse src✝.invFun src✝.toFun),\n              right_inv := (_ : Function.RightInverse src✝.invFun src✝.toFun) }\n          a)\n        (↑{ toFun := src✝.toFun, invFun := src✝.invFun, left_inv := (_ : Function.LeftInverse src✝.invFun src✝.toFun),\n              right_inv := (_ : Function.RightInverse src✝.invFun src✝.toFun) }\n          b) ↔\n      Adj (hasse αᵒᵈ) a b"],"goalsAfter":[],"content":"by simp [or_comm]"},{"tailPos":2168,"headPos":2159,"goalsBefore":["α : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ hasse (α × β) = hasse α □ hasse β"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α □ hasse β) x y"],"content":"ext (x y)"},{"tailPos":2180,"headPos":2171,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α □ hasse β) x y"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α □ hasse β) x y"],"content":"simp_rw ["},{"tailPos":2192,"headPos":2180,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α □ hasse β) x y"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α) x.fst y.fst ∧ x.snd = y.snd ∨ Adj (hasse β) x.snd y.snd ∧ x.fst = y.fst"],"content":"boxProd_adj,"},{"tailPos":2203,"headPos":2193,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α) x.fst y.fst ∧ x.snd = y.snd ∨ Adj (hasse β) x.snd y.snd ∧ x.fst = y.fst"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ x ⋖ y ∨ y ⋖ x ↔ (x.fst ⋖ y.fst ∨ y.fst ⋖ x.fst) ∧ x.snd = y.snd ∨ (x.snd ⋖ y.snd ∨ y.snd ⋖ x.snd) ∧ x.fst = y.fst"],"content":"hasse_adj,"},{"tailPos":2219,"headPos":2204,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ x ⋖ y ∨ y ⋖ x ↔ (x.fst ⋖ y.fst ∨ y.fst ⋖ x.fst) ∧ x.snd = y.snd ∨ (x.snd ⋖ y.snd ∨ y.snd ⋖ x.snd) ∧ x.fst = y.fst"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ y.snd = x.snd ∨ y.snd ⋖ x.snd ∧ y.fst = x.fst ↔\n    (x.fst ⋖ y.fst ∨ y.fst ⋖ x.fst) ∧ x.snd = y.snd ∨ (x.snd ⋖ y.snd ∨ y.snd ⋖ x.snd) ∧ x.fst = y.fst"],"content":"Prod.covby_iff,"},{"tailPos":2233,"headPos":2220,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ y.snd = x.snd ∨ y.snd ⋖ x.snd ∧ y.fst = x.fst ↔\n    (x.fst ⋖ y.fst ∨ y.fst ⋖ x.fst) ∧ x.snd = y.snd ∨ (x.snd ⋖ y.snd ∨ y.snd ⋖ x.snd) ∧ x.fst = y.fst"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ y.snd = x.snd ∨ y.snd ⋖ x.snd ∧ y.fst = x.fst ↔\n    (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ y.fst ⋖ x.fst ∧ x.snd = y.snd) ∨\n      x.snd ⋖ y.snd ∧ x.fst = y.fst ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst"],"content":"or_and_right,"},{"tailPos":2249,"headPos":2234,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ y.snd = x.snd ∨ y.snd ⋖ x.snd ∧ y.fst = x.fst ↔\n    (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ y.fst ⋖ x.fst ∧ x.snd = y.snd) ∨\n      x.snd ⋖ y.snd ∧ x.fst = y.fst ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ y.snd = x.snd ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst ↔\n    (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ y.fst ⋖ x.fst ∧ x.snd = y.snd) ∨\n      x.snd ⋖ y.snd ∧ x.fst = y.fst ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst"],"content":"@eq_comm _ y.1,"},{"tailPos":2265,"headPos":2250,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ y.snd = x.snd ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst ↔\n    (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ y.fst ⋖ x.fst ∧ x.snd = y.snd) ∨\n      x.snd ⋖ y.snd ∧ x.fst = y.fst ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst"],"goalsAfter":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ x.snd = y.snd ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst ↔\n    (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ y.fst ⋖ x.fst ∧ x.snd = y.snd) ∨\n      x.snd ⋖ y.snd ∧ x.fst = y.fst ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst"],"content":"@eq_comm _ y.2,"},{"tailPos":2283,"headPos":2270,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ x.snd ⋖ y.snd ∧ x.fst = y.fst) ∨\n      y.fst ⋖ x.fst ∧ x.snd = y.snd ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst ↔\n    (x.fst ⋖ y.fst ∧ x.snd = y.snd ∨ y.fst ⋖ x.fst ∧ x.snd = y.snd) ∨\n      x.snd ⋖ y.snd ∧ x.fst = y.fst ∨ y.snd ⋖ x.snd ∧ x.fst = y.fst"],"goalsAfter":[],"content":"simp only [or_or_or_comm]"},{"tailPos":2284,"headPos":2171,"goalsBefore":["case Adj.h.h.a\nα : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\nx y : α × β\n⊢ Adj (hasse (α × β)) x y ↔ Adj (hasse α □ hasse β) x y"],"goalsAfter":[],"content":"simp_rw [boxProd_adj, hasse_adj, Prod.covby_iff, or_and_right, @eq_comm _ y.1, @eq_comm _ y.2,\n    or_or_or_comm]"},{"tailPos":2284,"headPos":2159,"goalsBefore":["α : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ hasse (α × β) = hasse α □ hasse β"],"goalsAfter":[],"content":"ext (x y)\n  simp_rw [boxProd_adj, hasse_adj, Prod.covby_iff, or_and_right, @eq_comm _ y.1, @eq_comm _ y.2,\n    or_or_or_comm]"},{"tailPos":2156,"headPos":2154,"goalsBefore":["α : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ hasse (α × β) = hasse α □ hasse β"],"goalsAfter":[],"content":"by"},{"tailPos":2284,"headPos":2154,"goalsBefore":["α : Type u_1\nβ : Type u_2\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ hasse (α × β) = hasse α □ hasse β"],"goalsAfter":[],"content":"by\n  ext (x y)\n  simp_rw [boxProd_adj, hasse_adj, Prod.covby_iff, or_and_right, @eq_comm _ y.1, @eq_comm _ y.2,\n    or_or_or_comm]"},{"tailPos":2556,"headPos":2530,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"content":"reachable_iff_reflTransGen"},{"tailPos":2557,"headPos":2556,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"goalsAfter":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"content":"]"},{"tailPos":2557,"headPos":2526,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"content":"rw [reachable_iff_reflTransGen]"},{"tailPos":2722,"headPos":2560,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"goalsAfter":[],"content":"exact\n    reflTransGen_of_succ _ (fun c hc => Or.inl <| covby_succ_of_not_isMax hc.2.not_isMax)\n      fun c hc => Or.inr <| covby_succ_of_not_isMax hc.2.not_isMax"},{"tailPos":2722,"headPos":2526,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":[],"content":"rw [reachable_iff_reflTransGen]\n  exact\n    reflTransGen_of_succ _ (fun c hc => Or.inl <| covby_succ_of_not_isMax hc.2.not_isMax)\n      fun c hc => Or.inr <| covby_succ_of_not_isMax hc.2.not_isMax"},{"tailPos":2523,"headPos":2521,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":[],"content":"by"},{"tailPos":2722,"headPos":2521,"goalsBefore":["α : Type u_1\nβ : Type ?u.5179\ninst✝² : LinearOrder α\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":[],"content":"by\n  rw [reachable_iff_reflTransGen]\n  exact\n    reflTransGen_of_succ _ (fun c hc => Or.inl <| covby_succ_of_not_isMax hc.2.not_isMax)\n      fun c hc => Or.inr <| covby_succ_of_not_isMax hc.2.not_isMax"},{"tailPos":2961,"headPos":2934,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"content":"reachable_iff_reflTransGen,"},{"tailPos":2983,"headPos":2962,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (hasse α).Adj a b"],"goalsAfter":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (Function.swap (hasse α).Adj) b a"],"content":"← reflTransGen_swap"},{"tailPos":2984,"headPos":2983,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (Function.swap (hasse α).Adj) b a"],"goalsAfter":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (Function.swap (hasse α).Adj) b a"],"content":"]"},{"tailPos":2984,"headPos":2930,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (Function.swap (hasse α).Adj) b a"],"content":"rw [reachable_iff_reflTransGen, ← reflTransGen_swap]"},{"tailPos":3149,"headPos":2987,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ ReflTransGen (Function.swap (hasse α).Adj) b a"],"goalsAfter":[],"content":"exact\n    reflTransGen_of_pred _ (fun c hc => Or.inl <| pred_covby_of_not_isMin hc.1.not_isMin)\n      fun c hc => Or.inr <| pred_covby_of_not_isMin hc.1.not_isMin"},{"tailPos":3149,"headPos":2930,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":[],"content":"rw [reachable_iff_reflTransGen, ← reflTransGen_swap]\n  exact\n    reflTransGen_of_pred _ (fun c hc => Or.inl <| pred_covby_of_not_isMin hc.1.not_isMin)\n      fun c hc => Or.inr <| pred_covby_of_not_isMin hc.1.not_isMin"},{"tailPos":2927,"headPos":2925,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":[],"content":"by"},{"tailPos":3149,"headPos":2925,"goalsBefore":["α : Type u_1\nβ : Type ?u.6930\ninst✝² : LinearOrder α\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\na b : α\n⊢ Reachable (hasse α) a b"],"goalsAfter":[],"content":"by\n  rw [reachable_iff_reflTransGen, ← reflTransGen_swap]\n  exact\n    reflTransGen_of_pred _ (fun c hc => Or.inl <| pred_covby_of_not_isMin hc.1.not_isMin)\n      fun c hc => Or.inr <| pred_covby_of_not_isMin hc.1.not_isMin"}]
[{"tailPos":1997,"headPos":1963,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nht : IsTrail p\nx : V\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":["case nil\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np : Walk G u✝ v\nht✝ : IsTrail p\nx u : V\nht : IsTrail Walk.nil\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges Walk.nil)) ↔ u ≠ u → x ≠ u ∧ x ≠ u","case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"induction' p with u u v w huv p ih"},{"tailPos":2002,"headPos":2000,"goalsBefore":["case nil\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np : Walk G u✝ v\nht✝ : IsTrail p\nx u : V\nht : IsTrail Walk.nil\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges Walk.nil)) ↔ u ≠ u → x ≠ u ∧ x ≠ u","case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case nil\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np : Walk G u✝ v\nht✝ : IsTrail p\nx u : V\nht : IsTrail Walk.nil\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges Walk.nil)) ↔ u ≠ u → x ≠ u ∧ x ≠ u"],"content":"·"},{"tailPos":2007,"headPos":2003,"goalsBefore":["case nil\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np : Walk G u✝ v\nht✝ : IsTrail p\nx u : V\nht : IsTrail Walk.nil\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges Walk.nil)) ↔ u ≠ u → x ≠ u ∧ x ≠ u"],"goalsAfter":[],"content":"simp only [edges_nil, List.countp_nil, even_zero, ne_eq, not_true, and_self, IsEmpty.forall_iff]"},{"tailPos":2007,"headPos":2000,"goalsBefore":["case nil\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np : Walk G u✝ v\nht✝ : IsTrail p\nx u : V\nht : IsTrail Walk.nil\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges Walk.nil)) ↔ u ≠ u → x ≠ u ∧ x ≠ u","case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"· simp"},{"tailPos":2012,"headPos":2010,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"·"},{"tailPos":2033,"headPos":2017,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"cons_isTrail_iff"},{"tailPos":2034,"headPos":2033,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"]"},{"tailPos":2040,"headPos":2013,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"rw [cons_isTrail_iff] at ht"},{"tailPos":2063,"headPos":2045,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"content":"specialize ih ht.1"},{"tailPos":2130,"headPos":2068,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + if decide (x = u ∨ x = v) = true then 1 else 0) ↔\n    ¬u = w → ¬x = u ∧ ¬x = w"],"content":"simp only [List.countp_cons, Ne.def, edges_cons, Sym2.mem_iff]"},{"tailPos":2151,"headPos":2135,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + if decide (x = u ∨ x = v) = true then 1 else 0) ↔\n    ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w","case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"split_ifs with h"},{"tailPos":2158,"headPos":2156,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w","case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"·"},{"tailPos":2180,"headPos":2163,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : x = u ∨ x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"decide_eq_true_eq"},{"tailPos":2181,"headPos":2180,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : x = u ∨ x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : x = u ∨ x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"]"},{"tailPos":2186,"headPos":2159,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : x = u ∨ x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"rw [decide_eq_true_eq] at h"},{"tailPos":2216,"headPos":2193,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : x = u ∨ x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w","case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"obtain (rfl | rfl) := h"},{"tailPos":2225,"headPos":2223,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w","case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"content":"·"},{"tailPos":2247,"headPos":2230,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"content":"Nat.even_add_one,"},{"tailPos":2250,"headPos":2248,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬(v ≠ w → x ≠ v ∧ x ≠ w) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"content":"ih"},{"tailPos":2251,"headPos":2250,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬(v ≠ w → x ≠ v ∧ x ≠ w) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬(v ≠ w → x ≠ v ∧ x ≠ w) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"content":"]"},{"tailPos":2251,"headPos":2226,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬(v ≠ w → x ≠ v ∧ x ≠ w) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"content":"rw [Nat.even_add_one, ih]"},{"tailPos":2456,"headPos":2260,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ ¬(v ≠ w → x ≠ v ∧ x ≠ w) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ x = w → ¬v = w"],"content":"simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]"},{"tailPos":2479,"headPos":2465,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ x = w → ¬v = w"],"goalsAfter":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nv : V\nhuv : Adj G v v\np : Walk G v v\nih : Even (List.countp (fun e => decide (v ∈ e)) (edges p)) ↔ v ≠ v → v ≠ v ∧ v ≠ v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (v, v) ∈ edges p\n⊢ False"],"content":"rintro rfl rfl"},{"tailPos":2510,"headPos":2488,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nv : V\nhuv : Adj G v v\np : Walk G v v\nih : Even (List.countp (fun e => decide (v ∈ e)) (edges p)) ↔ v ≠ v → v ≠ v ∧ v ≠ v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (v, v) ∈ edges p\n⊢ False"],"goalsAfter":[],"content":"exact G.loopless _ huv"},{"tailPos":2510,"headPos":2226,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w"],"goalsAfter":[],"content":"rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv"},{"tailPos":2510,"headPos":2223,"goalsBefore":["case cons.inl.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v w : V\np : Walk G v w\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nhuv : Adj G x v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬x = w → ¬x = x ∧ ¬x = w","case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"· rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv"},{"tailPos":2519,"headPos":2517,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"·"},{"tailPos":2541,"headPos":2524,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"Nat.even_add_one,"},{"tailPos":2545,"headPos":2542,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"ih,"},{"tailPos":2561,"headPos":2546,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬(¬u = w → ¬x = u ∧ ¬x = w)"],"content":"← not_iff_not"},{"tailPos":2562,"headPos":2561,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬(¬u = w → ¬x = u ∧ ¬x = w)"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬(¬u = w → ¬x = u ∧ ¬x = w)"],"content":"]"},{"tailPos":2562,"headPos":2520,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬(¬u = w → ¬x = u ∧ ¬x = w)"],"content":"rw [Nat.even_add_one, ih, ← not_iff_not]"},{"tailPos":2756,"headPos":2571,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ ¬¬(x ≠ w → x ≠ x ∧ x ≠ w) ↔ ¬(¬u = w → ¬x = u ∧ ¬x = w)"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ x = w → ¬u = w"],"content":"simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]"},{"tailPos":2775,"headPos":2765,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ x = w → ¬u = w"],"goalsAfter":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u : V\nhuv : Adj G u x\np : Walk G x x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ x → x ≠ x ∧ x ≠ x\n⊢ ¬u = x"],"content":"rintro rfl"},{"tailPos":2796,"headPos":2784,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u : V\nhuv : Adj G u x\np : Walk G x x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ x → x ≠ x ∧ x ≠ x\n⊢ ¬u = x"],"goalsAfter":[],"content":"exact huv.ne"},{"tailPos":2796,"headPos":2520,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":[],"content":"rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne"},{"tailPos":2796,"headPos":2517,"goalsBefore":["case cons.inl.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u w : V\nhuv : Adj G u x\np : Walk G x w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ x ≠ w → x ≠ x ∧ x ≠ w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":[],"content":"· rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne"},{"tailPos":2796,"headPos":2159,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":[],"content":"rw [decide_eq_true_eq] at h\n      obtain (rfl | rfl) := h\n      · rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv\n      · rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne"},{"tailPos":2796,"headPos":2156,"goalsBefore":["case cons.inl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 1) ↔ ¬u = w → ¬x = u ∧ ¬x = w","case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"· rw [decide_eq_true_eq] at h\n      obtain (rfl | rfl) := h\n      · rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv\n      · rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne"},{"tailPos":2803,"headPos":2801,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"·"},{"tailPos":2826,"headPos":2808,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬(x = u ∨ x = v)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"decide_eq_true_eq,"},{"tailPos":2833,"headPos":2827,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬(x = u ∨ x = v)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬x = u ∧ ¬x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"not_or"},{"tailPos":2834,"headPos":2833,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬x = u ∧ ¬x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬x = u ∧ ¬x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"]"},{"tailPos":2839,"headPos":2804,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬x = u ∧ ¬x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"content":"rw [decide_eq_true_eq, not_or] at h"},{"tailPos":2922,"headPos":2846,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬x = u ∧ ¬x = v\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬u = w → ¬x = w"],"content":"simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢"},{"tailPos":2935,"headPos":2933,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬u = w → ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ ¬v = w → ¬x = w ↔ ¬u = w → ¬x = w"],"content":"ih"},{"tailPos":2936,"headPos":2935,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ ¬v = w → ¬x = w ↔ ¬u = w → ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ ¬v = w → ¬x = w ↔ ¬u = w → ¬x = w"],"content":"]"},{"tailPos":2936,"headPos":2929,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬u = w → ¬x = w"],"goalsAfter":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ ¬v = w → ¬x = w ↔ ¬u = w → ¬x = w"],"content":"rw [ih]"},{"tailPos":2954,"headPos":2943,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ ¬v = w → ¬x = w ↔ ¬u = w → ¬x = w"],"goalsAfter":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w","case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"content":"constructor"},{"tailPos":2958,"headPos":2955,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w","case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"goalsAfter":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w","case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"content":"<;>"},{"tailPos":2969,"headPos":2967,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w"],"goalsAfter":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w"],"content":"·"},{"tailPos":2987,"headPos":2970,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w"],"goalsAfter":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh' : ¬v = x → ¬x = x\nh'' : ¬u = x\n⊢ False"],"content":"rintro h' h'' rfl"},{"tailPos":3072,"headPos":2998,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh' : ¬v = x → ¬x = x\nh'' : ¬u = x\n⊢ False"],"goalsAfter":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh'' : ¬u = x\nh' : v = x\n⊢ False"],"content":"simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'"},{"tailPos":3091,"headPos":3083,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh'' : ¬u = x\nh' : v = x\n⊢ False"],"goalsAfter":["case cons.inr.mp.refl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u : V\nh'' : ¬u = x\nhuv : Adj G u x\nh : ¬x = u ∧ ¬x = x\np : Walk G x x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬x = x → ¬x = x\n⊢ False"],"content":"cases h'"},{"tailPos":3149,"headPos":3102,"goalsBefore":["case cons.inr.mp.refl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v : V\np✝ : Walk G u✝ v\nht✝ : IsTrail p✝\nx u : V\nh'' : ¬u = x\nhuv : Adj G u x\nh : ¬x = u ∧ ¬x = x\np : Walk G x x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, x) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬x = x → ¬x = x\n⊢ False"],"goalsAfter":[],"content":"simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2970,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w"],"goalsAfter":[],"content":"rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2967,"goalsBefore":["case cons.inr.mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬v = w → ¬x = w) → ¬u = w → ¬x = w"],"goalsAfter":[],"content":"· rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":2969,"headPos":2967,"goalsBefore":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"goalsAfter":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"content":"·"},{"tailPos":2987,"headPos":2970,"goalsBefore":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"goalsAfter":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh' : ¬u = x → ¬x = x\nh'' : ¬v = x\n⊢ False"],"content":"rintro h' h'' rfl"},{"tailPos":3072,"headPos":2998,"goalsBefore":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh' : ¬u = x → ¬x = x\nh'' : ¬v = x\n⊢ False"],"goalsAfter":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh'' : ¬v = x\nh' : u = x\n⊢ False"],"content":"simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'"},{"tailPos":3091,"headPos":3083,"goalsBefore":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v : V\nhuv : Adj G u v\nh : ¬x = u ∧ ¬x = v\np : Walk G v x\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh'' : ¬v = x\nh' : u = x\n⊢ False"],"goalsAfter":["case cons.inr.mpr.refl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v : V\np : Walk G v x\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh'' : ¬v = x\nhuv : Adj G x v\nh : ¬x = x ∧ ¬x = v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ False"],"content":"cases h'"},{"tailPos":3149,"headPos":3102,"goalsBefore":["case cons.inr.mpr.refl\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v✝ : V\np✝ : Walk G u v✝\nht✝ : IsTrail p✝\nx v : V\np : Walk G v x\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = x → ¬x = x\nh'' : ¬v = x\nhuv : Adj G x v\nh : ¬x = x ∧ ¬x = v\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (x, v) ∈ edges p\n⊢ False"],"goalsAfter":[],"content":"simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2970,"goalsBefore":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"goalsAfter":[],"content":"rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2967,"goalsBefore":["case cons.inr.mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ (¬u = w → ¬x = w) → ¬v = w → ¬x = w"],"goalsAfter":[],"content":"· rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2943,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nh : ¬x = u ∧ ¬x = v\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ ¬v = w → ¬x = w\n⊢ ¬v = w → ¬x = w ↔ ¬u = w → ¬x = w"],"goalsAfter":[],"content":"constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2804,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":[],"content":"rw [decide_eq_true_eq, not_or] at h\n      simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢\n      rw [ih]\n      constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2801,"goalsBefore":["case cons.inr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nht : IsTrail p ∧ ¬Quotient.mk (Sym2.Rel.setoid V) (u, v) ∈ edges p\nih : Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w\nh : ¬decide (x = u ∨ x = v) = true\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p) + 0) ↔ ¬u = w → ¬x = u ∧ ¬x = w"],"goalsAfter":[],"content":"· rw [decide_eq_true_eq, not_or] at h\n      simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢\n      rw [ih]\n      constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2013,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":[],"content":"rw [cons_isTrail_iff] at ht\n    specialize ih ht.1\n    simp only [List.countp_cons, Ne.def, edges_cons, Sym2.mem_iff]\n    split_ifs with h\n    · rw [decide_eq_true_eq] at h\n      obtain (rfl | rfl) := h\n      · rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv\n      · rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne\n    · rw [decide_eq_true_eq, not_or] at h\n      simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢\n      rw [ih]\n      constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":2010,"goalsBefore":["case cons\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu✝ v✝ : V\np✝ : Walk G u✝ v✝\nht✝ : IsTrail p✝\nx u v w : V\nhuv : Adj G u v\np : Walk G v w\nih : IsTrail p → (Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ v ≠ w → x ≠ v ∧ x ≠ w)\nht : IsTrail (cons huv p)\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges (cons huv p))) ↔ u ≠ w → x ≠ u ∧ x ≠ w"],"goalsAfter":[],"content":"· rw [cons_isTrail_iff] at ht\n    specialize ih ht.1\n    simp only [List.countp_cons, Ne.def, edges_cons, Sym2.mem_iff]\n    split_ifs with h\n    · rw [decide_eq_true_eq] at h\n      obtain (rfl | rfl) := h\n      · rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv\n      · rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne\n    · rw [decide_eq_true_eq, not_or] at h\n      simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢\n      rw [ih]\n      constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3149,"headPos":1963,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nht : IsTrail p\nx : V\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":[],"content":"induction' p with u u v w huv p ih\n  · simp\n  · rw [cons_isTrail_iff] at ht\n    specialize ih ht.1\n    simp only [List.countp_cons, Ne.def, edges_cons, Sym2.mem_iff]\n    split_ifs with h\n    · rw [decide_eq_true_eq] at h\n      obtain (rfl | rfl) := h\n      · rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv\n      · rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne\n    · rw [decide_eq_true_eq, not_or] at h\n      simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢\n      rw [ih]\n      constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":1960,"headPos":1958,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nht : IsTrail p\nx : V\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":[],"content":"by"},{"tailPos":3149,"headPos":1958,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nht : IsTrail p\nx : V\n⊢ Even (List.countp (fun e => decide (x ∈ e)) (edges p)) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":[],"content":"by\n  induction' p with u u v w huv p ih\n  · simp\n  · rw [cons_isTrail_iff] at ht\n    specialize ih ht.1\n    simp only [List.countp_cons, Ne.def, edges_cons, Sym2.mem_iff]\n    split_ifs with h\n    · rw [decide_eq_true_eq] at h\n      obtain (rfl | rfl) := h\n      · rw [Nat.even_add_one, ih]\n        simp only [huv.ne, imp_false, Ne.def, not_false_iff, true_and_iff, not_forall,\n          Classical.not_not, exists_prop, eq_self_iff_true, not_true, false_and_iff,\n          and_iff_right_iff_imp]\n        rintro rfl rfl\n        exact G.loopless _ huv\n      · rw [Nat.even_add_one, ih, ← not_iff_not]\n        simp only [huv.ne.symm, Ne.def, eq_self_iff_true, not_true, false_and_iff, not_forall,\n          not_false_iff, exists_prop, and_true_iff, Classical.not_not, true_and_iff, iff_and_self]\n        rintro rfl\n        exact huv.ne\n    · rw [decide_eq_true_eq, not_or] at h\n      simp only [h.1, h.2, not_false_iff, true_and_iff, add_zero, Ne.def] at ih⊢\n      rw [ih]\n      constructor <;>\n        · rintro h' h'' rfl\n          simp only [imp_false, eq_self_iff_true, not_true, Classical.not_not] at h'\n          cases h'\n          simp only [not_true, and_false, false_and] at h"},{"tailPos":3813,"headPos":3801,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ List.Nodup (edges p)"],"content":"isTrail_def,"},{"tailPos":3841,"headPos":3814,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ List.Nodup (edges p)"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ ∀ (a : Sym2 V), List.count a (edges p) ≤ 1"],"content":"List.nodup_iff_count_le_one"},{"tailPos":3842,"headPos":3841,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ ∀ (a : Sym2 V), List.count a (edges p) ≤ 1"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ ∀ (a : Sym2 V), List.count a (edges p) ≤ 1"],"content":"]"},{"tailPos":3842,"headPos":3797,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ ∀ (a : Sym2 V), List.count a (edges p) ≤ 1"],"content":"rw [isTrail_def, List.nodup_iff_count_le_one]"},{"tailPos":3852,"headPos":3845,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ ∀ (a : Sym2 V), List.count a (edges p) ≤ 1"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ List.count e (edges p) ≤ 1"],"content":"intro e"},{"tailPos":3882,"headPos":3855,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":["case pos\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edges p\n⊢ List.count e (edges p) ≤ 1","case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"content":"by_cases he : e ∈ p.edges"},{"tailPos":3887,"headPos":3885,"goalsBefore":["case pos\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edges p\n⊢ List.count e (edges p) ≤ 1","case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":["case pos\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"content":"·"},{"tailPos":3930,"headPos":3888,"goalsBefore":["case pos\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":[],"content":"exact (h e (edges_subset_edgeSet _ he)).le"},{"tailPos":3930,"headPos":3885,"goalsBefore":["case pos\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edges p\n⊢ List.count e (edges p) ≤ 1","case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":["case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"content":"· exact (h e (edges_subset_edgeSet _ he)).le"},{"tailPos":3935,"headPos":3933,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":["case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"content":"·"},{"tailPos":3945,"headPos":3936,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":[],"content":"simp [he]"},{"tailPos":3945,"headPos":3933,"goalsBefore":["case neg\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : ¬e ∈ edges p\n⊢ List.count e (edges p) ≤ 1"],"goalsAfter":[],"content":"· simp [he]"},{"tailPos":3945,"headPos":3797,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p"],"goalsAfter":[],"content":"rw [isTrail_def, List.nodup_iff_count_le_one]\n  intro e\n  by_cases he : e ∈ p.edges\n  · exact (h e (edges_subset_edgeSet _ he)).le\n  · simp [he]"},{"tailPos":3794,"headPos":3792,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p"],"goalsAfter":[],"content":"by"},{"tailPos":3945,"headPos":3792,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p"],"goalsAfter":[],"content":"by\n  rw [isTrail_def, List.nodup_iff_count_le_one]\n  intro e\n  by_cases he : e ∈ p.edges\n  · exact (h e (edges_subset_edgeSet _ he)).le\n  · simp [he]"},{"tailPos":4240,"headPos":4217,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edgeSet G\n⊢ e ∈ edges p"],"goalsAfter":[],"content":"simpa only [List.one_le_count_iff_mem] using (h e he).ge"},{"tailPos":4216,"headPos":4214,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edgeSet G\n⊢ e ∈ edges p"],"goalsAfter":[],"content":"by"},{"tailPos":4240,"headPos":4214,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\nhe : e ∈ edgeSet G\n⊢ e ∈ edges p"],"goalsAfter":[],"content":"by simpa using (h e he).ge"},{"tailPos":4610,"headPos":4550,"goalsBefore":["V : Type ?u.12197\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ e ∈ IsTrail.edgesFinset (_ : IsTrail p) ↔ e ∈ edgeSet G"],"goalsAfter":[],"content":"simp only [Finset.mem_mk, Multiset.mem_coe, h.mem_edges_iff]"},{"tailPos":4545,"headPos":4543,"goalsBefore":["V : Type ?u.12197\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ e ∈ IsTrail.edgesFinset (_ : IsTrail p) ↔ e ∈ edgeSet G"],"goalsAfter":[],"content":"by"},{"tailPos":4610,"headPos":4543,"goalsBefore":["V : Type ?u.12197\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ e ∈ IsTrail.edgesFinset (_ : IsTrail p) ↔ e ∈ edgeSet G"],"goalsAfter":[],"content":"by\n    simp only [Finset.mem_mk, Multiset.mem_coe, h.mem_edges_iff]"},{"tailPos":5184,"headPos":5173,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p ↔ IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p → IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p","case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"content":"constructor"},{"tailPos":5189,"headPos":5187,"goalsBefore":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p → IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p","case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"goalsAfter":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p → IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"content":"·"},{"tailPos":5197,"headPos":5190,"goalsBefore":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p → IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"content":"intro h"},{"tailPos":5253,"headPos":5202,"goalsBefore":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":[],"content":"exact ⟨h.isTrail, fun _ => h.mem_edges_iff.mpr⟩"},{"tailPos":5253,"headPos":5190,"goalsBefore":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p → IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":[],"content":"intro h\n    exact ⟨h.isTrail, fun _ => h.mem_edges_iff.mpr⟩"},{"tailPos":5253,"headPos":5187,"goalsBefore":["case mp\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p → IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p","case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"goalsAfter":["case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"content":"· intro h\n    exact ⟨h.isTrail, fun _ => h.mem_edges_iff.mpr⟩"},{"tailPos":5258,"headPos":5256,"goalsBefore":["case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"goalsAfter":["case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"content":"·"},{"tailPos":5277,"headPos":5259,"goalsBefore":["case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"goalsAfter":["case mpr.intro\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsTrail p\nhl : ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p\n⊢ IsEulerian p"],"content":"rintro ⟨h, hl⟩"},{"tailPos":5317,"headPos":5282,"goalsBefore":["case mpr.intro\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\nh : IsTrail p\nhl : ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p\n⊢ IsEulerian p"],"goalsAfter":[],"content":"exact h.isEulerian_of_forall_mem hl"},{"tailPos":5317,"headPos":5259,"goalsBefore":["case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"goalsAfter":[],"content":"rintro ⟨h, hl⟩\n    exact h.isEulerian_of_forall_mem hl"},{"tailPos":5317,"headPos":5256,"goalsBefore":["case mpr\nV : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ (IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p) → IsEulerian p"],"goalsAfter":[],"content":"· rintro ⟨h, hl⟩\n    exact h.isEulerian_of_forall_mem hl"},{"tailPos":5317,"headPos":5173,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p ↔ IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":[],"content":"constructor\n  · intro h\n    exact ⟨h.isTrail, fun _ => h.mem_edges_iff.mpr⟩\n  · rintro ⟨h, hl⟩\n    exact h.isEulerian_of_forall_mem hl"},{"tailPos":5170,"headPos":5168,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p ↔ IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":[],"content":"by"},{"tailPos":5317,"headPos":5168,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝ : DecidableEq V\nu v : V\np : Walk G u v\n⊢ IsEulerian p ↔ IsTrail p ∧ ∀ (e : Sym2 V), e ∈ edgeSet G → e ∈ edges p"],"goalsAfter":[],"content":"by\n  constructor\n  · intro h\n    exact ⟨h.isTrail, fun _ => h.mem_edges_iff.mpr⟩\n  · rintro ⟨h, hl⟩\n    exact h.isEulerian_of_forall_mem hl"},{"tailPos":5548,"headPos":5543,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝¹ : DecidableEq V\ninst✝ : Fintype ↑(edgeSet G)\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail.edgesFinset (_ : IsTrail p) = edgeFinset G"],"goalsAfter":["case a\nV : Type u_1\nG : SimpleGraph V\ninst✝¹ : DecidableEq V\ninst✝ : Fintype ↑(edgeSet G)\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ e ∈ IsTrail.edgesFinset (_ : IsTrail p) ↔ e ∈ edgeFinset G"],"content":"ext e"},{"tailPos":5573,"headPos":5551,"goalsBefore":["case a\nV : Type u_1\nG : SimpleGraph V\ninst✝¹ : DecidableEq V\ninst✝ : Fintype ↑(edgeSet G)\nu v : V\np : Walk G u v\nh : IsEulerian p\ne : Sym2 V\n⊢ e ∈ IsTrail.edgesFinset (_ : IsTrail p) ↔ e ∈ edgeFinset G"],"goalsAfter":[],"content":"simp [h.mem_edges_iff]"},{"tailPos":5573,"headPos":5543,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝¹ : DecidableEq V\ninst✝ : Fintype ↑(edgeSet G)\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail.edgesFinset (_ : IsTrail p) = edgeFinset G"],"goalsAfter":[],"content":"ext e\n  simp [h.mem_edges_iff]"},{"tailPos":5540,"headPos":5538,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝¹ : DecidableEq V\ninst✝ : Fintype ↑(edgeSet G)\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail.edgesFinset (_ : IsTrail p) = edgeFinset G"],"goalsAfter":[],"content":"by"},{"tailPos":5573,"headPos":5538,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝¹ : DecidableEq V\ninst✝ : Fintype ↑(edgeSet G)\nu v : V\np : Walk G u v\nh : IsEulerian p\n⊢ IsTrail.edgesFinset (_ : IsTrail p) = edgeFinset G"],"goalsAfter":[],"content":"by\n  ext e\n  simp [h.mem_edges_iff]"},{"tailPos":5898,"headPos":5856,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (degree G x) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = List.countp (fun e => decide (x ∈ e)) (edges p)"],"content":"convert ht.isTrail.even_countp_edges_iff x"},{"tailPos":5929,"headPos":5905,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = List.countp (fun e => decide (x ∈ e)) (edges p)"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = Multiset.countp (fun e => x ∈ e) ↑(edges p)"],"content":"← Multiset.coe_countp,"},{"tailPos":5961,"headPos":5930,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = Multiset.countp (fun e => x ∈ e) ↑(edges p)"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"content":"Multiset.countp_eq_card_filter,"},{"tailPos":5996,"headPos":5962,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Finset.card (incidenceFinset G x) = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"content":"← card_incidenceFinset_eq_degree"},{"tailPos":5997,"headPos":5996,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Finset.card (incidenceFinset G x) = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Finset.card (incidenceFinset G x) = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"content":"]"},{"tailPos":5997,"headPos":5901,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ degree G x = List.countp (fun e => decide (x ∈ e)) (edges p)"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Finset.card (incidenceFinset G x) = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"content":"rw [← Multiset.coe_countp, Multiset.countp_eq_card_filter, ← card_incidenceFinset_eq_degree]"},{"tailPos":6026,"headPos":6000,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Finset.card (incidenceFinset G x) = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"goalsAfter":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ ↑Multiset.card (incidenceFinset G x).val = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"content":"change Multiset.card _ = _"},{"tailPos":6036,"headPos":6029,"goalsBefore":["case h.e'_1.h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ ↑Multiset.card (incidenceFinset G x).val = ↑Multiset.card (Multiset.filter (fun e => x ∈ e) ↑(edges p))"],"goalsAfter":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ (incidenceFinset G x).val = Multiset.filter (fun e => x ∈ e) ↑(edges p)"],"content":"congr 1"},{"tailPos":6108,"headPos":6039,"goalsBefore":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ (incidenceFinset G x).val = Multiset.filter (fun e => x ∈ e) ↑(edges p)"],"goalsAfter":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (IsTrail.edgesFinset (_ : IsTrail p))).val"],"content":"convert_to _ = (ht.isTrail.edgesFinset.filter (Membership.mem x)).val"},{"tailPos":6156,"headPos":6111,"goalsBefore":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (IsTrail.edgesFinset (_ : IsTrail p))).val"],"goalsAfter":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (IsTrail.edgesFinset (_ : IsTrail p))).val"],"content":"have : Fintype G.edgeSet := fintypeEdgeSet ht"},{"tailPos":6181,"headPos":6163,"goalsBefore":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (IsTrail.edgesFinset (_ : IsTrail p))).val"],"goalsAfter":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (edgeFinset G)).val"],"content":"ht.edgesFinset_eq,"},{"tailPos":6211,"headPos":6182,"goalsBefore":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (edgeFinset G)).val"],"goalsAfter":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (Finset.filter (Membership.mem x) (edgeFinset G)).val = (Finset.filter (Membership.mem x) (edgeFinset G)).val"],"content":"G.incidenceFinset_eq_filter x"},{"tailPos":6212,"headPos":6211,"goalsBefore":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (Finset.filter (Membership.mem x) (edgeFinset G)).val = (Finset.filter (Membership.mem x) (edgeFinset G)).val"],"goalsAfter":[],"content":"]"},{"tailPos":6212,"headPos":6159,"goalsBefore":["case h.e'_1.h.e'_3.h.e_6.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nthis : Fintype ↑(edgeSet G)\n⊢ (incidenceFinset G x).val = (Finset.filter (Membership.mem x) (IsTrail.edgesFinset (_ : IsTrail p))).val"],"goalsAfter":[],"content":"rw [ht.edgesFinset_eq, G.incidenceFinset_eq_filter x]"},{"tailPos":6212,"headPos":5856,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (degree G x) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":[],"content":"convert ht.isTrail.even_countp_edges_iff x\n  rw [← Multiset.coe_countp, Multiset.countp_eq_card_filter, ← card_incidenceFinset_eq_degree]\n  change Multiset.card _ = _\n  congr 1\n  convert_to _ = (ht.isTrail.edgesFinset.filter (Membership.mem x)).val\n  have : Fintype G.edgeSet := fintypeEdgeSet ht\n  rw [ht.edgesFinset_eq, G.incidenceFinset_eq_filter x]"},{"tailPos":5853,"headPos":5851,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (degree G x) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":[],"content":"by"},{"tailPos":6212,"headPos":5851,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\nx u v : V\np : Walk G u v\nht : IsEulerian p\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\n⊢ Even (degree G x) ↔ u ≠ v → x ≠ u ∧ x ≠ v"],"goalsAfter":[],"content":"by\n  convert ht.isTrail.even_countp_edges_iff x\n  rw [← Multiset.coe_countp, Multiset.countp_eq_card_filter, ← card_incidenceFinset_eq_degree]\n  change Multiset.card _ = _\n  congr 1\n  convert_to _ = (ht.isTrail.edgesFinset.filter (Membership.mem x)).val\n  have : Fintype G.edgeSet := fintypeEdgeSet ht\n  rw [ht.edgesFinset_eq, G.incidenceFinset_eq_filter x]"},{"tailPos":6560,"headPos":6553,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\ns : Finset V\nh : s = Finset.filter (fun v => Odd (degree G v)) Finset.univ\n⊢ Finset.card s = 0 ∨ Finset.card s = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Finset.filter (fun v => Odd (degree G v)) Finset.univ) = 0 ∨\n    Finset.card (Finset.filter (fun v => Odd (degree G v)) Finset.univ) = 2"],"content":"subst s"},{"tailPos":6616,"headPos":6563,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Finset.filter (fun v => Odd (degree G v)) Finset.univ) = 0 ∨\n    Finset.card (Finset.filter (fun v => Odd (degree G v)) Finset.univ) = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬Even (degree G v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬Even (degree G v)) Finset.univ) = 2"],"content":"simp only [Nat.odd_iff_not_even, Finset.card_eq_zero]"},{"tailPos":6710,"headPos":6619,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬Even (degree G v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬Even (degree G v)) Finset.univ) = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"content":"simp only [ht.even_degree_iff, Ne.def, not_forall, not_and, Classical.not_not, exists_prop]"},{"tailPos":6744,"headPos":6713,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":["case inl\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ) = 2","case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"content":"obtain rfl | hn := eq_or_ne u v"},{"tailPos":6749,"headPos":6747,"goalsBefore":["case inl\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ) = 2","case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":["case inl\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ) = 2"],"content":"·"},{"tailPos":6754,"headPos":6750,"goalsBefore":["case inl\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ) = 2"],"goalsAfter":["case inl.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅"],"content":"left"},{"tailPos":6763,"headPos":6759,"goalsBefore":["case inl.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅"],"goalsAfter":[],"content":"simp only [not_true, not_imp_self, false_and, Finset.mem_univ, forall_true_left, Finset.filter_False]"},{"tailPos":6763,"headPos":6750,"goalsBefore":["case inl\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ) = 2"],"goalsAfter":[],"content":"left\n    simp"},{"tailPos":6763,"headPos":6747,"goalsBefore":["case inl\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu : V\np : Walk G u u\nht : IsEulerian p\n⊢ Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v => ¬u = u ∧ (¬v = u → v = u)) Finset.univ) = 2","case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":["case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"content":"· left\n    simp"},{"tailPos":6768,"headPos":6766,"goalsBefore":["case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":["case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"content":"·"},{"tailPos":6774,"headPos":6769,"goalsBefore":["case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"content":"right"},{"tailPos":6818,"headPos":6779,"goalsBefore":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":["case h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ 2 = Finset.card {u, v}","case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"content":"convert_to _ = ({u, v} : Finset V).card"},{"tailPos":6825,"headPos":6823,"goalsBefore":["case h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ 2 = Finset.card {u, v}","case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"goalsAfter":["case h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ 2 = Finset.card {u, v}"],"content":"·"},{"tailPos":6835,"headPos":6826,"goalsBefore":["case h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ 2 = Finset.card {u, v}"],"goalsAfter":[],"content":"simp [hn]"},{"tailPos":6835,"headPos":6823,"goalsBefore":["case h.e'_3\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ 2 = Finset.card {u, v}","case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"goalsAfter":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"content":"· simp [hn]"},{"tailPos":6842,"headPos":6840,"goalsBefore":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"goalsAfter":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"content":"·"},{"tailPos":6848,"headPos":6843,"goalsBefore":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"goalsAfter":["case inr.h.e_s\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = {u, v}"],"content":"congr"},{"tailPos":6860,"headPos":6855,"goalsBefore":["case inr.h.e_s\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = {u, v}"],"goalsAfter":["case inr.h.e_s.a\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\nx : V\n⊢ x ∈ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ ↔ x ∈ {u, v}"],"content":"ext x"},{"tailPos":6892,"headPos":6867,"goalsBefore":["case inr.h.e_s.a\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\nx : V\n⊢ x ∈ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ ↔ x ∈ {u, v}"],"goalsAfter":[],"content":"simp [hn, imp_iff_not_or]"},{"tailPos":6892,"headPos":6843,"goalsBefore":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"goalsAfter":[],"content":"congr\n      ext x\n      simp [hn, imp_iff_not_or]"},{"tailPos":6892,"headPos":6840,"goalsBefore":["case inr.h\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = Finset.card {u, v}"],"goalsAfter":[],"content":"· congr\n      ext x\n      simp [hn, imp_iff_not_or]"},{"tailPos":6892,"headPos":6769,"goalsBefore":["case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":[],"content":"right\n    convert_to _ = ({u, v} : Finset V).card\n    · simp [hn]\n    · congr\n      ext x\n      simp [hn, imp_iff_not_or]"},{"tailPos":6892,"headPos":6766,"goalsBefore":["case inr\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\nhn : u ≠ v\n⊢ Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ = ∅ ∨\n    Finset.card (Finset.filter (fun v_1 => ¬u = v ∧ (¬v_1 = u → v_1 = v)) Finset.univ) = 2"],"goalsAfter":[],"content":"· right\n    convert_to _ = ({u, v} : Finset V).card\n    · simp [hn]\n    · congr\n      ext x\n      simp [hn, imp_iff_not_or]"},{"tailPos":6892,"headPos":6553,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\ns : Finset V\nh : s = Finset.filter (fun v => Odd (degree G v)) Finset.univ\n⊢ Finset.card s = 0 ∨ Finset.card s = 2"],"goalsAfter":[],"content":"subst s\n  simp only [Nat.odd_iff_not_even, Finset.card_eq_zero]\n  simp only [ht.even_degree_iff, Ne.def, not_forall, not_and, Classical.not_not, exists_prop]\n  obtain rfl | hn := eq_or_ne u v\n  · left\n    simp\n  · right\n    convert_to _ = ({u, v} : Finset V).card\n    · simp [hn]\n    · congr\n      ext x\n      simp [hn, imp_iff_not_or]"},{"tailPos":6550,"headPos":6548,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\ns : Finset V\nh : s = Finset.filter (fun v => Odd (degree G v)) Finset.univ\n⊢ Finset.card s = 0 ∨ Finset.card s = 2"],"goalsAfter":[],"content":"by"},{"tailPos":6892,"headPos":6548,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\ns : Finset V\nh : s = Finset.filter (fun v => Odd (degree G v)) Finset.univ\n⊢ Finset.card s = 0 ∨ Finset.card s = 2"],"goalsAfter":[],"content":"by\n  subst s\n  simp only [Nat.odd_iff_not_even, Finset.card_eq_zero]\n  simp only [ht.even_degree_iff, Ne.def, not_forall, not_and, Classical.not_not, exists_prop]\n  obtain rfl | hn := eq_or_ne u v\n  · left\n    simp\n  · right\n    convert_to _ = ({u, v} : Finset V).card\n    · simp [hn]\n    · congr\n      ext x\n      simp [hn, imp_iff_not_or]"},{"tailPos":7261,"headPos":7240,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Fintype.card ↑{v | Odd (degree G v)} = 0 ∨ Fintype.card ↑{v | Odd (degree G v)} = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 0 ∨ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 2"],"content":"← Set.toFinset_card"},{"tailPos":7262,"headPos":7261,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 0 ∨ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 0 ∨ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 2"],"content":"]"},{"tailPos":7262,"headPos":7236,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Fintype.card ↑{v | Odd (degree G v)} = 0 ∨ Fintype.card ↑{v | Odd (degree G v)} = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 0 ∨ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 2"],"content":"rw [← Set.toFinset_card]"},{"tailPos":7307,"headPos":7265,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 0 ∨ Finset.card (Set.toFinset {v | Odd (degree G v)}) = 2"],"goalsAfter":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Set.toFinset {v | Odd (degree G v)} = Finset.filter (fun v => Odd (degree G v)) Finset.univ"],"content":"apply IsEulerian.card_filter_odd_degree ht"},{"tailPos":7315,"headPos":7310,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Set.toFinset {v | Odd (degree G v)} = Finset.filter (fun v => Odd (degree G v)) Finset.univ"],"goalsAfter":["case a\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v✝ : V\np : Walk G u v✝\nht : IsEulerian p\nv : V\n⊢ v ∈ Set.toFinset {v | Odd (degree G v)} ↔ v ∈ Finset.filter (fun v => Odd (degree G v)) Finset.univ"],"content":"ext v"},{"tailPos":7322,"headPos":7318,"goalsBefore":["case a\nV : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v✝ : V\np : Walk G u v✝\nht : IsEulerian p\nv : V\n⊢ v ∈ Set.toFinset {v | Odd (degree G v)} ↔ v ∈ Finset.filter (fun v => Odd (degree G v)) Finset.univ"],"goalsAfter":[],"content":"simp only [Nat.odd_iff_not_even, Set.toFinset_setOf, Finset.mem_univ, forall_true_left, Finset.mem_filter,\n  true_and]"},{"tailPos":7322,"headPos":7236,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Fintype.card ↑{v | Odd (degree G v)} = 0 ∨ Fintype.card ↑{v | Odd (degree G v)} = 2"],"goalsAfter":[],"content":"rw [← Set.toFinset_card]\n  apply IsEulerian.card_filter_odd_degree ht\n  ext v\n  simp"},{"tailPos":7233,"headPos":7231,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Fintype.card ↑{v | Odd (degree G v)} = 0 ∨ Fintype.card ↑{v | Odd (degree G v)} = 2"],"goalsAfter":[],"content":"by"},{"tailPos":7322,"headPos":7231,"goalsBefore":["V : Type u_1\nG : SimpleGraph V\ninst✝² : DecidableEq V\ninst✝¹ : Fintype V\ninst✝ : DecidableRel G.Adj\nu v : V\np : Walk G u v\nht : IsEulerian p\n⊢ Fintype.card ↑{v | Odd (degree G v)} = 0 ∨ Fintype.card ↑{v | Odd (degree G v)} = 2"],"goalsAfter":[],"content":"by\n  rw [← Set.toFinset_card]\n  apply IsEulerian.card_filter_odd_degree ht\n  ext v\n  simp"}]
[{"tailPos":2803,"headPos":2756,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ toEdge h { val := v, property := hv } = { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := hvw }"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, Exists.choose (_ : ∃! w, Adj M (↑{ val := v, property := hv }) w)) =\n    Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"content":"simp only [IsMatching.toEdge, Subtype.mk_eq_mk]"},{"tailPos":2811,"headPos":2806,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, Exists.choose (_ : ∃! w, Adj M (↑{ val := v, property := hv }) w)) =\n    Quotient.mk (Sym2.Rel.setoid V) (v, w)"],"goalsAfter":["case e_a.e_snd\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ Exists.choose (_ : ∃! w, Adj M (↑{ val := v, property := hv }) w) = w"],"content":"congr"},{"tailPos":2868,"headPos":2814,"goalsBefore":["case e_a.e_snd\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ Exists.choose (_ : ∃! w, Adj M (↑{ val := v, property := hv }) w) = w"],"goalsAfter":[],"content":"exact ((h (M.edge_vert hvw)).choose_spec.2 w hvw).symm"},{"tailPos":2868,"headPos":2756,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ toEdge h { val := v, property := hv } = { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := hvw }"],"goalsAfter":[],"content":"simp only [IsMatching.toEdge, Subtype.mk_eq_mk]\n  congr\n  exact ((h (M.edge_vert hvw)).choose_spec.2 w hvw).symm"},{"tailPos":2753,"headPos":2751,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ toEdge h { val := v, property := hv } = { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := hvw }"],"goalsAfter":[],"content":"by"},{"tailPos":2868,"headPos":2751,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv w : V\nhv : v ∈ M.verts\nhvw : Adj M v w\n⊢ toEdge h { val := v, property := hv } = { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := hvw }"],"goalsAfter":[],"content":"by\n  simp only [IsMatching.toEdge, Subtype.mk_eq_mk]\n  congr\n  exact ((h (M.edge_vert hvw)).choose_spec.2 w hvw).symm"},{"tailPos":3112,"headPos":3094,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ Function.Surjective (toEdge h)"],"goalsAfter":["case mk\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\ne : Sym2 V\nhe : e ∈ edgeSet M\n⊢ ∃ a, toEdge h a = { val := e, property := he }"],"content":"rintro ⟨e, he⟩"},{"tailPos":3154,"headPos":3115,"goalsBefore":["case mk\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\ne : Sym2 V\nhe : e ∈ edgeSet M\n⊢ ∃ a, toEdge h a = { val := e, property := he }"],"goalsAfter":["case mk\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\ne : Sym2 V\nhe✝ : e ∈ edgeSet M\nx y : V\nhe : Quotient.mk (Sym2.Rel.setoid V) (x, y) ∈ edgeSet M\n⊢ ∃ a, toEdge h a = { val := Quotient.mk (Sym2.Rel.setoid V) (x, y), property := he }"],"content":"refine Sym2.ind (fun x y he => ?_) e he"},{"tailPos":3217,"headPos":3157,"goalsBefore":["case mk\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\ne : Sym2 V\nhe✝ : e ∈ edgeSet M\nx y : V\nhe : Quotient.mk (Sym2.Rel.setoid V) (x, y) ∈ edgeSet M\n⊢ ∃ a, toEdge h a = { val := Quotient.mk (Sym2.Rel.setoid V) (x, y), property := he }"],"goalsAfter":[],"content":"exact ⟨⟨x, M.edge_vert he⟩, h.toEdge_eq_of_adj _ he⟩"},{"tailPos":3217,"headPos":3094,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ Function.Surjective (toEdge h)"],"goalsAfter":[],"content":"rintro ⟨e, he⟩\n  refine Sym2.ind (fun x y he => ?_) e he\n  exact ⟨⟨x, M.edge_vert he⟩, h.toEdge_eq_of_adj _ he⟩"},{"tailPos":3091,"headPos":3089,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ Function.Surjective (toEdge h)"],"goalsAfter":[],"content":"by"},{"tailPos":3217,"headPos":3089,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ Function.Surjective (toEdge h)"],"goalsAfter":[],"content":"by\n  rintro ⟨e, he⟩\n  refine Sym2.ind (fun x y he => ?_) e he\n  exact ⟨⟨x, M.edge_vert he⟩, h.toEdge_eq_of_adj _ he⟩"},{"tailPos":3568,"headPos":3543,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ toEdge h { val := v, property := hv } = toEdge h { val := w, property := hw }"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := ha } = toEdge h { val := w, property := hw }"],"content":"h.toEdge_eq_of_adj hv ha,"},{"tailPos":3603,"headPos":3569,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := ha } = toEdge h { val := w, property := hw }"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := ha } =\n    { val := Quotient.mk (Sym2.Rel.setoid V) (w, v), property := (_ : Adj M w v) }"],"content":"h.toEdge_eq_of_adj hw (M.symm ha),"},{"tailPos":3621,"headPos":3604,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ { val := Quotient.mk (Sym2.Rel.setoid V) (v, w), property := ha } =\n    { val := Quotient.mk (Sym2.Rel.setoid V) (w, v), property := (_ : Adj M w v) }"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) = Quotient.mk (Sym2.Rel.setoid V) (w, v)"],"content":"Subtype.mk_eq_mk,"},{"tailPos":3634,"headPos":3622,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ Quotient.mk (Sym2.Rel.setoid V) (v, w) = Quotient.mk (Sym2.Rel.setoid V) (w, v)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) = Quotient.mk (Sym2.Rel.setoid V) (w, v)"],"content":"Sym2.eq_swap"},{"tailPos":3635,"headPos":3634,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ Quotient.mk (Sym2.Rel.setoid V) (w, v) = Quotient.mk (Sym2.Rel.setoid V) (w, v)"],"goalsAfter":[],"content":"]"},{"tailPos":3635,"headPos":3539,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ toEdge h { val := v, property := hv } = toEdge h { val := w, property := hw }"],"goalsAfter":[],"content":"rw [h.toEdge_eq_of_adj hv ha, h.toEdge_eq_of_adj hw (M.symm ha), Subtype.mk_eq_mk, Sym2.eq_swap]"},{"tailPos":3536,"headPos":3534,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ toEdge h { val := v, property := hv } = toEdge h { val := w, property := hw }"],"goalsAfter":[],"content":"by"},{"tailPos":3635,"headPos":3534,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nv w : V\nh : IsMatching M\nhv : v ∈ M.verts\nhw : w ∈ M.verts\nha : Adj M v w\n⊢ toEdge h { val := v, property := hv } = toEdge h { val := w, property := hw }"],"goalsAfter":[],"content":"by\n  rw [h.toEdge_eq_of_adj hv ha, h.toEdge_eq_of_adj hw (M.symm ha), Subtype.mk_eq_mk, Sym2.eq_swap]"},{"tailPos":4178,"headPos":4125,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ support M = M.verts"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv : V\nhv : v ∈ M.verts\n⊢ v ∈ support M"],"content":"refine M.support_subset_verts.antisymm fun v hv => ?_"},{"tailPos":4211,"headPos":4181,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv : V\nhv : v ∈ M.verts\n⊢ v ∈ support M"],"goalsAfter":["case intro.intro\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv : V\nhv : v ∈ M.verts\nw : V\nhvw : Adj M v w\n⊢ v ∈ support M"],"content":"obtain ⟨w, hvw, -⟩ := h hv"},{"tailPos":4232,"headPos":4214,"goalsBefore":["case intro.intro\nV : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\nv : V\nhv : v ∈ M.verts\nw : V\nhvw : Adj M v w\n⊢ v ∈ support M"],"goalsAfter":[],"content":"exact ⟨_, hvw⟩"},{"tailPos":4232,"headPos":4125,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ support M = M.verts"],"goalsAfter":[],"content":"refine M.support_subset_verts.antisymm fun v hv => ?_\n  obtain ⟨w, hvw, -⟩ := h hv\n  exact ⟨_, hvw⟩"},{"tailPos":4122,"headPos":4120,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ support M = M.verts"],"goalsAfter":[],"content":"by"},{"tailPos":4232,"headPos":4120,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\nh : IsMatching M\n⊢ support M = M.verts"],"goalsAfter":[],"content":"by\n  refine M.support_subset_verts.antisymm fun v hv => ?_\n  obtain ⟨w, hvw, -⟩ := h hv\n  exact ⟨_, hvw⟩"},{"tailPos":4561,"headPos":4509,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : (v : V) → Fintype ↑(neighborSet M v)\n⊢ IsMatching M ↔ ∀ (v : V), v ∈ M.verts → degree M v = 1"],"goalsAfter":[],"content":"simp only [degree_eq_one_iff_unique_adj, IsMatching]"},{"tailPos":4506,"headPos":4504,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : (v : V) → Fintype ↑(neighborSet M v)\n⊢ IsMatching M ↔ ∀ (v : V), v ∈ M.verts → degree M v = 1"],"goalsAfter":[],"content":"by"},{"tailPos":4561,"headPos":4504,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : (v : V) → Fintype ↑(neighborSet M v)\n⊢ IsMatching M ↔ ∀ (v : V), v ∈ M.verts → degree M v = 1"],"goalsAfter":[],"content":"by\n  simp only [degree_eq_one_iff_unique_adj, IsMatching]"},{"tailPos":4840,"headPos":4812,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh : IsMatching M\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"content":"isMatching_iff_forall_degree"},{"tailPos":4841,"headPos":4840,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"content":"]"},{"tailPos":4846,"headPos":4808,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh : IsMatching M\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"content":"rw [isMatching_iff_forall_degree] at h"},{"tailPos":4874,"headPos":4849,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) =\n    Finset.card (edgeFinset (Subgraph.coe M)) + Finset.card (edgeFinset (Subgraph.coe M))"],"content":"use M.coe.edgeFinset.card"},{"tailPos":4893,"headPos":4881,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) =\n    Finset.card (edgeFinset (Subgraph.coe M)) + Finset.card (edgeFinset (Subgraph.coe M))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = 2 * Finset.card (edgeFinset (Subgraph.coe M))"],"content":"← two_mul,"},{"tailPos":4935,"headPos":4894,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = 2 * Finset.card (edgeFinset (Subgraph.coe M))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"content":"← M.coe.sum_degrees_eq_twice_card_edges"},{"tailPos":4936,"headPos":4935,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"content":"]"},{"tailPos":4936,"headPos":4877,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) =\n    Finset.card (edgeFinset (Subgraph.coe M)) + Finset.card (edgeFinset (Subgraph.coe M))"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"content":"rw [← two_mul, ← M.coe.sum_degrees_eq_twice_card_edges]"},{"tailPos":5286,"headPos":5194,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"content":"convert_to _ = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v using 3"},{"tailPos":5315,"headPos":5289,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh✝ : IsMatching M\nh : ∀ (v : V), v ∈ M.verts → degree M v = 1\n⊢ Finset.card (Set.toFinset M.verts) = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v"],"goalsAfter":[],"content":"simp [h, Finset.card_univ]"},{"tailPos":5315,"headPos":4808,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh : IsMatching M\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":[],"content":"rw [isMatching_iff_forall_degree] at h\n  use M.coe.edgeFinset.card\n  rw [← two_mul, ← M.coe.sum_degrees_eq_twice_card_edges]\n  -- Porting note: `SimpleGraph.Subgraph.coe_degree` does not trigger because it uses\n  -- instance arguments instead of implicit arguments for the first `Fintype` argument.\n  -- Using a `convert_to` to swap out the `Fintype` instance to the \"right\" one.\n  convert_to _ = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v using 3\n  simp [h, Finset.card_univ]"},{"tailPos":5315,"headPos":4796,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh : IsMatching M\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":[],"content":"classical\n  rw [isMatching_iff_forall_degree] at h\n  use M.coe.edgeFinset.card\n  rw [← two_mul, ← M.coe.sum_degrees_eq_twice_card_edges]\n  -- Porting note: `SimpleGraph.Subgraph.coe_degree` does not trigger because it uses\n  -- instance arguments instead of implicit arguments for the first `Fintype` argument.\n  -- Using a `convert_to` to swap out the `Fintype` instance to the \"right\" one.\n  convert_to _ = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v using 3\n  simp [h, Finset.card_univ]"},{"tailPos":4793,"headPos":4791,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh : IsMatching M\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":[],"content":"by"},{"tailPos":5315,"headPos":4791,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype ↑M.verts\nh : IsMatching M\n⊢ Even (Finset.card (Set.toFinset M.verts))"],"goalsAfter":[],"content":"by\n  classical\n  rw [isMatching_iff_forall_degree] at h\n  use M.coe.edgeFinset.card\n  rw [← two_mul, ← M.coe.sum_degrees_eq_twice_card_edges]\n  -- Porting note: `SimpleGraph.Subgraph.coe_degree` does not trigger because it uses\n  -- instance arguments instead of implicit arguments for the first `Fintype` argument.\n  -- Using a `convert_to` to swap out the `Fintype` instance to the \"right\" one.\n  convert_to _ = Finset.sum Finset.univ fun v => SimpleGraph.degree (Subgraph.coe M) v using 3\n  simp [h, Finset.card_univ]"},{"tailPos":5559,"headPos":5499,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M ↔ ∀ (v : V), ∃! w, Adj M v w"],"goalsAfter":["case refine'_1\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M → ∀ (v : V), ∃! w, Adj M v w","case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"content":"refine' ⟨_, fun hm => ⟨fun v _ => hm v, fun v => _⟩⟩"},{"tailPos":5564,"headPos":5562,"goalsBefore":["case refine'_1\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M → ∀ (v : V), ∃! w, Adj M v w","case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"goalsAfter":["case refine'_1\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M → ∀ (v : V), ∃! w, Adj M v w"],"content":"·"},{"tailPos":5586,"headPos":5565,"goalsBefore":["case refine'_1\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M → ∀ (v : V), ∃! w, Adj M v w"],"goalsAfter":["case refine'_1.intro\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : IsMatching M\nhs : IsSpanning M\nv : V\n⊢ ∃! w, Adj M v w"],"content":"rintro ⟨hm, hs⟩ v"},{"tailPos":5606,"headPos":5591,"goalsBefore":["case refine'_1.intro\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : IsMatching M\nhs : IsSpanning M\nv : V\n⊢ ∃! w, Adj M v w"],"goalsAfter":[],"content":"exact hm (hs v)"},{"tailPos":5606,"headPos":5565,"goalsBefore":["case refine'_1\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M → ∀ (v : V), ∃! w, Adj M v w"],"goalsAfter":[],"content":"rintro ⟨hm, hs⟩ v\n    exact hm (hs v)"},{"tailPos":5606,"headPos":5562,"goalsBefore":["case refine'_1\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M → ∀ (v : V), ∃! w, Adj M v w","case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"goalsAfter":["case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"content":"· rintro ⟨hm, hs⟩ v\n    exact hm (hs v)"},{"tailPos":5611,"headPos":5609,"goalsBefore":["case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"goalsAfter":["case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"content":"·"},{"tailPos":5641,"headPos":5612,"goalsBefore":["case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"goalsAfter":["case refine'_2.intro.intro\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv w : V\nhw : Adj M v w\n⊢ v ∈ M.verts"],"content":"obtain ⟨w, hw, -⟩ := hm v"},{"tailPos":5666,"headPos":5646,"goalsBefore":["case refine'_2.intro.intro\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv w : V\nhw : Adj M v w\n⊢ v ∈ M.verts"],"goalsAfter":[],"content":"exact M.edge_vert hw"},{"tailPos":5666,"headPos":5612,"goalsBefore":["case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"goalsAfter":[],"content":"obtain ⟨w, hw, -⟩ := hm v\n    exact M.edge_vert hw"},{"tailPos":5666,"headPos":5609,"goalsBefore":["case refine'_2\nV : Type u\nG : SimpleGraph V\nM : Subgraph G\nhm : ∀ (v : V), ∃! w, Adj M v w\nv : V\n⊢ v ∈ M.verts"],"goalsAfter":[],"content":"· obtain ⟨w, hw, -⟩ := hm v\n    exact M.edge_vert hw"},{"tailPos":5666,"headPos":5499,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M ↔ ∀ (v : V), ∃! w, Adj M v w"],"goalsAfter":[],"content":"refine' ⟨_, fun hm => ⟨fun v _ => hm v, fun v => _⟩⟩\n  · rintro ⟨hm, hs⟩ v\n    exact hm (hs v)\n  · obtain ⟨w, hw, -⟩ := hm v\n    exact M.edge_vert hw"},{"tailPos":5496,"headPos":5494,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M ↔ ∀ (v : V), ∃! w, Adj M v w"],"goalsAfter":[],"content":"by"},{"tailPos":5666,"headPos":5494,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM : Subgraph G\n⊢ IsPerfectMatching M ↔ ∀ (v : V), ∃! w, Adj M v w"],"goalsAfter":[],"content":"by\n  refine' ⟨_, fun hm => ⟨fun v _ => hm v, fun v => _⟩⟩\n  · rintro ⟨hm, hs⟩ v\n    exact hm (hs v)\n  · obtain ⟨w, hw, -⟩ := hm v\n    exact M.edge_vert hw"},{"tailPos":5978,"headPos":5920,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : (v : V) → Fintype ↑(neighborSet M v)\n⊢ IsPerfectMatching M ↔ ∀ (v : V), degree M v = 1"],"goalsAfter":[],"content":"simp [degree_eq_one_iff_unique_adj, isPerfectMatching_iff]"},{"tailPos":5917,"headPos":5915,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : (v : V) → Fintype ↑(neighborSet M v)\n⊢ IsPerfectMatching M ↔ ∀ (v : V), degree M v = 1"],"goalsAfter":[],"content":"by"},{"tailPos":5978,"headPos":5915,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : (v : V) → Fintype ↑(neighborSet M v)\n⊢ IsPerfectMatching M ↔ ∀ (v : V), degree M v = 1"],"goalsAfter":[],"content":"by\n  simp [degree_eq_one_iff_unique_adj, isPerfectMatching_iff]"},{"tailPos":6301,"headPos":6243,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype V\nh : IsPerfectMatching M\n⊢ Even (Fintype.card V)"],"goalsAfter":[],"content":"simpa only [h.2.card_verts] using IsMatching.even_card h.1"},{"tailPos":6301,"headPos":6231,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype V\nh : IsPerfectMatching M\n⊢ Even (Fintype.card V)"],"goalsAfter":[],"content":"classical\n  simpa only [h.2.card_verts] using IsMatching.even_card h.1"},{"tailPos":6228,"headPos":6226,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype V\nh : IsPerfectMatching M\n⊢ Even (Fintype.card V)"],"goalsAfter":[],"content":"by"},{"tailPos":6301,"headPos":6226,"goalsBefore":["V : Type u\nG : SimpleGraph V\nM✝ M : Subgraph G\ninst✝ : Fintype V\nh : IsPerfectMatching M\n⊢ Even (Fintype.card V)"],"goalsAfter":[],"content":"by\n  classical\n  simpa only [h.2.card_verts] using IsMatching.even_card h.1"}]
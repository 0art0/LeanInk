[{"tailPos":2720,"headPos":2699,"goalsBefore":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ μ = ν"],"goalsAfter":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ μ.cells = ν.cells"],"content":"YoungDiagram.ext_iff,"},{"tailPos":2739,"headPos":2721,"goalsBefore":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ μ.cells = ν.cells"],"goalsAfter":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ ↑μ.cells = ↑ν.cells"],"content":"← Finset.coe_inj"},{"tailPos":2740,"headPos":2739,"goalsBefore":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ ↑μ.cells = ↑ν.cells"],"goalsAfter":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ ↑μ.cells = ↑ν.cells"],"content":"]"},{"tailPos":2740,"headPos":2694,"goalsBefore":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ μ = ν"],"goalsAfter":[],"content":"rwa [YoungDiagram.ext_iff, ← Finset.coe_inj]"},{"tailPos":2693,"headPos":2691,"goalsBefore":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ μ = ν"],"goalsAfter":[],"content":"by"},{"tailPos":2740,"headPos":2691,"goalsBefore":["μ ν : YoungDiagram\nh : (fun y => ↑y.cells) μ = (fun y => ↑y.cells) ν\n⊢ μ = ν"],"goalsAfter":[],"content":"by rwa [YoungDiagram.ext_iff, ← Finset.coe_inj]"},{"tailPos":4188,"headPos":4172,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∪ ν.cells)"],"goalsAfter":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∪ ↑ν.cells)"],"content":"Finset.coe_union"},{"tailPos":4189,"headPos":4188,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∪ ↑ν.cells)"],"goalsAfter":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∪ ↑ν.cells)"],"content":"]"},{"tailPos":4189,"headPos":4168,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∪ ν.cells)"],"goalsAfter":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∪ ↑ν.cells)"],"content":"rw [Finset.coe_union]"},{"tailPos":4237,"headPos":4198,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∪ ↑ν.cells)"],"goalsAfter":[],"content":"exact μ.isLowerSet.union ν.isLowerSet"},{"tailPos":4237,"headPos":4168,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∪ ν.cells)"],"goalsAfter":[],"content":"rw [Finset.coe_union]\n        exact μ.isLowerSet.union ν.isLowerSet"},{"tailPos":4159,"headPos":4157,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∪ ν.cells)"],"goalsAfter":[],"content":"by"},{"tailPos":4237,"headPos":4157,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∪ ν.cells)"],"goalsAfter":[],"content":"by\n        rw [Finset.coe_union]\n        exact μ.isLowerSet.union ν.isLowerSet"},{"tailPos":4903,"headPos":4887,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∩ ν.cells)"],"goalsAfter":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∩ ↑ν.cells)"],"content":"Finset.coe_inter"},{"tailPos":4904,"headPos":4903,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∩ ↑ν.cells)"],"goalsAfter":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∩ ↑ν.cells)"],"content":"]"},{"tailPos":4904,"headPos":4883,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∩ ν.cells)"],"goalsAfter":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∩ ↑ν.cells)"],"content":"rw [Finset.coe_inter]"},{"tailPos":4952,"headPos":4913,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet (↑μ.cells ∩ ↑ν.cells)"],"goalsAfter":[],"content":"exact μ.isLowerSet.inter ν.isLowerSet"},{"tailPos":4952,"headPos":4883,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∩ ν.cells)"],"goalsAfter":[],"content":"rw [Finset.coe_inter]\n        exact μ.isLowerSet.inter ν.isLowerSet"},{"tailPos":4874,"headPos":4872,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∩ ν.cells)"],"goalsAfter":[],"content":"by"},{"tailPos":4952,"headPos":4872,"goalsBefore":["μ ν : YoungDiagram\n⊢ IsLowerSet ↑(μ.cells ∩ ν.cells)"],"goalsAfter":[],"content":"by\n        rw [Finset.coe_inter]\n        exact μ.isLowerSet.inter ν.isLowerSet"},{"tailPos":5648,"headPos":5634,"goalsBefore":["⊢ IsLowerSet ↑∅"],"goalsAfter":["a b : ℕ × ℕ\na✝ : b ≤ a\nh : a ∈ ↑∅\n⊢ b ∈ ↑∅"],"content":"intros a b _ h"},{"tailPos":5710,"headPos":5657,"goalsBefore":["a b : ℕ × ℕ\na✝ : b ≤ a\nh : a ∈ ↑∅\n⊢ b ∈ ↑∅"],"goalsAfter":["a b : ℕ × ℕ\na✝ : b ≤ a\nh : a ∈ ↑∅\n⊢ False"],"content":"simp only [Finset.coe_empty, Set.mem_empty_iff_false]"},{"tailPos":5777,"headPos":5719,"goalsBefore":["a b : ℕ × ℕ\na✝ : b ≤ a\nh : a ∈ ↑∅\n⊢ False"],"goalsAfter":[],"content":"simp only [Finset.coe_empty, Set.mem_empty_iff_false] at h"},{"tailPos":5777,"headPos":5634,"goalsBefore":["⊢ IsLowerSet ↑∅"],"goalsAfter":[],"content":"intros a b _ h\n        simp only [Finset.coe_empty, Set.mem_empty_iff_false]\n        simp only [Finset.coe_empty, Set.mem_empty_iff_false] at h"},{"tailPos":5625,"headPos":5623,"goalsBefore":["⊢ IsLowerSet ↑∅"],"goalsAfter":[],"content":"by"},{"tailPos":5777,"headPos":5623,"goalsBefore":["⊢ IsLowerSet ↑∅"],"goalsAfter":[],"content":"by\n        intros a b _ h\n        simp only [Finset.coe_empty, Set.mem_empty_iff_false]\n        simp only [Finset.coe_empty, Set.mem_empty_iff_false] at h"},{"tailPos":5810,"headPos":5803,"goalsBefore":["x✝¹ : YoungDiagram\nx✝ : ℕ × ℕ\n⊢ x✝ ∈ ⊥ → x✝ ∈ x✝¹"],"goalsAfter":["x✝¹ : YoungDiagram\nx✝ : ℕ × ℕ\ny : x✝ ∈ ⊥\n⊢ x✝ ∈ x✝¹"],"content":"intro y"},{"tailPos":5860,"headPos":5815,"goalsBefore":["x✝¹ : YoungDiagram\nx✝ : ℕ × ℕ\ny : x✝ ∈ ⊥\n⊢ x✝ ∈ x✝¹"],"goalsAfter":[],"content":"simp only [mem_mk, Finset.not_mem_empty] at y"},{"tailPos":5860,"headPos":5803,"goalsBefore":["x✝¹ : YoungDiagram\nx✝ : ℕ × ℕ\n⊢ x✝ ∈ ⊥ → x✝ ∈ x✝¹"],"goalsAfter":[],"content":"intro y\n    simp only [mem_mk, Finset.not_mem_empty] at y"},{"tailPos":5798,"headPos":5796,"goalsBefore":["x✝¹ : YoungDiagram\nx✝ : ℕ × ℕ\n⊢ x✝ ∈ ⊥ → x✝ ∈ x✝¹"],"goalsAfter":[],"content":"by"},{"tailPos":5860,"headPos":5796,"goalsBefore":["x✝¹ : YoungDiagram\nx✝ : ℕ × ℕ\n⊢ x✝ ∈ ⊥ → x✝ ∈ x✝¹"],"goalsAfter":[],"content":"by\n    intro y\n    simp only [mem_mk, Finset.not_mem_empty] at y"},{"tailPos":6231,"headPos":6193,"goalsBefore":["⊢ ↑⊥.cells = ∅"],"goalsAfter":["case refine'_1\n⊢ ↑⊥.cells ⊆ ∅","case refine'_2\n⊢ ∅ ⊆ ↑⊥.cells"],"content":"refine' Set.eq_of_subset_of_subset _ _"},{"tailPos":6244,"headPos":6234,"goalsBefore":["case refine'_1\n⊢ ↑⊥.cells ⊆ ∅","case refine'_2\n⊢ ∅ ⊆ ↑⊥.cells"],"goalsAfter":["case refine'_1\nx : ℕ × ℕ\nh : x ∈ ↑⊥.cells\n⊢ x ∈ ∅","case refine'_2\n⊢ ∅ ⊆ ↑⊥.cells"],"content":"intros x h"},{"tailPos":6308,"headPos":6247,"goalsBefore":["case refine'_1\nx : ℕ × ℕ\nh : x ∈ ↑⊥.cells\n⊢ x ∈ ∅","case refine'_2\n⊢ ∅ ⊆ ↑⊥.cells"],"goalsAfter":["case refine'_2\n⊢ ∅ ⊆ ↑⊥.cells"],"content":"simp [mem_mk, Finset.coe_empty, Set.mem_empty_iff_false] at h"},{"tailPos":6368,"headPos":6311,"goalsBefore":["case refine'_2\n⊢ ∅ ⊆ ↑⊥.cells"],"goalsAfter":[],"content":"simp only [cells_bot, Finset.coe_empty, Set.empty_subset]"},{"tailPos":6368,"headPos":6193,"goalsBefore":["⊢ ↑⊥.cells = ∅"],"goalsAfter":[],"content":"refine' Set.eq_of_subset_of_subset _ _\n  intros x h\n  simp [mem_mk, Finset.coe_empty, Set.mem_empty_iff_false] at h\n  simp only [cells_bot, Finset.coe_empty, Set.empty_subset]"},{"tailPos":6190,"headPos":6188,"goalsBefore":["⊢ ↑⊥.cells = ∅"],"goalsAfter":[],"content":"by"},{"tailPos":6368,"headPos":6188,"goalsBefore":["⊢ ↑⊥.cells = ∅"],"goalsAfter":[],"content":"by\n  refine' Set.eq_of_subset_of_subset _ _\n  intros x h\n  simp [mem_mk, Finset.coe_empty, Set.mem_empty_iff_false] at h\n  simp only [cells_bot, Finset.coe_empty, Set.empty_subset]"},{"tailPos":6772,"headPos":6752,"goalsBefore":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ = ν"],"goalsAfter":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ.cells = ν.cells"],"content":"YoungDiagram.ext_iff"},{"tailPos":6773,"headPos":6772,"goalsBefore":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ.cells = ν.cells"],"goalsAfter":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ.cells = ν.cells"],"content":"]"},{"tailPos":6773,"headPos":6747,"goalsBefore":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ = ν"],"goalsAfter":[],"content":"rwa [YoungDiagram.ext_iff]"},{"tailPos":6746,"headPos":6744,"goalsBefore":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ = ν"],"goalsAfter":[],"content":"by"},{"tailPos":6773,"headPos":6744,"goalsBefore":["μ ν : YoungDiagram\nh : μ.cells = ν.cells\n⊢ μ = ν"],"goalsAfter":[],"content":"by rwa [YoungDiagram.ext_iff]"},{"tailPos":7301,"headPos":7228,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\n⊢ x✝¹ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells) → x✝ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells)"],"goalsAfter":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\n⊢ ↑(Equiv.prodComm ℕ ℕ).symm x✝¹ ∈ μ.cells → ↑(Equiv.prodComm ℕ ℕ).symm x✝ ∈ μ.cells"],"content":"simp only [Finset.mem_coe, Equiv.finsetCongr_apply, Finset.mem_map_equiv]"},{"tailPos":7317,"headPos":7306,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\n⊢ ↑(Equiv.prodComm ℕ ℕ).symm x✝¹ ∈ μ.cells → ↑(Equiv.prodComm ℕ ℕ).symm x✝ ∈ μ.cells"],"goalsAfter":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\nhcell : ↑(Equiv.prodComm ℕ ℕ).symm x✝¹ ∈ μ.cells\n⊢ ↑(Equiv.prodComm ℕ ℕ).symm x✝ ∈ μ.cells"],"content":"intro hcell"},{"tailPos":7349,"headPos":7322,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\nhcell : ↑(Equiv.prodComm ℕ ℕ).symm x✝¹ ∈ μ.cells\n⊢ ↑(Equiv.prodComm ℕ ℕ).symm x✝ ∈ μ.cells"],"goalsAfter":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\nhcell : ↑(Equiv.prodComm ℕ ℕ).symm x✝¹ ∈ μ.cells\n⊢ ↑(Equiv.prodComm ℕ ℕ).symm x✝ ≤ ↑(Equiv.prodComm ℕ ℕ).symm x✝¹"],"content":"apply μ.isLowerSet _ hcell"},{"tailPos":7362,"headPos":7354,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\nhcell : ↑(Equiv.prodComm ℕ ℕ).symm x✝¹ ∈ μ.cells\n⊢ ↑(Equiv.prodComm ℕ ℕ).symm x✝ ≤ ↑(Equiv.prodComm ℕ ℕ).symm x✝¹"],"goalsAfter":[],"content":"simp [h]"},{"tailPos":7362,"headPos":7228,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\n⊢ x✝¹ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells) → x✝ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells)"],"goalsAfter":[],"content":"simp only [Finset.mem_coe, Equiv.finsetCongr_apply, Finset.mem_map_equiv]\n    intro hcell\n    apply μ.isLowerSet _ hcell\n    simp [h]"},{"tailPos":7223,"headPos":7221,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\n⊢ x✝¹ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells) → x✝ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells)"],"goalsAfter":[],"content":"by"},{"tailPos":7362,"headPos":7221,"goalsBefore":["μ : YoungDiagram\nx✝¹ x✝ : ℕ × ℕ\nh : x✝ ≤ x✝¹\n⊢ x✝¹ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells) → x✝ ∈ ↑(↑(Equiv.finsetCongr (Equiv.prodComm ℕ ℕ)) μ.cells)"],"goalsAfter":[],"content":"by\n    simp only [Finset.mem_coe, Equiv.finsetCongr_apply, Finset.mem_map_equiv]\n    intro hcell\n    apply μ.isLowerSet _ hcell\n    simp [h]"},{"tailPos":7548,"headPos":7532,"goalsBefore":["μ : YoungDiagram\nc : ℕ × ℕ\n⊢ c ∈ transpose μ ↔ Prod.swap c ∈ μ"],"goalsAfter":[],"content":"simp [transpose]"},{"tailPos":7529,"headPos":7527,"goalsBefore":["μ : YoungDiagram\nc : ℕ × ℕ\n⊢ c ∈ transpose μ ↔ Prod.swap c ∈ μ"],"goalsAfter":[],"content":"by"},{"tailPos":7548,"headPos":7527,"goalsBefore":["μ : YoungDiagram\nc : ℕ × ℕ\n⊢ c ∈ transpose μ ↔ Prod.swap c ∈ μ"],"goalsAfter":[],"content":"by\n  simp [transpose]"},{"tailPos":7711,"headPos":7706,"goalsBefore":["μ : YoungDiagram\n⊢ transpose (transpose μ) = μ"],"goalsAfter":["case cells.a\nμ : YoungDiagram\nx : ℕ × ℕ\n⊢ x ∈ (transpose (transpose μ)).cells ↔ x ∈ μ.cells"],"content":"ext x"},{"tailPos":7718,"headPos":7714,"goalsBefore":["case cells.a\nμ : YoungDiagram\nx : ℕ × ℕ\n⊢ x ∈ (transpose (transpose μ)).cells ↔ x ∈ μ.cells"],"goalsAfter":[],"content":"simp only [mem_cells, mem_transpose, Prod.swap_swap]"},{"tailPos":7718,"headPos":7706,"goalsBefore":["μ : YoungDiagram\n⊢ transpose (transpose μ) = μ"],"goalsAfter":[],"content":"ext x\n  simp"},{"tailPos":7703,"headPos":7701,"goalsBefore":["μ : YoungDiagram\n⊢ transpose (transpose μ) = μ"],"goalsAfter":[],"content":"by"},{"tailPos":7718,"headPos":7701,"goalsBefore":["μ : YoungDiagram\n⊢ transpose (transpose μ) = μ"],"goalsAfter":[],"content":"by\n  ext x\n  simp"},{"tailPos":7916,"headPos":7905,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = ν ↔ μ = transpose ν"],"goalsAfter":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν","case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"content":"constructor"},{"tailPos":7920,"headPos":7917,"goalsBefore":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν","case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"goalsAfter":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν","case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"content":"<;>"},{"tailPos":7927,"headPos":7925,"goalsBefore":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν"],"goalsAfter":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν"],"content":"·"},{"tailPos":7938,"headPos":7928,"goalsBefore":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν"],"goalsAfter":["case mp\nμ : YoungDiagram\n⊢ μ = transpose (transpose μ)"],"content":"rintro rfl"},{"tailPos":7949,"headPos":7945,"goalsBefore":["case mp\nμ : YoungDiagram\n⊢ μ = transpose (transpose μ)"],"goalsAfter":[],"content":"simp only [transpose_transpose]"},{"tailPos":7949,"headPos":7928,"goalsBefore":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν"],"goalsAfter":[],"content":"rintro rfl\n      simp"},{"tailPos":7949,"headPos":7925,"goalsBefore":["case mp\nμ ν : YoungDiagram\n⊢ transpose μ = ν → μ = transpose ν"],"goalsAfter":[],"content":"· rintro rfl\n      simp"},{"tailPos":7927,"headPos":7925,"goalsBefore":["case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"goalsAfter":["case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"content":"·"},{"tailPos":7938,"headPos":7928,"goalsBefore":["case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"goalsAfter":["case mpr\nν : YoungDiagram\n⊢ transpose (transpose ν) = ν"],"content":"rintro rfl"},{"tailPos":7949,"headPos":7945,"goalsBefore":["case mpr\nν : YoungDiagram\n⊢ transpose (transpose ν) = ν"],"goalsAfter":[],"content":"simp only [transpose_transpose]"},{"tailPos":7949,"headPos":7928,"goalsBefore":["case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"goalsAfter":[],"content":"rintro rfl\n      simp"},{"tailPos":7949,"headPos":7925,"goalsBefore":["case mpr\nμ ν : YoungDiagram\n⊢ μ = transpose ν → transpose μ = ν"],"goalsAfter":[],"content":"· rintro rfl\n      simp"},{"tailPos":7949,"headPos":7905,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = ν ↔ μ = transpose ν"],"goalsAfter":[],"content":"constructor <;>\n    · rintro rfl\n      simp"},{"tailPos":7902,"headPos":7900,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = ν ↔ μ = transpose ν"],"goalsAfter":[],"content":"by"},{"tailPos":7949,"headPos":7900,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = ν ↔ μ = transpose ν"],"goalsAfter":[],"content":"by\n  constructor <;>\n    · rintro rfl\n      simp"},{"tailPos":8184,"headPos":8155,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = transpose ν ↔ μ = ν"],"goalsAfter":["μ ν : YoungDiagram\n⊢ μ = transpose (transpose ν) ↔ μ = ν"],"content":"transpose_eq_iff_eq_transpose"},{"tailPos":8185,"headPos":8184,"goalsBefore":["μ ν : YoungDiagram\n⊢ μ = transpose (transpose ν) ↔ μ = ν"],"goalsAfter":["μ ν : YoungDiagram\n⊢ μ = transpose (transpose ν) ↔ μ = ν"],"content":"]"},{"tailPos":8185,"headPos":8151,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = transpose ν ↔ μ = ν"],"goalsAfter":["μ ν : YoungDiagram\n⊢ μ = transpose (transpose ν) ↔ μ = ν"],"content":"rw [transpose_eq_iff_eq_transpose]"},{"tailPos":8192,"headPos":8188,"goalsBefore":["μ ν : YoungDiagram\n⊢ μ = transpose (transpose ν) ↔ μ = ν"],"goalsAfter":[],"content":"simp only [transpose_transpose]"},{"tailPos":8192,"headPos":8151,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = transpose ν ↔ μ = ν"],"goalsAfter":[],"content":"rw [transpose_eq_iff_eq_transpose]\n  simp"},{"tailPos":8148,"headPos":8146,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = transpose ν ↔ μ = ν"],"goalsAfter":[],"content":"by"},{"tailPos":8192,"headPos":8146,"goalsBefore":["μ ν : YoungDiagram\n⊢ transpose μ = transpose ν ↔ μ = ν"],"goalsAfter":[],"content":"by\n  rw [transpose_eq_iff_eq_transpose]\n  simp"},{"tailPos":8501,"headPos":8465,"goalsBefore":["μ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ c ∈ (transpose ν).cells"],"goalsAfter":["μ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ Prod.swap c ∈ ν"],"content":"simp only [mem_cells, mem_transpose]"},{"tailPos":8514,"headPos":8504,"goalsBefore":["μ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ Prod.swap c ∈ ν"],"goalsAfter":["case a\nμ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ Prod.swap c ∈ (transpose μ).cells"],"content":"apply h_le"},{"tailPos":8522,"headPos":8517,"goalsBefore":["case a\nμ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ Prod.swap c ∈ (transpose μ).cells"],"goalsAfter":[],"content":"simpa only [mem_cells, mem_transpose, Prod.swap_swap]"},{"tailPos":8522,"headPos":8465,"goalsBefore":["μ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ c ∈ (transpose ν).cells"],"goalsAfter":[],"content":"simp only [mem_cells, mem_transpose]\n  apply h_le\n  simpa"},{"tailPos":8462,"headPos":8460,"goalsBefore":["μ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ c ∈ (transpose ν).cells"],"goalsAfter":[],"content":"by"},{"tailPos":8522,"headPos":8460,"goalsBefore":["μ ν : YoungDiagram\nh_le : transpose μ ≤ ν\nc : ℕ × ℕ\nhc : c ∈ μ.cells\n⊢ c ∈ (transpose ν).cells"],"goalsAfter":[],"content":"by\n  simp only [mem_cells, mem_transpose]\n  apply h_le\n  simpa"},{"tailPos":8763,"headPos":8722,"goalsBefore":["μ ν : YoungDiagram\nh : transpose μ ≤ transpose ν\n⊢ μ ≤ ν"],"goalsAfter":["case h.e'_4\nμ ν : YoungDiagram\nh : transpose μ ≤ transpose ν\n⊢ ν = transpose (transpose ν)"],"content":"convert YoungDiagram.le_of_transpose_le h"},{"tailPos":8772,"headPos":8768,"goalsBefore":["case h.e'_4\nμ ν : YoungDiagram\nh : transpose μ ≤ transpose ν\n⊢ ν = transpose (transpose ν)"],"goalsAfter":[],"content":"simp only [transpose_transpose]"},{"tailPos":8772,"headPos":8722,"goalsBefore":["μ ν : YoungDiagram\nh : transpose μ ≤ transpose ν\n⊢ μ ≤ ν"],"goalsAfter":[],"content":"convert YoungDiagram.le_of_transpose_le h\n    simp"},{"tailPos":8717,"headPos":8715,"goalsBefore":["μ ν : YoungDiagram\nh : transpose μ ≤ transpose ν\n⊢ μ ≤ ν"],"goalsAfter":[],"content":"by"},{"tailPos":8772,"headPos":8715,"goalsBefore":["μ ν : YoungDiagram\nh : transpose μ ≤ transpose ν\n⊢ μ ≤ ν"],"goalsAfter":[],"content":"by\n    convert YoungDiagram.le_of_transpose_le h\n    simp"},{"tailPos":8819,"headPos":8794,"goalsBefore":["μ ν : YoungDiagram\nh : μ ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":["μ ν : YoungDiagram\nh : transpose (transpose μ) ≤ ν\n⊢ transpose μ ≤ transpose ν"],"content":"←transpose_transpose μ"},{"tailPos":8820,"headPos":8819,"goalsBefore":["μ ν : YoungDiagram\nh : transpose (transpose μ) ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":["μ ν : YoungDiagram\nh : transpose (transpose μ) ≤ ν\n⊢ transpose μ ≤ transpose ν"],"content":"]"},{"tailPos":8825,"headPos":8790,"goalsBefore":["μ ν : YoungDiagram\nh : μ ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":["μ ν : YoungDiagram\nh : transpose (transpose μ) ≤ ν\n⊢ transpose μ ≤ transpose ν"],"content":"rw [←transpose_transpose μ] at h"},{"tailPos":8869,"headPos":8830,"goalsBefore":["μ ν : YoungDiagram\nh : transpose (transpose μ) ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":[],"content":"exact YoungDiagram.le_of_transpose_le h"},{"tailPos":8869,"headPos":8790,"goalsBefore":["μ ν : YoungDiagram\nh : μ ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":[],"content":"rw [←transpose_transpose μ] at h\n    exact YoungDiagram.le_of_transpose_le h"},{"tailPos":8785,"headPos":8783,"goalsBefore":["μ ν : YoungDiagram\nh : μ ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":[],"content":"by"},{"tailPos":8869,"headPos":8783,"goalsBefore":["μ ν : YoungDiagram\nh : μ ≤ ν\n⊢ transpose μ ≤ transpose ν"],"goalsAfter":[],"content":"by\n    rw [←transpose_transpose μ] at h\n    exact YoungDiagram.le_of_transpose_le h"},{"tailPos":9319,"headPos":9315,"goalsBefore":["x✝ : YoungDiagram\n⊢ transpose (transpose x✝) = x✝"],"goalsAfter":[],"content":"simp only [transpose_transpose]"},{"tailPos":9314,"headPos":9312,"goalsBefore":["x✝ : YoungDiagram\n⊢ transpose (transpose x✝) = x✝"],"goalsAfter":[],"content":"by"},{"tailPos":9319,"headPos":9312,"goalsBefore":["x✝ : YoungDiagram\n⊢ transpose (transpose x✝) = x✝"],"goalsAfter":[],"content":"by simp"},{"tailPos":9337,"headPos":9333,"goalsBefore":["x✝ : YoungDiagram\n⊢ transpose (transpose x✝) = x✝"],"goalsAfter":[],"content":"simp only [transpose_transpose]"},{"tailPos":9332,"headPos":9330,"goalsBefore":["x✝ : YoungDiagram\n⊢ transpose (transpose x✝) = x✝"],"goalsAfter":[],"content":"by"},{"tailPos":9337,"headPos":9330,"goalsBefore":["x✝ : YoungDiagram\n⊢ transpose (transpose x✝) = x✝"],"goalsAfter":[],"content":"by simp"},{"tailPos":9349,"headPos":9345,"goalsBefore":["⊢ ∀ {a b : YoungDiagram},\n    ↑{ toFun := transpose, invFun := transpose, left_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x),\n              right_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x) }\n          a ≤\n        ↑{ toFun := transpose, invFun := transpose, left_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x),\n              right_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x) }\n          b ↔\n      a ≤ b"],"goalsAfter":[],"content":"simp only [Equiv.coe_fn_mk, transpose_le_iff, forall_const]"},{"tailPos":9344,"headPos":9342,"goalsBefore":["⊢ ∀ {a b : YoungDiagram},\n    ↑{ toFun := transpose, invFun := transpose, left_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x),\n              right_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x) }\n          a ≤\n        ↑{ toFun := transpose, invFun := transpose, left_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x),\n              right_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x) }\n          b ↔\n      a ≤ b"],"goalsAfter":[],"content":"by"},{"tailPos":9349,"headPos":9342,"goalsBefore":["⊢ ∀ {a b : YoungDiagram},\n    ↑{ toFun := transpose, invFun := transpose, left_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x),\n              right_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x) }\n          a ≤\n        ↑{ toFun := transpose, invFun := transpose, left_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x),\n              right_inv := (_ : ∀ (x : YoungDiagram), transpose (transpose x) = x) }\n          b ↔\n      a ≤ b"],"goalsAfter":[],"content":"by simp"},{"tailPos":10297,"headPos":10287,"goalsBefore":["μ : YoungDiagram\ni : ℕ\nc : ℕ × ℕ\n⊢ c ∈ row μ i ↔ c ∈ μ ∧ c.fst = i"],"goalsAfter":[],"content":"simp [row]"},{"tailPos":10284,"headPos":10282,"goalsBefore":["μ : YoungDiagram\ni : ℕ\nc : ℕ × ℕ\n⊢ c ∈ row μ i ↔ c ∈ μ ∧ c.fst = i"],"goalsAfter":[],"content":"by"},{"tailPos":10297,"headPos":10282,"goalsBefore":["μ : YoungDiagram\ni : ℕ\nc : ℕ × ℕ\n⊢ c ∈ row μ i ↔ c ∈ μ ∧ c.fst = i"],"goalsAfter":[],"content":"by\n  simp [row]"},{"tailPos":10468,"headPos":10458,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ row μ i ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"simp [row]"},{"tailPos":10457,"headPos":10455,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ row μ i ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"by"},{"tailPos":10468,"headPos":10455,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ row μ i ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"by simp [row]"},{"tailPos":10761,"headPos":10754,"goalsBefore":["μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"goalsAfter":["case refl\nμ : YoungDiagram\ni x✝² : ℕ\nx✝¹ x✝ : x✝² ∈ Prod.mk i ⁻¹' ↑μ.cells\n⊢ x✝² = x✝²"],"content":"cases h"},{"tailPos":10773,"headPos":10770,"goalsBefore":["case refl\nμ : YoungDiagram\ni x✝² : ℕ\nx✝¹ x✝ : x✝² ∈ Prod.mk i ⁻¹' ↑μ.cells\n⊢ x✝² = x✝²"],"goalsAfter":[],"content":"rfl"},{"tailPos":10773,"headPos":10754,"goalsBefore":["μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"goalsAfter":[],"content":"cases h\n        rfl"},{"tailPos":10745,"headPos":10743,"goalsBefore":["μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"goalsAfter":[],"content":"by"},{"tailPos":10773,"headPos":10743,"goalsBefore":["μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"goalsAfter":[],"content":"by\n        cases h\n        rfl"},{"tailPos":10774,"headPos":10632,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ ∃ j, ¬(i, j) ∈ μ"],"goalsAfter":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj :\n  ¬j ∈\n      Finset.preimage μ.cells (Prod.mk i)\n        (_ :\n          ∀ (x : ℕ),\n            x ∈ Prod.mk i ⁻¹' ↑μ.cells → ∀ (x_2 : ℕ), x_2 ∈ Prod.mk i ⁻¹' ↑μ.cells → (i, x) = (i, x_2) → x = x_2)\n⊢ ∃ j, ¬(i, j) ∈ μ"],"content":"obtain ⟨j, hj⟩ :=\n    Infinite.exists_not_mem_finset\n      (μ.cells.preimage (Prod.mk i) fun _ _ _ _ h => by\n        cases h\n        rfl)"},{"tailPos":10800,"headPos":10781,"goalsBefore":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj :\n  ¬j ∈\n      Finset.preimage μ.cells (Prod.mk i)\n        (_ :\n          ∀ (x : ℕ),\n            x ∈ Prod.mk i ⁻¹' ↑μ.cells → ∀ (x_2 : ℕ), x_2 ∈ Prod.mk i ⁻¹' ↑μ.cells → (i, x) = (i, x_2) → x = x_2)\n⊢ ∃ j, ¬(i, j) ∈ μ"],"goalsAfter":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj : ¬(i, j) ∈ μ.cells\n⊢ ∃ j, ¬(i, j) ∈ μ","μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"content":"Finset.mem_preimage"},{"tailPos":10801,"headPos":10800,"goalsBefore":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj : ¬(i, j) ∈ μ.cells\n⊢ ∃ j, ¬(i, j) ∈ μ","μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"goalsAfter":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj : ¬(i, j) ∈ μ.cells\n⊢ ∃ j, ¬(i, j) ∈ μ","μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"content":"]"},{"tailPos":10807,"headPos":10777,"goalsBefore":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj :\n  ¬j ∈\n      Finset.preimage μ.cells (Prod.mk i)\n        (_ :\n          ∀ (x : ℕ),\n            x ∈ Prod.mk i ⁻¹' ↑μ.cells → ∀ (x_2 : ℕ), x_2 ∈ Prod.mk i ⁻¹' ↑μ.cells → (i, x) = (i, x_2) → x = x_2)\n⊢ ∃ j, ¬(i, j) ∈ μ"],"goalsAfter":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj : ¬(i, j) ∈ μ.cells\n⊢ ∃ j, ¬(i, j) ∈ μ","μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"content":"rw [Finset.mem_preimage] at hj"},{"tailPos":10827,"headPos":10810,"goalsBefore":["case intro\nμ : YoungDiagram\ni j : ℕ\nhj : ¬(i, j) ∈ μ.cells\n⊢ ∃ j, ¬(i, j) ∈ μ","μ : YoungDiagram\ni x✝³ : ℕ\nx✝² : x✝³ ∈ Prod.mk i ⁻¹' ↑μ.cells\nx✝¹ : ℕ\nx✝ : x✝¹ ∈ Prod.mk i ⁻¹' ↑μ.cells\nh : (i, x✝³) = (i, x✝¹)\n⊢ x✝³ = x✝¹"],"goalsAfter":[],"content":"exact ⟨j, hj⟩"},{"tailPos":10827,"headPos":10632,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ ∃ j, ¬(i, j) ∈ μ"],"goalsAfter":[],"content":"obtain ⟨j, hj⟩ :=\n    Infinite.exists_not_mem_finset\n      (μ.cells.preimage (Prod.mk i) fun _ _ _ _ h => by\n        cases h\n        rfl)\n  rw [Finset.mem_preimage] at hj\n  exact ⟨j, hj⟩"},{"tailPos":10629,"headPos":10627,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ ∃ j, ¬(i, j) ∈ μ"],"goalsAfter":[],"content":"by"},{"tailPos":10827,"headPos":10627,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ ∃ j, ¬(i, j) ∈ μ"],"goalsAfter":[],"content":"by\n  obtain ⟨j, hj⟩ :=\n    Infinite.exists_not_mem_finset\n      (μ.cells.preimage (Prod.mk i) fun _ _ _ _ h => by\n        cases h\n        rfl)\n  rw [Finset.mem_preimage] at hj\n  exact ⟨j, hj⟩"},{"tailPos":11194,"headPos":11187,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < rowLen μ i"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < Nat.find (_ : ∃ j, ¬(i, j) ∈ μ)"],"content":"rowLen,"},{"tailPos":11210,"headPos":11195,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < Nat.find (_ : ∃ j, ¬(i, j) ∈ μ)"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → ¬¬(i, m) ∈ μ"],"content":"Nat.lt_find_iff"},{"tailPos":11211,"headPos":11210,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → ¬¬(i, m) ∈ μ"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → ¬¬(i, m) ∈ μ"],"content":"]"},{"tailPos":11211,"headPos":11183,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < rowLen μ i"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → ¬¬(i, m) ∈ μ"],"content":"rw [rowLen, Nat.lt_find_iff]"},{"tailPos":11222,"headPos":11214,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → ¬¬(i, m) ∈ μ"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → (i, m) ∈ μ"],"content":"push_neg"},{"tailPos":11271,"headPos":11268,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\nh : (i, j) ∈ μ\nx✝ : ℕ\nhmj : x✝ ≤ j\n⊢ i ≤ i"],"goalsAfter":[],"content":"rfl"},{"tailPos":11267,"headPos":11265,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\nh : (i, j) ∈ μ\nx✝ : ℕ\nhmj : x✝ ≤ j\n⊢ i ≤ i"],"goalsAfter":[],"content":"by"},{"tailPos":11271,"headPos":11265,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\nh : (i, j) ∈ μ\nx✝ : ℕ\nhmj : x✝ ≤ j\n⊢ i ≤ i"],"goalsAfter":[],"content":"by rfl"},{"tailPos":11300,"headPos":11297,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\nh : ∀ (m : ℕ), m ≤ j → (i, m) ∈ μ\n⊢ j ≤ j"],"goalsAfter":[],"content":"rfl"},{"tailPos":11296,"headPos":11294,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\nh : ∀ (m : ℕ), m ≤ j → (i, m) ∈ μ\n⊢ j ≤ j"],"goalsAfter":[],"content":"by"},{"tailPos":11300,"headPos":11294,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\nh : ∀ (m : ℕ), m ≤ j → (i, m) ∈ μ\n⊢ j ≤ j"],"goalsAfter":[],"content":"by rfl"},{"tailPos":11304,"headPos":11225,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ ∀ (m : ℕ), m ≤ j → (i, m) ∈ μ"],"goalsAfter":[],"content":"exact ⟨fun h _ hmj => μ.up_left_mem (by rfl) hmj h, fun h => h _ (by rfl)⟩"},{"tailPos":11304,"headPos":11183,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < rowLen μ i"],"goalsAfter":[],"content":"rw [rowLen, Nat.lt_find_iff]\n  push_neg\n  exact ⟨fun h _ hmj => μ.up_left_mem (by rfl) hmj h, fun h => h _ (by rfl)⟩"},{"tailPos":11180,"headPos":11178,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < rowLen μ i"],"goalsAfter":[],"content":"by"},{"tailPos":11304,"headPos":11178,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ j < rowLen μ i"],"goalsAfter":[],"content":"by\n  rw [rowLen, Nat.lt_find_iff]\n  push_neg\n  exact ⟨fun h _ hmj => μ.up_left_mem (by rfl) hmj h, fun h => h _ (by rfl)⟩"},{"tailPos":11498,"headPos":11484,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ row μ i = {i} ×ˢ Finset.range (rowLen μ i)"],"goalsAfter":["case a.mk\nμ : YoungDiagram\ni a b : ℕ\n⊢ (a, b) ∈ row μ i ↔ (a, b) ∈ {i} ×ˢ Finset.range (rowLen μ i)"],"content":"ext ⟨a, b⟩"},{"tailPos":11638,"headPos":11501,"goalsBefore":["case a.mk\nμ : YoungDiagram\ni a b : ℕ\n⊢ (a, b) ∈ row μ i ↔ (a, b) ∈ {i} ×ˢ Finset.range (rowLen μ i)"],"goalsAfter":["case a.mk\nμ : YoungDiagram\ni a b : ℕ\n⊢ a = i → (b < rowLen μ a ↔ b < rowLen μ i)"],"content":"simp only [Finset.mem_product, Finset.mem_singleton, Finset.mem_range, mem_row_iff,\n    mem_iff_lt_rowLen, and_comm, and_congr_right_iff]"},{"tailPos":11651,"headPos":11641,"goalsBefore":["case a.mk\nμ : YoungDiagram\ni a b : ℕ\n⊢ a = i → (b < rowLen μ a ↔ b < rowLen μ i)"],"goalsAfter":["case a.mk\nμ : YoungDiagram\na b : ℕ\n⊢ b < rowLen μ a ↔ b < rowLen μ a"],"content":"rintro rfl"},{"tailPos":11657,"headPos":11654,"goalsBefore":["case a.mk\nμ : YoungDiagram\na b : ℕ\n⊢ b < rowLen μ a ↔ b < rowLen μ a"],"goalsAfter":[],"content":"rfl"},{"tailPos":11657,"headPos":11484,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ row μ i = {i} ×ˢ Finset.range (rowLen μ i)"],"goalsAfter":[],"content":"ext ⟨a, b⟩\n  simp only [Finset.mem_product, Finset.mem_singleton, Finset.mem_range, mem_row_iff,\n    mem_iff_lt_rowLen, and_comm, and_congr_right_iff]\n  rintro rfl\n  rfl"},{"tailPos":11481,"headPos":11479,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ row μ i = {i} ×ˢ Finset.range (rowLen μ i)"],"goalsAfter":[],"content":"by"},{"tailPos":11657,"headPos":11479,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ row μ i = {i} ×ˢ Finset.range (rowLen μ i)"],"goalsAfter":[],"content":"by\n  ext ⟨a, b⟩\n  simp only [Finset.mem_product, Finset.mem_singleton, Finset.mem_range, mem_row_iff,\n    mem_iff_lt_rowLen, and_comm, and_congr_right_iff]\n  rintro rfl\n  rfl"},{"tailPos":11828,"headPos":11810,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ rowLen μ i = Finset.card (row μ i)"],"goalsAfter":[],"content":"simp [row_eq_prod]"},{"tailPos":11807,"headPos":11805,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ rowLen μ i = Finset.card (row μ i)"],"goalsAfter":[],"content":"by"},{"tailPos":11828,"headPos":11805,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ rowLen μ i = Finset.card (row μ i)"],"goalsAfter":[],"content":"by\n  simp [row_eq_prod]"},{"tailPos":12029,"headPos":12014,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\n⊢ rowLen μ i2 ≤ rowLen μ i1"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ False"],"content":"by_contra' h_lt"},{"tailPos":12072,"headPos":12036,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ False"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ rowLen μ i1 < rowLen μ i1"],"content":"← lt_self_iff_false (μ.rowLen i1)"},{"tailPos":12073,"headPos":12072,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ rowLen μ i1 < rowLen μ i1"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ rowLen μ i1 < rowLen μ i1"],"content":"]"},{"tailPos":12073,"headPos":12032,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ False"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ rowLen μ i1 < rowLen μ i1"],"content":"rw [← lt_self_iff_false (μ.rowLen i1)]"},{"tailPos":12101,"headPos":12080,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ rowLen μ i1 < rowLen μ i1"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ (i1, rowLen μ i1) ∈ μ"],"content":"← mem_iff_lt_rowLen"},{"tailPos":12102,"headPos":12101,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ (i1, rowLen μ i1) ∈ μ"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ (i1, rowLen μ i1) ∈ μ"],"content":"]"},{"tailPos":12113,"headPos":12076,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : rowLen μ i1 < rowLen μ i2\n⊢ rowLen μ i1 < rowLen μ i1"],"goalsAfter":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ (i1, rowLen μ i1) ∈ μ"],"content":"rw [← mem_iff_lt_rowLen] at h_lt⊢"},{"tailPos":12147,"headPos":12144,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ rowLen μ i1 ≤ rowLen μ i1"],"goalsAfter":[],"content":"rfl"},{"tailPos":12143,"headPos":12141,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ rowLen μ i1 ≤ rowLen μ i1"],"goalsAfter":[],"content":"by"},{"tailPos":12147,"headPos":12141,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ rowLen μ i1 ≤ rowLen μ i1"],"goalsAfter":[],"content":"by rfl"},{"tailPos":12153,"headPos":12116,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\nh_lt : (i2, rowLen μ i1) ∈ μ\n⊢ (i1, rowLen μ i1) ∈ μ"],"goalsAfter":[],"content":"exact μ.up_left_mem hi (by rfl) h_lt"},{"tailPos":12153,"headPos":12014,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\n⊢ rowLen μ i2 ≤ rowLen μ i1"],"goalsAfter":[],"content":"by_contra' h_lt\n  rw [← lt_self_iff_false (μ.rowLen i1)]\n  rw [← mem_iff_lt_rowLen] at h_lt⊢\n  exact μ.up_left_mem hi (by rfl) h_lt"},{"tailPos":12011,"headPos":12009,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\n⊢ rowLen μ i2 ≤ rowLen μ i1"],"goalsAfter":[],"content":"by"},{"tailPos":12153,"headPos":12009,"goalsBefore":["μ : YoungDiagram\ni1 i2 : ℕ\nhi : i1 ≤ i2\n⊢ rowLen μ i2 ≤ rowLen μ i1"],"goalsAfter":[],"content":"by\n  by_contra' h_lt\n  rw [← lt_self_iff_false (μ.rowLen i1)]\n  rw [← mem_iff_lt_rowLen] at h_lt⊢\n  exact μ.up_left_mem hi (by rfl) h_lt"},{"tailPos":12726,"headPos":12716,"goalsBefore":["μ : YoungDiagram\nj : ℕ\nc : ℕ × ℕ\n⊢ c ∈ col μ j ↔ c ∈ μ ∧ c.snd = j"],"goalsAfter":[],"content":"simp [col]"},{"tailPos":12713,"headPos":12711,"goalsBefore":["μ : YoungDiagram\nj : ℕ\nc : ℕ × ℕ\n⊢ c ∈ col μ j ↔ c ∈ μ ∧ c.snd = j"],"goalsAfter":[],"content":"by"},{"tailPos":12726,"headPos":12711,"goalsBefore":["μ : YoungDiagram\nj : ℕ\nc : ℕ × ℕ\n⊢ c ∈ col μ j ↔ c ∈ μ ∧ c.snd = j"],"goalsAfter":[],"content":"by\n  simp [col]"},{"tailPos":12897,"headPos":12887,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ col μ j ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"simp [col]"},{"tailPos":12886,"headPos":12884,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ col μ j ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"by"},{"tailPos":12897,"headPos":12884,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ col μ j ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"by simp [col]"},{"tailPos":13116,"headPos":13067,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ ∃ i, ¬(i, j) ∈ μ.cells"],"goalsAfter":["case h.e'_2\nμ : YoungDiagram\nj : ℕ\n⊢ (fun i => ¬(i, j) ∈ μ.cells) = fun j_1 => ¬(j, j_1) ∈ transpose μ"],"content":"convert μ.transpose.exists_not_mem_row j using 1"},{"tailPos":13123,"headPos":13119,"goalsBefore":["case h.e'_2\nμ : YoungDiagram\nj : ℕ\n⊢ (fun i => ¬(i, j) ∈ μ.cells) = fun j_1 => ¬(j, j_1) ∈ transpose μ"],"goalsAfter":[],"content":"simp only [mem_cells, mem_transpose, Prod.swap_prod_mk]"},{"tailPos":13123,"headPos":13067,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ ∃ i, ¬(i, j) ∈ μ.cells"],"goalsAfter":[],"content":"convert μ.transpose.exists_not_mem_row j using 1\n  simp"},{"tailPos":13064,"headPos":13062,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ ∃ i, ¬(i, j) ∈ μ.cells"],"goalsAfter":[],"content":"by"},{"tailPos":13123,"headPos":13062,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ ∃ i, ¬(i, j) ∈ μ.cells"],"goalsAfter":[],"content":"by\n  convert μ.transpose.exists_not_mem_row j using 1\n  simp"},{"tailPos":13510,"headPos":13489,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ colLen (transpose μ) j = rowLen μ j"],"goalsAfter":[],"content":"simp [rowLen, colLen]"},{"tailPos":13486,"headPos":13484,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ colLen (transpose μ) j = rowLen μ j"],"goalsAfter":[],"content":"by"},{"tailPos":13510,"headPos":13484,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ colLen (transpose μ) j = rowLen μ j"],"goalsAfter":[],"content":"by\n  simp [rowLen, colLen]"},{"tailPos":13711,"headPos":13690,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ rowLen (transpose μ) i = colLen μ i"],"goalsAfter":[],"content":"simp [rowLen, colLen]"},{"tailPos":13687,"headPos":13685,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ rowLen (transpose μ) i = colLen μ i"],"goalsAfter":[],"content":"by"},{"tailPos":13711,"headPos":13685,"goalsBefore":["μ : YoungDiagram\ni : ℕ\n⊢ rowLen (transpose μ) i = colLen μ i"],"goalsAfter":[],"content":"by\n  simp [rowLen, colLen]"},{"tailPos":13909,"headPos":13888,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < colLen μ j"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < rowLen (transpose μ) j"],"content":"← rowLen_transpose,"},{"tailPos":13931,"headPos":13910,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < rowLen (transpose μ) j"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ (j, i) ∈ transpose μ"],"content":"← mem_iff_lt_rowLen"},{"tailPos":13932,"headPos":13931,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ (j, i) ∈ transpose μ"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ (j, i) ∈ transpose μ"],"content":"]"},{"tailPos":13932,"headPos":13884,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < colLen μ j"],"goalsAfter":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ (j, i) ∈ transpose μ"],"content":"rw [← rowLen_transpose, ← mem_iff_lt_rowLen]"},{"tailPos":13939,"headPos":13935,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ (j, i) ∈ transpose μ"],"goalsAfter":[],"content":"simp only [mem_transpose, Prod.swap_prod_mk]"},{"tailPos":13939,"headPos":13884,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < colLen μ j"],"goalsAfter":[],"content":"rw [← rowLen_transpose, ← mem_iff_lt_rowLen]\n  simp"},{"tailPos":13881,"headPos":13879,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < colLen μ j"],"goalsAfter":[],"content":"by"},{"tailPos":13939,"headPos":13879,"goalsBefore":["μ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ μ ↔ i < colLen μ j"],"goalsAfter":[],"content":"by\n  rw [← rowLen_transpose, ← mem_iff_lt_rowLen]\n  simp"},{"tailPos":14133,"headPos":14119,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ col μ j = Finset.range (colLen μ j) ×ˢ {j}"],"goalsAfter":["case a.mk\nμ : YoungDiagram\nj a b : ℕ\n⊢ (a, b) ∈ col μ j ↔ (a, b) ∈ Finset.range (colLen μ j) ×ˢ {j}"],"content":"ext ⟨a, b⟩"},{"tailPos":14273,"headPos":14136,"goalsBefore":["case a.mk\nμ : YoungDiagram\nj a b : ℕ\n⊢ (a, b) ∈ col μ j ↔ (a, b) ∈ Finset.range (colLen μ j) ×ˢ {j}"],"goalsAfter":["case a.mk\nμ : YoungDiagram\nj a b : ℕ\n⊢ b = j → (a < colLen μ b ↔ a < colLen μ j)"],"content":"simp only [Finset.mem_product, Finset.mem_singleton, Finset.mem_range, mem_col_iff,\n    mem_iff_lt_colLen, and_comm, and_congr_right_iff]"},{"tailPos":14286,"headPos":14276,"goalsBefore":["case a.mk\nμ : YoungDiagram\nj a b : ℕ\n⊢ b = j → (a < colLen μ b ↔ a < colLen μ j)"],"goalsAfter":["case a.mk\nμ : YoungDiagram\na b : ℕ\n⊢ a < colLen μ b ↔ a < colLen μ b"],"content":"rintro rfl"},{"tailPos":14292,"headPos":14289,"goalsBefore":["case a.mk\nμ : YoungDiagram\na b : ℕ\n⊢ a < colLen μ b ↔ a < colLen μ b"],"goalsAfter":[],"content":"rfl"},{"tailPos":14292,"headPos":14119,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ col μ j = Finset.range (colLen μ j) ×ˢ {j}"],"goalsAfter":[],"content":"ext ⟨a, b⟩\n  simp only [Finset.mem_product, Finset.mem_singleton, Finset.mem_range, mem_col_iff,\n    mem_iff_lt_colLen, and_comm, and_congr_right_iff]\n  rintro rfl\n  rfl"},{"tailPos":14116,"headPos":14114,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ col μ j = Finset.range (colLen μ j) ×ˢ {j}"],"goalsAfter":[],"content":"by"},{"tailPos":14292,"headPos":14114,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ col μ j = Finset.range (colLen μ j) ×ˢ {j}"],"goalsAfter":[],"content":"by\n  ext ⟨a, b⟩\n  simp only [Finset.mem_product, Finset.mem_singleton, Finset.mem_range, mem_col_iff,\n    mem_iff_lt_colLen, and_comm, and_congr_right_iff]\n  rintro rfl\n  rfl"},{"tailPos":14463,"headPos":14445,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ colLen μ j = Finset.card (col μ j)"],"goalsAfter":[],"content":"simp [col_eq_prod]"},{"tailPos":14442,"headPos":14440,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ colLen μ j = Finset.card (col μ j)"],"goalsAfter":[],"content":"by"},{"tailPos":14463,"headPos":14440,"goalsBefore":["μ : YoungDiagram\nj : ℕ\n⊢ colLen μ j = Finset.card (col μ j)"],"goalsAfter":[],"content":"by\n  simp [col_eq_prod]"},{"tailPos":14698,"headPos":14649,"goalsBefore":["μ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 ≤ colLen μ j1"],"goalsAfter":["case h.e'_3\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 = rowLen (transpose μ) j2","case h.e'_4\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j1 = rowLen (transpose μ) j1"],"content":"convert μ.transpose.rowLen_anti j1 j2 hj using 1"},{"tailPos":14702,"headPos":14699,"goalsBefore":["case h.e'_3\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 = rowLen (transpose μ) j2","case h.e'_4\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j1 = rowLen (transpose μ) j1"],"goalsAfter":["case h.e'_3\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 = rowLen (transpose μ) j2","case h.e'_4\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j1 = rowLen (transpose μ) j1"],"content":"<;>"},{"tailPos":14707,"headPos":14703,"goalsBefore":["case h.e'_3\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 = rowLen (transpose μ) j2"],"goalsAfter":[],"content":"simp only [rowLen_transpose]"},{"tailPos":14707,"headPos":14703,"goalsBefore":["case h.e'_4\nμ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j1 = rowLen (transpose μ) j1"],"goalsAfter":[],"content":"simp only [rowLen_transpose]"},{"tailPos":14707,"headPos":14649,"goalsBefore":["μ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 ≤ colLen μ j1"],"goalsAfter":[],"content":"convert μ.transpose.rowLen_anti j1 j2 hj using 1 <;> simp"},{"tailPos":14646,"headPos":14644,"goalsBefore":["μ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 ≤ colLen μ j1"],"goalsAfter":[],"content":"by"},{"tailPos":14707,"headPos":14644,"goalsBefore":["μ : YoungDiagram\nj1 j2 : ℕ\nhj : j1 ≤ j2\n⊢ colLen μ j2 ≤ colLen μ j1"],"goalsAfter":[],"content":"by\n  convert μ.transpose.rowLen_anti j1 j2 hj using 1 <;> simp"},{"tailPos":15519,"headPos":15470,"goalsBefore":["μ : YoungDiagram\ni : Fin (List.length (rowLens μ))\n⊢ List.get (rowLens μ) i = rowLen μ ↑i"],"goalsAfter":[],"content":"simp only [rowLens, List.get_range, List.get_map]"},{"tailPos":15469,"headPos":15467,"goalsBefore":["μ : YoungDiagram\ni : Fin (List.length (rowLens μ))\n⊢ List.get (rowLens μ) i = rowLen μ ↑i"],"goalsAfter":[],"content":"by"},{"tailPos":15519,"headPos":15467,"goalsBefore":["μ : YoungDiagram\ni : Fin (List.length (rowLens μ))\n⊢ List.get (rowLens μ) i = rowLen μ ↑i"],"goalsAfter":[],"content":"by simp only [rowLens, List.get_range, List.get_map]"},{"tailPos":15731,"headPos":15676,"goalsBefore":["μ : YoungDiagram\n⊢ List.length (rowLens μ) = colLen μ 0"],"goalsAfter":[],"content":"simp only [rowLens, List.length_map, List.length_range]"},{"tailPos":15673,"headPos":15671,"goalsBefore":["μ : YoungDiagram\n⊢ List.length (rowLens μ) = colLen μ 0"],"goalsAfter":[],"content":"by"},{"tailPos":15731,"headPos":15671,"goalsBefore":["μ : YoungDiagram\n⊢ List.length (rowLens μ) = colLen μ 0"],"goalsAfter":[],"content":"by\n  simp only [rowLens, List.length_map, List.length_range]"},{"tailPos":16101,"headPos":16093,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ rowLens μ\n⊢ 0 < x"],"goalsAfter":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ List.map (rowLen μ) (List.range (colLen μ 0))\n⊢ 0 < x"],"content":"rowLens,"},{"tailPos":16114,"headPos":16102,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ List.map (rowLen μ) (List.range (colLen μ 0))\n⊢ 0 < x"],"goalsAfter":["μ : YoungDiagram\nx : ℕ\nhx : ∃ a, a ∈ List.range (colLen μ 0) ∧ rowLen μ a = x\n⊢ 0 < x"],"content":"List.mem_map"},{"tailPos":16115,"headPos":16114,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : ∃ a, a ∈ List.range (colLen μ 0) ∧ rowLen μ a = x\n⊢ 0 < x"],"goalsAfter":["μ : YoungDiagram\nx : ℕ\nhx : ∃ a, a ∈ List.range (colLen μ 0) ∧ rowLen μ a = x\n⊢ 0 < x"],"content":"]"},{"tailPos":16121,"headPos":16089,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ rowLens μ\n⊢ 0 < x"],"goalsAfter":["μ : YoungDiagram\nx : ℕ\nhx : ∃ a, a ∈ List.range (colLen μ 0) ∧ rowLen μ a = x\n⊢ 0 < x"],"content":"rw [rowLens, List.mem_map] at hx"},{"tailPos":16171,"headPos":16124,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : ∃ a, a ∈ List.range (colLen μ 0) ∧ rowLen μ a = x\n⊢ 0 < x"],"goalsAfter":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : i ∈ List.range (colLen μ 0)\n⊢ 0 < rowLen μ i"],"content":"obtain ⟨i, hi, rfl : μ.rowLen i = x⟩ := hx"},{"tailPos":16194,"headPos":16179,"goalsBefore":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : i ∈ List.range (colLen μ 0)\n⊢ 0 < rowLen μ i"],"goalsAfter":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : i < colLen μ 0\n⊢ 0 < rowLen μ i"],"content":"List.mem_range,"},{"tailPos":16217,"headPos":16195,"goalsBefore":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : i < colLen μ 0\n⊢ 0 < rowLen μ i"],"goalsAfter":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : (i, 0) ∈ μ\n⊢ 0 < rowLen μ i"],"content":"← mem_iff_lt_colLen,"},{"tailPos":16235,"headPos":16218,"goalsBefore":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : (i, 0) ∈ μ\n⊢ 0 < rowLen μ i"],"goalsAfter":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : 0 < rowLen μ i\n⊢ 0 < rowLen μ i"],"content":"mem_iff_lt_rowLen"},{"tailPos":16236,"headPos":16235,"goalsBefore":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : 0 < rowLen μ i\n⊢ 0 < rowLen μ i"],"goalsAfter":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : 0 < rowLen μ i\n⊢ 0 < rowLen μ i"],"content":"]"},{"tailPos":16242,"headPos":16174,"goalsBefore":["case intro.intro\nμ : YoungDiagram\ni : ℕ\nhi : i ∈ List.range (colLen μ 0)\n⊢ 0 < rowLen μ i"],"goalsAfter":[],"content":"rwa [List.mem_range, ← mem_iff_lt_colLen, mem_iff_lt_rowLen] at hi"},{"tailPos":16242,"headPos":16089,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ rowLens μ\n⊢ 0 < x"],"goalsAfter":[],"content":"rw [rowLens, List.mem_map] at hx\n  obtain ⟨i, hi, rfl : μ.rowLen i = x⟩ := hx\n  rwa [List.mem_range, ← mem_iff_lt_colLen, mem_iff_lt_rowLen] at hi"},{"tailPos":16086,"headPos":16084,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ rowLens μ\n⊢ 0 < x"],"goalsAfter":[],"content":"by"},{"tailPos":16242,"headPos":16084,"goalsBefore":["μ : YoungDiagram\nx : ℕ\nhx : x ∈ rowLens μ\n⊢ 0 < x"],"goalsAfter":[],"content":"by\n  rw [rowLens, List.mem_map] at hx\n  obtain ⟨i, hi, rfl : μ.rowLen i = x⟩ := hx\n  rwa [List.mem_range, ← mem_iff_lt_colLen, mem_iff_lt_rowLen] at hi"},{"tailPos":17528,"headPos":17481,"goalsBefore":["w : List ℕ\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens w ↔ ∃ h, c.snd < List.get w { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens [] ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }","case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens (w_hd :: w_tl) ↔ ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"induction' w with w_hd w_tl w_ih generalizing c"},{"tailPos":17532,"headPos":17529,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens [] ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }","case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens (w_hd :: w_tl) ↔ ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens [] ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }","case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens (w_hd :: w_tl) ↔ ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"<;>"},{"tailPos":17564,"headPos":17537,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens [] ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"content":"YoungDiagram.cellsOfRowLens"},{"tailPos":17565,"headPos":17564,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"content":"]"},{"tailPos":17565,"headPos":17533,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens [] ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"content":"rw [YoungDiagram.cellsOfRowLens]"},{"tailPos":17564,"headPos":17537,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens (w_hd :: w_tl) ↔ ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"YoungDiagram.cellsOfRowLens"},{"tailPos":17565,"headPos":17564,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"]"},{"tailPos":17565,"headPos":17533,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens (w_hd :: w_tl) ↔ ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"rw [YoungDiagram.cellsOfRowLens]"},{"tailPos":17565,"headPos":17481,"goalsBefore":["w : List ℕ\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens w ↔ ∃ h, c.snd < List.get w { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }","case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"induction' w with w_hd w_tl w_ih generalizing c <;> rw [YoungDiagram.cellsOfRowLens]"},{"tailPos":17570,"headPos":17568,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }","case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"content":"·"},{"tailPos":17605,"headPos":17571,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }"],"goalsAfter":[],"content":"simp [YoungDiagram.cellsOfRowLens]"},{"tailPos":17605,"headPos":17568,"goalsBefore":["case nil\nc✝ c : ℕ × ℕ\n⊢ c ∈ ∅ ↔ ∃ h, c.snd < List.get [] { val := c.fst, isLt := h }","case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"· simp [YoungDiagram.cellsOfRowLens]"},{"tailPos":17610,"headPos":17608,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"content":"·"},{"tailPos":17644,"headPos":17611,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":["case cons.mk.zero\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ : ℕ\n⊢ (Nat.zero, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.zero, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.zero, snd✝).fst, isLt := h }","case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"content":"rcases c with ⟨⟨_, _⟩, _⟩"},{"tailPos":17651,"headPos":17649,"goalsBefore":["case cons.mk.zero\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ : ℕ\n⊢ (Nat.zero, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.zero, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.zero, snd✝).fst, isLt := h }","case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"goalsAfter":["case cons.mk.zero\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ : ℕ\n⊢ (Nat.zero, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.zero, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.zero, snd✝).fst, isLt := h }"],"content":"·"},{"tailPos":17656,"headPos":17652,"goalsBefore":["case cons.mk.zero\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ : ℕ\n⊢ (Nat.zero, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.zero, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.zero, snd✝).fst, isLt := h }"],"goalsAfter":[],"content":"simp only [Nat.zero_eq, Finset.singleton_product, Finset.mem_union, Finset.mem_map, Finset.mem_range,\n  Embedding.coeFn_mk, Prod.mk.injEq, true_and, exists_eq_right, Embedding.coe_prodMap, Prod_map, Embedding.refl_apply,\n  Nat.succ_ne_zero, false_and, and_false, exists_false, or_false, List.get, List.length_cons, Nat.succ_pos',\n  exists_prop]"},{"tailPos":17656,"headPos":17649,"goalsBefore":["case cons.mk.zero\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ : ℕ\n⊢ (Nat.zero, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.zero, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.zero, snd✝).fst, isLt := h }","case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"goalsAfter":["case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"content":"· simp"},{"tailPos":17696,"headPos":17694,"goalsBefore":["case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"goalsAfter":["case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"content":"·"},{"tailPos":17757,"headPos":17697,"goalsBefore":["case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"goalsAfter":[],"content":"simp [w_ih, -Finset.singleton_product, Nat.succ_lt_succ_iff]"},{"tailPos":17757,"headPos":17694,"goalsBefore":["case cons.mk.succ\nc : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nsnd✝ n✝ : ℕ\n⊢ (Nat.succ n✝, snd✝) ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, (Nat.succ n✝, snd✝).snd < List.get (w_hd :: w_tl) { val := (Nat.succ n✝, snd✝).fst, isLt := h }"],"goalsAfter":[],"content":"· simp [w_ih, -Finset.singleton_product, Nat.succ_lt_succ_iff]"},{"tailPos":17757,"headPos":17611,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":[],"content":"rcases c with ⟨⟨_, _⟩, _⟩\n    · simp\n    -- Porting note: was `simpa`\n    · simp [w_ih, -Finset.singleton_product, Nat.succ_lt_succ_iff]"},{"tailPos":17757,"headPos":17608,"goalsBefore":["case cons\nc✝ : ℕ × ℕ\nw_hd : ℕ\nw_tl : List ℕ\nw_ih : ∀ {c : ℕ × ℕ}, c ∈ YoungDiagram.cellsOfRowLens w_tl ↔ ∃ h, c.snd < List.get w_tl { val := c.fst, isLt := h }\nc : ℕ × ℕ\n⊢ c ∈\n      {0} ×ˢ Finset.range w_hd ∪\n        Finset.map (Embedding.prodMap { toFun := Nat.succ, inj' := Nat.succ_injective } (Embedding.refl ℕ))\n          (YoungDiagram.cellsOfRowLens w_tl) ↔\n    ∃ h, c.snd < List.get (w_hd :: w_tl) { val := c.fst, isLt := h }"],"goalsAfter":[],"content":"· rcases c with ⟨⟨_, _⟩, _⟩\n    · simp\n    -- Porting note: was `simpa`\n    · simp [w_ih, -Finset.singleton_product, Nat.succ_lt_succ_iff]"},{"tailPos":17757,"headPos":17481,"goalsBefore":["w : List ℕ\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens w ↔ ∃ h, c.snd < List.get w { val := c.fst, isLt := h }"],"goalsAfter":[],"content":"induction' w with w_hd w_tl w_ih generalizing c <;> rw [YoungDiagram.cellsOfRowLens]\n  · simp [YoungDiagram.cellsOfRowLens]\n  · rcases c with ⟨⟨_, _⟩, _⟩\n    · simp\n    -- Porting note: was `simpa`\n    · simp [w_ih, -Finset.singleton_product, Nat.succ_lt_succ_iff]"},{"tailPos":17478,"headPos":17476,"goalsBefore":["w : List ℕ\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens w ↔ ∃ h, c.snd < List.get w { val := c.fst, isLt := h }"],"goalsAfter":[],"content":"by"},{"tailPos":17757,"headPos":17476,"goalsBefore":["w : List ℕ\nc : ℕ × ℕ\n⊢ c ∈ YoungDiagram.cellsOfRowLens w ↔ ∃ h, c.snd < List.get w { val := c.fst, isLt := h }"],"goalsAfter":[],"content":"by\n  induction' w with w_hd w_tl w_ih generalizing c <;> rw [YoungDiagram.cellsOfRowLens]\n  · simp [YoungDiagram.cellsOfRowLens]\n  · rcases c with ⟨⟨_, _⟩, _⟩\n    · simp\n    -- Porting note: was `simpa`\n    · simp [w_ih, -Finset.singleton_product, Nat.succ_lt_succ_iff]"},{"tailPos":18182,"headPos":18107,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\n⊢ IsLowerSet ↑(YoungDiagram.cellsOfRowLens w)"],"goalsAfter":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : (i2, j2) ∈ ↑(YoungDiagram.cellsOfRowLens w)\n⊢ (i1, j1) ∈ ↑(YoungDiagram.cellsOfRowLens w)"],"content":"rintro ⟨i2, j2⟩ ⟨i1, j1⟩ ⟨hi : i1 ≤ i2, hj : j1 ≤ j2⟩ hcell"},{"tailPos":18206,"headPos":18191,"goalsBefore":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : (i2, j2) ∈ ↑(YoungDiagram.cellsOfRowLens w)\n⊢ (i1, j1) ∈ ↑(YoungDiagram.cellsOfRowLens w)"],"goalsAfter":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : (i2, j2) ∈ YoungDiagram.cellsOfRowLens w\n⊢ (i1, j1) ∈ YoungDiagram.cellsOfRowLens w"],"content":"Finset.mem_coe,"},{"tailPos":18238,"headPos":18207,"goalsBefore":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : (i2, j2) ∈ YoungDiagram.cellsOfRowLens w\n⊢ (i1, j1) ∈ YoungDiagram.cellsOfRowLens w"],"goalsAfter":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : ∃ h, (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"content":"YoungDiagram.mem_cellsOfRowLens"},{"tailPos":18239,"headPos":18238,"goalsBefore":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : ∃ h, (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"goalsAfter":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : ∃ h, (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"content":"]"},{"tailPos":18251,"headPos":18187,"goalsBefore":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : (i2, j2) ∈ ↑(YoungDiagram.cellsOfRowLens w)\n⊢ (i1, j1) ∈ ↑(YoungDiagram.cellsOfRowLens w)"],"goalsAfter":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : ∃ h, (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"content":"rw [Finset.mem_coe, YoungDiagram.mem_cellsOfRowLens] at hcell⊢"},{"tailPos":18284,"headPos":18256,"goalsBefore":["case mk.mk.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nhcell : ∃ h, (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"goalsAfter":["case mk.mk.intro.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"content":"obtain ⟨h1, h2⟩ := hcell"},{"tailPos":18320,"headPos":18289,"goalsBefore":["case mk.mk.intro.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ ∃ h, (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := h }"],"goalsAfter":["case mk.mk.intro.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := (_ : i1 < List.length w) }"],"content":"refine' ⟨hi.trans_lt h1, _⟩"},{"tailPos":18466,"headPos":18431,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":["case inl\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nj2 i1 j1 : ℕ\nhj : j1 ≤ j2\nhi : i1 ≤ i1\nh1 : (i1, j2).fst < List.length w\nh2 : (i1, j2).snd < List.get w { val := (i1, j2).fst, isLt := h1 }\n⊢ List.get w { val := i1, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }","case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"content":"obtain rfl | h := eq_or_lt_of_le hi"},{"tailPos":18477,"headPos":18475,"goalsBefore":["case inl\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nj2 i1 j1 : ℕ\nhj : j1 ≤ j2\nhi : i1 ≤ i1\nh1 : (i1, j2).fst < List.length w\nh2 : (i1, j2).snd < List.get w { val := (i1, j2).fst, isLt := h1 }\n⊢ List.get w { val := i1, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }","case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":["case inl\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nj2 i1 j1 : ℕ\nhj : j1 ≤ j2\nhi : i1 ≤ i1\nh1 : (i1, j2).fst < List.length w\nh2 : (i1, j2).snd < List.get w { val := (i1, j2).fst, isLt := h1 }\n⊢ List.get w { val := i1, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"content":"·"},{"tailPos":18514,"headPos":18478,"goalsBefore":["case inl\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nj2 i1 j1 : ℕ\nhj : j1 ≤ j2\nhi : i1 ≤ i1\nh1 : (i1, j2).fst < List.length w\nh2 : (i1, j2).snd < List.get w { val := (i1, j2).fst, isLt := h1 }\n⊢ List.get w { val := i1, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"convert le_refl (w.get ⟨i1, h1⟩)"},{"tailPos":18514,"headPos":18475,"goalsBefore":["case inl\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nj2 i1 j1 : ℕ\nhj : j1 ≤ j2\nhi : i1 ≤ i1\nh1 : (i1, j2).fst < List.length w\nh2 : (i1, j2).snd < List.get w { val := (i1, j2).fst, isLt := h1 }\n⊢ List.get w { val := i1, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }","case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":["case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"content":"· convert le_refl (w.get ⟨i1, h1⟩)"},{"tailPos":18525,"headPos":18523,"goalsBefore":["case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":["case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"content":"·"},{"tailPos":18565,"headPos":18526,"goalsBefore":["case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":18565,"headPos":18523,"goalsBefore":["case inr\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\nh : i1 < i2\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"· exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":18565,"headPos":18431,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"obtain rfl | h := eq_or_lt_of_le hi\n        · convert le_refl (w.get ⟨i1, h1⟩)\n        · exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":18422,"headPos":18420,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"by"},{"tailPos":18565,"headPos":18420,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ List.get w { val := i2, isLt := h1 } ≤ List.get w { val := i1, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"by\n        obtain rfl | h := eq_or_lt_of_le hi\n        · convert le_refl (w.get ⟨i1, h1⟩)\n        · exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":18565,"headPos":18325,"goalsBefore":["case mk.mk.intro.intro\nw : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni2 j2 i1 j1 : ℕ\nhi : i1 ≤ i2\nhj : j1 ≤ j2\nh1 : (i2, j2).fst < List.length w\nh2 : (i2, j2).snd < List.get w { val := (i2, j2).fst, isLt := h1 }\n⊢ (i1, j1).snd < List.get w { val := (i1, j1).fst, isLt := (_ : i1 < List.length w) }"],"goalsAfter":[],"content":"calc\n      j1 ≤ j2 := hj\n      _ < w.get ⟨i2, _⟩  := h2\n      _ ≤ w.get ⟨i1, _⟩ := by\n        obtain rfl | h := eq_or_lt_of_le hi\n        · convert le_refl (w.get ⟨i1, h1⟩)\n        · exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":18565,"headPos":18107,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\n⊢ IsLowerSet ↑(YoungDiagram.cellsOfRowLens w)"],"goalsAfter":[],"content":"rintro ⟨i2, j2⟩ ⟨i1, j1⟩ ⟨hi : i1 ≤ i2, hj : j1 ≤ j2⟩ hcell\n    rw [Finset.mem_coe, YoungDiagram.mem_cellsOfRowLens] at hcell⊢\n    obtain ⟨h1, h2⟩ := hcell\n    refine' ⟨hi.trans_lt h1, _⟩\n    calc\n      j1 ≤ j2 := hj\n      _ < w.get ⟨i2, _⟩  := h2\n      _ ≤ w.get ⟨i1, _⟩ := by\n        obtain rfl | h := eq_or_lt_of_le hi\n        · convert le_refl (w.get ⟨i1, h1⟩)\n        · exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":18102,"headPos":18100,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\n⊢ IsLowerSet ↑(YoungDiagram.cellsOfRowLens w)"],"goalsAfter":[],"content":"by"},{"tailPos":18565,"headPos":18100,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\n⊢ IsLowerSet ↑(YoungDiagram.cellsOfRowLens w)"],"goalsAfter":[],"content":"by\n    rintro ⟨i2, j2⟩ ⟨i1, j1⟩ ⟨hi : i1 ≤ i2, hj : j1 ≤ j2⟩ hcell\n    rw [Finset.mem_coe, YoungDiagram.mem_cellsOfRowLens] at hcell⊢\n    obtain ⟨h1, h2⟩ := hcell\n    refine' ⟨hi.trans_lt h1, _⟩\n    calc\n      j1 ≤ j2 := hj\n      _ < w.get ⟨i2, _⟩  := h2\n      _ ≤ w.get ⟨i1, _⟩ := by\n        obtain rfl | h := eq_or_lt_of_le hi\n        · convert le_refl (w.get ⟨i1, h1⟩)\n        · exact List.pairwise_iff_get.mp hw _ _ h"},{"tailPos":19347,"headPos":19208,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nhpos : ∀ (x : ℕ), x ∈ w → 0 < x\n⊢ List.length (rowLens (ofRowLens w hw)) = List.length w"],"goalsAfter":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nhpos : ∀ (x : ℕ), x ∈ w → 0 < x\n⊢ True ∧ ∀ (n : ℕ), n < List.length w → ∃ h, 0 < List.get w { val := n, isLt := (_ : (n, 0).fst < List.length w) }"],"content":"simp only [length_rowLens, colLen, Nat.find_eq_iff, mem_cells, mem_ofRowLens,\n    lt_self_iff_false, IsEmpty.exists_iff, Classical.not_not]"},{"tailPos":19426,"headPos":19350,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nhpos : ∀ (x : ℕ), x ∈ w → 0 < x\n⊢ True ∧ ∀ (n : ℕ), n < List.length w → ∃ h, 0 < List.get w { val := n, isLt := (_ : (n, 0).fst < List.length w) }"],"goalsAfter":[],"content":"refine' ⟨True.intro, fun n hn => ⟨hn, hpos _ (List.get_mem _ _ hn)⟩⟩"},{"tailPos":19426,"headPos":19208,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nhpos : ∀ (x : ℕ), x ∈ w → 0 < x\n⊢ List.length (rowLens (ofRowLens w hw)) = List.length w"],"goalsAfter":[],"content":"simp only [length_rowLens, colLen, Nat.find_eq_iff, mem_cells, mem_ofRowLens,\n    lt_self_iff_false, IsEmpty.exists_iff, Classical.not_not]\n  refine' ⟨True.intro, fun n hn => ⟨hn, hpos _ (List.get_mem _ _ hn)⟩⟩"},{"tailPos":19205,"headPos":19203,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nhpos : ∀ (x : ℕ), x ∈ w → 0 < x\n⊢ List.length (rowLens (ofRowLens w hw)) = List.length w"],"goalsAfter":[],"content":"by"},{"tailPos":19426,"headPos":19203,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\nhpos : ∀ (x : ℕ), x ∈ w → 0 < x\n⊢ List.length (rowLens (ofRowLens w hw)) = List.length w"],"goalsAfter":[],"content":"by\n  simp only [length_rowLens, colLen, Nat.find_eq_iff, mem_cells, mem_ofRowLens,\n    lt_self_iff_false, IsEmpty.exists_iff, Classical.not_not]\n  refine' ⟨True.intro, fun n hn => ⟨hn, hpos _ (List.get_mem _ _ hn)⟩⟩"},{"tailPos":19865,"headPos":19820,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni : Fin (List.length w)\n⊢ rowLen (ofRowLens w hw) ↑i = List.get w i"],"goalsAfter":[],"content":"simp [rowLen, Nat.find_eq_iff, mem_ofRowLens]"},{"tailPos":19817,"headPos":19815,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni : Fin (List.length w)\n⊢ rowLen (ofRowLens w hw) ↑i = List.get w i"],"goalsAfter":[],"content":"by"},{"tailPos":19865,"headPos":19815,"goalsBefore":["w : List ℕ\nhw : List.Sorted (fun x x_1 => x ≥ x_1) w\ni : Fin (List.length w)\n⊢ rowLen (ofRowLens w hw) ↑i = List.get w i"],"goalsAfter":[],"content":"by\n  simp [rowLen, Nat.find_eq_iff, mem_ofRowLens]"},{"tailPos":20105,"headPos":20091,"goalsBefore":["μ : YoungDiagram\n⊢ ofRowLens (rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (rowLens μ)) = μ"],"goalsAfter":["case cells.a.mk\nμ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ (ofRowLens (rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (rowLens μ))).cells ↔ (i, j) ∈ μ.cells"],"content":"ext ⟨i, j⟩"},{"tailPos":20173,"headPos":20108,"goalsBefore":["case cells.a.mk\nμ : YoungDiagram\ni j : ℕ\n⊢ (i, j) ∈ (ofRowLens (rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (rowLens μ))).cells ↔ (i, j) ∈ μ.cells"],"goalsAfter":["case cells.a.mk\nμ : YoungDiagram\ni j : ℕ\n⊢ (∃ h, j < rowLen μ i) ↔ (i, j) ∈ μ"],"content":"simp only [mem_cells, mem_ofRowLens, length_rowLens, get_rowLens]"},{"tailPos":20249,"headPos":20176,"goalsBefore":["case cells.a.mk\nμ : YoungDiagram\ni j : ℕ\n⊢ (∃ h, j < rowLen μ i) ↔ (i, j) ∈ μ"],"goalsAfter":[],"content":"simpa only [mem_iff_lt_colLen, mem_iff_lt_rowLen, exists_prop, and_iff_right_iff_imp] using j.zero_le.trans_lt"},{"tailPos":20249,"headPos":20091,"goalsBefore":["μ : YoungDiagram\n⊢ ofRowLens (rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (rowLens μ)) = μ"],"goalsAfter":[],"content":"ext ⟨i, j⟩\n  simp only [mem_cells, mem_ofRowLens, length_rowLens, get_rowLens]\n  simpa [← mem_iff_lt_colLen, mem_iff_lt_rowLen] using j.zero_le.trans_lt"},{"tailPos":20088,"headPos":20086,"goalsBefore":["μ : YoungDiagram\n⊢ ofRowLens (rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (rowLens μ)) = μ"],"goalsAfter":[],"content":"by"},{"tailPos":20249,"headPos":20086,"goalsBefore":["μ : YoungDiagram\n⊢ ofRowLens (rowLens μ) (_ : List.Sorted (fun x x_1 => x ≥ x_1) (rowLens μ)) = μ"],"goalsAfter":[],"content":"by\n  ext ⟨i, j⟩\n  simp only [mem_cells, mem_ofRowLens, length_rowLens, get_rowLens]\n  simpa [← mem_iff_lt_colLen, mem_iff_lt_rowLen] using j.zero_le.trans_lt"}]
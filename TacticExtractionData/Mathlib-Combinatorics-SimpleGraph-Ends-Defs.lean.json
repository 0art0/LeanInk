[{"tailPos":1846,"headPos":1811,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Function.Injective supp"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ ∀ (v w : ↑(Kᶜ)),\n    supp (connectedComponentMk (induce (Kᶜ) G) v) = supp (connectedComponentMk (induce (Kᶜ) G) w) →\n      connectedComponentMk (induce (Kᶜ) G) v = connectedComponentMk (induce (Kᶜ) G) w"],"content":"refine' ConnectedComponent.ind₂ _"},{"tailPos":1881,"headPos":1849,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ ∀ (v w : ↑(Kᶜ)),\n    supp (connectedComponentMk (induce (Kᶜ) G) v) = supp (connectedComponentMk (induce (Kᶜ) G) w) →\n      connectedComponentMk (induce (Kᶜ) G) v = connectedComponentMk (induce (Kᶜ) G) w"],"goalsAfter":["case mk.mk\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nv : V\nhv : v ∈ Kᶜ\nw : V\nhw : w ∈ Kᶜ\nh :\n  supp (connectedComponentMk (induce (Kᶜ) G) { val := v, property := hv }) =\n    supp (connectedComponentMk (induce (Kᶜ) G) { val := w, property := hw })\n⊢ connectedComponentMk (induce (Kᶜ) G) { val := v, property := hv } =\n    connectedComponentMk (induce (Kᶜ) G) { val := w, property := hw }"],"content":"rintro ⟨v, hv⟩ ⟨w, hw⟩ h"},{"tailPos":1977,"headPos":1884,"goalsBefore":["case mk.mk\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nv : V\nhv : v ∈ Kᶜ\nw : V\nhw : w ∈ Kᶜ\nh :\n  supp (connectedComponentMk (induce (Kᶜ) G) { val := v, property := hv }) =\n    supp (connectedComponentMk (induce (Kᶜ) G) { val := w, property := hw })\n⊢ connectedComponentMk (induce (Kᶜ) G) { val := v, property := hv } =\n    connectedComponentMk (induce (Kᶜ) G) { val := w, property := hw }"],"goalsAfter":["case mk.mk\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nv : V\nhv : v ∈ Kᶜ\nw : V\nhw : w ∈ Kᶜ\nh :\n  ∀ (x : V),\n    (∃ h, Reachable (induce (Kᶜ) G) { val := x, property := (_ : ¬x ∈ K) } { val := v, property := hv }) ↔\n      ∃ h, Reachable (induce (Kᶜ) G) { val := x, property := (_ : ¬x ∈ K) } { val := w, property := hw }\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := hv } { val := w, property := hw }"],"content":"simp only [Set.ext_iff, ConnectedComponent.eq, Set.mem_setOf_eq, ComponentCompl.supp] at h⊢"},{"tailPos":2035,"headPos":1980,"goalsBefore":["case mk.mk\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nv : V\nhv : v ∈ Kᶜ\nw : V\nhw : w ∈ Kᶜ\nh :\n  ∀ (x : V),\n    (∃ h, Reachable (induce (Kᶜ) G) { val := x, property := (_ : ¬x ∈ K) } { val := v, property := hv }) ↔\n      ∃ h, Reachable (induce (Kᶜ) G) { val := x, property := (_ : ¬x ∈ K) } { val := w, property := hw }\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := hv } { val := w, property := hw }"],"goalsAfter":[],"content":"exact ((h v).mp ⟨hv, Reachable.refl _⟩).choose_spec"},{"tailPos":2035,"headPos":1811,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Function.Injective supp"],"goalsAfter":[],"content":"refine' ConnectedComponent.ind₂ _\n  rintro ⟨v, hv⟩ ⟨w, hw⟩ h\n  simp only [Set.ext_iff, ConnectedComponent.eq, Set.mem_setOf_eq, ComponentCompl.supp] at h⊢\n  exact ((h v).mp ⟨hv, Reachable.refl _⟩).choose_spec"},{"tailPos":1808,"headPos":1806,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Function.Injective supp"],"goalsAfter":[],"content":"by"},{"tailPos":2035,"headPos":1806,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Function.Injective supp"],"goalsAfter":[],"content":"by\n  refine' ConnectedComponent.ind₂ _\n  rintro ⟨v, hv⟩ ⟨w, hw⟩ h\n  simp only [Set.ext_iff, ConnectedComponent.eq, Set.mem_setOf_eq, ComponentCompl.supp] at h⊢\n  exact ((h v).mp ⟨hv, Reachable.refl _⟩).choose_spec"},{"tailPos":3209,"headPos":3188,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ componentComplMk G vK = componentComplMk G wK"],"goalsAfter":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"content":"ConnectedComponent.eq"},{"tailPos":3210,"headPos":3209,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"goalsAfter":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"content":"]"},{"tailPos":3210,"headPos":3184,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ componentComplMk G vK = componentComplMk G wK"],"goalsAfter":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"content":"rw [ConnectedComponent.eq]"},{"tailPos":3232,"headPos":3213,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Reachable (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"goalsAfter":["case h\nV : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Adj (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"content":"apply Adj.reachable"},{"tailPos":3242,"headPos":3235,"goalsBefore":["case h\nV : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ Adj (induce (Kᶜ) G) { val := v, property := vK } { val := w, property := wK }"],"goalsAfter":[],"content":"exact a"},{"tailPos":3242,"headPos":3184,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ componentComplMk G vK = componentComplMk G wK"],"goalsAfter":[],"content":"rw [ConnectedComponent.eq]\n  apply Adj.reachable\n  exact a"},{"tailPos":3181,"headPos":3179,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ componentComplMk G vK = componentComplMk G wK"],"goalsAfter":[],"content":"by"},{"tailPos":3242,"headPos":3179,"goalsBefore":["V : Type u\nG✝ : SimpleGraph V\nK L L' M : Set V\nG : SimpleGraph V\nv w : V\nvK : ¬v ∈ K\nwK : ¬w ∈ K\na : Adj G v w\n⊢ componentComplMk G vK = componentComplMk G wK"],"goalsAfter":[],"content":"by\n  rw [ConnectedComponent.eq]\n  apply Adj.reachable\n  exact a"},{"tailPos":3759,"headPos":3727,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w : ↑(Kᶜ)\np : Walk (induce (Kᶜ) G) v w\n⊢ Walk.IsPath p → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\n⊢ Walk.IsPath Walk.nil → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝","case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"content":"induction' p with _ u v w a q ih"},{"tailPos":3766,"headPos":3764,"goalsBefore":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\n⊢ Walk.IsPath Walk.nil → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝","case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\n⊢ Walk.IsPath Walk.nil → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝"],"content":"·"},{"tailPos":3775,"headPos":3767,"goalsBefore":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\n⊢ Walk.IsPath Walk.nil → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝"],"goalsAfter":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\na✝ : Walk.IsPath Walk.nil\n⊢ (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝"],"content":"rintro _"},{"tailPos":3785,"headPos":3782,"goalsBefore":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\na✝ : Walk.IsPath Walk.nil\n⊢ (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":3785,"headPos":3767,"goalsBefore":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\n⊢ Walk.IsPath Walk.nil → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝"],"goalsAfter":[],"content":"rintro _\n      rfl"},{"tailPos":3785,"headPos":3764,"goalsBefore":["case nil\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w u✝ : ↑(Kᶜ)\n⊢ Walk.IsPath Walk.nil → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝ = (fun vv => f (_ : ↑vv ∈ Kᶜ)) u✝","case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"content":"· rintro _\n      rfl"},{"tailPos":3792,"headPos":3790,"goalsBefore":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"content":"·"},{"tailPos":3802,"headPos":3793,"goalsBefore":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\nh' : Walk.IsPath (Walk.cons a q)\n⊢ (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"content":"rintro h'"},{"tailPos":3856,"headPos":3809,"goalsBefore":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\nh' : Walk.IsPath (Walk.cons a q)\n⊢ (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":[],"content":"exact (h u.prop v.prop a).trans (ih h'.of_cons)"},{"tailPos":3856,"headPos":3793,"goalsBefore":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":[],"content":"rintro h'\n      exact (h u.prop v.prop a).trans (ih h'.of_cons)"},{"tailPos":3856,"headPos":3790,"goalsBefore":["case cons\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv✝ w✝ u v w : ↑(Kᶜ)\na : Adj (induce (Kᶜ) G) u v\nq : Walk (induce (Kᶜ) G) v w\nih : Walk.IsPath q → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w\n⊢ Walk.IsPath (Walk.cons a q) → (fun vv => f (_ : ↑vv ∈ Kᶜ)) u = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":[],"content":"· rintro h'\n      exact (h u.prop v.prop a).trans (ih h'.of_cons)"},{"tailPos":3856,"headPos":3727,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w : ↑(Kᶜ)\np : Walk (induce (Kᶜ) G) v w\n⊢ Walk.IsPath p → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":[],"content":"induction' p with _ u v w a q ih\n    · rintro _\n      rfl\n    · rintro h'\n      exact (h u.prop v.prop a).trans (ih h'.of_cons)"},{"tailPos":3722,"headPos":3720,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w : ↑(Kᶜ)\np : Walk (induce (Kᶜ) G) v w\n⊢ Walk.IsPath p → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":[],"content":"by"},{"tailPos":3856,"headPos":3720,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : Sort ?u.2285\nf : ⦃v : V⦄ → ¬v ∈ K → β\nh : ∀ ⦃v w : V⦄ (hv : ¬v ∈ K) (hw : ¬w ∈ K), Adj G v w → f hv = f hw\nv w : ↑(Kᶜ)\np : Walk (induce (Kᶜ) G) v w\n⊢ Walk.IsPath p → (fun vv => f (_ : ↑vv ∈ Kᶜ)) v = (fun vv => f (_ : ↑vv ∈ Kᶜ)) w"],"goalsAfter":[],"content":"by\n    induction' p with _ u v w a q ih\n    · rintro _\n      rfl\n    · rintro h'\n      exact (h u.prop v.prop a).trans (ih h'.of_cons)"},{"tailPos":4163,"headPos":4135,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : ComponentCompl G K → Prop\nf : ∀ ⦃v : V⦄ (hv : ¬v ∈ K), β (componentComplMk G hv)\n⊢ ∀ (C : ComponentCompl G K), β C"],"goalsAfter":["case h\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : ComponentCompl G K → Prop\nf : ∀ ⦃v : V⦄ (hv : ¬v ∈ K), β (componentComplMk G hv)\n⊢ ∀ (v : ↑(Kᶜ)), β (connectedComponentMk (induce (Kᶜ) G) v)"],"content":"apply ConnectedComponent.ind"},{"tailPos":4197,"headPos":4166,"goalsBefore":["case h\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : ComponentCompl G K → Prop\nf : ∀ ⦃v : V⦄ (hv : ¬v ∈ K), β (componentComplMk G hv)\n⊢ ∀ (v : ↑(Kᶜ)), β (connectedComponentMk (induce (Kᶜ) G) v)"],"goalsAfter":[],"content":"exact fun ⟨v, vnK⟩ => f vnK"},{"tailPos":4197,"headPos":4135,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : ComponentCompl G K → Prop\nf : ∀ ⦃v : V⦄ (hv : ¬v ∈ K), β (componentComplMk G hv)\n⊢ ∀ (C : ComponentCompl G K), β C"],"goalsAfter":[],"content":"apply ConnectedComponent.ind\n  exact fun ⟨v, vnK⟩ => f vnK"},{"tailPos":4132,"headPos":4130,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : ComponentCompl G K → Prop\nf : ∀ ⦃v : V⦄ (hv : ¬v ∈ K), β (componentComplMk G hv)\n⊢ ∀ (C : ComponentCompl G K), β C"],"goalsAfter":[],"content":"by"},{"tailPos":4197,"headPos":4130,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nβ : ComponentCompl G K → Prop\nf : ∀ ⦃v : V⦄ (hv : ¬v ∈ K), β (componentComplMk G hv)\n⊢ ∀ (C : ComponentCompl G K), β C"],"goalsAfter":[],"content":"by\n  apply ConnectedComponent.ind\n  exact fun ⟨v, vnK⟩ => f vnK"},{"tailPos":5214,"headPos":5198,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ Disjoint K ↑C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ K ∩ ↑C ⊆ ∅"],"content":"Set.disjoint_iff"},{"tailPos":5215,"headPos":5214,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ K ∩ ↑C ⊆ ∅"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ K ∩ ↑C ⊆ ∅"],"content":"]"},{"tailPos":5215,"headPos":5194,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ Disjoint K ↑C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ K ∩ ↑C ⊆ ∅"],"content":"rw [Set.disjoint_iff]"},{"tailPos":5258,"headPos":5218,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ K ∩ ↑C ⊆ ∅"],"goalsAfter":[],"content":"exact fun v ⟨vK, vC⟩ => vC.choose vK"},{"tailPos":5258,"headPos":5194,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ Disjoint K ↑C"],"goalsAfter":[],"content":"rw [Set.disjoint_iff]\n  exact fun v ⟨vK, vC⟩ => vC.choose vK"},{"tailPos":5191,"headPos":5189,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ Disjoint K ↑C"],"goalsAfter":[],"content":"by"},{"tailPos":5258,"headPos":5189,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\n⊢ Disjoint K ↑C"],"goalsAfter":[],"content":"by\n  rw [Set.disjoint_iff]\n  exact fun v ⟨vK, vC⟩ => vC.choose vK"},{"tailPos":5730,"headPos":5717,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Pairwise fun C D => Disjoint ↑C ↑D"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ Disjoint ↑C ↑D"],"content":"rintro C D ne"},{"tailPos":5753,"headPos":5737,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ Disjoint ↑C ↑D"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ ↑C ∩ ↑D ⊆ ∅"],"content":"Set.disjoint_iff"},{"tailPos":5754,"headPos":5753,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ ↑C ∩ ↑D ⊆ ∅"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ ↑C ∩ ↑D ⊆ ∅"],"content":"]"},{"tailPos":5754,"headPos":5733,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ Disjoint ↑C ↑D"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ ↑C ∩ ↑D ⊆ ∅"],"content":"rw [Set.disjoint_iff]"},{"tailPos":5830,"headPos":5757,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC D : ComponentCompl G K\nne : C ≠ D\n⊢ ↑C ∩ ↑D ⊆ ∅"],"goalsAfter":[],"content":"exact fun u ⟨uC, uD⟩ => ne (uC.choose_spec.symm.trans uD.choose_spec)"},{"tailPos":5830,"headPos":5717,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Pairwise fun C D => Disjoint ↑C ↑D"],"goalsAfter":[],"content":"rintro C D ne\n  rw [Set.disjoint_iff]\n  exact fun u ⟨uC, uD⟩ => ne (uC.choose_spec.symm.trans uD.choose_spec)"},{"tailPos":5714,"headPos":5712,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Pairwise fun C D => Disjoint ↑C ↑D"],"goalsAfter":[],"content":"by"},{"tailPos":5830,"headPos":5712,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\n⊢ Pairwise fun C D => Disjoint ↑C ↑D"],"goalsAfter":[],"content":"by\n  rintro C D ne\n  rw [Set.disjoint_iff]\n  exact fun u ⟨uC, uD⟩ => ne (uC.choose_spec.symm.trans uD.choose_spec)"},{"tailPos":6189,"headPos":6183,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = componentComplMk G cnK"],"content":"← h,"},{"tailPos":6211,"headPos":6190,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = componentComplMk G cnK"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ Reachable (induce (Kᶜ) G) { val := d, property := dnK } { val := c, property := cnK }"],"content":"ConnectedComponent.eq"},{"tailPos":6212,"headPos":6211,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ Reachable (induce (Kᶜ) G) { val := d, property := dnK } { val := c, property := cnK }"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ Reachable (induce (Kᶜ) G) { val := d, property := dnK } { val := c, property := cnK }"],"content":"]"},{"tailPos":6212,"headPos":6179,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ Reachable (induce (Kᶜ) G) { val := d, property := dnK } { val := c, property := cnK }"],"content":"rw [← h, ConnectedComponent.eq]"},{"tailPos":6244,"headPos":6217,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ Reachable (induce (Kᶜ) G) { val := d, property := dnK } { val := c, property := cnK }"],"goalsAfter":[],"content":"exact Adj.reachable cd.symm"},{"tailPos":6244,"headPos":6179,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = C"],"goalsAfter":[],"content":"rw [← h, ConnectedComponent.eq]\n    exact Adj.reachable cd.symm"},{"tailPos":6174,"headPos":6172,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = C"],"goalsAfter":[],"content":"by"},{"tailPos":6244,"headPos":6172,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G K\nc d : V\nx✝ : c ∈ C\ndnK : ¬d ∈ K\ncd : Adj G c d\ncnK : ¬c ∈ K\nh : componentComplMk G cnK = C\n⊢ componentComplMk G dnK = C"],"goalsAfter":[],"content":"by\n    rw [← h, ConnectedComponent.eq]\n    exact Adj.reachable cd.symm"},{"tailPos":6722,"headPos":6681,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\n⊢ ∀ (C : ComponentCompl G K), ∃ ck, ck.fst ∈ C ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\n⊢ ∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"content":"refine' ComponentCompl.ind fun v vnK => _"},{"tailPos":6777,"headPos":6725,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\n⊢ ∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\n⊢ ∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"content":"let C : G.ComponentCompl K := G.componentComplMk vnK"},{"tailPos":6827,"headPos":6780,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\n⊢ ∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\n⊢ ∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"content":"let dis := Set.disjoint_iff.mp C.disjoint_right"},{"tailPos":6842,"headPos":6830,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\n⊢ ∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ¬∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd\n⊢ False"],"content":"by_contra' h"},{"tailPos":6930,"headPos":6894,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ¬∃ ck, ck.fst ∈ componentComplMk G vnK ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd\n⊢ False"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ False"],"content":"simp only [not_exists, not_and] at h"},{"tailPos":7029,"headPos":6968,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nthis : Set.univ = ↑C\n⊢ False"],"goalsAfter":[],"content":"exact dis ⟨hK.choose_spec, this ▸ Set.mem_univ hK.some⟩"},{"tailPos":7029,"headPos":6933,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ False"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ Set.univ = ↑C"],"content":"suffices Set.univ = (C : Set V) by exact dis ⟨hK.choose_spec, this ▸ Set.mem_univ hK.some⟩"},{"tailPos":7036,"headPos":7032,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ Set.univ = ↑C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ↑C = Set.univ"],"content":"symm"},{"tailPos":7065,"headPos":7043,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ↑C = Set.univ"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ∀ (x : V), x ∈ ↑C"],"content":"Set.eq_univ_iff_forall"},{"tailPos":7066,"headPos":7065,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ∀ (x : V), x ∈ ↑C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ∀ (x : V), x ∈ ↑C"],"content":"]"},{"tailPos":7066,"headPos":7039,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ↑C = Set.univ"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ∀ (x : V), x ∈ ↑C"],"content":"rw [Set.eq_univ_iff_forall]"},{"tailPos":7077,"headPos":7069,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\n⊢ ∀ (x : V), x ∈ ↑C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\n⊢ u ∈ ↑C"],"content":"rintro u"},{"tailPos":7093,"headPos":7080,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\n⊢ u ∈ ↑C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\nunC : ¬u ∈ ↑C\n⊢ False"],"content":"by_contra unC"},{"tailPos":7120,"headPos":7096,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\nunC : ¬u ∈ ↑C\n⊢ False"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\nunC : ¬u ∈ ↑C\np : Walk G v u\n⊢ False"],"content":"obtain ⟨p⟩ := Gc v u"},{"tailPos":7243,"headPos":7123,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\nunC : ¬u ∈ ↑C\np : Walk G v u\n⊢ False"],"goalsAfter":["case intro.intro.mk.mk.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\nunC : ¬u ∈ ↑C\np : Walk G v u\nx y : V\nxy : Adj G (x, y).fst (x, y).snd\nxC : { toProd := (x, y), is_adj := xy }.toProd.fst ∈ ↑C\nynC : ¬{ toProd := (x, y), is_adj := xy }.toProd.snd ∈ ↑C\n⊢ False"],"content":"obtain ⟨⟨⟨x, y⟩, xy⟩, -, xC, ynC⟩ :=\n    p.exists_boundary_dart (C : Set V) (G.componentComplMk_mem vnK) unC"},{"tailPos":7322,"headPos":7246,"goalsBefore":["case intro.intro.mk.mk.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\nv : V\nvnK : ¬v ∈ K\nC : ComponentCompl G K := componentComplMk G vnK\ndis : K ∩ ↑C ⊆ ∅ := Iff.mp Set.disjoint_iff (ComponentCompl.disjoint_right C)\nh : ∀ (x : V × V), x.fst ∈ componentComplMk G vnK → x.snd ∈ K → ¬Adj G x.fst x.snd\nu : V\nunC : ¬u ∈ ↑C\np : Walk G v u\nx y : V\nxy : Adj G (x, y).fst (x, y).snd\nxC : { toProd := (x, y), is_adj := xy }.toProd.fst ∈ ↑C\nynC : ¬{ toProd := (x, y), is_adj := xy }.toProd.snd ∈ ↑C\n⊢ False"],"goalsAfter":[],"content":"exact ynC (mem_of_adj x y xC (fun yK : y ∈ K => h ⟨x, y⟩ xC yK xy) xy)"},{"tailPos":7322,"headPos":6681,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\n⊢ ∀ (C : ComponentCompl G K), ∃ ck, ck.fst ∈ C ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":[],"content":"refine' ComponentCompl.ind fun v vnK => _\n  let C : G.ComponentCompl K := G.componentComplMk vnK\n  let dis := Set.disjoint_iff.mp C.disjoint_right\n  by_contra' h\n  -- Porting note: `push_neg` doesn't do its job\n  simp only [not_exists, not_and] at h\n  suffices Set.univ = (C : Set V) by exact dis ⟨hK.choose_spec, this ▸ Set.mem_univ hK.some⟩\n  symm\n  rw [Set.eq_univ_iff_forall]\n  rintro u\n  by_contra unC\n  obtain ⟨p⟩ := Gc v u\n  obtain ⟨⟨⟨x, y⟩, xy⟩, -, xC, ynC⟩ :=\n    p.exists_boundary_dart (C : Set V) (G.componentComplMk_mem vnK) unC\n  exact ynC (mem_of_adj x y xC (fun yK : y ∈ K => h ⟨x, y⟩ xC yK xy) xy)"},{"tailPos":6678,"headPos":6676,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\n⊢ ∀ (C : ComponentCompl G K), ∃ ck, ck.fst ∈ C ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":[],"content":"by"},{"tailPos":7322,"headPos":6676,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nGc : Preconnected G\nhK : Set.Nonempty K\n⊢ ∀ (C : ComponentCompl G K), ∃ ck, ck.fst ∈ C ∧ ck.snd ∈ K ∧ Adj G ck.fst ck.snd"],"goalsAfter":[],"content":"by\n  refine' ComponentCompl.ind fun v vnK => _\n  let C : G.ComponentCompl K := G.componentComplMk vnK\n  let dis := Set.disjoint_iff.mp C.disjoint_right\n  by_contra' h\n  -- Porting note: `push_neg` doesn't do its job\n  simp only [not_exists, not_and] at h\n  suffices Set.univ = (C : Set V) by exact dis ⟨hK.choose_spec, this ▸ Set.mem_univ hK.some⟩\n  symm\n  rw [Set.eq_univ_iff_forall]\n  rintro u\n  by_contra unC\n  obtain ⟨p⟩ := Gc v u\n  obtain ⟨⟨⟨x, y⟩, xy⟩, -, xC, ynC⟩ :=\n    p.exists_boundary_dart (C : Set V) (G.componentComplMk_mem vnK) unC\n  exact ynC (mem_of_adj x y xC (fun yK : y ∈ K => h ⟨x, y⟩ xC yK xy) xy)"},{"tailPos":7882,"headPos":7860,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\n⊢ ↑C ⊆ ↑(hom h C)"],"goalsAfter":["case intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nh : K ⊆ L\nc : V\ncL : ¬c ∈ L\n⊢ c ∈ ↑(hom h (componentComplMk G cL))"],"content":"rintro c ⟨cL, rfl⟩"},{"tailPos":7921,"headPos":7885,"goalsBefore":["case intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nh : K ⊆ L\nc : V\ncL : ¬c ∈ L\n⊢ c ∈ ↑(hom h (componentComplMk G cL))"],"goalsAfter":[],"content":"exact ⟨fun h' => cL (h h'), rfl⟩"},{"tailPos":7921,"headPos":7860,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\n⊢ ↑C ⊆ ↑(hom h C)"],"goalsAfter":[],"content":"rintro c ⟨cL, rfl⟩\n  exact ⟨fun h' => cL (h h'), rfl⟩"},{"tailPos":7857,"headPos":7855,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\n⊢ ↑C ⊆ ↑(hom h C)"],"goalsAfter":[],"content":"by"},{"tailPos":7921,"headPos":7855,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\n⊢ ↑C ⊆ ↑(hom h C)"],"goalsAfter":[],"content":"by\n  rintro c ⟨cL, rfl⟩\n  exact ⟨fun h' => cL (h h'), rfl⟩"},{"tailPos":8829,"headPos":8809,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ¬Disjoint ↑C ↑D"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"content":"Set.not_disjoint_iff"},{"tailPos":8830,"headPos":8829,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"content":"]"},{"tailPos":8830,"headPos":8805,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ¬Disjoint ↑C ↑D"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"content":"rw [Set.not_disjoint_iff]"},{"tailPos":8844,"headPos":8833,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D → ∃ x, x ∈ ↑C ∧ x ∈ ↑D","case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"content":"constructor"},{"tailPos":8849,"headPos":8847,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D → ∃ x, x ∈ ↑C ∧ x ∈ ↑D","case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D → ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"content":"·"},{"tailPos":8860,"headPos":8850,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D → ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\n⊢ ∃ x, x ∈ ↑C ∧ x ∈ ↑(hom h C)"],"content":"rintro rfl"},{"tailPos":8893,"headPos":8865,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\n⊢ ∃ x, x ∈ ↑C ∧ x ∈ ↑(hom h C)"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx : V\nxnL : ¬x ∈ L\n⊢ ∃ x_1, x_1 ∈ ↑(componentComplMk G xnL) ∧ x_1 ∈ ↑(hom h (componentComplMk G xnL))"],"content":"refine C.ind fun x xnL => ?_"},{"tailPos":8960,"headPos":8898,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx : V\nxnL : ¬x ∈ L\n⊢ ∃ x_1, x_1 ∈ ↑(componentComplMk G xnL) ∧ x_1 ∈ ↑(hom h (componentComplMk G xnL))"],"goalsAfter":[],"content":"exact ⟨x, ⟨xnL, rfl⟩, ⟨fun xK => xnL (h xK), rfl⟩⟩"},{"tailPos":8960,"headPos":8850,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D → ∃ x, x ∈ ↑C ∧ x ∈ ↑D"],"goalsAfter":[],"content":"rintro rfl\n    refine C.ind fun x xnL => ?_\n    exact ⟨x, ⟨xnL, rfl⟩, ⟨fun xK => xnL (h xK), rfl⟩⟩"},{"tailPos":8960,"headPos":8847,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D → ∃ x, x ∈ ↑C ∧ x ∈ ↑D","case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"content":"· rintro rfl\n    refine C.ind fun x xnL => ?_\n    exact ⟨x, ⟨xnL, rfl⟩, ⟨fun xK => xnL (h xK), rfl⟩⟩"},{"tailPos":8965,"headPos":8963,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"content":"·"},{"tailPos":8994,"headPos":8966,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\nx : V\nxnL : ¬x ∈ L\n⊢ (∃ x_1, x_1 ∈ ↑(componentComplMk G xnL) ∧ x_1 ∈ ↑D) → hom h (componentComplMk G xnL) = D"],"content":"refine C.ind fun x xnL => ?_"},{"tailPos":9036,"headPos":8999,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\nx : V\nxnL : ¬x ∈ L\n⊢ (∃ x_1, x_1 ∈ ↑(componentComplMk G xnL) ∧ x_1 ∈ ↑D) → hom h (componentComplMk G xnL) = D"],"goalsAfter":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G xnL) = componentComplMk G w✝"],"content":"rintro ⟨x, ⟨_, e₁⟩, _, rfl⟩"},{"tailPos":9053,"headPos":9045,"goalsBefore":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G xnL) = componentComplMk G w✝"],"goalsAfter":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G w✝¹) = componentComplMk G w✝"],"content":"← e₁"},{"tailPos":9054,"headPos":9053,"goalsBefore":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G w✝¹) = componentComplMk G w✝"],"goalsAfter":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G w✝¹) = componentComplMk G w✝"],"content":"]"},{"tailPos":9054,"headPos":9041,"goalsBefore":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G xnL) = componentComplMk G w✝"],"goalsAfter":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G w✝¹) = componentComplMk G w✝"],"content":"rw [← e₁]"},{"tailPos":9062,"headPos":9059,"goalsBefore":["case mpr.intro.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nx✝ : V\nxnL : ¬x✝ ∈ L\nx : V\nw✝¹ : ¬x ∈ L\ne₁ : componentComplMk G w✝¹ = componentComplMk G xnL\nw✝ : ¬x ∈ K\n⊢ hom h (componentComplMk G w✝¹) = componentComplMk G w✝"],"goalsAfter":[],"content":"rfl"},{"tailPos":9062,"headPos":8966,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"goalsAfter":[],"content":"refine C.ind fun x xnL => ?_\n    rintro ⟨x, ⟨_, e₁⟩, _, rfl⟩\n    rw [← e₁]\n    rfl"},{"tailPos":9062,"headPos":8963,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ (∃ x, x ∈ ↑C ∧ x ∈ ↑D) → hom h C = D"],"goalsAfter":[],"content":"· refine C.ind fun x xnL => ?_\n    rintro ⟨x, ⟨_, e₁⟩, _, rfl⟩\n    rw [← e₁]\n    rfl"},{"tailPos":9062,"headPos":8805,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ¬Disjoint ↑C ↑D"],"goalsAfter":[],"content":"rw [Set.not_disjoint_iff]\n  constructor\n  · rintro rfl\n    refine C.ind fun x xnL => ?_\n    exact ⟨x, ⟨xnL, rfl⟩, ⟨fun xK => xnL (h xK), rfl⟩⟩\n  · refine C.ind fun x xnL => ?_\n    rintro ⟨x, ⟨_, e₁⟩, _, rfl⟩\n    rw [← e₁]\n    rfl"},{"tailPos":8802,"headPos":8800,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ¬Disjoint ↑C ↑D"],"goalsAfter":[],"content":"by"},{"tailPos":9062,"headPos":8800,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nD : ComponentCompl G K\n⊢ hom h C = D ↔ ¬Disjoint ↑C ↑D"],"goalsAfter":[],"content":"by\n  rw [Set.not_disjoint_iff]\n  constructor\n  · rintro rfl\n    refine C.ind fun x xnL => ?_\n    exact ⟨x, ⟨xnL, rfl⟩, ⟨fun xK => xnL (h xK), rfl⟩⟩\n  · refine C.ind fun x xnL => ?_\n    rintro ⟨x, ⟨_, e₁⟩, _, rfl⟩\n    rw [← e₁]\n    rfl"},{"tailPos":9271,"headPos":9253,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ hom (_ : L ⊆ L) C = C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Lᶜ)) C = C"],"content":"change C.map _ = C"},{"tailPos":9301,"headPos":9279,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Lᶜ)) C = C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ ConnectedComponent.map Hom.id C = C"],"content":"induceHom_id G (Lᶜ),"},{"tailPos":9327,"headPos":9302,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ ConnectedComponent.map Hom.id C = C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ C = C"],"content":"ConnectedComponent.map_id"},{"tailPos":9328,"headPos":9327,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ C = C"],"goalsAfter":[],"content":"]"},{"tailPos":9328,"headPos":9274,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Lᶜ)) C = C"],"goalsAfter":[],"content":"erw [induceHom_id G (Lᶜ), ConnectedComponent.map_id]"},{"tailPos":9328,"headPos":9253,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ hom (_ : L ⊆ L) C = C"],"goalsAfter":[],"content":"change C.map _ = C\n  erw [induceHom_id G (Lᶜ), ConnectedComponent.map_id]"},{"tailPos":9250,"headPos":9248,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ hom (_ : L ⊆ L) C = C"],"goalsAfter":[],"content":"by"},{"tailPos":9328,"headPos":9248,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\n⊢ hom (_ : L ⊆ L) C = C"],"goalsAfter":[],"content":"by\n  change C.map _ = C\n  erw [induceHom_id G (Lᶜ), ConnectedComponent.map_id]"},{"tailPos":9567,"headPos":9535,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ hom (_ : M ⊆ L) C = hom h' (hom h C)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map (InduceHom Hom.id (_ : Kᶜ ⊆ Mᶜ)) (ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Kᶜ)) C)"],"content":"change C.map _ = (C.map _).map _"},{"tailPos":9603,"headPos":9575,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map (InduceHom Hom.id (_ : Kᶜ ⊆ Mᶜ)) (ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Kᶜ)) C)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map (Hom.comp (InduceHom Hom.id (_ : Kᶜ ⊆ Mᶜ)) (InduceHom Hom.id (_ : Lᶜ ⊆ Kᶜ))) C"],"content":"ConnectedComponent.map_comp,"},{"tailPos":9618,"headPos":9604,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map (Hom.comp (InduceHom Hom.id (_ : Kᶜ ⊆ Mᶜ)) (InduceHom Hom.id (_ : Lᶜ ⊆ Kᶜ))) C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map\n      (InduceHom (Hom.comp Hom.id Hom.id) (_ : Set.MapsTo (↑Hom.id ∘ fun x => ↑Hom.id x) (Lᶜ) (Mᶜ))) C"],"content":"induceHom_comp"},{"tailPos":9619,"headPos":9618,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map\n      (InduceHom (Hom.comp Hom.id Hom.id) (_ : Set.MapsTo (↑Hom.id ∘ fun x => ↑Hom.id x) (Lᶜ) (Mᶜ))) C"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map\n      (InduceHom (Hom.comp Hom.id Hom.id) (_ : Set.MapsTo (↑Hom.id ∘ fun x => ↑Hom.id x) (Lᶜ) (Mᶜ))) C"],"content":"]"},{"tailPos":9619,"headPos":9570,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map (InduceHom Hom.id (_ : Kᶜ ⊆ Mᶜ)) (ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Kᶜ)) C)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map\n      (InduceHom (Hom.comp Hom.id Hom.id) (_ : Set.MapsTo (↑Hom.id ∘ fun x => ↑Hom.id x) (Lᶜ) (Mᶜ))) C"],"content":"erw [ConnectedComponent.map_comp, induceHom_comp]"},{"tailPos":9625,"headPos":9622,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ ConnectedComponent.map (InduceHom Hom.id (_ : Lᶜ ⊆ Mᶜ)) C =\n    ConnectedComponent.map\n      (InduceHom (Hom.comp Hom.id Hom.id) (_ : Set.MapsTo (↑Hom.id ∘ fun x => ↑Hom.id x) (Lᶜ) (Mᶜ))) C"],"goalsAfter":[],"content":"rfl"},{"tailPos":9625,"headPos":9535,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ hom (_ : M ⊆ L) C = hom h' (hom h C)"],"goalsAfter":[],"content":"change C.map _ = (C.map _).map _\n  erw [ConnectedComponent.map_comp, induceHom_comp]\n  rfl"},{"tailPos":9532,"headPos":9530,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ hom (_ : M ⊆ L) C = hom h' (hom h C)"],"goalsAfter":[],"content":"by"},{"tailPos":9625,"headPos":9530,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK L L' M : Set V\nC : ComponentCompl G L\nh : K ⊆ L\nh' : M ⊆ K\n⊢ hom (_ : M ⊆ L) C = hom h' (hom h C)"],"goalsAfter":[],"content":"by\n  change C.map _ = (C.map _).map _\n  erw [ConnectedComponent.map_comp, induceHom_comp]\n  rfl"},{"tailPos":10390,"headPos":10379,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) ↔ ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) → ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C","case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"content":"constructor"},{"tailPos":10397,"headPos":10395,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) → ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C","case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) → ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"content":"·"},{"tailPos":10413,"headPos":10398,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) → ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nCinf : Set.Infinite (supp C)\nL : Finset V\nh : K ⊆ L\n⊢ ∃ D, hom h D = C"],"content":"rintro Cinf L h"},{"tailPos":10518,"headPos":10420,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nCinf : Set.Infinite (supp C)\nL : Finset V\nh : K ⊆ L\n⊢ ∃ D, hom h D = C"],"goalsAfter":["case mp.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\nK L : Finset V\nh : K ⊆ L\nv : V\nvL : ¬v ∈ ↑L\nvK : ¬v ∈ ↑K\nCinf : Set.Infinite (supp (componentComplMk G vK))\n⊢ ∃ D, hom h D = componentComplMk G vK"],"content":"obtain ⟨v, ⟨vK, rfl⟩, vL⟩ := Set.Infinite.nonempty (Set.Infinite.diff Cinf L.finite_toSet)"},{"tailPos":10563,"headPos":10525,"goalsBefore":["case mp.intro.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\nK L : Finset V\nh : K ⊆ L\nv : V\nvL : ¬v ∈ ↑L\nvK : ¬v ∈ ↑K\nCinf : Set.Infinite (supp (componentComplMk G vK))\n⊢ ∃ D, hom h D = componentComplMk G vK"],"goalsAfter":[],"content":"exact ⟨componentComplMk _ vL, rfl⟩"},{"tailPos":10563,"headPos":10398,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) → ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":[],"content":"rintro Cinf L h\n      obtain ⟨v, ⟨vK, rfl⟩, vL⟩ := Set.Infinite.nonempty (Set.Infinite.diff Cinf L.finite_toSet)\n      exact ⟨componentComplMk _ vL, rfl⟩"},{"tailPos":10563,"headPos":10395,"goalsBefore":["case mp\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) → ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C","case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"content":"· rintro Cinf L h\n      obtain ⟨v, ⟨vK, rfl⟩, vL⟩ := Set.Infinite.nonempty (Set.Infinite.diff Cinf L.finite_toSet)\n      exact ⟨componentComplMk _ vL, rfl⟩"},{"tailPos":10570,"headPos":10568,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"content":"·"},{"tailPos":10584,"headPos":10571,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"goalsAfter":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\n⊢ False"],"content":"rintro h Cfin"},{"tailPos":10678,"headPos":10591,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\n⊢ False"],"goalsAfter":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\n⊢ False"],"content":"obtain ⟨D, e⟩ := h (K ∪ Cfin.toFinset) (Finset.subset_union_left K Cfin.toFinset)"},{"tailPos":10717,"headPos":10685,"goalsBefore":["case mpr.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\n⊢ False"],"content":"obtain ⟨v, vD⟩ := D.nonempty"},{"tailPos":10752,"headPos":10724,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑(K ∪ Set.Finite.toFinset Cfin) ↑D := ComponentCompl.disjoint_right D\n⊢ False"],"content":"let Ddis := D.disjoint_right"},{"tailPos":10768,"headPos":10759,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑(K ∪ Set.Finite.toFinset Cfin) ↑D := ComponentCompl.disjoint_right D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑(K ∪ Set.Finite.toFinset Cfin) ↑D := ComponentCompl.disjoint_right D\n⊢ False"],"content":"simp_rw ["},{"tailPos":10785,"headPos":10768,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑(K ∪ Set.Finite.toFinset Cfin) ↑D := ComponentCompl.disjoint_right D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint (↑K ∪ ↑(Set.Finite.toFinset Cfin)) ↑D\n⊢ False"],"content":"Finset.coe_union,"},{"tailPos":10810,"headPos":10786,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint (↑K ∪ ↑(Set.Finite.toFinset Cfin)) ↑D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint (↑K ∪ supp C) ↑D\n⊢ False"],"content":"Set.Finite.coe_toFinset,"},{"tailPos":10835,"headPos":10811,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint (↑K ∪ supp C) ↑D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑K ↑D ∧ Disjoint (supp C) ↑D\n⊢ False"],"content":"Set.disjoint_union_left,"},{"tailPos":10860,"headPos":10844,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑K ↑D ∧ Disjoint (supp C) ↑D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : ↑K ∩ ↑D ⊆ ∅ ∧ supp C ∩ ↑D ⊆ ∅\n⊢ False"],"content":"simp only [Set.disjoint_iff] at Ddis "},{"tailPos":10869,"headPos":10759,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : Disjoint ↑(K ∪ Set.Finite.toFinset Cfin) ↑D := ComponentCompl.disjoint_right D\n⊢ False"],"goalsAfter":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : ↑K ∩ ↑D ⊆ ∅ ∧ supp C ∩ ↑D ⊆ ∅\n⊢ False"],"content":"simp_rw [Finset.coe_union, Set.Finite.coe_toFinset, Set.disjoint_union_left,\n        Set.disjoint_iff] at Ddis"},{"tailPos":10947,"headPos":10876,"goalsBefore":["case mpr.intro.intro\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\nh : ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C\nCfin : Set.Finite (supp C)\nD : ComponentCompl G ↑(K ∪ Set.Finite.toFinset Cfin)\ne : hom (_ : K ⊆ K ∪ Set.Finite.toFinset Cfin) D = C\nv : V\nvD : v ∈ ↑D\nDdis : ↑K ∩ ↑D ⊆ ∅ ∧ supp C ∩ ↑D ⊆ ∅\n⊢ False"],"goalsAfter":[],"content":"exact Ddis.right ⟨(ComponentCompl.hom_eq_iff_le _ _ _).mp e vD, vD⟩"},{"tailPos":10947,"headPos":10571,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"goalsAfter":[],"content":"rintro h Cfin\n      obtain ⟨D, e⟩ := h (K ∪ Cfin.toFinset) (Finset.subset_union_left K Cfin.toFinset)\n      obtain ⟨v, vD⟩ := D.nonempty\n      let Ddis := D.disjoint_right\n      simp_rw [Finset.coe_union, Set.Finite.coe_toFinset, Set.disjoint_union_left,\n        Set.disjoint_iff] at Ddis\n      exact Ddis.right ⟨(ComponentCompl.hom_eq_iff_le _ _ _).mp e vD, vD⟩"},{"tailPos":10947,"headPos":10568,"goalsBefore":["case mpr\nV : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ (∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C) → Set.Infinite (supp C)"],"goalsAfter":[],"content":"· rintro h Cfin\n      obtain ⟨D, e⟩ := h (K ∪ Cfin.toFinset) (Finset.subset_union_left K Cfin.toFinset)\n      obtain ⟨v, vD⟩ := D.nonempty\n      let Ddis := D.disjoint_right\n      simp_rw [Finset.coe_union, Set.Finite.coe_toFinset, Set.disjoint_union_left,\n        Set.disjoint_iff] at Ddis\n      exact Ddis.right ⟨(ComponentCompl.hom_eq_iff_le _ _ _).mp e vD, vD⟩"},{"tailPos":10947,"headPos":10379,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) ↔ ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":[],"content":"constructor\n    · rintro Cinf L h\n      obtain ⟨v, ⟨vK, rfl⟩, vL⟩ := Set.Infinite.nonempty (Set.Infinite.diff Cinf L.finite_toSet)\n      exact ⟨componentComplMk _ vL, rfl⟩\n    · rintro h Cfin\n      obtain ⟨D, e⟩ := h (K ∪ Cfin.toFinset) (Finset.subset_union_left K Cfin.toFinset)\n      obtain ⟨v, vD⟩ := D.nonempty\n      let Ddis := D.disjoint_right\n      simp_rw [Finset.coe_union, Set.Finite.coe_toFinset, Set.disjoint_union_left,\n        Set.disjoint_iff] at Ddis\n      exact Ddis.right ⟨(ComponentCompl.hom_eq_iff_le _ _ _).mp e vD, vD⟩"},{"tailPos":10947,"headPos":10365,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) ↔ ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":[],"content":"classical\n    constructor\n    · rintro Cinf L h\n      obtain ⟨v, ⟨vK, rfl⟩, vL⟩ := Set.Infinite.nonempty (Set.Infinite.diff Cinf L.finite_toSet)\n      exact ⟨componentComplMk _ vL, rfl⟩\n    · rintro h Cfin\n      obtain ⟨D, e⟩ := h (K ∪ Cfin.toFinset) (Finset.subset_union_left K Cfin.toFinset)\n      obtain ⟨v, vD⟩ := D.nonempty\n      let Ddis := D.disjoint_right\n      simp_rw [Finset.coe_union, Set.Finite.coe_toFinset, Set.disjoint_union_left,\n        Set.disjoint_iff] at Ddis\n      exact Ddis.right ⟨(ComponentCompl.hom_eq_iff_le _ _ _).mp e vD, vD⟩"},{"tailPos":10362,"headPos":10360,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) ↔ ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":[],"content":"by"},{"tailPos":10947,"headPos":10360,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : Finset V\nC : ComponentCompl G ↑K\n⊢ Set.Infinite (supp C) ↔ ∀ (L : Finset V) (h : K ⊆ L), ∃ D, hom h D = C"],"goalsAfter":[],"content":"by\n  classical\n    constructor\n    · rintro Cinf L h\n      obtain ⟨v, ⟨vK, rfl⟩, vL⟩ := Set.Infinite.nonempty (Set.Infinite.diff Cinf L.finite_toSet)\n      exact ⟨componentComplMk _ vL, rfl⟩\n    · rintro h Cfin\n      obtain ⟨D, e⟩ := h (K ∪ Cfin.toFinset) (Finset.subset_union_left K Cfin.toFinset)\n      obtain ⟨v, vD⟩ := D.nonempty\n      let Ddis := D.disjoint_right\n      simp_rw [Finset.coe_union, Set.Finite.coe_toFinset, Set.disjoint_union_left,\n        Set.disjoint_iff] at Ddis\n      exact Ddis.right ⟨(ComponentCompl.hom_eq_iff_le _ _ _).mp e vD, vD⟩"},{"tailPos":12054,"headPos":12044,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ s K = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (s L) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"content":"← sec h,"},{"tailPos":12057,"headPos":12055,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (s L) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (componentComplMk G vnL) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"content":"hs"},{"tailPos":12058,"headPos":12057,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (componentComplMk G vnL) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (componentComplMk G vnL) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"content":"]"},{"tailPos":12058,"headPos":12040,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ s K = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (componentComplMk G vnL) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"content":"rw [← sec h, hs]"},{"tailPos":12117,"headPos":12061,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ (componentComplFunctor G).map h (componentComplMk G vnL) = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":[],"content":"apply ComponentCompl.hom_mk _ (le_of_op_hom h : _ ⊆ _)"},{"tailPos":12117,"headPos":12040,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ s K = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":[],"content":"rw [← sec h, hs]\n  apply ComponentCompl.hom_mk _ (le_of_op_hom h : _ ⊆ _)"},{"tailPos":12037,"headPos":12035,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ s K = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":[],"content":"by"},{"tailPos":12117,"headPos":12035,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L✝ L' M : Set V\ns : (j : (Finset V)ᵒᵖ) → (componentComplFunctor G).obj j\nsec : s ∈ SimpleGraph.end G\nK L : (Finset V)ᵒᵖ\nh : L ⟶ K\nv : V\nvnL : ¬v ∈ L.unop\nhs : s L = componentComplMk G vnL\n⊢ s K = componentComplMk G (_ : ¬v ∈ fun a => a ∈ K.unop.val)"],"goalsAfter":[],"content":"by\n  rw [← sec h, hs]\n  apply ComponentCompl.hom_mk _ (le_of_op_hom h : _ ⊆ _)"},{"tailPos":12502,"headPos":12362,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : (Finset V)ᵒᵖ\nC : (componentComplFunctor G).obj K\n⊢ Set.Infinite (ComponentCompl.supp C) ↔ C ∈ Functor.eventualRange (componentComplFunctor G) K"],"goalsAfter":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : (Finset V)ᵒᵖ\nC : (componentComplFunctor G).obj K\n⊢ (∀ (L : Finset V) (h : K.unop ⊆ L), ∃ D, ComponentCompl.hom h D = C) ↔\n    ∀ (i : (Finset V)ᵒᵖ) (i_1 : i ⟶ K), ∃ y, ComponentCompl.hom (_ : K.unop ≤ i.unop) y = C"],"content":"simp only [C.infinite_iff_in_all_ranges, CategoryTheory.Functor.eventualRange, Set.mem_iInter,\n    Set.mem_range, componentComplFunctor_map]"},{"tailPos":12619,"headPos":12505,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : (Finset V)ᵒᵖ\nC : (componentComplFunctor G).obj K\n⊢ (∀ (L : Finset V) (h : K.unop ⊆ L), ∃ D, ComponentCompl.hom h D = C) ↔\n    ∀ (i : (Finset V)ᵒᵖ) (i_1 : i ⟶ K), ∃ y, ComponentCompl.hom (_ : K.unop ≤ i.unop) y = C"],"goalsAfter":[],"content":"exact\n    ⟨fun h Lop KL => h Lop.unop (le_of_op_hom KL), fun h L KL =>\n      h (Opposite.op L) (opHomOfLE KL)⟩"},{"tailPos":12619,"headPos":12362,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : (Finset V)ᵒᵖ\nC : (componentComplFunctor G).obj K\n⊢ Set.Infinite (ComponentCompl.supp C) ↔ C ∈ Functor.eventualRange (componentComplFunctor G) K"],"goalsAfter":[],"content":"simp only [C.infinite_iff_in_all_ranges, CategoryTheory.Functor.eventualRange, Set.mem_iInter,\n    Set.mem_range, componentComplFunctor_map]\n  exact\n    ⟨fun h Lop KL => h Lop.unop (le_of_op_hom KL), fun h L KL =>\n      h (Opposite.op L) (opHomOfLE KL)⟩"},{"tailPos":12359,"headPos":12357,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : (Finset V)ᵒᵖ\nC : (componentComplFunctor G).obj K\n⊢ Set.Infinite (ComponentCompl.supp C) ↔ C ∈ Functor.eventualRange (componentComplFunctor G) K"],"goalsAfter":[],"content":"by"},{"tailPos":12619,"headPos":12357,"goalsBefore":["V : Type u\nG : SimpleGraph V\nK✝ L L' M : Set V\nK : (Finset V)ᵒᵖ\nC : (componentComplFunctor G).obj K\n⊢ Set.Infinite (ComponentCompl.supp C) ↔ C ∈ Functor.eventualRange (componentComplFunctor G) K"],"goalsAfter":[],"content":"by\n  simp only [C.infinite_iff_in_all_ranges, CategoryTheory.Functor.eventualRange, Set.mem_iInter,\n    Set.mem_range, componentComplFunctor_map]\n  exact\n    ⟨fun h Lop KL => h Lop.unop (le_of_op_hom KL), fun h L KL =>\n      h (Opposite.op L) (opHomOfLE KL)⟩"}]
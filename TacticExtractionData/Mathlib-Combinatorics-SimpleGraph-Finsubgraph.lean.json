[{"tailPos":3042,"headPos":3038,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nv : V\n⊢ Set.Finite (SimpleGraph.singletonSubgraph G v).verts"],"goalsAfter":[],"content":"simp only [singletonSubgraph_verts, finite_singleton]"},{"tailPos":3037,"headPos":3035,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nv : V\n⊢ Set.Finite (SimpleGraph.singletonSubgraph G v).verts"],"goalsAfter":[],"content":"by"},{"tailPos":3042,"headPos":3035,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nv : V\n⊢ Set.Finite (SimpleGraph.singletonSubgraph G v).verts"],"goalsAfter":[],"content":"by simp"},{"tailPos":3291,"headPos":3287,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ Set.Finite (subgraphOfAdj G e).verts"],"goalsAfter":[],"content":"simp only [subgraphOfAdj_verts, mem_singleton_iff, finite_singleton, Finite.insert]"},{"tailPos":3286,"headPos":3284,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ Set.Finite (subgraphOfAdj G e).verts"],"goalsAfter":[],"content":"by"},{"tailPos":3291,"headPos":3284,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ Set.Finite (subgraphOfAdj G e).verts"],"goalsAfter":[],"content":"by simp"},{"tailPos":3618,"headPos":3573,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ singletonFinsubgraph u ≤ finsubgraphOfAdj e"],"goalsAfter":[],"content":"simp [singletonFinsubgraph, finsubgraphOfAdj]"},{"tailPos":3570,"headPos":3568,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ singletonFinsubgraph u ≤ finsubgraphOfAdj e"],"goalsAfter":[],"content":"by"},{"tailPos":3618,"headPos":3568,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ singletonFinsubgraph u ≤ finsubgraphOfAdj e"],"goalsAfter":[],"content":"by\n  simp [singletonFinsubgraph, finsubgraphOfAdj]"},{"tailPos":3892,"headPos":3847,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ singletonFinsubgraph v ≤ finsubgraphOfAdj e"],"goalsAfter":[],"content":"simp [singletonFinsubgraph, finsubgraphOfAdj]"},{"tailPos":3844,"headPos":3842,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ singletonFinsubgraph v ≤ finsubgraphOfAdj e"],"goalsAfter":[],"content":"by"},{"tailPos":3892,"headPos":3842,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nu v : V\ne : Adj G u v\n⊢ singletonFinsubgraph v ≤ finsubgraphOfAdj e"],"goalsAfter":[],"content":"by\n  simp [singletonFinsubgraph, finsubgraphOfAdj]"},{"tailPos":4260,"headPos":4201,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\n⊢ G'' →fg F"],"goalsAfter":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\n⊢ ∀ {a b : ↑(↑G'').verts},\n    Adj (Subgraph.coe ↑G'') a b →\n      Adj F\n        ((fun x =>\n            match x with\n            | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n          a)\n        ((fun x =>\n            match x with\n            | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n          b)"],"content":"refine' ⟨fun ⟨v, hv⟩ => f.toFun ⟨v, h.1 hv⟩, _⟩"},{"tailPos":4297,"headPos":4263,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\n⊢ ∀ {a b : ↑(↑G'').verts},\n    Adj (Subgraph.coe ↑G'') a b →\n      Adj F\n        ((fun x =>\n            match x with\n            | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n          a)\n        ((fun x =>\n            match x with\n            | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n          b)"],"goalsAfter":["case mk.mk\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\nu : V\nhu : u ∈ (↑G'').verts\nv : V\nhv : v ∈ (↑G'').verts\nhuv : Adj (Subgraph.coe ↑G'') { val := u, property := hu } { val := v, property := hv }\n⊢ Adj F\n    ((fun x =>\n        match x with\n        | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n      { val := u, property := hu })\n    ((fun x =>\n        match x with\n        | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n      { val := v, property := hv })"],"content":"rintro ⟨u, hu⟩ ⟨v, hv⟩ huv"},{"tailPos":4326,"headPos":4300,"goalsBefore":["case mk.mk\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\nu : V\nhu : u ∈ (↑G'').verts\nv : V\nhv : v ∈ (↑G'').verts\nhuv : Adj (Subgraph.coe ↑G'') { val := u, property := hu } { val := v, property := hv }\n⊢ Adj F\n    ((fun x =>\n        match x with\n        | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n      { val := u, property := hu })\n    ((fun x =>\n        match x with\n        | { val := v, property := hv } => RelHom.toFun f { val := v, property := (_ : v ∈ (↑G').verts) })\n      { val := v, property := hv })"],"goalsAfter":[],"content":"exact f.map_rel' (h.2 huv)"},{"tailPos":4326,"headPos":4201,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\n⊢ G'' →fg F"],"goalsAfter":[],"content":"refine' ⟨fun ⟨v, hv⟩ => f.toFun ⟨v, h.1 hv⟩, _⟩\n  rintro ⟨u, hu⟩ ⟨v, hv⟩ huv\n  exact f.map_rel' (h.2 huv)"},{"tailPos":4198,"headPos":4196,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\n⊢ G'' →fg F"],"goalsAfter":[],"content":"by"},{"tailPos":4326,"headPos":4196,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\nG' G'' : Finsubgraph G\nh : G'' ≤ G'\nf : G' →fg F\n⊢ G'' →fg F"],"goalsAfter":[],"content":"by\n  refine' ⟨fun ⟨v, hv⟩ => f.toFun ⟨v, h.1 hv⟩, _⟩\n  rintro ⟨u, hu⟩ ⟨v, hv⟩ huv\n  exact f.map_rel' (h.2 huv)"},{"tailPos":5109,"headPos":5085,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\n⊢ Nonempty (G →g F)"],"goalsAfter":["case intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\n⊢ Nonempty (G →g F)"],"content":"cases nonempty_fintype W"},{"tailPos":5294,"headPos":5161,"goalsBefore":["case intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\n⊢ Nonempty (G →g F)"],"goalsAfter":["case intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\n⊢ Nonempty (G →g F)"],"content":"haveI : ∀ G' : G.Finsubgraphᵒᵖ, Nonempty ((finsubgraphHomFunctor G F).obj G') := fun G' =>\n    ⟨h G'.unop G'.unop.property⟩"},{"tailPos":5398,"headPos":5390,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\n⊢ (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\n⊢ Fintype ((finsubgraphHomFunctor G F).obj G')"],"content":"intro G'"},{"tailPos":5475,"headPos":5403,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\n⊢ Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis : Fintype ↑(↑G'.unop).verts\n⊢ Fintype ((finsubgraphHomFunctor G F).obj G')"],"content":"haveI : Fintype (G'.unop.val.verts : Type u) := G'.unop.property.fintype"},{"tailPos":5557,"headPos":5541,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis : Fintype ↑(↑G'.unop).verts\n⊢ Fintype (↑(↑G'.unop).verts → W)"],"goalsAfter":[],"content":"exact Pi.fintype"},{"tailPos":5557,"headPos":5531,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis : Fintype ↑(↑G'.unop).verts\n⊢ Fintype (↑(↑G'.unop).verts → W)"],"goalsAfter":[],"content":"classical exact Pi.fintype"},{"tailPos":5530,"headPos":5528,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis : Fintype ↑(↑G'.unop).verts\n⊢ Fintype (↑(↑G'.unop).verts → W)"],"goalsAfter":[],"content":"by"},{"tailPos":5557,"headPos":5528,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis : Fintype ↑(↑G'.unop).verts\n⊢ Fintype (↑(↑G'.unop).verts → W)"],"goalsAfter":[],"content":"by classical exact Pi.fintype"},{"tailPos":5557,"headPos":5480,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis : Fintype ↑(↑G'.unop).verts\n⊢ Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝¹ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis✝ : Fintype ↑(↑G'.unop).verts\nthis : Fintype (↑(↑G'.unop).verts → W)\n⊢ Fintype ((finsubgraphHomFunctor G F).obj G')"],"content":"haveI : Fintype (↥G'.unop.val.verts → W) := by classical exact Pi.fintype"},{"tailPos":5630,"headPos":5562,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝¹ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nG' : (Finsubgraph G)ᵒᵖ\nthis✝ : Fintype ↑(↑G'.unop).verts\nthis : Fintype (↑(↑G'.unop).verts → W)\n⊢ Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":[],"content":"exact Fintype.ofInjective (fun f => f.toFun) RelHom.coe_fn_injective"},{"tailPos":5630,"headPos":5390,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\n⊢ (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":[],"content":"intro G'\n    haveI : Fintype (G'.unop.val.verts : Type u) := G'.unop.property.fintype\n    haveI : Fintype (↥G'.unop.val.verts → W) := by classical exact Pi.fintype\n    exact Fintype.ofInjective (fun f => f.toFun) RelHom.coe_fn_injective"},{"tailPos":5385,"headPos":5383,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\n⊢ (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":[],"content":"by"},{"tailPos":5630,"headPos":5383,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\n⊢ (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')"],"goalsAfter":[],"content":"by\n    intro G'\n    haveI : Fintype (G'.unop.val.verts : Type u) := G'.unop.property.fintype\n    haveI : Fintype (↥G'.unop.val.verts → W) := by classical exact Pi.fintype\n    exact Fintype.ofInjective (fun f => f.toFun) RelHom.coe_fn_injective"},{"tailPos":5630,"headPos":5297,"goalsBefore":["case intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\n⊢ Nonempty (G →g F)"],"goalsAfter":["case intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\n⊢ Nonempty (G →g F)"],"content":"haveI : ∀ G' : G.Finsubgraphᵒᵖ, Fintype ((finsubgraphHomFunctor G F).obj G') := by\n    intro G'\n    haveI : Fintype (G'.unop.val.verts : Type u) := G'.unop.property.fintype\n    haveI : Fintype (↥G'.unop.val.verts → W) := by classical exact Pi.fintype\n    exact Fintype.ofInjective (fun f => f.toFun) RelHom.coe_fn_injective"},{"tailPos":5767,"headPos":5675,"goalsBefore":["case intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\n⊢ Nonempty (G →g F)"],"goalsAfter":["case intro.intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ Nonempty (G →g F)"],"content":"obtain ⟨u, hu⟩ := nonempty_sections_of_finite_inverse_system (finsubgraphHomFunctor G F)"},{"tailPos":5803,"headPos":5770,"goalsBefore":["case intro.intro\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ Nonempty (G →g F)"],"goalsAfter":["case intro.intro.refine'_1\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ W","case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V}, Adj G a b → Adj F ((fun v => ?m.26323 v) a) ((fun v => ?m.26323 v) b)"],"content":"refine' ⟨⟨fun v => _, _⟩⟩"},{"tailPos":5808,"headPos":5806,"goalsBefore":["case intro.intro.refine'_1\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ W","case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V}, Adj G a b → Adj F ((fun v => ?m.26323 v) a) ((fun v => ?m.26323 v) b)"],"goalsAfter":["case intro.intro.refine'_1\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ W"],"content":"·"},{"tailPos":6007,"headPos":5980,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ v ∈ (↑(singletonFinsubgraph v).op.unop).verts"],"goalsAfter":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ v ∈ (↑{ val := SimpleGraph.singletonSubgraph G v, property := (_ : Set.Finite {v}) }.op.unop).verts"],"content":"unfold singletonFinsubgraph"},{"tailPos":6022,"headPos":6018,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ v ∈ (↑{ val := SimpleGraph.singletonSubgraph G v, property := (_ : Set.Finite {v}) }.op.unop).verts"],"goalsAfter":[],"content":"simp only [Opposite.unop_op, singletonSubgraph_verts, mem_singleton_iff]"},{"tailPos":6022,"headPos":5980,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ v ∈ (↑(singletonFinsubgraph v).op.unop).verts"],"goalsAfter":[],"content":"unfold singletonFinsubgraph\n          simp"},{"tailPos":5969,"headPos":5967,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ v ∈ (↑(singletonFinsubgraph v).op.unop).verts"],"goalsAfter":[],"content":"by"},{"tailPos":6022,"headPos":5967,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ v ∈ (↑(singletonFinsubgraph v).op.unop).verts"],"goalsAfter":[],"content":"by\n          unfold singletonFinsubgraph\n          simp"},{"tailPos":6025,"headPos":5892,"goalsBefore":["case intro.intro.refine'_1\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ W"],"goalsAfter":[],"content":"exact\n      (u (Opposite.op (singletonFinsubgraph v))).toFun\n        ⟨v, by\n          unfold singletonFinsubgraph\n          simp⟩"},{"tailPos":6025,"headPos":5806,"goalsBefore":["case intro.intro.refine'_1\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv : V\n⊢ W","case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V}, Adj G a b → Adj F ((fun v => ?m.26323 v) a) ((fun v => ?m.26323 v) b)"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V},\n    Adj G a b →\n      Adj F\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          a)\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          b)"],"content":"· -- Map each vertex using the homomorphism provided for its singleton subgraph.\n    exact\n      (u (Opposite.op (singletonFinsubgraph v))).toFun\n        ⟨v, by\n          unfold singletonFinsubgraph\n          simp⟩"},{"tailPos":6030,"headPos":6028,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V},\n    Adj G a b →\n      Adj F\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          a)\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          b)"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V},\n    Adj G a b →\n      Adj F\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          a)\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          b)"],"content":"·"},{"tailPos":6100,"headPos":6088,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V},\n    Adj G a b →\n      Adj F\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          a)\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          b)"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\n⊢ Adj F\n    ((fun v =>\n        RelHom.toFun (u (singletonFinsubgraph v).op)\n          { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n      v)\n    ((fun v =>\n        RelHom.toFun (u (singletonFinsubgraph v).op)\n          { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n      v')"],"content":"intro v v' e"},{"tailPos":6114,"headPos":6105,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\n⊢ Adj F\n    ((fun v =>\n        RelHom.toFun (u (singletonFinsubgraph v).op)\n          { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n      v)\n    ((fun v =>\n        RelHom.toFun (u (singletonFinsubgraph v).op)\n          { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n      v')"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"simp only"},{"tailPos":6407,"headPos":6243,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"have hv : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_left)"},{"tailPos":6579,"headPos":6412,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"have hv' : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v') :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_right)"},{"tailPos":6598,"headPos":6588,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"← hu hv,"},{"tailPos":6609,"headPos":6599,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv' (u (finsubgraphOfAdj e).op))\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"← hu hv'"},{"tailPos":6610,"headPos":6609,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv' (u (finsubgraphOfAdj e).op))\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv' (u (finsubgraphOfAdj e).op))\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"]"},{"tailPos":6610,"headPos":6584,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun (u (singletonFinsubgraph v).op)\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun (u (singletonFinsubgraph v').op)\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv' (u (finsubgraphOfAdj e).op))\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"content":"rw [← hu hv, ← hu hv']"},{"tailPos":6720,"headPos":6660,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj F\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv (u (finsubgraphOfAdj e).op))\n      { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n    (RelHom.toFun ((finsubgraphHomFunctor G F).map hv' (u (finsubgraphOfAdj e).op))\n      { val := v', property := (_ : v' ∈ (↑(singletonFinsubgraph v').op.unop).verts) })"],"goalsAfter":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj (Subgraph.coe ↑(finsubgraphOfAdj e).op.unop)\n    { val := v, property := (_ : v ∈ (↑(finsubgraphOfAdj e).op.unop).verts) }\n    { val := v', property := (_ : v' ∈ (↑(finsubgraphOfAdj e).op.unop).verts) }"],"content":"refine' Hom.map_adj (u (Opposite.op (finsubgraphOfAdj e))) _"},{"tailPos":6820,"headPos":6797,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\nv v' : V\ne : Adj G v v'\nhv : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v).op\nhv' : (finsubgraphOfAdj e).op ⟶ (singletonFinsubgraph v').op\n⊢ Adj (Subgraph.coe ↑(finsubgraphOfAdj e).op.unop)\n    { val := v, property := (_ : v ∈ (↑(finsubgraphOfAdj e).op.unop).verts) }\n    { val := v', property := (_ : v' ∈ (↑(finsubgraphOfAdj e).op.unop).verts) }"],"goalsAfter":[],"content":"simp [finsubgraphOfAdj]"},{"tailPos":6820,"headPos":6088,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V},\n    Adj G a b →\n      Adj F\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          a)\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          b)"],"goalsAfter":[],"content":"intro v v' e\n    simp only\n    /- The homomorphism for each edge's singleton subgraph agrees with those for its source and\n        target vertices. -/\n    have hv : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_left)\n    have hv' : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v') :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_right)\n    rw [← hu hv, ← hu hv']\n    -- porting note: was `apply Hom.map_adj`\n    refine' Hom.map_adj (u (Opposite.op (finsubgraphOfAdj e))) _\n    -- `v` and `v'` are definitionally adjacent in `finsubgraphOfAdj e`\n    simp [finsubgraphOfAdj]"},{"tailPos":6820,"headPos":6028,"goalsBefore":["case intro.intro.refine'_2\nV : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\nval✝ : Fintype W\nthis✝ : ∀ (G' : (Finsubgraph G)ᵒᵖ), Nonempty ((finsubgraphHomFunctor G F).obj G')\nthis : (G' : (Finsubgraph G)ᵒᵖ) → Fintype ((finsubgraphHomFunctor G F).obj G')\nu : (j : (Finsubgraph G)ᵒᵖ) → (finsubgraphHomFunctor G F).obj j\nhu : u ∈ CategoryTheory.Functor.sections (finsubgraphHomFunctor G F)\n⊢ ∀ {a b : V},\n    Adj G a b →\n      Adj F\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          a)\n        ((fun v =>\n            RelHom.toFun (u (singletonFinsubgraph v).op)\n              { val := v, property := (_ : v ∈ (↑(singletonFinsubgraph v).op.unop).verts) })\n          b)"],"goalsAfter":[],"content":"· -- Prove that the above mapping preserves adjacency.\n    intro v v' e\n    simp only\n    /- The homomorphism for each edge's singleton subgraph agrees with those for its source and\n        target vertices. -/\n    have hv : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_left)\n    have hv' : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v') :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_right)\n    rw [← hu hv, ← hu hv']\n    -- porting note: was `apply Hom.map_adj`\n    refine' Hom.map_adj (u (Opposite.op (finsubgraphOfAdj e))) _\n    -- `v` and `v'` are definitionally adjacent in `finsubgraphOfAdj e`\n    simp [finsubgraphOfAdj]"},{"tailPos":6820,"headPos":5085,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\n⊢ Nonempty (G →g F)"],"goalsAfter":[],"content":"cases nonempty_fintype W\n  -- Establish the required interface instances.\n  haveI : ∀ G' : G.Finsubgraphᵒᵖ, Nonempty ((finsubgraphHomFunctor G F).obj G') := fun G' =>\n    ⟨h G'.unop G'.unop.property⟩\n  haveI : ∀ G' : G.Finsubgraphᵒᵖ, Fintype ((finsubgraphHomFunctor G F).obj G') := by\n    intro G'\n    haveI : Fintype (G'.unop.val.verts : Type u) := G'.unop.property.fintype\n    haveI : Fintype (↥G'.unop.val.verts → W) := by classical exact Pi.fintype\n    exact Fintype.ofInjective (fun f => f.toFun) RelHom.coe_fn_injective\n  -- Use compactness to obtain a section.\n  obtain ⟨u, hu⟩ := nonempty_sections_of_finite_inverse_system (finsubgraphHomFunctor G F)\n  refine' ⟨⟨fun v => _, _⟩⟩\n  · -- Map each vertex using the homomorphism provided for its singleton subgraph.\n    exact\n      (u (Opposite.op (singletonFinsubgraph v))).toFun\n        ⟨v, by\n          unfold singletonFinsubgraph\n          simp⟩\n  · -- Prove that the above mapping preserves adjacency.\n    intro v v' e\n    simp only\n    /- The homomorphism for each edge's singleton subgraph agrees with those for its source and\n        target vertices. -/\n    have hv : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_left)\n    have hv' : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v') :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_right)\n    rw [← hu hv, ← hu hv']\n    -- porting note: was `apply Hom.map_adj`\n    refine' Hom.map_adj (u (Opposite.op (finsubgraphOfAdj e))) _\n    -- `v` and `v'` are definitionally adjacent in `finsubgraphOfAdj e`\n    simp [finsubgraphOfAdj]"},{"tailPos":5040,"headPos":5038,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\n⊢ Nonempty (G →g F)"],"goalsAfter":[],"content":"by"},{"tailPos":6820,"headPos":5038,"goalsBefore":["V : Type u\nW : Type v\nG : SimpleGraph V\nF : SimpleGraph W\ninst✝ : Finite W\nh : (G' : Subgraph G) → Set.Finite G'.verts → Subgraph.coe G' →g F\n⊢ Nonempty (G →g F)"],"goalsAfter":[],"content":"by\n  -- Obtain a `Fintype` instance for `W`.\n  cases nonempty_fintype W\n  -- Establish the required interface instances.\n  haveI : ∀ G' : G.Finsubgraphᵒᵖ, Nonempty ((finsubgraphHomFunctor G F).obj G') := fun G' =>\n    ⟨h G'.unop G'.unop.property⟩\n  haveI : ∀ G' : G.Finsubgraphᵒᵖ, Fintype ((finsubgraphHomFunctor G F).obj G') := by\n    intro G'\n    haveI : Fintype (G'.unop.val.verts : Type u) := G'.unop.property.fintype\n    haveI : Fintype (↥G'.unop.val.verts → W) := by classical exact Pi.fintype\n    exact Fintype.ofInjective (fun f => f.toFun) RelHom.coe_fn_injective\n  -- Use compactness to obtain a section.\n  obtain ⟨u, hu⟩ := nonempty_sections_of_finite_inverse_system (finsubgraphHomFunctor G F)\n  refine' ⟨⟨fun v => _, _⟩⟩\n  · -- Map each vertex using the homomorphism provided for its singleton subgraph.\n    exact\n      (u (Opposite.op (singletonFinsubgraph v))).toFun\n        ⟨v, by\n          unfold singletonFinsubgraph\n          simp⟩\n  · -- Prove that the above mapping preserves adjacency.\n    intro v v' e\n    simp only\n    /- The homomorphism for each edge's singleton subgraph agrees with those for its source and\n        target vertices. -/\n    have hv : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v) :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_left)\n    have hv' : Opposite.op (finsubgraphOfAdj e) ⟶ Opposite.op (singletonFinsubgraph v') :=\n      Quiver.Hom.op (CategoryTheory.homOfLE singletonFinsubgraph_le_adj_right)\n    rw [← hu hv, ← hu hv']\n    -- porting note: was `apply Hom.map_adj`\n    refine' Hom.map_adj (u (Opposite.op (finsubgraphOfAdj e))) _\n    -- `v` and `v'` are definitionally adjacent in `finsubgraphOfAdj e`\n    simp [finsubgraphOfAdj]"}]